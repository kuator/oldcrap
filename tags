!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/0de02b65/
"	.config/nvim/configs/keymap.vim	/^inoremap " ""<left>$/;"	m
#content	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^#content {$/;"	i
#tty	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^#tty {$/;"	i
$NODE_ENV	.vim/plugged/coc.nvim/src/__tests__/vimrc	/^let $NODE_ENV='test'$/;"	v
$ref	.config/nvim/plugged/coc.nvim/data/schema.json	/^              "$ref": "#\/definitions\/languageServerCommand"$/;"	s	object:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf.1
$ref	.config/nvim/plugged/coc.nvim/data/schema.json	/^              "$ref": "#\/definitions\/languageServerModule"$/;"	s	object:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf.0
$ref	.config/nvim/plugged/coc.nvim/data/schema.json	/^              "$ref": "#\/definitions\/languageServerSocket"$/;"	s	object:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf.2
$ref	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	s	object:definitions.languageServerCommand.allOf.0
$ref	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	s	object:definitions.languageServerModule.allOf.0
$ref	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	s	object:definitions.languageServerSocket.allOf.0
$ref	.vim/plugged/coc.nvim/data/schema.json	/^              "$ref": "#\/definitions\/languageServerCommand"$/;"	s	object:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf.1
$ref	.vim/plugged/coc.nvim/data/schema.json	/^              "$ref": "#\/definitions\/languageServerModule"$/;"	s	object:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf.0
$ref	.vim/plugged/coc.nvim/data/schema.json	/^              "$ref": "#\/definitions\/languageServerSocket"$/;"	s	object:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf.2
$ref	.vim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	s	object:definitions.languageServerCommand.allOf.0
$ref	.vim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	s	object:definitions.languageServerModule.allOf.0
$ref	.vim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	s	object:definitions.languageServerSocket.allOf.0
$removeConfigurationOption	.vim/plugged/coc.nvim/src/configuration/shape.ts	/^  public $removeConfigurationOption(target: ConfigurationTarget, key: string): void {$/;"	m	class:ConfigurationProxy
$removeConfigurationOption	.vim/plugged/coc.nvim/src/types.ts	/^  $removeConfigurationOption(target: ConfigurationTarget, key: string): void$/;"	m	interface:ConfigurationShape
$schema	.config/nvim/plugged/coc.nvim/data/schema.json	/^  "$schema": "http:\/\/json-schema.org\/draft-06\/schema",$/;"	s
$schema	.vim/plugged/coc.nvim/data/schema.json	/^  "$schema": "http:\/\/json-schema.org\/draft-06\/schema",$/;"	s
$updateConfigurationOption	.vim/plugged/coc.nvim/src/configuration/shape.ts	/^  public $updateConfigurationOption(target: ConfigurationTarget, key: string, value: any): void /;"	m	class:ConfigurationProxy
$updateConfigurationOption	.vim/plugged/coc.nvim/src/types.ts	/^  $updateConfigurationOption(target: ConfigurationTarget, key: string, value: any): void$/;"	m	interface:ConfigurationShape
'	.config/nvim/configs/keymap.vim	/^nnoremap ' `$/;"	m
'	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> '    denite#do_map('quick_move')$/;"	m
(	.config/nvim/configs/keymap.vim	/^inoremap ( ()<left>$/;"	m
(optional) Install ALE	.vim/plugged/omnisharp-vim/README.md	/^### (optional) Install ALE$/;"	S
(optional) Install ctrlp.vim, unite.vim or fzf.vim	.vim/plugged/omnisharp-vim/README.md	/^### (optional) Install ctrlp.vim, unite.vim or fzf.vim$/;"	S
(optional) Install syntastic	.vim/plugged/omnisharp-vim/README.md	/^### (optional) Install syntastic$/;"	S
(overrides)	.config/nvim/plugged/switch.vim/spec/plugin/eruby_spec.rb	/^  describe "(overrides)" do$/;"	d
(overrides)	.config/nvim/plugged/switch.vim/spec/plugin/ruby_spec.rb	/^  describe "(overrides)" do$/;"	d
*	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> *$/;"	m
*Backward incompatible changes*	.vim/plugged/fzf/CHANGELOG.md	/^### *Backward incompatible changes*$/;"	S
,	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map , <Plug>(easymotion-prev)$/;"	m
-	.config/nvim/configs/keymap.vim	/^nnoremap - \$$/;"	m
-	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> -    denite#do_map('do_action', 'split')$/;"	m
.	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> .$/;"	m
.	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^    nmap . <Plug>(RepeatDot)$/;"	m
.align-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.align-3 {$/;"	c
.animations-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.animations-1 {$/;"	c
.backgrounds-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.backgrounds-3 {$/;"	c
.backgrounds-4	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.backgrounds-4 {$/;"	c
.blocked-content	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^.blocked-content {$/;"	c
.box-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.box-3 {$/;"	c
.break-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.break-3 {$/;"	c
.break-4	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.break-4 {$/;"	c
.cascade-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.cascade-3 {$/;"	c
.cascade-4	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.cascade-4 {$/;"	c
.color	.config/nvim/plugged/oceanic-next/test/test.css	/^.color{$/;"	c
.color-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.color-3 {$/;"	c
.color-4	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.color-4 {$/;"	c
.color-adjust-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.color-adjust-1 {$/;"	c
.compositing-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.compositing-1 {$/;"	c
.conditional-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^  .conditional-3 {$/;"	c
.contain-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.contain-1 {$/;"	c
.content-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.content-3 {$/;"	c
.cssom-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.cssom-1 {$/;"	c
.cssom-view-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.cssom-view-1 {$/;"	c
.device-adapt-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.device-adapt-1 {$/;"	c
.display-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.display-3 {$/;"	c
.easing-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.easing-1 {$/;"	c
.exclusions-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.exclusions-3 {$/;"	c
.fill-stroke-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.fill-stroke-3 {$/;"	c
.filter-effects-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.filter-effects-1 {$/;"	c
.flexbox-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.flexbox-1 {$/;"	c
.font-loading-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.font-loading-3 {$/;"	c
.fonts-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.fonts-3 {$/;"	c
.fonts-4	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.fonts-4 {$/;"	c
.gcpm-3::footnote-call	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.gcpm-3::footnote-call,$/;"	c
.gcpm-3::footnote-marker	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.gcpm-3::footnote-marker {$/;"	c
.geometry-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.geometry-1 {$/;"	c
.grid-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.grid-1 {$/;"	c
.grid-2	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.grid-2 {$/;"	c
.gsub!(/\\s*?[|]{0,2}=\\s*?/,	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^                ln.gsub!(\/\\s*?[|]{0,2}=\\s*?\/, '||=')$/;"	m
.html5	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.html5,$/;"	c
.images-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.images-3 {$/;"	c
.images-4	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.images-4 {$/;"	c
.inline-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.inline-3 {$/;"	c
.layout-api-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.layout-api-1 {$/;"	c
.line-grid-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.line-grid-1 {$/;"	c
.lists-3::marker	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.lists-3::marker {$/;"	c
.logical-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.logical-1 {$/;"	c
.maintitle	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^.maintitle {$/;"	c
.masking-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.masking-1,$/;"	c
.motion-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.motion-1 {$/;"	c
.multicol-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.multicol-1 {$/;"	c
.namespace-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.namespace-3 {$/;"	c
.nav-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.nav-1 {$/;"	c
.overflow-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.overflow-3 {$/;"	c
.overflow-4::nth-fragment(1)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.overflow-4::nth-fragment(1) {$/;"	c
.overscroll-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.overscroll-1 {$/;"	c
.page-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.page-3 {$/;"	c
.page-floats-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.page-floats-3 {$/;"	c
.paint-api-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.paint-api-1 {$/;"	c
.pointerevents	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.pointerevents {$/;"	c
.position-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.position-3 {$/;"	c
.properties-values-api-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.properties-values-api-1 {$/;"	c
.pseudo-4::grammer-error	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.pseudo-4::grammer-error {$/;"	c
.pseudo-4::inactive-selection	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.pseudo-4::inactive-selection,$/;"	c
.pseudo-4::spelling-error	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.pseudo-4::spelling-error,$/;"	c
.regions-1:region	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.regions-1:region {$/;"	c
.rhythm-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.rhythm-1 {$/;"	c
.round-display-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^  .round-display-1 {$/;"	c
.ruby-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.ruby-1 {$/;"	c
.scoping-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.scoping-1 \/deep\/ span {$/;"	c
.scoping-1::content	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.scoping-1::content,$/;"	c
.scoping-1::shadow	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.scoping-1::shadow,$/;"	c
.scoping-1:host	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.scoping-1:host,$/;"	c
.scoping-1:host(.foo)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.scoping-1:host(.foo),$/;"	c
.scoping-1:host-context	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.scoping-1:host-context,$/;"	c
.scoping-1:scope-context div	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.scoping-1:scope-context div,$/;"	s
.scroll-snap-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.scroll-snap-1 {$/;"	c
.selectors-3:enabled	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-3:enabled,$/;"	c
.selectors-3:indeterminate	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-3:indeterminate,$/;"	c
.selectors-3:not([DISABLED] )	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-3:not([DISABLED]) {$/;"	s
.selectors-3:nth-child(2n+1)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-3:nth-child(2n+1),$/;"	c
.selectors-3:nth-last-child(-n+2)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-3:nth-last-child(-n+2),$/;"	c
.selectors-3:nth-last-of-type(n+2)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-3:nth-last-of-type(n+2),$/;"	c
.selectors-3:nth-of-type(2n+1)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-3:nth-of-type(2n+1),$/;"	c
.selectors-4 | h1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4 | h1,$/;"	s
.selectors-4:any-link	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:any-link,$/;"	c
.selectors-4:blank	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:blank,$/;"	c
.selectors-4:current	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:current,$/;"	c
.selectors-4:current(p	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:current(p, li, dt, dd),$/;"	c
.selectors-4:default	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:default,$/;"	c
.selectors-4:dir(ltr)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:dir(ltr),$/;"	c
.selectors-4:focus-visible	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:focus-visible,$/;"	c
.selectors-4:focus-within	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:focus-within,$/;"	c
.selectors-4:future	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:future,$/;"	c
.selectors-4:has(> img)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:has(> img),$/;"	s
.selectors-4:in-range	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:in-range,$/;"	c
.selectors-4:is(:hover	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:is(:hover, :focus),$/;"	c
.selectors-4:local-link	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:local-link,$/;"	c
.selectors-4:local-link(0)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:local-link(0),$/;"	c
.selectors-4:nth-col(2n+1)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:nth-col(2n+1),$/;"	c
.selectors-4:nth-last-col(-n+2)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:nth-last-col(-n+2),$/;"	c
.selectors-4:optional	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:optional,$/;"	c
.selectors-4:out-of-range	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:out-of-range,$/;"	c
.selectors-4:past	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:past,$/;"	c
.selectors-4:paused	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:paused,$/;"	c
.selectors-4:placeholder-shown	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:placeholder-shown,$/;"	c
.selectors-4:playing	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:playing,$/;"	c
.selectors-4:read-only	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:read-only,$/;"	c
.selectors-4:read-write	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:read-write,$/;"	c
.selectors-4:required	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:required,$/;"	c
.selectors-4:scope	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:scope,$/;"	c
.selectors-4:target-within	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:target-within,$/;"	c
.selectors-4:user-invalid	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:user-invalid,$/;"	c
.selectors-4:valid	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:valid,$/;"	c
.selectors-4:where(:not(:hover))	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:where(:not(:hover)) {$/;"	c
.selectors-nonelement-1::attr(title)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-nonelement-1::attr(title) {$/;"	c
.shadow-parts::part(textspan)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.shadow-parts::part(textspan) {$/;"	c
.shapes-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.shapes-1 {$/;"	c
.sizing-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.sizing-3 {$/;"	c
.style-attr	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.style-attr {$/;"	c
.subtitle	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^.subtitle {$/;"	c
.svg2	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.svg2,$/;"	c
.syntax-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.syntax-3 {$/;"	c
.tables-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.tables-3 {$/;"	c
.text-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.text-3 {$/;"	c
.text-4	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.text-4 {$/;"	c
.text-decor-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.text-decor-3 {$/;"	c
.text-decor-4	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.text-decor-4 {$/;"	c
.timing-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.timing-1 {$/;"	c
.transforms-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.transforms-1 {$/;"	c
.transitions-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.transitions-1 {$/;"	c
.typed-om-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.typed-om-1 {$/;"	c
.ui-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.ui-3 {$/;"	c
.ui-4	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.ui-4 {$/;"	c
.values-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.values-3 {$/;"	c
.values-4	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.values-4 {$/;"	c
.variables-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.variables-1 {$/;"	c
.web-animations-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.web-animations-1 {$/;"	c
.webvtt1::cue	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.webvtt1::cue,$/;"	c
.webvtt1::cue(#cue1)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.webvtt1::cue(#cue1),$/;"	i
.webvtt1::cue-region	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.webvtt1::cue-region,$/;"	c
.webvtt1::cue-region(#scroll)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.webvtt1::cue-region(#scroll), {$/;"	i
.will-change-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.will-change-1 {$/;"	c
.worklets-1	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.worklets-1 {$/;"	c
.writing-modes-3	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.writing-modes-3 {$/;"	c
.writing-modes-4	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.writing-modes-4 {$/;"	c
/	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map \/ <Plug>(easymotion-sn)$/;"	m
/	.config/nvim/plugged/vim-easymotion/t/smartsign_spec.vim	/^        map \/ <Plug>(easymotion-sn)$/;"	m
/	.config/nvim/plugged/vista.vim/ftplugin/vista.vim	/^nnoremap <buffer> <silent> \/     :<c-u>call vista#finder#fzf#Run()<CR>$/;"	m
/	.config/nvim/plugged/vista.vim/ftplugin/vista_kind.vim	/^nnoremap <buffer> <silent> \/    :<c-u>call vista#finder#fzf#Run()<CR>$/;"	m
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^            {$/;"	o	array:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	s	array:definitions.languageServerBase.properties.revealOutputChannelOn.enum
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	s	array:definitions.languageServerModule.properties.transport.enum
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "enum": ["off", "messages", "verbose"],$/;"	s	array:definitions.languageServerBase.properties.trace.server.enum
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	o	array:definitions.languageServerCommand.allOf
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	o	array:definitions.languageServerModule.allOf
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	o	array:definitions.languageServerSocket.allOf
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": [".ts", ".js"],$/;"	s	array:properties.coc.source.file.trimSameExts.default
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": [".vim", ".git", ".hg", ".projections.json"],$/;"	s	array:properties.coc.preferences.rootPatterns.default
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": ["\/"],$/;"	s	array:properties.coc.source.file.triggerCharacters.default
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	s	array:properties.workspace.ignoredFiletypes.default
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["abbr", "menu", "preview"]$/;"	s	array:properties.suggest.detailField.enum
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "jump", "never"]$/;"	s	array:properties.diagnostic.enableMessage.enum
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "trigger", "none"]$/;"	s	array:properties.suggest.autoTrigger.enum
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["daily", "weekly", "never"]$/;"	s	array:properties.coc.preferences.extensionUpdateCheck.enum
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["echo", "float"]$/;"	s	array:properties.diagnostic.messageTarget.enum
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"]$/;"	s	array:properties.coc.preferences.jumpCommand.enum
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["float", "echo"]$/;"	s	array:properties.signature.target.enum
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	s	array:properties.diagnostic.level.enum
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["more", "warning", "error"]$/;"	s	array:properties.coc.preferences.messageLevel.enum
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["preview", "echo", "float"]$/;"	s	array:properties.coc.preferences.hoverTarget.enum
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "required": ["command", "filetypes"],$/;"	s	array:definitions.languageServerCommand.required
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "required": ["module", "filetypes"],$/;"	s	array:definitions.languageServerModule.required
0	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "required": ["port", "filetypes"],$/;"	s	array:definitions.languageServerSocket.required
0	.config/nvim/plugged/coc.nvim/package.json	/^      "ts",$/;"	s	array:jest.moduleFileExtensions
0	.config/nvim/plugged/coc.nvim/package.json	/^    "complete",$/;"	s	array:keywords
0	.vim/plugged/coc.nvim/data/schema.json	/^            {$/;"	o	array:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf
0	.vim/plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	s	array:definitions.languageServerBase.properties.revealOutputChannelOn.enum
0	.vim/plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	s	array:definitions.languageServerModule.properties.transport.enum
0	.vim/plugged/coc.nvim/data/schema.json	/^          "enum": ["off", "messages", "verbose"],$/;"	s	array:definitions.languageServerBase.properties.trace.server.enum
0	.vim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	o	array:definitions.languageServerCommand.allOf
0	.vim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	o	array:definitions.languageServerModule.allOf
0	.vim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	o	array:definitions.languageServerSocket.allOf
0	.vim/plugged/coc.nvim/data/schema.json	/^      "default": [".ts", ".js"],$/;"	s	array:properties.coc.source.file.trimSameExts.default
0	.vim/plugged/coc.nvim/data/schema.json	/^      "default": [".vim", ".git", ".hg", ".projections.json"],$/;"	s	array:properties.coc.preferences.rootPatterns.default
0	.vim/plugged/coc.nvim/data/schema.json	/^      "default": ["\/"],$/;"	s	array:properties.coc.source.file.triggerCharacters.default
0	.vim/plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	s	array:properties.workspace.ignoredFiletypes.default
0	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["abbr", "menu", "preview"]$/;"	s	array:properties.suggest.detailField.enum
0	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "jump", "never"]$/;"	s	array:properties.diagnostic.enableMessage.enum
0	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "trigger", "none"]$/;"	s	array:properties.suggest.autoTrigger.enum
0	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["daily", "weekly", "never"]$/;"	s	array:properties.coc.preferences.extensionUpdateCheck.enum
0	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["echo", "float"]$/;"	s	array:properties.diagnostic.messageTarget.enum
0	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"]$/;"	s	array:properties.coc.preferences.jumpCommand.enum
0	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["float", "echo"]$/;"	s	array:properties.signature.target.enum
0	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	s	array:properties.diagnostic.level.enum
0	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["more", "warning", "error"]$/;"	s	array:properties.coc.preferences.messageLevel.enum
0	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["preview", "echo", "float"]$/;"	s	array:properties.coc.preferences.hoverTarget.enum
0	.vim/plugged/coc.nvim/data/schema.json	/^      "required": ["command", "filetypes"],$/;"	s	array:definitions.languageServerCommand.required
0	.vim/plugged/coc.nvim/data/schema.json	/^      "required": ["module", "filetypes"],$/;"	s	array:definitions.languageServerModule.required
0	.vim/plugged/coc.nvim/data/schema.json	/^      "required": ["port", "filetypes"],$/;"	s	array:definitions.languageServerSocket.required
0	.vim/plugged/coc.nvim/package.json	/^      "ts",$/;"	s	array:jest.moduleFileExtensions
0	.vim/plugged/coc.nvim/package.json	/^    "complete",$/;"	s	array:keywords
0	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^          "package.json",$/;"	s	array:contributes.rootPatterns.0.patterns
0	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^      {$/;"	o	array:contributes.commands
0	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^      {$/;"	o	array:contributes.rootPatterns
0	.vim/plugged/coc.nvim/tsconfig.json	/^    "lib": ["es2017", "es2018"],$/;"	s	array:compilerOptions.lib
0	.vim/plugged/coc.nvim/tsconfig.json	/^  "include": ["src"],$/;"	s	array:include
0	VSCode/keybindings.json	/^\/\/ {$/;"	z
0	VSCode/settings.json	/^                "<Esc>"$/;"	s	array:vim.insertModeKeyBindings.0.after
0	VSCode/settings.json	/^                "k",$/;"	s	array:vim.insertModeKeyBindings.0.before
0	VSCode/settings.json	/^                "workbench.action.focusActiveEditorGroup"$/;"	s	array:vim.normalModeKeyBindingsNonRecursive.4.commands
0	VSCode/settings.json	/^            "before": [ "ctrl+h" ],$/;"	s	array:vim.normalModeKeyBindingsNonRecursive.0.before
0	VSCode/settings.json	/^            "before": [ "ctrl+j" ],$/;"	s	array:vim.normalModeKeyBindingsNonRecursive.3.before
0	VSCode/settings.json	/^            "before": [ "ctrl+k" ],$/;"	s	array:vim.normalModeKeyBindingsNonRecursive.2.before
0	VSCode/settings.json	/^            "before": [ "ctrl+l" ],$/;"	s	array:vim.normalModeKeyBindingsNonRecursive.1.before
0	VSCode/settings.json	/^            "before": ["ctrl", "w"],$/;"	s	array:vim.normalModeKeyBindingsNonRecursive.4.before
0	VSCode/settings.json	/^            "commands": [ "workbench.action.navigateDown" ]$/;"	s	array:vim.normalModeKeyBindingsNonRecursive.3.commands
0	VSCode/settings.json	/^            "commands": [ "workbench.action.navigateLeft" ]$/;"	s	array:vim.normalModeKeyBindingsNonRecursive.0.commands
0	VSCode/settings.json	/^            "commands": [ "workbench.action.navigateRight" ]$/;"	s	array:vim.normalModeKeyBindingsNonRecursive.1.commands
0	VSCode/settings.json	/^            "commands": [ "workbench.action.navigateUp" ]$/;"	s	array:vim.normalModeKeyBindingsNonRecursive.2.commands
0	VSCode/settings.json	/^        {$/;"	o	array:vim.insertModeKeyBindings
0	VSCode/settings.json	/^        {$/;"	o	array:vim.normalModeKeyBindingsNonRecursive
0	tsconfig.json	/^      { "name": "typescript-tslint-plugin" }$/;"	o	array:compilerOptions.plugins
0	tsconfig.json	/^    "core.ts",$/;"	s	array:files
0	vimium-options.json	/^    {$/;"	o	array:exclusionRules
0.10.0	.vim/plugged/fzf/CHANGELOG.md	/^0.10.0$/;"	s
0.10.1	.vim/plugged/fzf/CHANGELOG.md	/^0.10.1$/;"	s
0.10.2	.vim/plugged/fzf/CHANGELOG.md	/^0.10.2$/;"	s
0.10.3	.vim/plugged/fzf/CHANGELOG.md	/^0.10.3$/;"	s
0.10.4	.vim/plugged/fzf/CHANGELOG.md	/^0.10.4$/;"	s
0.10.5	.vim/plugged/fzf/CHANGELOG.md	/^0.10.5$/;"	s
0.10.6	.vim/plugged/fzf/CHANGELOG.md	/^0.10.6$/;"	s
0.10.7	.vim/plugged/fzf/CHANGELOG.md	/^0.10.7$/;"	s
0.10.8	.vim/plugged/fzf/CHANGELOG.md	/^0.10.8$/;"	s
0.10.9	.vim/plugged/fzf/CHANGELOG.md	/^0.10.9$/;"	s
0.11.0	.vim/plugged/fzf/CHANGELOG.md	/^0.11.0$/;"	s
0.11.1	.vim/plugged/fzf/CHANGELOG.md	/^0.11.1$/;"	s
0.11.2	.vim/plugged/fzf/CHANGELOG.md	/^0.11.2$/;"	s
0.11.3	.vim/plugged/fzf/CHANGELOG.md	/^0.11.3$/;"	s
0.11.4	.vim/plugged/fzf/CHANGELOG.md	/^0.11.4$/;"	s
0.12.0	.vim/plugged/fzf/CHANGELOG.md	/^0.12.0$/;"	s
0.12.1	.vim/plugged/fzf/CHANGELOG.md	/^0.12.1$/;"	s
0.12.2	.vim/plugged/fzf/CHANGELOG.md	/^0.12.2$/;"	s
0.13.0	.vim/plugged/fzf/CHANGELOG.md	/^0.13.0$/;"	s
0.13.1	.vim/plugged/fzf/CHANGELOG.md	/^0.13.1$/;"	s
0.13.2	.vim/plugged/fzf/CHANGELOG.md	/^0.13.2$/;"	s
0.13.3	.vim/plugged/fzf/CHANGELOG.md	/^0.13.3$/;"	s
0.13.4	.vim/plugged/fzf/CHANGELOG.md	/^0.13.4$/;"	s
0.13.5	.vim/plugged/fzf/CHANGELOG.md	/^0.13.5$/;"	s
0.15.0	.vim/plugged/fzf/CHANGELOG.md	/^0.15.0$/;"	s
0.15.1	.vim/plugged/fzf/CHANGELOG.md	/^0.15.1$/;"	s
0.15.2	.vim/plugged/fzf/CHANGELOG.md	/^0.15.2$/;"	s
0.15.3	.vim/plugged/fzf/CHANGELOG.md	/^0.15.3$/;"	s
0.15.4	.vim/plugged/fzf/CHANGELOG.md	/^0.15.4$/;"	s
0.15.5	.vim/plugged/fzf/CHANGELOG.md	/^0.15.5$/;"	s
0.15.6	.vim/plugged/fzf/CHANGELOG.md	/^0.15.6$/;"	s
0.15.7	.vim/plugged/fzf/CHANGELOG.md	/^0.15.7$/;"	s
0.15.8	.vim/plugged/fzf/CHANGELOG.md	/^0.15.8$/;"	s
0.15.9	.vim/plugged/fzf/CHANGELOG.md	/^0.15.9$/;"	s
0.16.0	.vim/plugged/fzf/CHANGELOG.md	/^0.16.0$/;"	s
0.16.1	.vim/plugged/fzf/CHANGELOG.md	/^0.16.1$/;"	s
0.16.10	.vim/plugged/fzf/CHANGELOG.md	/^0.16.10$/;"	s
0.16.11	.vim/plugged/fzf/CHANGELOG.md	/^0.16.11$/;"	s
0.16.2	.vim/plugged/fzf/CHANGELOG.md	/^0.16.2$/;"	s
0.16.3	.vim/plugged/fzf/CHANGELOG.md	/^0.16.3$/;"	s
0.16.4	.vim/plugged/fzf/CHANGELOG.md	/^0.16.4$/;"	s
0.16.5	.vim/plugged/fzf/CHANGELOG.md	/^0.16.5$/;"	s
0.16.6	.vim/plugged/fzf/CHANGELOG.md	/^0.16.6$/;"	s
0.16.7	.vim/plugged/fzf/CHANGELOG.md	/^0.16.7$/;"	s
0.16.8	.vim/plugged/fzf/CHANGELOG.md	/^0.16.8$/;"	s
0.16.9	.vim/plugged/fzf/CHANGELOG.md	/^0.16.9$/;"	s
0.17.0	.vim/plugged/fzf/CHANGELOG.md	/^0.17.0$/;"	s
0.17.0-2	.vim/plugged/fzf/CHANGELOG.md	/^0.17.0-2$/;"	s
0.17.1	.vim/plugged/fzf/CHANGELOG.md	/^0.17.1$/;"	s
0.17.3	.vim/plugged/fzf/CHANGELOG.md	/^0.17.3$/;"	s
0.17.4	.vim/plugged/fzf/CHANGELOG.md	/^0.17.4$/;"	s
0.17.5	.vim/plugged/fzf/CHANGELOG.md	/^0.17.5$/;"	s
0.18.0	.vim/plugged/fzf/CHANGELOG.md	/^0.18.0$/;"	s
0.9.10	.vim/plugged/fzf/CHANGELOG.md	/^0.9.10$/;"	s
0.9.11	.vim/plugged/fzf/CHANGELOG.md	/^0.9.11$/;"	s
0.9.12	.vim/plugged/fzf/CHANGELOG.md	/^0.9.12$/;"	s
0.9.13	.vim/plugged/fzf/CHANGELOG.md	/^0.9.13$/;"	s
0.9.3	.vim/plugged/fzf/CHANGELOG.md	/^0.9.3$/;"	s
0.9.4	.vim/plugged/fzf/CHANGELOG.md	/^0.9.4$/;"	s
0.9.5	.vim/plugged/fzf/CHANGELOG.md	/^0.9.5$/;"	s
0.9.6	.vim/plugged/fzf/CHANGELOG.md	/^0.9.6$/;"	s
0.9.7	.vim/plugged/fzf/CHANGELOG.md	/^0.9.7$/;"	s
0.9.8	.vim/plugged/fzf/CHANGELOG.md	/^0.9.8$/;"	s
0.9.9	.vim/plugged/fzf/CHANGELOG.md	/^0.9.9$/;"	s
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^            {$/;"	o	array:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	s	array:definitions.languageServerBase.properties.revealOutputChannelOn.enum
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	s	array:definitions.languageServerModule.properties.transport.enum
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "enum": ["off", "messages", "verbose"],$/;"	s	array:definitions.languageServerBase.properties.trace.server.enum
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": [".ts", ".js"],$/;"	s	array:properties.coc.source.file.trimSameExts.default
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": [".vim", ".git", ".hg", ".projections.json"],$/;"	s	array:properties.coc.preferences.rootPatterns.default
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	s	array:properties.workspace.ignoredFiletypes.default
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["abbr", "menu", "preview"]$/;"	s	array:properties.suggest.detailField.enum
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "jump", "never"]$/;"	s	array:properties.diagnostic.enableMessage.enum
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "trigger", "none"]$/;"	s	array:properties.suggest.autoTrigger.enum
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["daily", "weekly", "never"]$/;"	s	array:properties.coc.preferences.extensionUpdateCheck.enum
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["echo", "float"]$/;"	s	array:properties.diagnostic.messageTarget.enum
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"]$/;"	s	array:properties.coc.preferences.jumpCommand.enum
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["float", "echo"]$/;"	s	array:properties.signature.target.enum
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	s	array:properties.diagnostic.level.enum
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["more", "warning", "error"]$/;"	s	array:properties.coc.preferences.messageLevel.enum
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["preview", "echo", "float"]$/;"	s	array:properties.coc.preferences.hoverTarget.enum
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "required": ["command", "filetypes"],$/;"	s	array:definitions.languageServerCommand.required
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "required": ["module", "filetypes"],$/;"	s	array:definitions.languageServerModule.required
1	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "required": ["port", "filetypes"],$/;"	s	array:definitions.languageServerSocket.required
1	.config/nvim/plugged/coc.nvim/package.json	/^      "tsx",$/;"	s	array:jest.moduleFileExtensions
1	.config/nvim/plugged/coc.nvim/package.json	/^    "neovim"$/;"	s	array:keywords
1	.vim/plugged/coc.nvim/data/schema.json	/^            {$/;"	o	array:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf
1	.vim/plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	s	array:definitions.languageServerBase.properties.revealOutputChannelOn.enum
1	.vim/plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	s	array:definitions.languageServerModule.properties.transport.enum
1	.vim/plugged/coc.nvim/data/schema.json	/^          "enum": ["off", "messages", "verbose"],$/;"	s	array:definitions.languageServerBase.properties.trace.server.enum
1	.vim/plugged/coc.nvim/data/schema.json	/^      "default": [".ts", ".js"],$/;"	s	array:properties.coc.source.file.trimSameExts.default
1	.vim/plugged/coc.nvim/data/schema.json	/^      "default": [".vim", ".git", ".hg", ".projections.json"],$/;"	s	array:properties.coc.preferences.rootPatterns.default
1	.vim/plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	s	array:properties.workspace.ignoredFiletypes.default
1	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["abbr", "menu", "preview"]$/;"	s	array:properties.suggest.detailField.enum
1	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "jump", "never"]$/;"	s	array:properties.diagnostic.enableMessage.enum
1	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "trigger", "none"]$/;"	s	array:properties.suggest.autoTrigger.enum
1	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["daily", "weekly", "never"]$/;"	s	array:properties.coc.preferences.extensionUpdateCheck.enum
1	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["echo", "float"]$/;"	s	array:properties.diagnostic.messageTarget.enum
1	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"]$/;"	s	array:properties.coc.preferences.jumpCommand.enum
1	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["float", "echo"]$/;"	s	array:properties.signature.target.enum
1	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	s	array:properties.diagnostic.level.enum
1	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["more", "warning", "error"]$/;"	s	array:properties.coc.preferences.messageLevel.enum
1	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["preview", "echo", "float"]$/;"	s	array:properties.coc.preferences.hoverTarget.enum
1	.vim/plugged/coc.nvim/data/schema.json	/^      "required": ["command", "filetypes"],$/;"	s	array:definitions.languageServerCommand.required
1	.vim/plugged/coc.nvim/data/schema.json	/^      "required": ["module", "filetypes"],$/;"	s	array:definitions.languageServerModule.required
1	.vim/plugged/coc.nvim/data/schema.json	/^      "required": ["port", "filetypes"],$/;"	s	array:definitions.languageServerSocket.required
1	.vim/plugged/coc.nvim/package.json	/^      "tsx",$/;"	s	array:jest.moduleFileExtensions
1	.vim/plugged/coc.nvim/package.json	/^    "neovim"$/;"	s	array:keywords
1	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^          "jsconfig.json"$/;"	s	array:contributes.rootPatterns.0.patterns
1	.vim/plugged/coc.nvim/tsconfig.json	/^    "lib": ["es2017", "es2018"],$/;"	s	array:compilerOptions.lib
1	VSCode/keybindings.json	/^\/\/]/;"	z
1	VSCode/settings.json	/^                "j"$/;"	s	array:vim.insertModeKeyBindings.0.before
1	VSCode/settings.json	/^            "before": ["ctrl", "w"],$/;"	s	array:vim.normalModeKeyBindingsNonRecursive.4.before
1	VSCode/settings.json	/^        {$/;"	o	array:vim.normalModeKeyBindingsNonRecursive
1	tsconfig.json	/^    "sys.ts",$/;"	s	array:files
1.0 Release Candidate	.vim/plugged/papercolor-theme/ROADMAP.md	/^# 1.0 Release Candidate$/;"	c
10	tsconfig.json	/^    "commandLineParser.ts",$/;"	s	array:files
11	tsconfig.json	/^    "tsc.ts",$/;"	s	array:files
12	tsconfig.json	/^    "diagnosticInformationMap.generated.ts"$/;"	s	array:files
2	.config/nvim/plugged/coc.nvim/data/schema.json	/^            {$/;"	o	array:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf
2	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	s	array:definitions.languageServerBase.properties.revealOutputChannelOn.enum
2	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	s	array:definitions.languageServerModule.properties.transport.enum
2	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "enum": ["off", "messages", "verbose"],$/;"	s	array:definitions.languageServerBase.properties.trace.server.enum
2	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": [".vim", ".git", ".hg", ".projections.json"],$/;"	s	array:properties.coc.preferences.rootPatterns.default
2	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	s	array:properties.workspace.ignoredFiletypes.default
2	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["abbr", "menu", "preview"]$/;"	s	array:properties.suggest.detailField.enum
2	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "jump", "never"]$/;"	s	array:properties.diagnostic.enableMessage.enum
2	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "trigger", "none"]$/;"	s	array:properties.suggest.autoTrigger.enum
2	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["daily", "weekly", "never"]$/;"	s	array:properties.coc.preferences.extensionUpdateCheck.enum
2	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"]$/;"	s	array:properties.coc.preferences.jumpCommand.enum
2	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	s	array:properties.diagnostic.level.enum
2	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["more", "warning", "error"]$/;"	s	array:properties.coc.preferences.messageLevel.enum
2	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["preview", "echo", "float"]$/;"	s	array:properties.coc.preferences.hoverTarget.enum
2	.config/nvim/plugged/coc.nvim/package.json	/^      "json",$/;"	s	array:jest.moduleFileExtensions
2	.vim/plugged/coc.nvim/data/schema.json	/^            {$/;"	o	array:properties.languageserver.patternProperties.^[_a-zA-Z]+$.oneOf
2	.vim/plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	s	array:definitions.languageServerBase.properties.revealOutputChannelOn.enum
2	.vim/plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	s	array:definitions.languageServerModule.properties.transport.enum
2	.vim/plugged/coc.nvim/data/schema.json	/^          "enum": ["off", "messages", "verbose"],$/;"	s	array:definitions.languageServerBase.properties.trace.server.enum
2	.vim/plugged/coc.nvim/data/schema.json	/^      "default": [".vim", ".git", ".hg", ".projections.json"],$/;"	s	array:properties.coc.preferences.rootPatterns.default
2	.vim/plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	s	array:properties.workspace.ignoredFiletypes.default
2	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["abbr", "menu", "preview"]$/;"	s	array:properties.suggest.detailField.enum
2	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "jump", "never"]$/;"	s	array:properties.diagnostic.enableMessage.enum
2	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "trigger", "none"]$/;"	s	array:properties.suggest.autoTrigger.enum
2	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["daily", "weekly", "never"]$/;"	s	array:properties.coc.preferences.extensionUpdateCheck.enum
2	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"]$/;"	s	array:properties.coc.preferences.jumpCommand.enum
2	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	s	array:properties.diagnostic.level.enum
2	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["more", "warning", "error"]$/;"	s	array:properties.coc.preferences.messageLevel.enum
2	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["preview", "echo", "float"]$/;"	s	array:properties.coc.preferences.hoverTarget.enum
2	.vim/plugged/coc.nvim/package.json	/^      "json",$/;"	s	array:jest.moduleFileExtensions
2	VSCode/settings.json	/^        {$/;"	o	array:vim.normalModeKeyBindingsNonRecursive
2	tsconfig.json	/^    "types.ts",$/;"	s	array:files
2-character search motion	.config/nvim/plugged/vim-easymotion/README.md	/^### 2-character search motion$/;"	S
2018-07-12	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-12$/;"	c
2018-07-12	.vim/plugged/coc.nvim/history.md	/^# 2018-07-12$/;"	c
2018-07-13	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-13$/;"	c
2018-07-13	.vim/plugged/coc.nvim/history.md	/^# 2018-07-13$/;"	c
2018-07-14	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-14$/;"	c
2018-07-14	.vim/plugged/coc.nvim/history.md	/^# 2018-07-14$/;"	c
2018-07-15	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-15$/;"	c
2018-07-15	.vim/plugged/coc.nvim/history.md	/^# 2018-07-15$/;"	c
2018-07-16	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-16$/;"	c
2018-07-16	.vim/plugged/coc.nvim/history.md	/^# 2018-07-16$/;"	c
2018-07-17	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-17$/;"	c
2018-07-17	.vim/plugged/coc.nvim/history.md	/^# 2018-07-17$/;"	c
2018-07-19	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-19$/;"	c
2018-07-19	.vim/plugged/coc.nvim/history.md	/^# 2018-07-19$/;"	c
2018-07-20	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-20$/;"	c
2018-07-20	.vim/plugged/coc.nvim/history.md	/^# 2018-07-20$/;"	c
2018-07-21	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-21$/;"	c
2018-07-21	.vim/plugged/coc.nvim/history.md	/^# 2018-07-21$/;"	c
2018-07-23	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-23$/;"	c
2018-07-23	.vim/plugged/coc.nvim/history.md	/^# 2018-07-23$/;"	c
2018-07-24	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-24$/;"	c
2018-07-24	.vim/plugged/coc.nvim/history.md	/^# 2018-07-24$/;"	c
2018-07-27	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-27$/;"	c
2018-07-27	.vim/plugged/coc.nvim/history.md	/^# 2018-07-27$/;"	c
2018-07-28	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-28$/;"	c
2018-07-28	.vim/plugged/coc.nvim/history.md	/^# 2018-07-28$/;"	c
2018-07-29	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-29$/;"	c
2018-07-29	.vim/plugged/coc.nvim/history.md	/^# 2018-07-29$/;"	c
2018-07-30	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-30$/;"	c
2018-07-30	.vim/plugged/coc.nvim/history.md	/^# 2018-07-30$/;"	c
2018-07-31	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-07-31$/;"	c
2018-07-31	.vim/plugged/coc.nvim/history.md	/^# 2018-07-31$/;"	c
2018-08-02	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-02$/;"	c
2018-08-02	.vim/plugged/coc.nvim/history.md	/^# 2018-08-02$/;"	c
2018-08-03	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-03$/;"	c
2018-08-03	.vim/plugged/coc.nvim/history.md	/^# 2018-08-03$/;"	c
2018-08-04	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-04$/;"	c
2018-08-04	.vim/plugged/coc.nvim/history.md	/^# 2018-08-04$/;"	c
2018-08-05	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-05$/;"	c
2018-08-05	.vim/plugged/coc.nvim/history.md	/^# 2018-08-05$/;"	c
2018-08-07	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-07$/;"	c
2018-08-07	.vim/plugged/coc.nvim/history.md	/^# 2018-08-07$/;"	c
2018-08-08	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-08$/;"	c
2018-08-08	.vim/plugged/coc.nvim/history.md	/^# 2018-08-08$/;"	c
2018-08-09	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-09$/;"	c
2018-08-09	.vim/plugged/coc.nvim/history.md	/^# 2018-08-09$/;"	c
2018-08-10	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-10$/;"	c
2018-08-10	.vim/plugged/coc.nvim/history.md	/^# 2018-08-10$/;"	c
2018-08-11	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-11$/;"	c
2018-08-11	.vim/plugged/coc.nvim/history.md	/^# 2018-08-11$/;"	c
2018-08-12	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-12$/;"	c
2018-08-12	.vim/plugged/coc.nvim/history.md	/^# 2018-08-12$/;"	c
2018-08-14	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-14$/;"	c
2018-08-14	.vim/plugged/coc.nvim/history.md	/^# 2018-08-14$/;"	c
2018-08-15	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-15$/;"	c
2018-08-15	.vim/plugged/coc.nvim/history.md	/^# 2018-08-15$/;"	c
2018-08-16	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-16$/;"	c
2018-08-16	.vim/plugged/coc.nvim/history.md	/^# 2018-08-16$/;"	c
2018-08-17	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-17$/;"	c
2018-08-17	.vim/plugged/coc.nvim/history.md	/^# 2018-08-17$/;"	c
2018-08-21	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-21$/;"	c
2018-08-21	.vim/plugged/coc.nvim/history.md	/^# 2018-08-21$/;"	c
2018-08-23	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-23$/;"	c
2018-08-23	.vim/plugged/coc.nvim/history.md	/^# 2018-08-23$/;"	c
2018-08-30	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-08-30$/;"	c
2018-08-30	.vim/plugged/coc.nvim/history.md	/^# 2018-08-30$/;"	c
2018-09-07	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-09-07$/;"	c
2018-09-07	.vim/plugged/coc.nvim/history.md	/^# 2018-09-07$/;"	c
2018-09-10	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-09-10$/;"	c
2018-09-10	.vim/plugged/coc.nvim/history.md	/^# 2018-09-10$/;"	c
2018-09-15	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-09-15$/;"	c
2018-09-15	.vim/plugged/coc.nvim/history.md	/^# 2018-09-15$/;"	c
2018-09-20	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-09-20$/;"	c
2018-09-20	.vim/plugged/coc.nvim/history.md	/^# 2018-09-20$/;"	c
2018-09-24	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-09-24$/;"	c
2018-09-24	.vim/plugged/coc.nvim/history.md	/^# 2018-09-24$/;"	c
2018-09-27	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-09-27$/;"	c
2018-09-27	.vim/plugged/coc.nvim/history.md	/^# 2018-09-27$/;"	c
2018-09-28	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-09-28$/;"	c
2018-09-28	.vim/plugged/coc.nvim/history.md	/^# 2018-09-28$/;"	c
2018-09-30	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-09-30$/;"	c
2018-09-30	.vim/plugged/coc.nvim/history.md	/^# 2018-09-30$/;"	c
2018-10-01	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-10-01$/;"	c
2018-10-01	.vim/plugged/coc.nvim/history.md	/^# 2018-10-01$/;"	c
2018-10-05	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-10-05$/;"	c
2018-10-05	.vim/plugged/coc.nvim/history.md	/^# 2018-10-05$/;"	c
2018-10-14	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-10-14$/;"	c
2018-10-14	.vim/plugged/coc.nvim/history.md	/^# 2018-10-14$/;"	c
2018-10-18	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-10-18$/;"	c
2018-10-18	.vim/plugged/coc.nvim/history.md	/^# 2018-10-18$/;"	c
2018-10-21	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-10-21$/;"	c
2018-10-21	.vim/plugged/coc.nvim/history.md	/^# 2018-10-21$/;"	c
2018-10-25	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-10-25$/;"	c
2018-10-25	.vim/plugged/coc.nvim/history.md	/^# 2018-10-25$/;"	c
2018-10-29	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-10-29$/;"	c
2018-10-29	.vim/plugged/coc.nvim/history.md	/^# 2018-10-29$/;"	c
2018-11-02	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-11-02$/;"	c
2018-11-02	.vim/plugged/coc.nvim/history.md	/^# 2018-11-02$/;"	c
2018-11-07	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-11-07$/;"	c
2018-11-07	.vim/plugged/coc.nvim/history.md	/^# 2018-11-07$/;"	c
2018-11-13	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-11-13$/;"	c
2018-11-13	.vim/plugged/coc.nvim/history.md	/^# 2018-11-13$/;"	c
2018-11-19	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-11-19$/;"	c
2018-11-19	.vim/plugged/coc.nvim/history.md	/^# 2018-11-19$/;"	c
2018-11-24	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-11-24$/;"	c
2018-11-24	.vim/plugged/coc.nvim/history.md	/^# 2018-11-24$/;"	c
2018-11-28	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-11-28$/;"	c
2018-11-28	.vim/plugged/coc.nvim/history.md	/^# 2018-11-28$/;"	c
2018-12-05	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-12-05$/;"	c
2018-12-05	.vim/plugged/coc.nvim/history.md	/^# 2018-12-05$/;"	c
2018-12-06	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-12-06$/;"	c
2018-12-06	.vim/plugged/coc.nvim/history.md	/^# 2018-12-06$/;"	c
2018-12-08	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-12-08$/;"	c
2018-12-08	.vim/plugged/coc.nvim/history.md	/^# 2018-12-08$/;"	c
2018-12-12	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-12-12$/;"	c
2018-12-12	.vim/plugged/coc.nvim/history.md	/^# 2018-12-12$/;"	c
2018-12-17	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-12-17$/;"	c
2018-12-17	.vim/plugged/coc.nvim/history.md	/^# 2018-12-17$/;"	c
2018-12-20	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-12-20$/;"	c
2018-12-20	.vim/plugged/coc.nvim/history.md	/^# 2018-12-20$/;"	c
2018-12-27	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-12-27$/;"	c
2018-12-27	.vim/plugged/coc.nvim/history.md	/^# 2018-12-27$/;"	c
2018-12-31	.config/nvim/plugged/coc.nvim/history.md	/^# 2018-12-31$/;"	c
2018-12-31	.vim/plugged/coc.nvim/history.md	/^# 2018-12-31$/;"	c
2019-01-01	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-01-01$/;"	c
2019-01-01	.vim/plugged/coc.nvim/history.md	/^# 2019-01-01$/;"	c
2019-01-03	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-01-03$/;"	c
2019-01-03	.vim/plugged/coc.nvim/history.md	/^# 2019-01-03$/;"	c
2019-01-09	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-01-09$/;"	c
2019-01-09	.vim/plugged/coc.nvim/history.md	/^# 2019-01-09$/;"	c
2019-01-24	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-01-24$/;"	c
2019-01-24	.vim/plugged/coc.nvim/history.md	/^# 2019-01-24$/;"	c
2019-01-28	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-01-28$/;"	c
2019-01-28	.vim/plugged/coc.nvim/history.md	/^# 2019-01-28$/;"	c
2019-02-02	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-02-02$/;"	c
2019-02-02	.vim/plugged/coc.nvim/history.md	/^# 2019-02-02$/;"	c
2019-02-04	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-02-04$/;"	c
2019-02-04	.vim/plugged/coc.nvim/history.md	/^# 2019-02-04$/;"	c
2019-02-11	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-02-11$/;"	c
2019-02-11	.vim/plugged/coc.nvim/history.md	/^# 2019-02-11$/;"	c
2019-02-12	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-02-12$/;"	c
2019-02-12	.vim/plugged/coc.nvim/history.md	/^# 2019-02-12$/;"	c
2019-02-17	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-02-17$/;"	c
2019-02-17	.vim/plugged/coc.nvim/history.md	/^# 2019-02-17$/;"	c
2019-02-22	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-02-22$/;"	c
2019-02-22	.vim/plugged/coc.nvim/history.md	/^# 2019-02-22$/;"	c
2019-02-25	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-02-25$/;"	c
2019-02-25	.vim/plugged/coc.nvim/history.md	/^# 2019-02-25$/;"	c
2019-03-03	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-03-03$/;"	c
2019-03-03	.vim/plugged/coc.nvim/history.md	/^# 2019-03-03$/;"	c
2019-03-11	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-03-11$/;"	c
2019-03-11	.vim/plugged/coc.nvim/history.md	/^# 2019-03-11$/;"	c
2019-03-16	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-03-16$/;"	c
2019-03-16	.vim/plugged/coc.nvim/history.md	/^# 2019-03-16$/;"	c
2019-03-19	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-03-19$/;"	c
2019-03-19	.vim/plugged/coc.nvim/history.md	/^# 2019-03-19$/;"	c
2019-03-24	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-03-24$/;"	c
2019-03-24	.vim/plugged/coc.nvim/history.md	/^# 2019-03-24$/;"	c
2019-03-28	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-03-28$/;"	c
2019-03-28	.vim/plugged/coc.nvim/history.md	/^# 2019-03-28$/;"	c
2019-03-31	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-03-31$/;"	c
2019-03-31	.vim/plugged/coc.nvim/history.md	/^# 2019-03-31$/;"	c
2019-04-09	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-04-09$/;"	c
2019-04-09	.vim/plugged/coc.nvim/history.md	/^# 2019-04-09$/;"	c
2019-04-27	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-04-27$/;"	c
2019-04-27	.vim/plugged/coc.nvim/history.md	/^# 2019-04-27$/;"	c
2019-05-07	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-05-07$/;"	c
2019-05-07	.vim/plugged/coc.nvim/history.md	/^# 2019-05-07$/;"	c
2019-05-30	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-05-30$/;"	c
2019-05-30	.vim/plugged/coc.nvim/history.md	/^# 2019-05-30$/;"	c
2019-06-09	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-06-09$/;"	c
2019-06-09	.vim/plugged/coc.nvim/history.md	/^# 2019-06-09$/;"	c
2019-06-12	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-06-12$/;"	c
2019-06-12	.vim/plugged/coc.nvim/history.md	/^# 2019-06-12$/;"	c
2019-06-15	.config/nvim/plugged/coc.nvim/history.md	/^# 2019-06-15$/;"	c
2019-06-15	.vim/plugged/coc.nvim/history.md	/^# 2019-06-15$/;"	c
3	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	s	array:definitions.languageServerBase.properties.revealOutputChannelOn.enum
3	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	s	array:definitions.languageServerModule.properties.transport.enum
3	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": [".vim", ".git", ".hg", ".projections.json"],$/;"	s	array:properties.coc.preferences.rootPatterns.default
3	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	s	array:properties.workspace.ignoredFiletypes.default
3	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"]$/;"	s	array:properties.coc.preferences.jumpCommand.enum
3	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	s	array:properties.diagnostic.level.enum
3	.config/nvim/plugged/coc.nvim/package.json	/^      "js"$/;"	s	array:jest.moduleFileExtensions
3	.vim/plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	s	array:definitions.languageServerBase.properties.revealOutputChannelOn.enum
3	.vim/plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	s	array:definitions.languageServerModule.properties.transport.enum
3	.vim/plugged/coc.nvim/data/schema.json	/^      "default": [".vim", ".git", ".hg", ".projections.json"],$/;"	s	array:properties.coc.preferences.rootPatterns.default
3	.vim/plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	s	array:properties.workspace.ignoredFiletypes.default
3	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"]$/;"	s	array:properties.coc.preferences.jumpCommand.enum
3	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	s	array:properties.diagnostic.level.enum
3	.vim/plugged/coc.nvim/package.json	/^      "js"$/;"	s	array:jest.moduleFileExtensions
3	VSCode/settings.json	/^        {$/;"	o	array:vim.normalModeKeyBindingsNonRecursive
3	tsconfig.json	/^    "scanner.ts",$/;"	s	array:files
4	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"]$/;"	s	array:properties.coc.preferences.jumpCommand.enum
4	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"]$/;"	s	array:properties.coc.preferences.jumpCommand.enum
4	VSCode/settings.json	/^{$/;"	o	array:vim.normalModeKeyBindingsNonRecursive
4	tsconfig.json	/^    "parser.ts",$/;"	s	array:files
5	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"]$/;"	s	array:properties.coc.preferences.jumpCommand.enum
5	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"]$/;"	s	array:properties.coc.preferences.jumpCommand.enum
5	tsconfig.json	/^    "utilities.ts",$/;"	s	array:files
6	tsconfig.json	/^    "binder.ts",$/;"	s	array:files
7	tsconfig.json	/^    "checker.ts",$/;"	s	array:files
8	tsconfig.json	/^    "emitter.ts",$/;"	s	array:files
9	tsconfig.json	/^    "program.ts",$/;"	s	array:files
:focus)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:is(:hover, :focus),$/;"	s
;	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> ;$/;"	m
;	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map ; <Plug>(easymotion-next)$/;"	m
<	.config/nvim/configs/keymap.vim	/^inoremap < <><left>$/;"	m
<2-LeftMouse>	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> <2-LeftMouse>$/;"	m
<3-LeftMouse>	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> <3-LeftMouse>$/;"	m
<BS>	.config/nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^  snoremap <silent> <BS> <c-g>c$/;"	m
<BS>	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    snoremap <silent> <BS> <c-g>c$/;"	m
<BS>	.vim/plugged/coc.nvim/autoload/coc/snippet.vim	/^  snoremap <silent> <BS> <c-g>c$/;"	m
<C-A>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^cnoremap        <C-A> <Home>$/;"	m
<C-A>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^inoremap        <C-A> <C-O>^$/;"	m
<C-B>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^cnoremap        <C-B> <Left>$/;"	m
<C-B>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^inoremap <expr> <C-B> getline('.')=~'^\\s*$'&&col('.')>strlen(getline('.'))?"0\\<Lt>C-D>\\<Lt>Es/;"	m
<C-D>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^cnoremap <expr> <C-D> getcmdpos()>strlen(getcmdline())?"\\<Lt>C-D>":"\\<Lt>Del>"$/;"	m
<C-D>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^inoremap <expr> <C-D> col('.')>strlen(getline('.'))?"\\<Lt>C-D>":"\\<Lt>Del>"$/;"	m
<C-E>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^inoremap <expr> <C-E> col('.')>strlen(getline('.'))<bar><bar>pumvisible()?"\\<Lt>C-E>":"\\<Lt>En/;"	m
<C-F>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^cnoremap <expr> <C-F> getcmdpos()>strlen(getcmdline())?&cedit:"\\<Lt>Right>"$/;"	m
<C-F>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^inoremap <expr> <C-F> col('.')>strlen(getline('.'))?"\\<Lt>C-F>":"\\<Lt>Right>"$/;"	m
<C-G>S	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>S	.vim/plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>s <Plug>Isurround$/;"	m
<C-G>s	.vim/plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>s <Plug>Isurround$/;"	m
<C-N>	.config/nvim/plugged/vista.vim/ftplugin/vista.vim	/^nnoremap <buffer> <silent> <C-N> :<c-u>call vista#jump#NextTopLevel()<CR>$/;"	m
<C-P>	.config/nvim/plugged/vista.vim/ftplugin/vista.vim	/^nnoremap <buffer> <silent> <C-P> :<c-u>call vista#jump#PrevTopLevel()<CR>$/;"	m
<C-R>	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^    nmap <C-R> <Plug>(RepeatRedo)$/;"	m
<C-R><C-F>	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^    cmap <buffer>         <C-R><C-F> <Plug><cfile>$/;"	m
<C-S>	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^      imap    <C-S> <Plug>Isurround$/;"	m
<C-S>	.vim/plugged/vim-surround/plugin/surround.vim	/^      imap    <C-S> <Plug>Isurround$/;"	m
<C-T>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^cnoremap <expr> <C-T> <SID>transpose()$/;"	m
<C-U>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^cnoremap <expr> <C-U> <SID>ctrl_u()$/;"	m
<C-W><C-F>	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^    nnoremap <silent><buffer> <C-W><C-F> :Bsplit   <C-R><C-F><CR>$/;"	m
<C-W><C-F>	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^    nmap <buffer><silent> <C-W><C-F> <SID>:sfind <Plug><cfile><CR>$/;"	m
<C-W>f	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^    nnoremap <silent><buffer> <C-W>f     :Bsplit   <C-R><C-F><CR>$/;"	m
<C-W>f	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^    nmap <buffer><silent> <C-W>f     <SID>:sfind <Plug><cfile><CR>$/;"	m
<C-W>gf	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^    nnoremap <silent><buffer> <C-W>gf    :Btabedit <C-R><C-F><CR>$/;"	m
<C-W>gf	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^    nmap <buffer><silent> <C-W>gf    <SID>:tabfind <Plug><cfile><CR>$/;"	m
<C-X><C-A>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^cnoremap   <C-X><C-A> <C-A>$/;"	m
<C-X><C-A>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^inoremap   <C-X><C-A> <C-A>$/;"	m
<C-Y>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^cnoremap        <C-Y> <C-R>-$/;"	m
<C-b>	.config/nvim/plugged/comfortable-motion.vim/plugin/comfortable_motion.vim	/^  nnoremap <silent> <C-b> :call comfortable_motion#flick(-200)<CR>$/;"	m
<C-c>	.config/nvim/configs/plugins.vim	/^	inoremap <silent><buffer><expr> <C-c>  denite#do_map('quit')$/;"	m
<C-c>	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> <C-c>  denite#do_map('quit')$/;"	m
<C-d>	.config/nvim/plugged/comfortable-motion.vim/plugin/comfortable_motion.vim	/^  nnoremap <silent> <C-d> :call comfortable_motion#flick(100)<CR>$/;"	m
<C-f>	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> <C-f>   denite#do_map('do_action', 'defx')$/;"	m
<C-f>	.config/nvim/plugged/comfortable-motion.vim/plugin/comfortable_motion.vim	/^  nnoremap <silent> <C-f> :call comfortable_motion#flick(200)<CR>$/;"	m
<C-g>	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> <C-g>$/;"	m
<C-l>	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> <C-l>$/;"	m
<C-u>	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> <C-u>   denite#do_map('restore_sources')$/;"	m
<C-u>	.config/nvim/plugged/comfortable-motion.vim/plugin/comfortable_motion.vim	/^  nnoremap <silent> <C-u> :call comfortable_motion#flick(-100)<CR>$/;"	m
<C-w>\\	.config/nvim/configs/plugins.vim	/^nnoremap <silent> <C-w>\\ :TmuxNavigatePrevious<cr>$/;"	m
<C-x>	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> <C-x>   denite#do_map('choose_action')$/;"	m
<CR>	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')$/;"	m
<CR>	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> <CR>$/;"	m
<CR>	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^  imap <buffer> <CR> <Plug>(denite_filter_update)$/;"	m
<CR>	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^  nmap <buffer> <CR> <Plug>(denite_filter_update)$/;"	m
<CR>	.config/nvim/plugged/vista.vim/ftplugin/vista.vim	/^nnoremap <buffer> <silent> <CR>  :<c-u>call vista#cursor#FoldOrJump()<CR>$/;"	m
<CR>	.config/nvim/plugged/vista.vim/ftplugin/vista_kind.vim	/^nnoremap <buffer> <silent> <CR> :<c-u>call vista#cursor#FoldOrJump()<CR>$/;"	m
<CR>	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^  imap <buffer> <CR> <Plug>(denite_filter_update)$/;"	m
<CR>	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^  nmap <buffer> <CR> <Plug>(denite_filter_update)$/;"	m
<CR>	.vim/plugged/vim-closer/autoload/closer.vim	/^    imap  <CR> <CR><Plug>CloserClose$/;"	m
<DEL>	.config/nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^  snoremap <silent> <DEL> <c-g>c$/;"	m
<DEL>	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    snoremap <silent> <DEL> <c-g>c$/;"	m
<DEL>	.vim/plugged/coc.nvim/autoload/coc/snippet.vim	/^  snoremap <silent> <DEL> <c-g>c$/;"	m
<Esc>	.config/nvim/configs/plugins.vim	/^	inoremap <silent><buffer><expr> <Esc>  denite#do_map('quit')$/;"	m
<Esc>	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> <Esc>   denite#do_map('quit')$/;"	m
<Esc>	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> <Esc>  denite#do_map('quit')$/;"	m
<F31>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^  map <F31> <M-d>$/;"	m
<F31>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^  map! <F31> <M-d>$/;"	m
<F32>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^  map <F32> <M-n>$/;"	m
<F32>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^  map! <F32> <M-n>$/;"	m
<F33>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^  map <F33> <M-p>$/;"	m
<F33>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^  map! <F33> <M-p>$/;"	m
<F34>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^  map <F34> <M-BS>$/;"	m
<F34>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^  map! <F34> <M-BS>$/;"	m
<F35>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^  map <F35> <M-BS>$/;"	m
<F35>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^  map! <F35> <M-BS>$/;"	m
<Leader><Leader>	.config/nvim/configs/keymap.vim	/^nmap <silent> <Leader><Leader> V$/;"	m
<Leader><Leader>	.config/nvim/configs/keymap.vim	/^vmap <Leader><Leader> <Esc>$/;"	m
<Leader><Leader>	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^            map <Leader><Leader> <Plug>(easymotion-prefix)$/;"	m
<Leader>B	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>B <Plug>(easymotion-B)$/;"	m
<Leader>E	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>E <Plug>(easymotion-E)$/;"	m
<Leader>W	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>W <Plug>(easymotion-W)$/;"	m
<Leader>b	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>b <Plug>(easymotion-iskeyword-b)$/;"	m
<Leader>b	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map <Leader>b <Plug>(easymotion-iskeyword-b)$/;"	m
<Leader>e	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>e <Plug>(easymotion-iskeyword-e)$/;"	m
<Leader>gE	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>gE <Plug>(easymotion-gE)$/;"	m
<Leader>ge	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>ge <Plug>(easymotion-iskeyword-ge)$/;"	m
<Leader>w	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>w <Plug>(easymotion-iskeyword-w)$/;"	m
<Leader>w	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map <Leader>w <Plug>(easymotion-iskeyword-w)$/;"	m
<M-BS>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^noremap!        <M-BS> <C-W>$/;"	m
<M-b>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^noremap!        <M-b> <S-Left>$/;"	m
<M-d>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^cnoremap        <M-d> <S-Right><C-W>$/;"	m
<M-d>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^noremap!        <M-d> <C-O>dw$/;"	m
<M-f>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^noremap!        <M-f> <S-Right>$/;"	m
<M-n>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^noremap!        <M-n> <Down>$/;"	m
<M-p>	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^noremap!        <M-p> <Up>$/;"	m
<Plug>(-fzf-complete-trigger)	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
<Plug>(AfterAfterObject)	.config/nvim/plugged/vim-after-object/autoload/after_object.vim	/^inoremap <expr> <Plug>(AfterAfterObject) exists('#afterobj_undo_empty_change')?"\\<esc>":''$/;"	m
<Plug>(AfterAfterObject)	.config/nvim/plugged/vim-after-object/autoload/after_object.vim	/^noremap         <Plug>(AfterAfterObject) <nop>$/;"	m
<Plug>(RepeatDot)	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatDot)      :<C-U>exe repeat#run(v:count)<CR>$/;"	m
<Plug>(RepeatRedo)	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatRedo)     :<C-U>call repeat#wrap("\\<Lt>C-R>",v:count)<CR>$/;"	m
<Plug>(RepeatUndo)	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatUndo)     :<C-U>call repeat#wrap('u',v:count)<CR>$/;"	m
<Plug>(RepeatUndoLine)	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatUndoLine) :<C-U>call repeat#wrap('U',v:count)<CR>$/;"	m
<Plug>(coc-codeaction)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction)            :<C-u>call       CocActionAsync('codeAction',        /;"	m
<Plug>(coc-codeaction)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction)            :<C-u>call       CocActionAsync('codeAction',        /;"	m
<Plug>(coc-codeaction)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-codeaction) :call CocActionAsync('codeAction',     '')$/;"	m
<Plug>(coc-codeaction-selected)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction-selected)   :<C-u>set        operatorfunc=<SID>CodeActionFromSele/;"	m
<Plug>(coc-codeaction-selected)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <Plug>(coc-codeaction-selected)   :<C-u>call       CocActionAsync('codeAction',        /;"	m
<Plug>(coc-codeaction-selected)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction-selected)   :<C-u>set        operatorfunc=<SID>CodeActionFromSele/;"	m
<Plug>(coc-codeaction-selected)	.vim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <Plug>(coc-codeaction-selected)   :<C-u>call       CocActionAsync('codeAction',        /;"	m
<Plug>(coc-codeaction-selected)	.vim/sessions/foo.vim	/^vnoremap <Plug>(coc-codeaction-selected) :call CocActionAsync('codeAction',     visualmode())$/;"	m
<Plug>(coc-codelens-action)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codelens-action)       :<C-u>call       CocActionAsync('codeLensAction')<CR>$/;"	m
<Plug>(coc-codelens-action)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codelens-action)       :<C-u>call       CocActionAsync('codeLensAction')<CR>$/;"	m
<Plug>(coc-codelens-action)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-codelens-action) :call CocActionAsync('codeLensAction')$/;"	m
<Plug>(coc-command-repeat)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-command-repeat)        :<C-u>call       CocAction('repeatCommand')<CR>$/;"	m
<Plug>(coc-command-repeat)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-command-repeat)        :<C-u>call       CocAction('repeatCommand')<CR>$/;"	m
<Plug>(coc-command-repeat)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-command-repeat) :call CocAction('repeatCommand')$/;"	m
<Plug>(coc-declaration)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-declaration)           :<C-u>call       CocAction('jumpDeclaration')<CR>$/;"	m
<Plug>(coc-declaration)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-declaration)           :<C-u>call       CocAction('jumpDeclaration')<CR>$/;"	m
<Plug>(coc-declaration)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-declaration) :call CocAction('jumpDeclaration')$/;"	m
<Plug>(coc-definition)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-definition)            :<C-u>call       CocAction('jumpDefinition')<CR>$/;"	m
<Plug>(coc-definition)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-definition)            :<C-u>call       CocAction('jumpDefinition')<CR>$/;"	m
<Plug>(coc-definition)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-definition) :call CocAction('jumpDefinition')$/;"	m
<Plug>(coc-diagnostic-info)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-info)       :<C-u>call       CocActionAsync('diagnosticInfo')<CR>$/;"	m
<Plug>(coc-diagnostic-info)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-info)       :<C-u>call       CocActionAsync('diagnosticInfo')<CR>$/;"	m
<Plug>(coc-diagnostic-info)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-diagnostic-info) :call CocActionAsync('diagnosticInfo')$/;"	m
<Plug>(coc-diagnostic-next)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-next)       :<C-u>call       CocActionAsync('diagnosticNext')<CR>$/;"	m
<Plug>(coc-diagnostic-next)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-next)       :<C-u>call       CocActionAsync('diagnosticNext')<CR>$/;"	m
<Plug>(coc-diagnostic-next)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-diagnostic-next) :call CocActionAsync('diagnosticNext')$/;"	m
<Plug>(coc-diagnostic-next-error)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-next-error) :<C-u>call       CocActionAsync('diagnosticNext',    /;"	m
<Plug>(coc-diagnostic-next-error)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-next-error) :<C-u>call       CocActionAsync('diagnosticNext',    /;"	m
<Plug>(coc-diagnostic-prev)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-prev)       :<C-u>call       CocActionAsync('diagnosticPrevious')/;"	m
<Plug>(coc-diagnostic-prev)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-prev)       :<C-u>call       CocActionAsync('diagnosticPrevious')/;"	m
<Plug>(coc-diagnostic-prev)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-diagnostic-prev) :call CocActionAsync('diagnosticPrevious')$/;"	m
<Plug>(coc-diagnostic-prev-error)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-prev-error) :<C-u>call       CocActionAsync('diagnosticPrevious',/;"	m
<Plug>(coc-diagnostic-prev-error)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-diagnostic-prev-error) :<C-u>call       CocActionAsync('diagnosticPrevious',/;"	m
<Plug>(coc-fix-current)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-fix-current)           :<C-u>call       CocActionAsync('doQuickfix')<CR>$/;"	m
<Plug>(coc-fix-current)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-fix-current)           :<C-u>call       CocActionAsync('doQuickfix')<CR>$/;"	m
<Plug>(coc-fix-current)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-fix-current) :call CocActionAsync('doQuickfix')$/;"	m
<Plug>(coc-float-hide)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-float-hide)            :<C-u>call       coc#util#float_hide()<CR>$/;"	m
<Plug>(coc-float-hide)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-float-hide)            :<C-u>call       coc#util#float_hide()<CR>$/;"	m
<Plug>(coc-float-hide)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-float-hide) :call coc#util#float_hide()$/;"	m
<Plug>(coc-float-jump)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-float-jump)            :<c-u>call       coc#util#float_jump()<cr>$/;"	m
<Plug>(coc-float-jump)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-float-jump)            :<c-u>call       coc#util#float_jump()<cr>$/;"	m
<Plug>(coc-float-jump)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-float-jump) :call coc#util#float_jump()$/;"	m
<Plug>(coc-format)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-format)                :<C-u>call       CocActionAsync('format')<CR>$/;"	m
<Plug>(coc-format)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-format)                :<C-u>call       CocActionAsync('format')<CR>$/;"	m
<Plug>(coc-format)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-format) :call CocActionAsync('format')$/;"	m
<Plug>(coc-format-selected)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-format-selected)       :<C-u>set        operatorfunc=<SID>FormatFromSelected/;"	m
<Plug>(coc-format-selected)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <Plug>(coc-format-selected)       :<C-u>call       CocActionAsync('formatSelected',    /;"	m
<Plug>(coc-format-selected)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-format-selected)       :<C-u>set        operatorfunc=<SID>FormatFromSelected/;"	m
<Plug>(coc-format-selected)	.vim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <Plug>(coc-format-selected)       :<C-u>call       CocActionAsync('formatSelected',    /;"	m
<Plug>(coc-format-selected)	.vim/sessions/foo.vim	/^vnoremap <Plug>(coc-format-selected) :call CocActionAsync('formatSelected', visualmode())$/;"	m
<Plug>(coc-funcobj-a)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-funcobj-a) :<C-U>call coc#rpc#request('selectFunction', [v:false, '/;"	m
<Plug>(coc-funcobj-a)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-funcobj-a) :<C-U>call coc#rpc#request('selectFunction', [v:false, v/;"	m
<Plug>(coc-funcobj-a)	.vim/plugged/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-funcobj-a) :<C-U>call coc#rpc#request('selectFunction', [v:false, '/;"	m
<Plug>(coc-funcobj-a)	.vim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-funcobj-a) :<C-U>call coc#rpc#request('selectFunction', [v:false, v/;"	m
<Plug>(coc-funcobj-i)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-funcobj-i) :<C-U>call coc#rpc#request('selectFunction', [v:true, ''/;"	m
<Plug>(coc-funcobj-i)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-funcobj-i) :<C-U>call coc#rpc#request('selectFunction', [v:true, vi/;"	m
<Plug>(coc-funcobj-i)	.vim/plugged/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-funcobj-i) :<C-U>call coc#rpc#request('selectFunction', [v:true, ''/;"	m
<Plug>(coc-funcobj-i)	.vim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-funcobj-i) :<C-U>call coc#rpc#request('selectFunction', [v:true, vi/;"	m
<Plug>(coc-implementation)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-implementation)        :<C-u>call       CocAction('jumpImplementation')<CR>$/;"	m
<Plug>(coc-implementation)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-implementation)        :<C-u>call       CocAction('jumpImplementation')<CR>$/;"	m
<Plug>(coc-implementation)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-implementation) :call CocAction('jumpImplementation')$/;"	m
<Plug>(coc-openlink)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-openlink)              :<C-u>call       CocActionAsync('openLink')<CR>$/;"	m
<Plug>(coc-openlink)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-openlink)              :<C-u>call       CocActionAsync('openLink')<CR>$/;"	m
<Plug>(coc-openlink)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-openlink) :call CocActionAsync('openLink')$/;"	m
<Plug>(coc-range-select)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-range-select)          :<C-u>call       CocAction('rangeSelect',     '', v:t/;"	m
<Plug>(coc-range-select)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <Plug>(coc-range-select)          :<C-u>call       CocAction('rangeSelect',     visualm/;"	m
<Plug>(coc-range-select)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-range-select)          :<C-u>call       CocAction('rangeSelect',     '', v:t/;"	m
<Plug>(coc-range-select)	.vim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <Plug>(coc-range-select)          :<C-u>call       CocAction('rangeSelect',     visualm/;"	m
<Plug>(coc-range-select-backword)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <Plug>(coc-range-select-backword) :<C-u>call       CocAction('rangeSelect',     visualm/;"	m
<Plug>(coc-range-select-backword)	.vim/plugged/coc.nvim/plugin/coc.vim	/^vnoremap <Plug>(coc-range-select-backword) :<C-u>call       CocAction('rangeSelect',     visualm/;"	m
<Plug>(coc-references)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-references)            :<C-u>call       CocAction('jumpReferences')<CR>$/;"	m
<Plug>(coc-references)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-references)            :<C-u>call       CocAction('jumpReferences')<CR>$/;"	m
<Plug>(coc-references)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-references) :call CocAction('jumpReferences')$/;"	m
<Plug>(coc-rename)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-rename)                :<C-u>call       CocActionAsync('rename')<CR>$/;"	m
<Plug>(coc-rename)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-rename)                :<C-u>call       CocActionAsync('rename')<CR>$/;"	m
<Plug>(coc-rename)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-rename) :call CocActionAsync('rename')$/;"	m
<Plug>(coc-snippets-expand)	.vim/sessions/foo.vim	/^imap <silent> <expr> <Plug>(coc-snippets-expand) coc#_insert_key('request', 'snippets-expand', 1/;"	m
<Plug>(coc-snippets-expand-jump)	.vim/sessions/foo.vim	/^imap <silent> <expr> <Plug>(coc-snippets-expand-jump) coc#_insert_key('request', 'snippets-expan/;"	m
<Plug>(coc-snippets-select)	.vim/sessions/foo.vim	/^vmap <silent> <Plug>(coc-snippets-select) :call coc#rpc#notify('doKeymap', ['snippets-select'])$/;"	m
<Plug>(coc-type-definition)	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-type-definition)       :<C-u>call       CocAction('jumpTypeDefinition')<CR>$/;"	m
<Plug>(coc-type-definition)	.vim/plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-type-definition)       :<C-u>call       CocAction('jumpTypeDefinition')<CR>$/;"	m
<Plug>(coc-type-definition)	.vim/sessions/foo.vim	/^nnoremap <Plug>(coc-type-definition) :call CocAction('jumpTypeDefinition')$/;"	m
<Plug>(denite_filter_quit)	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^  inoremap <buffer><silent> <Plug>(denite_filter_quit)$/;"	m
<Plug>(denite_filter_quit)	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^  nnoremap <buffer><silent> <Plug>(denite_filter_quit)$/;"	m
<Plug>(denite_filter_quit)	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^  inoremap <buffer><silent> <Plug>(denite_filter_quit)$/;"	m
<Plug>(denite_filter_quit)	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^  nnoremap <buffer><silent> <Plug>(denite_filter_quit)$/;"	m
<Plug>(denite_filter_update)	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^  inoremap <buffer><silent> <Plug>(denite_filter_update)$/;"	m
<Plug>(denite_filter_update)	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^  nnoremap <buffer><silent> <Plug>(denite_filter_update)$/;"	m
<Plug>(denite_filter_update)	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^  inoremap <buffer><silent> <Plug>(denite_filter_update)$/;"	m
<Plug>(denite_filter_update)	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^  nnoremap <buffer><silent> <Plug>(denite_filter_update)$/;"	m
<Plug>(easymotion-activate)	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^noremap  <silent><Plug>(easymotion-activate) :<C-u>call EasyMotion#activate(0)<CR>$/;"	m
<Plug>(easymotion-activate)	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^xnoremap <silent><Plug>(easymotion-activate) :<C-u>call EasyMotion#activate(1)<CR>$/;"	m
<Plug>(easymotion-dotrepeat)	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^noremap  <silent><Plug>(easymotion-dotrepeat)$/;"	m
<Plug>(easymotion-next)	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^noremap  <silent><Plug>(easymotion-next)$/;"	m
<Plug>(easymotion-next)	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^xnoremap <silent><Plug>(easymotion-next)$/;"	m
<Plug>(easymotion-overwin-f)	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^nnoremap <silent> <Plug>(easymotion-overwin-f) :<C-u>call EasyMotion#OverwinF(1)<CR>$/;"	m
<Plug>(easymotion-overwin-f2)	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^nnoremap <silent> <Plug>(easymotion-overwin-f2) :<C-u>call EasyMotion#OverwinF(2)<CR>$/;"	m
<Plug>(easymotion-overwin-line)	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^nnoremap <silent> <Plug>(easymotion-overwin-line) :<C-u>call EasyMotion#overwin#line()<CR>$/;"	m
<Plug>(easymotion-overwin-w)	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^nnoremap <silent> <Plug>(easymotion-overwin-w) :<C-u>call EasyMotion#overwin#w()<CR>$/;"	m
<Plug>(easymotion-prev)	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^noremap  <silent><Plug>(easymotion-prev)$/;"	m
<Plug>(easymotion-prev)	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^xnoremap <silent><Plug>(easymotion-prev)$/;"	m
<Plug>(easymotion-repeat)	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^noremap  <silent><Plug>(easymotion-repeat)$/;"	m
<Plug>(easymotion-repeat)	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^xnoremap <silent><Plug>(easymotion-repeat)$/;"	m
<Plug>(ninja-append)	.config/nvim/plugged/vim-ninja-feet/plugin/ninja-feet.vim	/^nnoremap <silent> <Plug>(ninja-append) :<C-U>set operatorfunc=<SID>ninja_append<CR>g@$/;"	m
<Plug>(ninja-insert)	.config/nvim/plugged/vim-ninja-feet/plugin/ninja-feet.vim	/^nnoremap <silent> <Plug>(ninja-insert) :<C-U>set operatorfunc=<SID>ninja_insert<CR>g@$/;"	m
<Plug>(ninja-left-foot)	.config/nvim/plugged/vim-ninja-feet/plugin/ninja-feet.vim	/^onoremap <silent> <expr> <Plug>(ninja-left-foot)        <SID>map_expr("<SID>", '', '[', v:count1/;"	m
<Plug>(ninja-left-foot-a)	.config/nvim/plugged/vim-ninja-feet/plugin/ninja-feet.vim	/^onoremap <silent> <expr> <Plug>(ninja-left-foot-a)      <SID>map_expr("<SID>", 'a', '[', v:count/;"	m
<Plug>(ninja-left-foot-inner)	.config/nvim/plugged/vim-ninja-feet/plugin/ninja-feet.vim	/^onoremap <silent> <expr> <Plug>(ninja-left-foot-inner)  <SID>map_expr("<SID>", 'i', '[', v:count/;"	m
<Plug>(ninja-right-foot)	.config/nvim/plugged/vim-ninja-feet/plugin/ninja-feet.vim	/^onoremap <silent> <expr> <Plug>(ninja-right-foot)       <SID>map_expr("<SID>", '', ']', v:count1/;"	m
<Plug>(ninja-right-foot-a)	.config/nvim/plugged/vim-ninja-feet/plugin/ninja-feet.vim	/^onoremap <silent> <expr> <Plug>(ninja-right-foot-a)     <SID>map_expr("<SID>", 'a', ']', v:count/;"	m
<Plug>(ninja-right-foot-inner)	.config/nvim/plugged/vim-ninja-feet/plugin/ninja-feet.vim	/^onoremap <silent> <expr> <Plug>(ninja-right-foot-inner) <SID>map_expr("<SID>", 'i', ']', v:count/;"	m
<Plug>(omnisharp_code_actions)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_code_actions) :OmniSharpGetCodeActions<CR>$/;"	m
<Plug>(omnisharp_code_actions)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^xnoremap <buffer> <Plug>(omnisharp_code_actions) :call OmniSharp#GetCodeActions('visual')<CR>$/;"	m
<Plug>(omnisharp_code_format)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_code_format) :OmniSharpCodeFormat<CR>$/;"	m
<Plug>(omnisharp_documentation)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_documentation) :OmniSharpDocumentation<CR>$/;"	m
<Plug>(omnisharp_find_implementations)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_find_implementations) :OmniSharpFindImplementations<CR>$/;"	m
<Plug>(omnisharp_find_members)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_find_members) :OmniSharpFindMembers<CR>$/;"	m
<Plug>(omnisharp_find_symbols)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_find_symbols) :OmniSharpFindSymbol<CR>$/;"	m
<Plug>(omnisharp_find_usages)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_find_usages) :OmniSharpFindUsages<CR>$/;"	m
<Plug>(omnisharp_fix_usings)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_fix_usings) :OmniSharpFixUsings<CR>$/;"	m
<Plug>(omnisharp_global_code_check)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_global_code_check) :OmniSharpGlobalCodeCheck<CR>$/;"	m
<Plug>(omnisharp_go_to_definition)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_go_to_definition) :OmniSharpGotoDefinition<CR>$/;"	m
<Plug>(omnisharp_highlight_types)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_highlight_types) :OmniSharpHighlightTypes<CR>$/;"	m
<Plug>(omnisharp_navigate_down)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_navigate_down) :OmniSharpNavigateDown<CR>$/;"	m
<Plug>(omnisharp_navigate_up)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_navigate_up) :OmniSharpNavigateUp<CR>$/;"	m
<Plug>(omnisharp_open_log)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_open_log) :OmniSharpOpenLog<CR>$/;"	m
<Plug>(omnisharp_preview_definition)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_preview_definition) :OmniSharpPreviewDefinition<CR>$/;"	m
<Plug>(omnisharp_preview_implementation)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_preview_implementation) :OmniSharpPreviewImplementation<CR>$/;"	m
<Plug>(omnisharp_rename)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_rename) :OmniSharpRename<CR>$/;"	m
<Plug>(omnisharp_restart_all_servers)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_restart_all_servers) OmniSharpRestartAllServers<CR>$/;"	m
<Plug>(omnisharp_restart_server)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_restart_server) :OmniSharpRestartServer<CR>$/;"	m
<Plug>(omnisharp_signature_help)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^inoremap <buffer> <Plug>(omnisharp_signature_help) <C-\\><C-o>:OmniSharpSignatureHelp<CR>$/;"	m
<Plug>(omnisharp_signature_help)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_signature_help) :OmniSharpSignatureHelp<CR>$/;"	m
<Plug>(omnisharp_start_server)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_start_server) :OmniSharpStartServer<CR>$/;"	m
<Plug>(omnisharp_stop_all_servers)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_stop_all_servers) :OmniSharpStopAllServers<CR>$/;"	m
<Plug>(omnisharp_stop_server)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_stop_server) :OmniSharpStopServer<CR>$/;"	m
<Plug>(omnisharp_type_lookup)	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^nnoremap <buffer> <Plug>(omnisharp_type_lookup) :OmniSharpTypeLookup<CR>$/;"	m
<Plug>(textobj-datetime-time2)	.config/nvim/plugged/vim-textobj-user/t/map.vim	/^    noremap <buffer> <Plug>(textobj-datetime-time2)  <Nop>$/;"	m
<Plug>(textobj-datetime-time3)	.config/nvim/plugged/vim-textobj-user/t/map.vim	/^    noremap <buffer> <Plug>(textobj-datetime-time3)  <Nop>$/;"	m
<Plug><cfile>	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^  cnoremap <buffer><expr> <Plug><cfile> get(bundler#project().gems(),expand("<cfile>"),"\\022\\0/;"	m
<Plug><cfile>	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  cmap <buffer><script><expr> <Plug><cfile> rails#ruby_cfile()$/;"	m
<Plug><cfile>	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^cmap <buffer><script><expr> <Plug><cfile> substitute(RubyCursorFile(),'^$',"\\022\\006",'')$/;"	m
<Plug><ctag>	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^cmap <buffer><script><expr> <Plug><ctag> substitute(RubyCursorTag(),'^$',"\\022\\027",'')$/;"	m
<Plug>AirlineSelectNextTab	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectNextTab :<C-u>call <SID>jump_to_tab(v:count1)<CR>$/;"	m
<Plug>AirlineSelectNextTab	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectNextTab :<C-U>exe repeat(':tabn\\|', v:count1)<cr>$/;"	m
<Plug>AirlineSelectPrevTab	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    noremap <silent> <Plug>AirlineSelectPrevTab :<C-u>call <SID>jump_to_tab(-v:count1)<CR>$/;"	m
<Plug>AirlineSelectPrevTab	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  noremap <silent> <Plug>AirlineSelectPrevTab gT$/;"	m
<Plug>CSurround	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>$/;"	m
<Plug>CSurround	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>$/;"	m
<Plug>ChangeCommentary	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>ChangeCommentary c:<C-U>call <SID>textobject(1)<CR>$/;"	m
<Plug>CloserClose	.vim/plugged/vim-closer/autoload/closer.vim	/^  imap <script> <Plug>CloserClose <SID>CloserClose$/;"	m
<Plug>CocRefresh	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^inoremap <silent>                          <Plug>CocRefresh <C-r>=coc#_complete()<CR>$/;"	m
<Plug>CocRefresh	.vim/plugged/coc.nvim/plugin/coc.vim	/^inoremap <silent>                          <Plug>CocRefresh <C-r>=coc#_complete()<CR>$/;"	m
<Plug>CocRefresh	.vim/sessions/foo.vim	/^inoremap <silent> <Plug>CocRefresh =coc#_complete()$/;"	m
<Plug>Commentary	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>Commentary     <SID>go()$/;"	m
<Plug>Commentary	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^onoremap <silent> <Plug>Commentary        :<C-U>call <SID>textobject(get(v:, 'operator', '') ==#/;"	m
<Plug>Commentary	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^xnoremap <expr>   <Plug>Commentary     <SID>go()$/;"	m
<Plug>CommentaryLine	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>CommentaryLine <SID>go() . '_'$/;"	m
<Plug>CommentaryUndo	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^nmap <silent> <Plug>CommentaryUndo :echoerr "Change your <Plug>CommentaryUndo map to <Plug>Comme/;"	m
<Plug>Csurround	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>Csurround	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>DsfChange	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^nnoremap <silent> <Plug>DsfChange :call <SID>ChangeSurroundingFunctionCall()<cr>$/;"	m
<Plug>DsfDelete	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^nnoremap <silent> <Plug>DsfDelete :call <SID>DeleteSurroundingFunctionCall()<cr>$/;"	m
<Plug>DsfTextObjectA	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^onoremap <Plug>DsfTextObjectA :<c-u>call <SID>FunctionCallTextObject('a')<cr>$/;"	m
<Plug>DsfTextObjectA	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^xnoremap <Plug>DsfTextObjectA :<c-u>call <SID>FunctionCallTextObject('a')<cr>$/;"	m
<Plug>DsfTextObjectI	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^onoremap <Plug>DsfTextObjectI :<c-u>call <SID>FunctionCallTextObject('i')<cr>$/;"	m
<Plug>DsfTextObjectI	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^xnoremap <Plug>DsfTextObjectI :<c-u>call <SID>FunctionCallTextObject('i')<cr>$/;"	m
<Plug>Dsurround	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>Dsurround	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>ISurround	.vim/plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>Isurround	.vim/plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>NetrwBrowseX	.vim/sessions/foo.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_g/;"	m
<Plug>NetrwBrowseXVis	.vim/sessions/foo.vim	/^vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()$/;"	m
<Plug>SidewaysArgumentTextobjA	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^onoremap <Plug>SidewaysArgumentTextobjA :<c-u>call sideways#textobj#Argument('a')<cr>$/;"	m
<Plug>SidewaysArgumentTextobjA	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^xnoremap <Plug>SidewaysArgumentTextobjA :<c-u>call sideways#textobj#Argument('a')<cr>$/;"	m
<Plug>SidewaysArgumentTextobjI	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^onoremap <Plug>SidewaysArgumentTextobjI :<c-u>call sideways#textobj#Argument('i')<cr>$/;"	m
<Plug>SidewaysArgumentTextobjI	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^xnoremap <Plug>SidewaysArgumentTextobjI :<c-u>call sideways#textobj#Argument('i')<cr>$/;"	m
<Plug>SidewaysLeft	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^nnoremap <silent> <Plug>SidewaysLeft :<c-u>SidewaysLeft<cr>$/;"	m
<Plug>SidewaysRight	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^nnoremap <silent> <Plug>SidewaysRight :<c-u>SidewaysRight<cr>$/;"	m
<Plug>SurroundRepeat	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>SurroundRepeat .$/;"	m
<Plug>SurroundRepeat	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>SurroundRepeat .$/;"	m
<Plug>SurroundRepeat	.vim/sessions/foo.vim	/^nnoremap <silent> <Plug>SurroundRepeat .$/;"	m
<Plug>TagalongReapply	.config/nvim/plugged/tagalong.vim/plugin/tagalong.vim	/^nnoremap <silent> <Plug>TagalongReapply :call tagalong#Reapply()<cr>$/;"	m
<Plug>VSurround	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 /;"	m
<Plug>VSurround	.vim/plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 /;"	m
<Plug>VgSurround	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 /;"	m
<Plug>VgSurround	.vim/plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 /;"	m
<Plug>XTablineCdCurrent	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdCurrent :cd %:p:h<cr>:call airline#util#doaut/;"	m
<Plug>XTablineCdDown1	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown1   :cd %:p:h:h<cr>:call airline#util#doa/;"	m
<Plug>XTablineCdDown2	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown2   :cd %:p:h:h:h<cr>:call airline#util#d/;"	m
<Plug>XTablineCdDown3	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown3   :cd %:p:h:h:h:h<cr>:call airline#util/;"	m
<Plug>XTablineCdHome	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdHome    :cd ~<cr>:call airline#util#doautocmd/;"	m
<Plug>XTablineNextBuffer	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineNextBuffer <SID>NextBuffer$/;"	m
<Plug>XTablinePrevBuffer	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablinePrevBuffer <SID>PrevBuffer$/;"	m
<Plug>XTablineReopen	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineReopen <SID>ReopenLastTab$/;"	m
<Plug>XTablineSelectBuffer	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineSelectBuffer <SID>SelectBuffer$/;"	m
<Plug>XTablineToggleFiltering	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineToggleFiltering <SID>ToggleFiltering$/;"	m
<Plug>XTablineToggleTabs	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineToggleTabs <SID>ToggleTabs$/;"	m
<Plug>YSsurround	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSsurround <SID>opfunc2('setup').'_'$/;"	m
<Plug>YSsurround	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSsurround <SID>opfunc2('setup').'_'$/;"	m
<Plug>YSurround	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSurround  <SID>opfunc2('setup')$/;"	m
<Plug>YSurround	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSurround  <SID>opfunc2('setup')$/;"	m
<Plug>Yssurround	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Yssurround '^'.v:count1.<SID>opfunc('setup').'g_'$/;"	m
<Plug>Yssurround	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Yssurround '^'.v:count1.<SID>opfunc('setup').'g_'$/;"	m
<Plug>Ysurround	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Ysurround  <SID>opfunc('setup')$/;"	m
<Plug>Ysurround	.vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Ysurround  <SID>opfunc('setup')$/;"	m
<RightMouse>	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> <RightMouse>$/;"	m
<SID>	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^nnoremap <SID>  <SID>$/;"	m
<SID>(count)	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^nnoremap <expr> <SID>(count)  <SID>count()$/;"	m
<SID>(register)	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^nnoremap <expr> <SID>(register)  <SID>register()$/;"	m
<SID>(register)	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^vnoremap <expr> <SID>(register)  <SID>register()$/;"	m
<SID>(save-cursor-pos)	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^noremap <expr> <SID>(save-cursor-pos) <SID>save_cursor_pos()$/;"	m
<SID>:	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>:	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nmap <buffer><script> <SID>:  :<C-U>$/;"	m
<SID>CloserClose	.vim/plugged/vim-closer/autoload/closer.vim	/^  inoremap <silent> <SID>CloserClose <C-R>=closer#close()<CR>$/;"	m
<SID>NextBuffer	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>NextBuffer airline#extensions#tabline#xtabline#next_buffer(v:c/;"	m
<SID>PrevBuffer	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>PrevBuffer airline#extensions#tabline#xtabline#prev_buffer(v:c/;"	m
<SID>ReopenLastTab	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ReopenLastTab :XTabReopen<cr>$/;"	m
<SID>SelectBuffer	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>SelectBuffer g:xtabline_changing_buffer ? "\\<C-c>" : ":<C-u>c/;"	m
<SID>ToggleFiltering	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ToggleFiltering :call airline#extensions#tabline#xtabline#toggle_buff/;"	m
<SID>ToggleTabs	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ToggleTabs :call airline#extensions#tabline#xtabline#toggle_tabs()<cr/;"	m
<SID>c:	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nmap <buffer><script> <SID>c: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>tagzv	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  cmap <buffer><script><expr> <SID>tagzv &foldopen =~# 'tag' ? '<Bar>norm! zv' : ''$/;"	m
<SID>xx	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^map <SID>xx <SID>xx$/;"	m
<SNR>37_CloserClose	.vim/sessions/foo.vim	/^inoremap <silent> <SNR>37_CloserClose =closer#close()$/;"	m
<Space>	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr><nowait> <Space> denite#do_map('toggle_select').'j'$/;"	m
<Space>	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> <Space>$/;"	m
<a-space>	.config/nvim/configs/plugins.vim	/^inoremap <silent><expr> <a-space> coc#refresh()$/;"	m
<c-\\>	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^  nnoremap <silent> <c-\\> :TmuxNavigatePrevious<cr>$/;"	m
<c-h>	.config/nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^  snoremap <silent> <c-h> <c-g>c$/;"	m
<c-h>	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    snoremap <silent> <c-h> <c-g>c$/;"	m
<c-h>	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^  nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>$/;"	m
<c-h>	.vim/plugged/coc.nvim/autoload/coc/snippet.vim	/^  snoremap <silent> <c-h> <c-g>c$/;"	m
<c-j>	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^  nnoremap <silent> <c-j> :TmuxNavigateDown<cr>$/;"	m
<c-k>	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^  nnoremap <silent> <c-k> :TmuxNavigateUp<cr>$/;"	m
<c-l>	.config/nvim/configs/keymap.vim	/^nnoremap <c-l> <c-l>:nohl<cr>$/;"	m
<c-l>	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^  nnoremap <silent> <c-l> :TmuxNavigateRight<cr>$/;"	m
<c-r>	.config/nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^  snoremap <c-r> <c-g>"_c<c-r>$/;"	m
<c-r>	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    snoremap <c-r> <c-g>"_c<c-r>$/;"	m
<c-r>	.vim/plugged/coc.nvim/autoload/coc/snippet.vim	/^  snoremap <c-r> <c-g>"_c<c-r>$/;"	m
<c-w><c-h>	.config/nvim/configs/plugins.vim	/^nnoremap <silent> <c-w><c-h> :TmuxNavigateLeft<cr>$/;"	m
<c-w><c-j>	.config/nvim/configs/plugins.vim	/^nnoremap <silent> <c-w><c-j> :TmuxNavigateDown<cr>$/;"	m
<c-w><c-k>	.config/nvim/configs/plugins.vim	/^nnoremap <silent> <c-w><c-k> :TmuxNavigateUp<cr>$/;"	m
<c-w><c-l>	.config/nvim/configs/plugins.vim	/^nnoremap <silent> <c-w><c-l> :TmuxNavigateRight<cr>$/;"	m
<cr>	.config/nvim/autoload/plug.vim	/^      nmap <buffer> <cr> <plug>(plug-preview)$/;"	m
<cr>	.config/nvim/configs/plugins.vim	/^  inoremap <silent><buffer><expr> <cr>   denite#do_map('do_action')$/;"	m
<cr>	.vim/autoload/plug.vim	/^      nmap <buffer> <cr> <plug>(plug-preview)$/;"	m
<esc>	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^  nnoremap <silent><nowait><buffer> <esc> <C-w>c$/;"	m
<esc>	.config/nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^  nnoremap <buffer> <silent> <esc> :call coc#rpc#request('snippetCancel', [])<cr>$/;"	m
<esc>	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^  nnoremap <silent><nowait><buffer> <esc> <C-w>c$/;"	m
<esc>	.vim/plugged/coc.nvim/autoload/coc/snippet.vim	/^  nnoremap <buffer> <silent> <esc> :call coc#rpc#request('snippetCancel', [])<cr>$/;"	m
<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![travis-ci](https://travis-ci.org/junegunn/fzf.svg?branch=master)](https://travis-ci.org/junegunn/fzf)	.vim/plugged/fzf/README.md	/^<img src="https:\/\/raw.githubusercontent.com\/junegunn\/i\/master\/fzf.png" height="170" alt="f/;"	c
<leader>a	.config/nvim/configs/plugins.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>a	.config/nvim/configs/plugins.vim	/^xmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	.config/nvim/configs/plugins.vim	/^nmap <silent><leader>ac <Plug>(coc-codeaction)$/;"	m
<leader>cd	.config/nvim/configs/keymap.vim	/^map <leader>cd :lcd %:p:h<cr>:pwd<cr>$/;"	m
<leader>cd2	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cd2 <Plug>XTablineCdDown2$/;"	m
<leader>cd3	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cd3 <Plug>XTablineCdDown3$/;"	m
<leader>cdc	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdc <Plug>XTablineCdCurrent$/;"	m
<leader>cdd	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdd <Plug>XTablineCdDown1$/;"	m
<leader>cdh	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdh <Plug>XTablineCdHome$/;"	m
<leader>df	.config/nvim/configs/plugins.vim	/^nnoremap <silent><leader>df :Denite file\/rec <cr>$/;"	m
<leader>dg	.config/nvim/configs/plugins.vim	/^nnoremap <silent><leader>dg :<C-u>DeniteProjectDir grep -buffer-name=search -no-empty <CR>$/;"	m
<leader>do	.config/nvim/configs/plugins.vim	/^nnoremap <silent><leader>do :<C-u>Denite file\/old -default-action=switch <CR>$/;"	m
<leader>dp	.config/nvim/configs/plugins.vim	/^nnoremap <silent><leader>dp :<c-u>DeniteProjectDir file\/rec <cr>$/;"	m
<leader>e	.config/nvim/configs/keymap.vim	/^nnoremap <leader>e :vsp $MYVIMRC<CR>$/;"	m
<leader>f	.config/nvim/configs/plugins.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>f	.config/nvim/configs/plugins.vim	/^xmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>qf	.config/nvim/configs/plugins.vim	/^nmap <silent><leader>qf <Plug>(coc-fix-current)$/;"	m
<leader>r	.config/nvim/configs/plugins.vim	/^nmap <leader>r <Plug>(coc-rename)$/;"	m
<leader>tv	.config/nvim/configs/plugins.vim	/^nnoremap <silent> <leader>tv :Defx -split=vertical -winwidth=35 -direction=topleft -columns=file/;"	m
<localleader>e	.config/nvim/configs/plugins.vim	/^nnoremap <silent> <localleader>e :Defx -split=vertical -winwidth=35 -direction=topleft -columns=/;"	m
<localleader>f	.config/nvim/configs/plugins.vim	/^nmap <localleader>f <Plug>(easymotion-bd-f)$/;"	m
<localleader>g	.config/nvim/configs/plugins.vim	/^nmap <localleader>g <Plug>(easymotion-bd-jk)$/;"	m
<localleader>g	.config/nvim/configs/plugins.vim	/^nmap <localleader>g <Plug>(easymotion-overwin-line)$/;"	m
<localleader>j	.config/nvim/configs/plugins.vim	/^nmap <localleader>j <Plug>(easymotion-j)$/;"	m
<localleader>k	.config/nvim/configs/plugins.vim	/^nmap <localleader>k <Plug>(easymotion-k)$/;"	m
<localleader>s	.config/nvim/configs/plugins.vim	/^nmap <localleader>s <Plug>(easymotion-overwin-f2)$/;"	m
<localleader>v	.config/nvim/configs/keymap.vim	/^nnoremap <localleader>v :source $MYVIMRC<CR>$/;"	m
<localleader>w	.config/nvim/configs/plugins.vim	/^nmap <localleader>w <Plug>(easymotion-bd-w)$/;"	m
<localleader>w	.config/nvim/configs/plugins.vim	/^nmap <localleader>w <Plug>(easymotion-overwin-w)$/;"	m
<m-space>	.config/nvim/configs/plugins.vim	/^inoremap <silent><expr> <m-space> coc#refresh()$/;"	m
<plug>(-fzf-/)	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-\/) \/$/;"	m
<plug>(-fzf-:)	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-:) :$/;"	m
<plug>(-fzf-vim-do)	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
<plug>(fzf-complete-buffer-line)	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-complete-file)	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-file)	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir \/s\/b\/a:-d')$/;"	m
<plug>(fzf-complete-file-ag)	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')$/;"	m
<plug>(fzf-complete-line)	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-path)	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-path)	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir \/s\/b')$/;"	m
<plug>(fzf-complete-word)	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-maps-i)	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-n)	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
<plug>(fzf-maps-x)	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^xnoremap <silent> <plug>(fzf-maps-x) :<c-u>call fzf#vim#maps('x', 0)<cr>$/;"	m
<plug>(goyo-resize)	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^nnoremap <silent> <plug>(goyo-resize) :<c-u>call <sid>resize_pads()<cr>$/;"	m
<plug>(plug-preview)	.config/nvim/autoload/plug.vim	/^    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>$/;"	m
<plug>(plug-preview)	.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>$/;"	m
<return>	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^        nnoremap <silent> <buffer> <return> :call leetcode#GoToProblem()<cr>$/;"	m
<return>	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^        nnoremap <silent> <buffer> <return> :call leetcode#ViewSubmission()<cr>$/;"	m
<s-return>	.config/nvim/configs/keymap.vim	/^inoremap <s-return> <c-o>o$/;"	m
=	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^          ln = buf[x]$/;"	m
=	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^      ln = buf[x]$/;"	m
=	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^      nm = "%s(::.*)*\\", %s, \\"" % [ name, nums.last ]$/;"	m
@(targets)	.config/nvim/plugged/targets.vim/plugin/targets.vim	/^        onoremap <silent> @(targets) :<C-U>call targets#do()<CR>$/;"	m
@(targets)	.config/nvim/plugged/targets.vim/plugin/targets.vim	/^        xnoremap <silent> @(targets) :<C-U>call targets#do()<CR>$/;"	m
@chemzqm/neovim	.config/nvim/plugged/coc.nvim/package.json	/^    "@chemzqm\/neovim": "5.1.7",$/;"	s	object:dependencies
@chemzqm/neovim	.vim/plugged/coc.nvim/package.json	/^    "@chemzqm\/neovim": "5.1.7",$/;"	s	object:dependencies
@chemzqm/tslint-config	.config/nvim/plugged/coc.nvim/package.json	/^    "@chemzqm\/tslint-config": "^1.0.18",$/;"	s	object:devDependencies
@chemzqm/tslint-config	.vim/plugged/coc.nvim/package.json	/^    "@chemzqm\/tslint-config": "^1.0.18",$/;"	s	object:devDependencies
@types/debounce	.config/nvim/plugged/coc.nvim/package.json	/^    "@types\/debounce": "^3.0.0",$/;"	s	object:devDependencies
@types/debounce	.vim/plugged/coc.nvim/package.json	/^    "@types\/debounce": "^3.0.0",$/;"	s	object:devDependencies
@types/fb-watchman	.config/nvim/plugged/coc.nvim/package.json	/^    "@types\/fb-watchman": "^2.0.0",$/;"	s	object:devDependencies
@types/fb-watchman	.vim/plugged/coc.nvim/package.json	/^    "@types\/fb-watchman": "^2.0.0",$/;"	s	object:devDependencies
@types/glob	.config/nvim/plugged/coc.nvim/package.json	/^    "@types\/glob": "^7.1.1",$/;"	s	object:devDependencies
@types/glob	.vim/plugged/coc.nvim/package.json	/^    "@types\/glob": "^7.1.1",$/;"	s	object:devDependencies
@types/jest	.config/nvim/plugged/coc.nvim/package.json	/^    "@types\/jest": "^24.0.15",$/;"	s	object:devDependencies
@types/jest	.vim/plugged/coc.nvim/package.json	/^    "@types\/jest": "^24.0.15",$/;"	s	object:devDependencies
@types/minimatch	.config/nvim/plugged/coc.nvim/package.json	/^    "@types\/minimatch": "^3.0.3",$/;"	s	object:devDependencies
@types/minimatch	.vim/plugged/coc.nvim/package.json	/^    "@types\/minimatch": "^3.0.3",$/;"	s	object:devDependencies
@types/node	.config/nvim/plugged/coc.nvim/package.json	/^    "@types\/node": "^12.0.8",$/;"	s	object:devDependencies
@types/node	.vim/plugged/coc.nvim/package.json	/^    "@types\/node": "^12.0.8",$/;"	s	object:devDependencies
@types/semver	.config/nvim/plugged/coc.nvim/package.json	/^    "@types\/semver": "^6.0.1",$/;"	s	object:devDependencies
@types/semver	.vim/plugged/coc.nvim/package.json	/^    "@types\/semver": "^6.0.1",$/;"	s	object:devDependencies
@types/uuid	.config/nvim/plugged/coc.nvim/package.json	/^    "@types\/uuid": "^3.4.4",$/;"	s	object:devDependencies
@types/uuid	.vim/plugged/coc.nvim/package.json	/^    "@types\/uuid": "^3.4.4",$/;"	s	object:devDependencies
@types/which	.config/nvim/plugged/coc.nvim/package.json	/^    "@types\/which": "^1.3.1",$/;"	s	object:devDependencies
@types/which	.vim/plugged/coc.nvim/package.json	/^    "@types\/which": "^1.3.1",$/;"	s	object:devDependencies
A	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_alternate A   exe s:Al/;"	c
A	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  A = 65,$/;"	e	enum:CharCode
A Pair	.config/nvim/plugged/targets.vim/README.md	/^#### A Pair$/;"	t
A Quote	.config/nvim/plugged/targets.vim/README.md	/^#### A Quote$/;"	t
A Separator	.config/nvim/plugged/targets.vim/README.md	/^#### A Separator$/;"	t
ACTION_FUNC	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^ACTION_FUNC = typing.Callable[[View, Defx, Context], None]$/;"	v
ACTION_FUNC	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^ACTION_FUNC = typing.Callable[[View, Defx, Context], None]$/;"	v
AD	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_edit      AD  exe s:Al/;"	c
ADJACENCY_BONUS	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^ADJACENCY_BONUS = 5$/;"	v
ADJACENCY_BONUS	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^ADJACENCY_BONUS = 5$/;"	v
AE	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_alternate AE  exe s:Al/;"	c
ALWAYS	.config/nvim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^ALWAYS = 'always'$/;"	v
ALWAYS	.vim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^ALWAYS = 'always'$/;"	v
API	.vim/plugged/coc.nvim/src/extensions.ts	/^        return exports as API$/;"	v
API	.vim/plugged/coc.nvim/src/extensions.ts	/^export type API = { [index: string]: any } | void | null | undefined$/;"	a
API	.vim/plugged/vim-hug-neovim-rpc/README.md	/^## API$/;"	s
API_INFO	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server_api_info.py	/^API_INFO = {$/;"	v
AR	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_edit      AR  exe s:Al/;"	c
ARR_D	.config/nvim/plugged/ultisnips/test/constant.py	/^ARR_D = '\\x1bOB'$/;"	v
ARR_L	.config/nvim/plugged/ultisnips/test/constant.py	/^ARR_L = '\\x1bOD'$/;"	v
ARR_R	.config/nvim/plugged/ultisnips/test/constant.py	/^ARR_R = '\\x1bOC'$/;"	v
ARR_U	.config/nvim/plugged/ultisnips/test/constant.py	/^ARR_U = '\\x1bOA'$/;"	v
AS	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_alternate AS  exe s:Al/;"	c
ASyncParent	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^class ASyncParent(_Parent):$/;"	c
ASyncParent	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^class ASyncParent(_Parent):$/;"	c
AT	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_alternate AT  exe s:Al/;"	c
AUTHOR	.config/nvim/plugged/vim-css3-syntax/README.md	/^AUTHOR$/;"	s
AUTHOR	.vim/plugged/fzf/man/man1/fzf.1	/^.SH AUTHOR$/;"	s	title:fzf
AV	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_alternate AV  exe s:Al/;"	c
About	.config/nvim/plugged/defx.nvim/README.md	/^## About$/;"	s
About	.config/nvim/plugged/denite.nvim/README.md	/^## About$/;"	s
About	.vim/plugged/denite.nvim/README.md	/^## About$/;"	s
About the authors	.config/nvim/plugged/vim-easymotion/README.md	/^About the authors$/;"	c
ActionAttr	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/action.py	/^class ActionAttr(IntFlag):$/;"	c
ActionOptions	.vim/plugged/coc.nvim/src/list/basic.ts	/^interface ActionOptions {$/;"	i
ActionTable	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/action.py	/^class ActionTable(typing.NamedTuple):$/;"	c
ActionsList	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^export default class ActionsList extends BasicList {$/;"	c
Activating the tox virtual environments	.vim/plugged/omnisharp-vim/python/README.md	/^## Activating the tox virtual environments$/;"	s
Add	.vim/plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Add(chunk *Chunk, key string, list []Result) {$/;"	f	struct:fzf.ChunkCache
Add a snippet	.config/nvim/plugged/vim-tmux-navigator/README.md	/^#### Add a snippet$/;"	t
AddFunc_Opt	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^class AddFunc_Opt(_AddFuncBase):$/;"	c
AddFunc_Simple	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^class AddFunc_Simple(_AddFuncBase):$/;"	c
AddLine	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^function! AddLine(str)$/;"	f
AddLine	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^function! AddLine(str)$/;"	f
AddLine	.config/nvim/plugged/vim-easymotion/t/operator_pending_spec.vim	/^function! AddLine(str)$/;"	f
AddLine	.config/nvim/plugged/vim-easymotion/t/smartsign_spec.vim	/^function! AddLine(str)$/;"	f
AddNewSnippetSource	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^class AddNewSnippetSource(_VimTest):$/;"	c
AddTabularPattern	.config/nvim/plugged/tabular/plugin/Tabular.vim	/^com! -nargs=+ -bang AddTabularPattern$/;"	c
AddTabularPattern	.config/nvim/plugged/tabular/plugin/Tabular.vim	/^function! AddTabularPattern(command, force)$/;"	f
AddTabularPipeline	.config/nvim/plugged/tabular/plugin/Tabular.vim	/^com! -nargs=+ -bang AddTabularPipeline$/;"	c
AddTabularPipeline	.config/nvim/plugged/tabular/plugin/Tabular.vim	/^function! AddTabularPipeline(command, force)$/;"	f
Added `--ansi` option (#150)	.vim/plugged/fzf/CHANGELOG.md	/^#### Added `--ansi` option (#150)$/;"	t
Added `--expect` option (#163)	.vim/plugged/fzf/CHANGELOG.md	/^#### Added `--expect` option (#163)$/;"	t
Added `--tac` option to reverse the order of the input.	.vim/plugged/fzf/CHANGELOG.md	/^#### Added `--tac` option to reverse the order of the input.$/;"	t
AddedSnippetsSource	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/added.py	/^class AddedSnippetsSource(SnippetSource):$/;"	c
Additional Customization	.config/nvim/plugged/vim-tmux-navigator/README.md	/^### Additional Customization$/;"	S
Advanced Configurations	.config/nvim/plugged/comfortable-motion.vim/README.md	/^## Advanced Configurations$/;"	s
Advanced customization	.config/nvim/plugged/fzf.vim/README.md	/^#### Advanced customization$/;"	t
Advanced topics	.vim/plugged/fzf/README.md	/^Advanced topics$/;"	s
Advanced usage	.config/nvim/plugged/switch.vim/README.md	/^## Advanced usage$/;"	s
Air Resistance Only	.config/nvim/plugged/comfortable-motion.vim/README.md	/^### Air Resistance Only$/;"	S
Airline theme	.config/nvim/plugged/gruvbox/README.md	/^### Airline theme$/;"	S
AirlineExtensions	.vim/plugged/vim-airline/plugin/airline.vim	/^command! AirlineExtensions   call s:airline_extensions()$/;"	c
AirlineRefresh	.vim/plugged/vim-airline/plugin/airline.vim	/^command! -bar -bang AirlineRefresh call s:airline_refresh(<q-bang>)$/;"	c
AirlineTheme	.vim/plugged/vim-airline/plugin/airline.vim	/^command! -bar -nargs=? -complete=customlist,<sid>get_airline_themes AirlineTheme call <sid>airli/;"	c
AirlineToggle	.vim/plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineToggle  call s:airline_toggle()$/;"	c
AirlineToggleWhitespace	.vim/plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineToggleWhitespace call airline#extensions#whitespace#toggle()$/;"	c
Algo	.vim/plugged/fzf/src/algo/algo.go	/^type Algo func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []ru/;"	t	package:algo	typeref:typename:func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int)
Aliases for snippets	.config/nvim/plugged/ultisnips/doc/examples/snippets-aliasing/README.md	/^# Aliases for snippets$/;"	c
AllEvents	.vim/plugged/coc.nvim/src/events.ts	/^export type AllEvents = BufEvents | EmptyEvents | MoveEvents | TaskEvents |$/;"	a
Alt0	.vim/plugged/fzf/src/tui/tui.go	/^	Alt0$/;"	c	package:tui
AltA	.vim/plugged/fzf/src/tui/tui.go	/^	AltA = Alt0 + 'a' - '0' + iota$/;"	c	package:tui
AltB	.vim/plugged/fzf/src/tui/tui.go	/^	AltB$/;"	c	package:tui
AltBS	.vim/plugged/fzf/src/tui/tui.go	/^	AltBS$/;"	c	package:tui
AltC	.vim/plugged/fzf/src/tui/tui.go	/^	AltC$/;"	c	package:tui
AltD	.vim/plugged/fzf/src/tui/tui.go	/^	AltD$/;"	c	package:tui
AltDown	.vim/plugged/fzf/src/tui/tui.go	/^	AltDown$/;"	c	package:tui
AltE	.vim/plugged/fzf/src/tui/tui.go	/^	AltE$/;"	c	package:tui
AltF	.vim/plugged/fzf/src/tui/tui.go	/^	AltF$/;"	c	package:tui
AltLeft	.vim/plugged/fzf/src/tui/tui.go	/^	AltLeft$/;"	c	package:tui
AltRight	.vim/plugged/fzf/src/tui/tui.go	/^	AltRight$/;"	c	package:tui
AltSlash	.vim/plugged/fzf/src/tui/tui.go	/^	AltSlash$/;"	c	package:tui
AltSpace	.vim/plugged/fzf/src/tui/tui.go	/^	AltSpace$/;"	c	package:tui
AltUp	.vim/plugged/fzf/src/tui/tui.go	/^	AltUp$/;"	c	package:tui
AltZ	.vim/plugged/fzf/src/tui/tui.go	/^	AltZ     = AltA + 'z' - 'a'$/;"	c	package:tui
Alternate files	.config/nvim/plugged/vim-projectionist/README.markdown	/^### Alternate files$/;"	S
Alternatives	.config/nvim/plugged/tagalong.vim/README.md	/^## Alternatives$/;"	s
Ampersand	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Ampersand = 38,$/;"	e	enum:CharCode
An Argument	.config/nvim/plugged/targets.vim/README.md	/^#### An Argument$/;"	t
Anon_NoTrigger_AfterSpace	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_NoTrigger_AfterSpace(_AnonBase):$/;"	c
Anon_NoTrigger_BeginningOfLine	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_NoTrigger_BeginningOfLine(_AnonBase):$/;"	c
Anon_NoTrigger_FirstCharOfLine	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_NoTrigger_FirstCharOfLine(_AnonBase):$/;"	c
Anon_NoTrigger_Multi	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_NoTrigger_Multi(_AnonBase):$/;"	c
Anon_NoTrigger_Simple	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_NoTrigger_Simple(_AnonBase):$/;"	c
Anon_Trigger_Multi	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_Trigger_Multi(_AnonBase):$/;"	c
Anon_Trigger_Opts	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_Trigger_Opts(_AnonBase):$/;"	c
Anon_Trigger_Simple	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_Trigger_Simple(_AnonBase):$/;"	c
Anon_Trigger_Twice	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_Trigger_Twice(_AnonBase):$/;"	c
AnonymousFunction4182703b0100	.vim/plugged/coc.nvim/bin/server.js	/^process.on('uncaughtException', function (err) {$/;"	f
AnonymousFunction4182703b0200	.vim/plugged/coc.nvim/bin/server.js	/^process.on('unhandledRejection', function (reason, p) {$/;"	f
AnonymousFunction726207320100	.vim/plugged/coc.nvim/jest.js	/^process.on('uncaughtException', function(err) {$/;"	f
AnonymousFunction7481bb130100	.vim/plugged/coc.nvim/build/index.js	/^\/******\/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__./;"	f	function:__webpack_require__.t
AnonymousFunctionb9f04bae0100	.config/nvim/plugged/coc.nvim/bin/server.js	/^process.on('uncaughtException', function (err) {$/;"	f
AnonymousFunctionb9f04bae0200	.config/nvim/plugged/coc.nvim/bin/server.js	/^process.on('unhandledRejection', function (reason, p) {$/;"	f
AnonymousFunctiond47633f80100	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.each(function(i){$/;"	f
AnonymousFunctiond47633f80200	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		jQuery.each( text || this, function(){$/;"	f
AnonymousFunctiond47633f80300	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			jQuery.each( this.childNodes, function(){$/;"	f
AnonymousFunctiond47633f80400	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				.map(function(){$/;"	f
AnonymousFunctiond47633f80500	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.each(function(){$/;"	f
AnonymousFunctiond47633f80600	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.each(function(){$/;"	f
AnonymousFunctiond47633f80700	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.domManip(arguments, true, false, function(elem){$/;"	f
AnonymousFunctiond47633f80800	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.domManip(arguments, true, true, function(elem){$/;"	f
AnonymousFunctiond47633f80900	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.domManip(arguments, false, false, function(elem){$/;"	c
AnonymousFunctiond47633f80a00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.domManip(arguments, false, true, function(elem){$/;"	c
AnonymousFunctiond47633f80b00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var elems = jQuery.map(this, function(elem){$/;"	f
AnonymousFunctiond47633f80c00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = this.map(function(){$/;"	f
AnonymousFunctiond47633f80d00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var clone = ret.find("*").andSelf().each(function(){$/;"	f
AnonymousFunctiond47633f80e00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			this.find("*").andSelf().each(function(i){$/;"	f
AnonymousFunctiond47633f80f00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			jQuery.grep(this, function(elem, i){$/;"	f
AnonymousFunctiond47633f81000	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.filter(function() {$/;"	f
AnonymousFunctiond47633f81100	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.each(function(){$/;"	f
AnonymousFunctiond47633f81200	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				jQuery( "option", this ).each(function(){$/;"	c
AnonymousFunctiond47633f81300	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.pushStack( jQuery.map(this, function(elem, i){$/;"	f
AnonymousFunctiond47633f81400	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			return this.trigger("setData" + parts[1] + "!", [parts[0], value]).each(function(){$/;"	f
AnonymousFunctiond47633f81500	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.each(function(){$/;"	f
AnonymousFunctiond47633f81600	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.each(function(){$/;"	f
AnonymousFunctiond47633f81700	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			jQuery.each(elems, function(){$/;"	f
AnonymousFunctiond47633f81800	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	noConflict: function( deep ) {$/;"	f
AnonymousFunctiond47633f81900	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	isFunction: function( fn ) {$/;"	f
AnonymousFunctiond47633f81a00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	isXMLDoc: function( elem ) {$/;"	f
AnonymousFunctiond47633f81b00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	globalEval: function( data ) {$/;"	f
AnonymousFunctiond47633f81c00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	nodeName: function( elem, name ) {$/;"	f
AnonymousFunctiond47633f81d00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	data: function( elem, name, data ) {$/;"	f
AnonymousFunctiond47633f81e00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	removeData: function( elem, name ) {$/;"	f
AnonymousFunctiond47633f81f00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	each: function( object, callback, args ) {$/;"	f
AnonymousFunctiond47633f82000	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	prop: function( elem, value, type, i, name ) {$/;"	f
AnonymousFunctiond47633f82100	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		add: function( elem, classNames ) {$/;"	f
AnonymousFunctiond47633f82200	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			jQuery.each((classNames || "").split(\/\\s+\/), function(i, className){$/;"	f
AnonymousFunctiond47633f82300	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		remove: function( elem, classNames ) {$/;"	f
AnonymousFunctiond47633f82400	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					jQuery.grep(elem.className.split(\/\\s+\/), function(className){$/;"	f	function:AnonymousFunctiond47633f82300
AnonymousFunctiond47633f82500	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		has: function( elem, className ) {$/;"	f
AnonymousFunctiond47633f82600	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	swap: function( elem, options, callback ) {$/;"	f
AnonymousFunctiond47633f82700	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	css: function( elem, name, force ) {$/;"	f
AnonymousFunctiond47633f82800	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				jQuery.each( which, function() {$/;"	f
AnonymousFunctiond47633f82900	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	curCSS: function( elem, name, force ) {$/;"	f
AnonymousFunctiond47633f82a00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var camelCase = name.replace(\/\\-(\\w)\/g, function(all, letter){$/;"	f	function:AnonymousFunctiond47633f82900
AnonymousFunctiond47633f82b00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	clean: function( elems, context ) {$/;"	f
AnonymousFunctiond47633f82c00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		jQuery.each(elems, function(i, elem){$/;"	f
AnonymousFunctiond47633f82d00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				elem = elem.replace(\/(<(\\w+)[^>]*?)\\\/>\/g, function(all, front, tag){$/;"	f	function:AnonymousFunctiond47633f82c00
AnonymousFunctiond47633f82e00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	attr: function( elem, name, value ) {$/;"	f
AnonymousFunctiond47633f82f00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		name = name.replace(\/-([a-z])\/ig, function(all, letter){$/;"	f	function:AnonymousFunctiond47633f82e00
AnonymousFunctiond47633f83000	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	trim: function( text ) {$/;"	f
AnonymousFunctiond47633f83100	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	makeArray: function( array ) {$/;"	f
AnonymousFunctiond47633f83200	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	inArray: function( elem, array ) {$/;"	f
AnonymousFunctiond47633f83300	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	merge: function( first, second ) {$/;"	f
AnonymousFunctiond47633f83400	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	unique: function( array ) {$/;"	f
AnonymousFunctiond47633f83500	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	grep: function( elems, callback, inv ) {$/;"	f
AnonymousFunctiond47633f83600	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	map: function( elems, callback ) {$/;"	f
AnonymousFunctiond47633f83700	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	parent: function(elem){return elem.parentNode;},$/;"	f
AnonymousFunctiond47633f83800	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	parents: function(elem){return jQuery.dir(elem,"parentNode");},$/;"	f
AnonymousFunctiond47633f83900	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	next: function(elem){return jQuery.nth(elem,2,"nextSibling");},$/;"	f
AnonymousFunctiond47633f83a00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	prev: function(elem){return jQuery.nth(elem,2,"previousSibling");},$/;"	f
AnonymousFunctiond47633f83b00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	nextAll: function(elem){return jQuery.dir(elem,"nextSibling");},$/;"	f
AnonymousFunctiond47633f83c00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	prevAll: function(elem){return jQuery.dir(elem,"previousSibling");},$/;"	f
AnonymousFunctiond47633f83d00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	siblings: function(elem){return jQuery.sibling(elem.parentNode.firstChild,elem);},$/;"	f
AnonymousFunctiond47633f83e00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	children: function(elem){return jQuery.sibling(elem.firstChild);},$/;"	f
AnonymousFunctiond47633f83f00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	contents: function(elem){return jQuery.nodeName(elem,"iframe")?elem.contentDocument||elem.conte/;"	f
AnonymousFunctiond47633f84000	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^}, function(name, fn){$/;"	f
AnonymousFunctiond47633f84100	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^}, function(name, original){$/;"	f
AnonymousFunctiond47633f84200	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.each(function(){$/;"	f	function:jQuery.fn
AnonymousFunctiond47633f84300	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	removeAttr: function( name ) {$/;"	f
AnonymousFunctiond47633f84400	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	addClass: function( classNames ) {$/;"	f
AnonymousFunctiond47633f84500	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	removeClass: function( classNames ) {$/;"	f
AnonymousFunctiond47633f84600	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	toggleClass: function( classNames ) {$/;"	f
AnonymousFunctiond47633f84700	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	remove: function( selector ) {$/;"	f
AnonymousFunctiond47633f84800	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			jQuery( "*", this ).add(this).each(function(){$/;"	f
AnonymousFunctiond47633f84900	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	empty: function() {$/;"	f
AnonymousFunctiond47633f84a00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^}, function(name, fn){$/;"	f
AnonymousFunctiond47633f84b00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.each([ "Height", "Width" ], function(i, name){$/;"	f
AnonymousFunctiond47633f84c00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		"": function(a,i,m){return m[2]=="*"||jQuery.nodeName(a,m[2]);},$/;"	f
AnonymousFunctiond47633f84d00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		"#": function(a,i,m){return a.getAttribute("id")==m[2];},$/;"	f
AnonymousFunctiond47633f84e00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			lt: function(a,i,m){return i<m[3]-0;},$/;"	f
AnonymousFunctiond47633f84f00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			gt: function(a,i,m){return i>m[3]-0;},$/;"	f
AnonymousFunctiond47633f85000	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			nth: function(a,i,m){return m[3]-0==i;},$/;"	f
AnonymousFunctiond47633f85100	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			eq: function(a,i,m){return m[3]-0==i;},$/;"	f
AnonymousFunctiond47633f85200	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			first: function(a,i){return i==0;},$/;"	f
AnonymousFunctiond47633f85300	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			last: function(a,i,m,r){return i==r.length-1;},$/;"	f
AnonymousFunctiond47633f85400	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			even: function(a,i){return i%2==0;},$/;"	f
AnonymousFunctiond47633f85500	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			odd: function(a,i){return i%2;},$/;"	f
AnonymousFunctiond47633f85600	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			"first-child": function(a){return a.parentNode.getElementsByTagName("*")[0]==a;},$/;"	f
AnonymousFunctiond47633f85700	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			"last-child": function(a){return jQuery.nth(a.parentNode.lastChild,1,"previousSibling")==a;},$/;"	f
AnonymousFunctiond47633f85800	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			"only-child": function(a){return !jQuery.nth(a.parentNode.lastChild,2,"previousSibling");},$/;"	f
AnonymousFunctiond47633f85900	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			parent: function(a){return a.firstChild;},$/;"	f
AnonymousFunctiond47633f85a00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			empty: function(a){return !a.firstChild;},$/;"	f
AnonymousFunctiond47633f85b00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			contains: function(a,i,m){return (a.textContent||a.innerText||jQuery(a).text()||"").indexOf(m/;"	f
AnonymousFunctiond47633f85c00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			visible: function(a){return "hidden"!=a.type&&jQuery.css(a,"display")!="none"&&jQuery.css(a,"/;"	f
AnonymousFunctiond47633f85d00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			hidden: function(a){return "hidden"==a.type||jQuery.css(a,"display")=="none"||jQuery.css(a,"v/;"	f
AnonymousFunctiond47633f85e00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			enabled: function(a){return !a.disabled;},$/;"	f
AnonymousFunctiond47633f85f00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			disabled: function(a){return a.disabled;},$/;"	f
AnonymousFunctiond47633f86000	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			checked: function(a){return a.checked;},$/;"	f
AnonymousFunctiond47633f86100	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			selected: function(a){return a.selected||jQuery.attr(a,"selected");},$/;"	f
AnonymousFunctiond47633f86200	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			text: function(a){return "text"==a.type;},$/;"	f
AnonymousFunctiond47633f86300	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			radio: function(a){return "radio"==a.type;},$/;"	f
AnonymousFunctiond47633f86400	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			checkbox: function(a){return "checkbox"==a.type;},$/;"	f
AnonymousFunctiond47633f86500	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			file: function(a){return "file"==a.type;},$/;"	f
AnonymousFunctiond47633f86600	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			password: function(a){return "password"==a.type;},$/;"	f
AnonymousFunctiond47633f86700	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			submit: function(a){return "submit"==a.type;},$/;"	f
AnonymousFunctiond47633f86800	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			image: function(a){return "image"==a.type;},$/;"	f
AnonymousFunctiond47633f86900	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			reset: function(a){return "reset"==a.type;},$/;"	f
AnonymousFunctiond47633f86a00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			button: function(a){return "button"==a.type||jQuery.nodeName(a,"button");},$/;"	f
AnonymousFunctiond47633f86b00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			input: function(a){return \/input|select|textarea|button\/i.test(a.nodeName);},$/;"	f
AnonymousFunctiond47633f86c00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			has: function(a,i,m){return jQuery.find(m[3],a).length;},$/;"	f
AnonymousFunctiond47633f86d00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			header: function(a){return \/h\\d\/i.test(a.nodeName);},$/;"	f
AnonymousFunctiond47633f86e00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			animated: function(a){return jQuery.grep(jQuery.timers,function(fn){return a==fn.elem;}).leng/;"	f
AnonymousFunctiond47633f86f00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			animated: function(a){return jQuery.grep(jQuery.timers,function(fn){return a==fn.elem;}).leng/;"	f
AnonymousFunctiond47633f87000	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	multiFilter: function( expr, elems, not ) {$/;"	f
AnonymousFunctiond47633f87100	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	find: function( t, context ) {$/;"	f
AnonymousFunctiond47633f87200	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	classFilter: function(r,m,not){$/;"	f
AnonymousFunctiond47633f87300	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	filter: function(t,r,not) {$/;"	f
AnonymousFunctiond47633f87400	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				r = jQuery.grep( r, function(elem, i){$/;"	f	function:AnonymousFunctiond47633f87300
AnonymousFunctiond47633f87500	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	dir: function( elem, dir ){$/;"	f
AnonymousFunctiond47633f87600	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	nth: function(cur,result,dir,elem){$/;"	f
AnonymousFunctiond47633f87700	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	sibling: function( n, elem ) {$/;"	f
AnonymousFunctiond47633f87800	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			handler = this.proxy( fn, function() {$/;"	f	function:jQuery.event.add
AnonymousFunctiond47633f87900	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			handle = jQuery.data(elem, "handle") || jQuery.data(elem, "handle", function(){$/;"	f	function:jQuery.event.add
AnonymousFunctiond47633f87a00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		jQuery.each(types.split(\/\\s+\/), function(index, type) {$/;"	f
AnonymousFunctiond47633f87b00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				jQuery.each(types.split(\/\\s+\/), function(index, type){$/;"	f
AnonymousFunctiond47633f87c00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					preventDefault: function(){},$/;"	f
AnonymousFunctiond47633f87d00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					stopPropagation: function(){},$/;"	f
AnonymousFunctiond47633f87e00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	bind: function( type, data, fn ) {$/;"	f
AnonymousFunctiond47633f87f00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return type == "unload" ? this.one(type, data, fn) : this.each(function(){$/;"	f	function:AnonymousFunctiond47633f87e00
AnonymousFunctiond47633f88000	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	one: function( type, data, fn ) {$/;"	f
AnonymousFunctiond47633f88100	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var one = jQuery.event.proxy( fn || data, function(event) {$/;"	f	function:AnonymousFunctiond47633f88000
AnonymousFunctiond47633f88200	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.each(function(){$/;"	f	function:AnonymousFunctiond47633f88000
AnonymousFunctiond47633f88300	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	unbind: function( type, fn ) {$/;"	f
AnonymousFunctiond47633f88400	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.each(function(){$/;"	f	function:AnonymousFunctiond47633f88300
AnonymousFunctiond47633f88500	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	trigger: function( type, data, fn ) {$/;"	f
AnonymousFunctiond47633f88600	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.each(function(){$/;"	f	function:AnonymousFunctiond47633f88500
AnonymousFunctiond47633f88700	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	triggerHandler: function( type, data, fn ) {$/;"	f
AnonymousFunctiond47633f88800	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	toggle: function( fn ) {$/;"	f
AnonymousFunctiond47633f88900	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.click( jQuery.event.proxy( fn, function(event) {$/;"	c	class:AnonymousFunctiond47633f88800
AnonymousFunctiond47633f88a00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	hover: function(fnOver, fnOut) {$/;"	f
AnonymousFunctiond47633f88b00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	ready: function(fn) {$/;"	f
AnonymousFunctiond47633f88c00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			jQuery.readyList.push( function() { return fn.call(this, jQuery); } );$/;"	f	function:AnonymousFunctiond47633f88b00
AnonymousFunctiond47633f88d00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	ready: function() {$/;"	f
AnonymousFunctiond47633f88e00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				jQuery.each( jQuery.readyList, function(){$/;"	c
AnonymousFunctiond47633f88f00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	if ( jQuery.browser.msie && window == top ) (function(){$/;"	f	function:bindReady
AnonymousFunctiond47633f89000	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		document.addEventListener( "DOMContentLoaded", function () {$/;"	f	function:bindReady
AnonymousFunctiond47633f89100	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	"submit,keydown,keypress,keyup,error").split(","), function(i, name){$/;"	f
AnonymousFunctiond47633f89200	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery(window).bind("unload", function() {$/;"	f
AnonymousFunctiond47633f89300	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	load: function( url, params, callback ) {$/;"	f
AnonymousFunctiond47633f89400	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			complete: function(res, status){$/;"	f
AnonymousFunctiond47633f89500	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	serialize: function() {$/;"	f
AnonymousFunctiond47633f89600	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	serializeArray: function() {$/;"	f
AnonymousFunctiond47633f89700	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.map(function(){$/;"	f	function:AnonymousFunctiond47633f89600
AnonymousFunctiond47633f89800	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		.filter(function(){$/;"	f
AnonymousFunctiond47633f89900	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		.map(function(i, elem){$/;"	f
AnonymousFunctiond47633f89a00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					jQuery.map( val, function(val, i){$/;"	f	function:AnonymousFunctiond47633f89900
AnonymousFunctiond47633f89b00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.each( "ajaxStart,ajaxStop,ajaxComplete,ajaxError,ajaxSuccess,ajaxSend".split(","), functi/;"	f
AnonymousFunctiond47633f89c00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	get: function( url, data, callback, type ) {$/;"	f
AnonymousFunctiond47633f89d00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	getScript: function( url, callback ) {$/;"	f
AnonymousFunctiond47633f89e00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	getJSON: function( url, data, callback ) {$/;"	f
AnonymousFunctiond47633f89f00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	post: function( url, data, callback, type ) {$/;"	f
AnonymousFunctiond47633f8a000	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	ajaxSetup: function( settings ) {$/;"	f
AnonymousFunctiond47633f8a100	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	ajax: function( s ) {$/;"	f
AnonymousFunctiond47633f8a200	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				setTimeout(function(){$/;"	f	function:AnonymousFunctiond47633f8a100
AnonymousFunctiond47633f8a300	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	handleError: function( s, xhr, status, e ) {$/;"	f
AnonymousFunctiond47633f8a400	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	httpSuccess: function( xhr ) {$/;"	f
AnonymousFunctiond47633f8a500	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	httpNotModified: function( xhr, url ) {$/;"	f
AnonymousFunctiond47633f8a600	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	httpData: function( xhr, type, filter ) {$/;"	f
AnonymousFunctiond47633f8a700	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	param: function( a ) {$/;"	f
AnonymousFunctiond47633f8a800	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			jQuery.each( a, function(){$/;"	f	function:AnonymousFunctiond47633f8a700
AnonymousFunctiond47633f8a900	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					jQuery.each( a[j], function(){$/;"	f	function:AnonymousFunctiond47633f8a700
AnonymousFunctiond47633f8aa00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	show: function(speed,callback){$/;"	f
AnonymousFunctiond47633f8ab00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			this.filter(":hidden").each(function(){$/;"	c
AnonymousFunctiond47633f8ac00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	hide: function(speed,callback){$/;"	f
AnonymousFunctiond47633f8ad00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			this.filter(":visible").each(function(){$/;"	c
AnonymousFunctiond47633f8ae00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	toggle: function( fn, fn2 ){$/;"	f
AnonymousFunctiond47633f8af00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				this.each(function(){$/;"	f
AnonymousFunctiond47633f8b000	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	slideDown: function(speed,callback){$/;"	f
AnonymousFunctiond47633f8b100	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	slideUp: function(speed,callback){$/;"	f
AnonymousFunctiond47633f8b200	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	slideToggle: function(speed, callback){$/;"	f
AnonymousFunctiond47633f8b300	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	fadeIn: function(speed, callback){$/;"	f
AnonymousFunctiond47633f8b400	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	fadeOut: function(speed, callback){$/;"	f
AnonymousFunctiond47633f8b500	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	fadeTo: function(speed,to,callback){$/;"	f
AnonymousFunctiond47633f8b600	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	animate: function( prop, speed, easing, callback ) {$/;"	f
AnonymousFunctiond47633f8b700	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this[ optall.queue === false ? "each" : "queue" ](function(){$/;"	f
AnonymousFunctiond47633f8b800	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			jQuery.each( prop, function(name, val){$/;"	f
AnonymousFunctiond47633f8b900	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	queue: function(type, fn){$/;"	f
AnonymousFunctiond47633f8ba00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		return this.each(function(){$/;"	f	function:AnonymousFunctiond47633f8b900
AnonymousFunctiond47633f8bb00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	stop: function(clearQueue, gotoEnd){$/;"	c
AnonymousFunctiond47633f8bc00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		this.each(function(){$/;"	f	function:AnonymousFunctiond47633f8bb00
AnonymousFunctiond47633f8bd00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	return this.each(function(){$/;"	f	function:jQuery.fn.dequeue
AnonymousFunctiond47633f8be00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	speed: function(speed, easing, fn) {$/;"	f
AnonymousFunctiond47633f8bf00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		linear: function( p, n, firstNum, diff ) {$/;"	f
AnonymousFunctiond47633f8c000	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		swing: function( p, n, firstNum, diff ) {$/;"	f
AnonymousFunctiond47633f8c100	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	fx: function( elem, options, prop ){$/;"	c
AnonymousFunctiond47633f8c200	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			jQuery.timerId = setInterval(function(){$/;"	f
AnonymousFunctiond47633f8c300	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		scrollLeft: function(fx){$/;"	f
AnonymousFunctiond47633f8c400	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		scrollTop: function(fx){$/;"	f
AnonymousFunctiond47633f8c500	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		opacity: function(fx){$/;"	f
AnonymousFunctiond47633f8c600	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		_default: function(fx){$/;"	f
AnonymousFunctiond47633f8c700	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	position: function() {$/;"	f
AnonymousFunctiond47633f8c800	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	offsetParent: function() {$/;"	f
AnonymousFunctiond47633f8c900	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.each( ['Left', 'Top'], function(i, name) {$/;"	f
AnonymousFunctiond47633f8ca00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			this.each(function() {$/;"	c	class:jQuery.fn
AnonymousFunctiond47633f8cb00	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.each([ "Height", "Width" ], function(i, name){$/;"	f
AnonymousFunctionfaab04e60100	.config/nvim/plugged/coc.nvim/build/index.js	/^\/******\/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__./;"	f	function:__webpack_require__.t
Ansi	.vim/plugged/fzf/src/options.go	/^	Ansi        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
AnsiHighlight	.vim/plugged/coc.nvim/src/types.ts	/^export interface AnsiHighlight {$/;"	i
AnsiItem	.vim/plugged/coc.nvim/src/types.ts	/^export interface AnsiItem {$/;"	i
Any Block	.config/nvim/plugged/targets.vim/README.md	/^#### Any Block$/;"	t
Any Quote	.config/nvim/plugged/targets.vim/README.md	/^#### Any Quote$/;"	t
Arch Linux	.vim/plugged/fzf/README.md	/^### Arch Linux$/;"	S
Argument Seek	.config/nvim/plugged/targets.vim/README.md	/^#### Argument Seek$/;"	t
Argument Text Objects	.config/nvim/plugged/targets.vim/README.md	/^### Argument Text Objects$/;"	S
Argument mappings	.config/nvim/plugged/targets.vim/cheatsheet.md	/^## Argument mappings$/;"	s
ArgumentItem	.vim/plugged/coc.nvim/src/list/basic.ts	/^interface ArgumentItem {$/;"	i
Around	.vim/plugged/coc.nvim/src/source/around.ts	/^export default class Around extends Source {$/;"	c
Around Argument	.config/nvim/plugged/targets.vim/README.md	/^#### Around Argument$/;"	t
Around Pair	.config/nvim/plugged/targets.vim/README.md	/^#### Around Pair$/;"	t
Around Quote	.config/nvim/plugged/targets.vim/README.md	/^#### Around Quote$/;"	t
Around Separator	.config/nvim/plugged/targets.vim/README.md	/^#### Around Separator$/;"	t
Array	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		Array.prototype.push.apply( this, elems );$/;"	c
As Vim plugin	.vim/plugged/fzf/README.md	/^### As Vim plugin$/;"	S
AsString	.vim/plugged/fzf/src/item.go	/^func (item *Item) AsString(stripAnsi bool) string {$/;"	f	struct:fzf.Item	typeref:typename:string
AsString	.vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) AsString() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
AsUint16	.vim/plugged/fzf/src/util/util.go	/^func AsUint16(val int) uint16 {$/;"	f	package:util	typeref:typename:uint16
Asterisk	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Asterisk = 42,$/;"	e	enum:CharCode
Asynchronous command execution	.vim/plugged/omnisharp-vim/README.md	/^### Asynchronous command execution$/;"	S
AtSign	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  AtSign = 64,$/;"	e	enum:CharCode
AtomicBool	.vim/plugged/fzf/src/util/atomicbool.go	/^type AtomicBool struct {$/;"	s	package:util
Attention	.config/nvim/plugged/gruvbox/README.md	/^Attention$/;"	s
Attr	.vim/plugged/fzf/src/tui/dummy.go	/^type Attr int$/;"	t	package:tui	typeref:typename:int
Attr	.vim/plugged/fzf/src/tui/tcell.go	/^type Attr tcell.Style$/;"	t	package:tui	typeref:typename:tcell.Style
AttrRegular	.vim/plugged/fzf/src/tui/dummy.go	/^	AttrRegular Attr = Attr(0)$/;"	c	package:tui	typeref:type:Attr
AttrRegular	.vim/plugged/fzf/src/tui/tcell.go	/^	AttrRegular Attr = 0$/;"	c	package:tui	typeref:type:Attr
Attribution	.config/nvim/plugged/dsf.vim/CODE_OF_CONDUCT.md	/^## Attribution$/;"	s
Attribution	.config/nvim/plugged/tagalong.vim/CODE_OF_CONDUCT.md	/^## Attribution$/;"	s
Author	.config/nvim/plugged/emmet-vim/docs/index.html	/^				<h2 class="maintitle">Author<\/h2>$/;"	i
Auto Complete	.vim/plugged/omnisharp-vim/README.md	/^#### Auto Complete$/;"	t
Autocmd	.vim/plugged/coc.nvim/src/types.ts	/^export interface Autocmd {$/;"	i
Autocommands	.config/nvim/plugged/ultisnips/test/test_Autocommands.py	/^class Autocommands(_VimTest):$/;"	c
Autojump from tabstop when it's empty	.config/nvim/plugged/ultisnips/doc/examples/autojump-if-empty/README.md	/^# Autojump from tabstop when it's empty$/;"	c
Automatic truncation	.vim/plugged/vim-airline/README.md	/^## Automatic truncation$/;"	s
Autosave on leave	.config/nvim/plugged/vim-tmux-navigator/README.md	/^##### Autosave on leave$/;"	T
Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^class Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne(_VimTest):$/;"	c
Autotrigger_CanMatchContext	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^class Autotrigger_CanMatchContext(_VimTest):$/;"	c
Autotrigger_CanMatchPreviouslySelectedPlaceholder	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^class Autotrigger_CanMatchPreviouslySelectedPlaceholder(_VimTest):$/;"	c
Autotrigger_CanMatchSimpleTrigger	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^class Autotrigger_CanMatchSimpleTrigger(_VimTest):$/;"	c
Autotrigger_WillProduceNoExceptionWithVimLowerThan214	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^class Autotrigger_WillProduceNoExceptionWithVimLowerThan214(_VimTest):$/;"	c
B	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  B = 66,$/;"	e	enum:CharCode
BASE_DIR	.config/nvim/plugged/defx.nvim/test/conftest.py	/^BASE_DIR = Path(__file__).parent.parent$/;"	v
BASE_DIR	.config/nvim/plugged/denite.nvim/test/conftest.py	/^BASE_DIR = os.path.dirname(os.path.dirname(__file__))$/;"	v
BASE_DIR	.vim/plugged/denite.nvim/test/conftest.py	/^BASE_DIR = os.path.dirname(os.path.dirname(__file__))$/;"	v
BINARY	.vim/plugged/fzf/Makefile	/^	BINARY := $(BINARY32)$/;"	m
BINARY	.vim/plugged/fzf/Makefile	/^	BINARY := $(BINARY64)$/;"	m
BINARY	.vim/plugged/fzf/Makefile	/^	BINARY := $(BINARYARM5)$/;"	m
BINARY	.vim/plugged/fzf/Makefile	/^	BINARY := $(BINARYARM6)$/;"	m
BINARY	.vim/plugged/fzf/Makefile	/^	BINARY := $(BINARYARM7)$/;"	m
BINARY	.vim/plugged/fzf/Makefile	/^	BINARY := $(BINARYARM8)$/;"	m
BINARY	.vim/plugged/fzf/Makefile	/^	BINARY := $(BINARYPPC64LE)$/;"	m
BINARY32	.vim/plugged/fzf/Makefile	/^BINARY32       := fzf-$(GOOS)_386$/;"	m
BINARY64	.vim/plugged/fzf/Makefile	/^BINARY64       := fzf-$(GOOS)_amd64$/;"	m
BINARYARM5	.vim/plugged/fzf/Makefile	/^BINARYARM5     := fzf-$(GOOS)_arm5$/;"	m
BINARYARM6	.vim/plugged/fzf/Makefile	/^BINARYARM6     := fzf-$(GOOS)_arm6$/;"	m
BINARYARM7	.vim/plugged/fzf/Makefile	/^BINARYARM7     := fzf-$(GOOS)_arm7$/;"	m
BINARYARM8	.vim/plugged/fzf/Makefile	/^BINARYARM8     := fzf-$(GOOS)_arm8$/;"	m
BINARYPPC64LE	.vim/plugged/fzf/Makefile	/^BINARYPPC64LE  := fzf-$(GOOS)_ppc64le$/;"	m
BOUNDARY_CHARS	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/rank.py	/^BOUNDARY_CHARS = string.punctuation + string.whitespace$/;"	v
BOUNDARY_CHARS	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/rank.py	/^BOUNDARY_CHARS = string.punctuation + string.whitespace$/;"	v
BRACES	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    BRACES = re.compile('([}{])')$/;"	v	class:VimInterfaceWindows
BS	.config/nvim/plugged/ultisnips/test/constant.py	/^BS = '\\x7f'$/;"	v
BSpace	.vim/plugged/fzf/src/tui/tui.go	/^	BSpace$/;"	c	package:tui
BTab	.vim/plugged/fzf/src/tui/tui.go	/^	BTab$/;"	c	package:tui
BUFFER_HIGHLIGHT_SYNTAX	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^BUFFER_HIGHLIGHT_SYNTAX = [$/;"	v
BUFFER_HIGHLIGHT_SYNTAX	.vim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^BUFFER_HIGHLIGHT_SYNTAX = [$/;"	v
BUFFER_TYPE	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^BUFFER_TYPE = type(vim.current.buffer)$/;"	v
BUFFER_TYPE_ID	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^BUFFER_TYPE_ID = neovim_rpc_server_api_info.API_INFO['types']['Buffer']['id']$/;"	v
BUILD_FLAGS	.vim/plugged/fzf/Makefile	/^BUILD_FLAGS    := -a -ldflags "-X main.revision=$(REVISION) -w -extldflags=$(LDFLAGS)" -tags "$(/;"	m
BUILD_INVERTED_INDEX	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set BUILD_INVERTED_INDEX=1$/;"	v
BUILD_INVERTED_INDEX	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set BUILD_INVERTED_INDEX=0$/;"	v
BackTick	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  BackTick = 96,$/;"	e	enum:CharCode
Backers	.config/nvim/plugged/coc.nvim/Readme.md	/^## Backers$/;"	s
Backers	.vim/plugged/coc.nvim/Readme.md	/^## Backers$/;"	s
Backslash	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  Backslash,$/;"	e	enum:TokenType
Backslash	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Backslash = 92,$/;"	e	enum:CharCode
Backspace	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Backspace = 8,$/;"	e	enum:CharCode
Backspace_TabStop_NotZero	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class Backspace_TabStop_NotZero(_VimTest):$/;"	c
Backspace_TabStop_Zero	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class Backspace_TabStop_Zero(_VimTest):$/;"	c
BadResponseError	.vim/plugged/omnisharp-vim/python/omnisharp/exceptions.py	/^class BadResponseError(Exception):$/;"	c
Bar	.config/nvim/plugged/vim-textobj-rubyblock/t/examples.rb	/^  class Bar$/;"	c	module:Foo
Bar	.config/nvim/plugged/vim-textobj-rubyblock/t/samples/nested-blocks.rb	/^  class Bar$/;"	c	module:Foo
Base	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/column.py	/^class Base:$/;"	c
Base	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^class Base:$/;"	c
Base	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/source.py	/^class Base(ABC):$/;"	c
Base	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/filter.py	/^class Base(ABC):$/;"	c
Base	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^class Base(object):$/;"	c
Base	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^class Base(ABC):$/;"	c
Base	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/base.py	/^class Base(_Base):$/;"	c
Base	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/base.py	/^class Base(_Base):$/;"	c
Base	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/base.py	/^class Base(_Base):$/;"	c
Base	.vim/plugged/denite.nvim/rplugin/python3/denite/base/filter.py	/^class Base(ABC):$/;"	c
Base	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^class Base(object):$/;"	c
Base	.vim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^class Base(ABC):$/;"	c
Base	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/base.py	/^class Base(_Base):$/;"	c
Base	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/base.py	/^class Base(_Base):$/;"	c
Base	.vim/plugged/denite.nvim/rplugin/python3/denite/source/base.py	/^class Base(_Base):$/;"	c
BaseCtx	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^class BaseCtx(object):$/;"	c
BaseLanguageClient	.vim/plugged/coc.nvim/src/language-client/client.ts	/^export abstract class BaseLanguageClient {$/;"	c
Basic Usage	.config/nvim/plugged/tagalong.vim/README.md	/^## Basic Usage$/;"	s
BasicList	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^class OptionList extends BasicList {$/;"	v
BasicList	.vim/plugged/coc.nvim/src/list/basic.ts	/^export default abstract class BasicList implements IList, Disposable {$/;"	c
Baz	.config/nvim/plugged/vim-textobj-rubyblock/t/examples.rb	/^    def Baz$/;"	f	class:Foo.Bar
Baz	.config/nvim/plugged/vim-textobj-rubyblock/t/samples/nested-blocks.rb	/^    def Baz$/;"	f	class:Foo.Bar
Before submitting	.config/nvim/plugged/fzf.vim/.github/ISSUE_TEMPLATE.md	/^Before submitting$/;"	c
Before submitting	.vim/plugged/fzf/.github/ISSUE_TEMPLATE.md	/^### Before submitting$/;"	S
Before you add a feature	.config/nvim/plugged/ultisnips/CONTRIBUTING.md	/^## Before you add a feature$/;"	s
Bg	.vim/plugged/fzf/src/tui/tui.go	/^	Bg           Color$/;"	m	struct:tui.ColorTheme	typeref:typename:Color
Bg	.vim/plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Bg() Color {$/;"	f	struct:tui.ColorPair	typeref:typename:Color
Bidirectional motions	.config/nvim/plugged/vim-easymotion/README.md	/^### Bidirectional motions$/;"	S
Black	.vim/plugged/fzf/src/options.go	/^	Black       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Blink	.vim/plugged/fzf/src/tui/dummy.go	/^	Blink            = Attr(1 << 4)$/;"	c	package:tui
Blink	.vim/plugged/fzf/src/tui/tcell.go	/^	Blink          = Attr(tcell.AttrBlink)$/;"	c	package:tui
Blink2	.vim/plugged/fzf/src/tui/dummy.go	/^	Blink2           = Attr(1 << 5)$/;"	c	package:tui
Bold	.vim/plugged/fzf/src/options.go	/^	Bold        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Bold	.vim/plugged/fzf/src/tui/dummy.go	/^	Bold             = Attr(1)$/;"	c	package:tui
Bold	.vim/plugged/fzf/src/tui/tcell.go	/^	Bold      Attr = Attr(tcell.AttrBold)$/;"	c	package:tui	typeref:type:Attr
Bonus functionality	.config/nvim/plugged/sideways.vim/README.markdown	/^## Bonus functionality$/;"	s
Bonus fuzzy-search with EasyMotion	.config/nvim/plugged/vim-easymotion/README.md	/^### Bonus fuzzy-search with EasyMotion$/;"	S
Border	.vim/plugged/fzf/src/tui/tui.go	/^	Border       Color$/;"	m	struct:tui.ColorTheme	typeref:typename:Color
BorderAround	.vim/plugged/fzf/src/tui/tui.go	/^	BorderAround$/;"	c	package:tui
BorderHorizontal	.vim/plugged/fzf/src/tui/tui.go	/^	BorderHorizontal$/;"	c	package:tui
BorderNone	.vim/plugged/fzf/src/tui/tui.go	/^	BorderNone BorderShape = iota$/;"	c	package:tui	typeref:type:BorderShape
BorderShape	.vim/plugged/fzf/src/tui/tui.go	/^type BorderShape int$/;"	t	package:tui	typeref:typename:int
BorderStyle	.vim/plugged/fzf/src/tui/tui.go	/^type BorderStyle struct {$/;"	s	package:tui
Bordered	.vim/plugged/fzf/src/options.go	/^	Bordered    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Bounding	.vim/plugged/coc.nvim/src/completion/floating.ts	/^interface Bounding {$/;"	i
BufEvents	.vim/plugged/coc.nvim/src/events.ts	/^export type BufEvents = 'TextChangedI' | 'BufHidden' | 'BufEnter' | 'TextChanged'$/;"	a
Buffer	.vim/plugged/coc.nvim/src/source/buffer.ts	/^export default class Buffer extends Source {$/;"	c
Buffer	.vim/plugged/coc.nvim/src/types.ts	/^  Buffer,$/;"	e	enum:PatternType
Buffer	.vim/plugged/coc.nvim/src/util/factory.ts	/^  Buffer: any$/;"	p	interface:ISandbox
Buffer configuration	.config/nvim/plugged/vim-projectionist/README.markdown	/^### Buffer configuration$/;"	S
BufferChannel	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^export default class BufferChannel implements OutputChannel {$/;"	c
BufferOption	.vim/plugged/coc.nvim/src/types.ts	/^export interface BufferOption {$/;"	i
Bug fixes	.vim/plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S
Bug1251994	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^class Bug1251994(_VimTest):$/;"	c
Bugs	.vim/plugged/vim-airline/CONTRIBUTING.md	/^# Bugs$/;"	c
Build instructions	.vim/plugged/fzf/BUILD.md	/^Build instructions$/;"	s
BuildPattern	.vim/plugged/fzf/src/pattern.go	/^func BuildPattern(fuzzy bool, fuzzyAlgo algo.Algo, extended bool, caseMode Case, normalize bool,/;"	f	package:fzf	typeref:typename:*Pattern
Building fzf	.vim/plugged/fzf/BUILD.md	/^Building fzf$/;"	c
Building fzf	.vim/plugged/fzf/README.md	/^Building fzf$/;"	s
Builtins	.config/nvim/plugged/switch.vim/README.md	/^## Builtins$/;"	s
Button	.config/nvim/plugged/oceanic-next/test/style-components.js	/^const Button = styled.button`$/;"	C
By the way	.vim/plugged/vim-closer/README.md	/^## By the way$/;"	s
ByOrder	.vim/plugged/fzf/src/result.go	/^type ByOrder []Offset$/;"	t	package:fzf	typeref:typename:[]Offset
ByRelevance	.vim/plugged/fzf/src/result.go	/^type ByRelevance []Result$/;"	t	package:fzf	typeref:typename:[]Result
ByRelevanceTac	.vim/plugged/fzf/src/result.go	/^type ByRelevanceTac []Result$/;"	t	package:fzf	typeref:typename:[]Result
Bytes	.vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) Bytes() []byte {$/;"	f	struct:util.Chars	typeref:typename:[]byte
C	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> C$/;"	m
C	.config/nvim/plugged/vim-operator-user/t/count-designations.vim	/^map C  <Plug>(operator-align-right)$/;"	m
C	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  C = 67,$/;"	e	enum:CharCode
C++ pointer dots/arrows:	.config/nvim/plugged/switch.vim/README.md	/^### C++ pointer dots\/arrows:$/;"	S
CAMEL_BONUS	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^CAMEL_BONUS = 10$/;"	v
CAMEL_BONUS	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^CAMEL_BONUS = 10$/;"	v
CFill	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) CFill(fg Color, bg Color, attr Attr, text string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
CFill	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CFill(fg Color, bg Color, a Attr, str string) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
CFill	.vim/plugged/fzf/src/tui/tui.go	/^	CFill(fg Color, bg Color, attr Attr, text string) FillReturn$/;"	n	interface:tui.Window	typeref:typename:FillReturn
CHANGELOG	.vim/plugged/fzf/CHANGELOG.md	/^CHANGELOG$/;"	c
CHANGE_HIGHLIGHT_SYNTAX	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^CHANGE_HIGHLIGHT_SYNTAX = [$/;"	v
CHANGE_HIGHLIGHT_SYNTAX	.vim/plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^CHANGE_HIGHLIGHT_SYNTAX = [$/;"	v
CHECK	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    CHECK = re.compile(r"^\\${VISUAL[:}\/]")$/;"	v	class:VisualToken
CHECK	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    CHECK = re.compile(r'^\\$\\d+')$/;"	v	class:MirrorToken
CHECK	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    CHECK = re.compile(r'^\\${\\d+[:}]')$/;"	v	class:TabStopToken
CHECK	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    CHECK = re.compile(r'^\\${\\d+\\\/')$/;"	v	class:TransformationToken
CHECK	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    CHECK = re.compile(r'^`!p\\s')$/;"	v	class:PythonCodeToken
CHECK	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    CHECK = re.compile(r'^`!v\\s')$/;"	v	class:VimLCodeToken
COMPLETION_OPTIONS	.config/nvim/plugged/ultisnips/test/test_Completion.py	/^COMPLETION_OPTIONS = 'completion1\\ncompletion2\\n'$/;"	v
COMPL_ACCEPT	.config/nvim/plugged/ultisnips/test/constant.py	/^COMPL_ACCEPT = chr(25)$/;"	v
COMPL_KW	.config/nvim/plugged/ultisnips/test/constant.py	/^COMPL_KW = chr(24) + chr(14)$/;"	v
COMPREPLY=	.vim/plugged/fzf/shell/completion.bash	/^    COMPREPLY=()$/;"	f
COMPREPLY=	.vim/plugged/fzf/shell/completion.bash	/^  COMPREPLY=()$/;"	f
CONFIG_FILE	.config/nvim/plugged/html5.vim/Makefile	/^CONFIG_FILE=config.mk$/;"	m
CONFIG_FILE_NAME	.vim/plugged/coc.nvim/src/workspace.ts	/^const CONFIG_FILE_NAME = 'coc-settings.json'$/;"	C
COPY	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/clipboard.py	/^    COPY = auto()$/;"	v	class:ClipboardAction
CPrint	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) CPrint(pair ColorPair, attr Attr, text string) {$/;"	f	struct:tui.LightWindow
CPrint	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CPrint(pair ColorPair, attr Attr, text string) {$/;"	f	struct:tui.TcellWindow
CPrint	.vim/plugged/fzf/src/tui/tui.go	/^	CPrint(color ColorPair, attr Attr, text string)$/;"	n	interface:tui.Window
CSCOPE_ARGS	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -q$/;"	v
CSCOPE_ARGS	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_ARGS	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=%CSCOPE_ARGS% -i %DB_FILE%.files$/;"	v
CSCOPE_EXE	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CTAGS_ARGS	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CURL_OPT	.config/nvim/plugged/html5.vim/Makefile	/^CURL_OPT=$/;"	m
CacheKey	.vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) CacheKey() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
CallSequence	.vim/plugged/coc.nvim/src/util/callSequence.ts	/^export default class CallSequence {$/;"	c
Callback	.vim/plugged/coc.nvim/src/completion/complete.ts	/^export type Callback = () => void$/;"	a
Callback	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^export type Callback = (event: TextDocumentWillSaveEvent) => void$/;"	a
Callbacks	.config/nvim/plugged/goyo.vim/README.md	/^### Callbacks$/;"	S
Candidate	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/defx.py	/^Candidate = typing.Dict[str, typing.Any]$/;"	v
CannotSelect	.config/nvim/plugged/vim-textobj-user/t/failed-selection.vim	/^function! CannotSelect()$/;"	f
Caret	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Caret = 94,$/;"	e	enum:CharCode
CarriageReturn	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  CarriageReturn = 13,$/;"	e	enum:CharCode
Case	.vim/plugged/fzf/src/options.go	/^	Case        Case$/;"	m	struct:fzf.Options	typeref:typename:Case
Case	.vim/plugged/fzf/src/options.go	/^type Case int$/;"	t	package:fzf	typeref:typename:int
CaseIgnore	.vim/plugged/fzf/src/options.go	/^	CaseIgnore$/;"	c	package:fzf
CaseRespect	.vim/plugged/fzf/src/options.go	/^	CaseRespect$/;"	c	package:fzf
CaseSmart	.vim/plugged/fzf/src/options.go	/^	CaseSmart Case = iota$/;"	c	package:fzf	typeref:type:Case
Cd	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^      command! -buffer -bar -bang -nargs=? -range=1 -complete=customlist,s:dir_complete Cd$/;"	c
Change	.vim/plugged/coc.nvim/src/util/diff.ts	/^interface Change {$/;"	i
Change	.vim/plugged/fzf/src/tui/tui.go	/^	Change$/;"	c	package:tui
Change Log	.config/nvim/plugged/gruvbox/CHANGELOG.md	/^# Change Log$/;"	c
Change Log	.config/nvim/plugged/html5.vim/CHANGES.markdown	/^## Change Log$/;"	s
Change Log	.config/nvim/plugged/html5.vim/README.md	/^## Change Log$/;"	s
Change Log	.vim/plugged/vim-airline/CHANGELOG.md	/^# Change Log$/;"	c
ChangeCallback	.vim/plugged/coc.nvim/src/watchman.ts	/^export type ChangeCallback = (FileChange) => void$/;"	a
ChangeInfo	.vim/plugged/coc.nvim/src/model/document.ts	/^    let change = await this.nvim.call('coc#util#get_changeinfo', []) as ChangeInfo$/;"	v
ChangeInfo	.vim/plugged/coc.nvim/src/types.ts	/^export interface ChangeInfo {$/;"	i
ChangeItem	.vim/plugged/coc.nvim/src/types.ts	/^export interface ChangeItem {$/;"	i
Changed behavior on `--no-sort`	.vim/plugged/fzf/CHANGELOG.md	/^#### Changed behavior on `--no-sort`$/;"	t
ChangedLines	.vim/plugged/coc.nvim/src/types.ts	/^export interface ChangedLines {$/;"	i
Channel	.vim/plugged/ghost-text.vim/python3/vim_channel_handler.py	/^class Channel:$/;"	c
Char	.vim/plugged/fzf/src/tui/tui.go	/^	Char       rune$/;"	m	struct:tui.Event	typeref:typename:rune
CharCode	.vim/plugged/coc.nvim/src/util/charCode.ts	/^export const enum CharCode {$/;"	g
CharacterwiseSelectA	.config/nvim/plugged/vim-textobj-user/t/selection.vim	/^function! CharacterwiseSelectA()$/;"	f
CharacterwiseSelectI	.config/nvim/plugged/vim-textobj-user/t/selection.vim	/^function! CharacterwiseSelectI()$/;"	f
Chars	.vim/plugged/fzf/src/util/chars.go	/^type Chars struct {$/;"	s	package:util
Child	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^class Child(object):$/;"	c
Child	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^class Child(object):$/;"	c
ChildProcessInfo	.vim/plugged/coc.nvim/src/language-client/index.ts	/^export interface ChildProcessInfo {$/;"	i
ChildProcessInfo	.vim/plugged/coc.nvim/src/language-client/index.ts	/^namespace ChildProcessInfo {$/;"	n
Choice	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^export class Choice extends Marker {$/;"	c
Chunk	.vim/plugged/fzf/src/chunklist.go	/^type Chunk struct {$/;"	s	package:fzf
ChunkCache	.vim/plugged/fzf/src/cache.go	/^type ChunkCache struct {$/;"	s	package:fzf
ChunkList	.vim/plugged/fzf/src/chunklist.go	/^type ChunkList struct {$/;"	s	package:fzf
CleanUp	.config/nvim/plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^CleanUp() {$/;"	f
Clear	.vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Clear()      {}$/;"	f	unknown:tui.FullscreenRenderer
Clear	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Clear() {$/;"	f	struct:tui.LightRenderer
Clear	.vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Clear() {$/;"	f	unknown:tui.FullscreenRenderer
Clear	.vim/plugged/fzf/src/tui/tui.go	/^	Clear()$/;"	n	interface:tui.Renderer
Clear	.vim/plugged/fzf/src/util/eventbox.go	/^func (events *Events) Clear() {$/;"	f	type:util.Events
ClearOnExit	.vim/plugged/fzf/src/options.go	/^	ClearOnExit bool$/;"	m	struct:fzf.Options	typeref:typename:bool
ClientState	.vim/plugged/coc.nvim/src/language-client/client.ts	/^export enum ClientState {$/;"	g
Clipboard	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/clipboard.py	/^class Clipboard():$/;"	c
ClipboardAction	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/clipboard.py	/^class ClipboardAction(Enum):$/;"	c
Clog	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=? -bang -complete=customlist,s:Complete_log            Clog     e/;"	c
Clojure	.config/nvim/plugged/switch.vim/README.md	/^### Clojure$/;"	S
Close	.vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Close()      {}$/;"	f	unknown:tui.FullscreenRenderer
Close	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Close() {$/;"	f	struct:tui.LightRenderer
Close	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Close() {$/;"	f	struct:tui.LightWindow
Close	.vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Close() {$/;"	f	unknown:tui.FullscreenRenderer
Close	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Close() {$/;"	f	struct:tui.TcellWindow
Close	.vim/plugged/fzf/src/tui/tui.go	/^	Close()$/;"	n	interface:tui.Renderer
Close	.vim/plugged/fzf/src/tui/tui.go	/^	Close()$/;"	n	interface:tui.Window
CloseAction	.vim/plugged/coc.nvim/src/language-client/client.ts	/^export enum CloseAction {$/;"	g
CloseCurlyBrace	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  CloseCurlyBrace = 125,$/;"	e	enum:CharCode
CloseParen	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  CloseParen = 41,$/;"	e	enum:CharCode
CloseSquareBracket	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  CloseSquareBracket = 93,$/;"	e	enum:CharCode
CocAction	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -range CocAction :call coc#rpc#notify('codeActionRange', [<line1>, <line2>, <f/;"	c
CocAction	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocAction(...) abort$/;"	f
CocAction	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -range CocAction :call coc#rpc#notify('codeActionRange', [<line1>, <line2>, <f/;"	c
CocAction	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! CocAction(...) abort$/;"	f
CocActionAsync	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocActionAsync(...) abort$/;"	f
CocActionAsync	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! CocActionAsync(...) abort$/;"	f
CocCommand	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -complete=custom,s:CommandList -range CocCommand :call coc#rpc#notify('runComm/;"	c
CocCommand	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -complete=custom,s:CommandList -range CocCommand :call coc#rpc#notify('runComm/;"	c
CocConfig	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocConfig       :call s:OpenConfig()$/;"	c
CocConfig	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocConfig       :call s:OpenConfig()$/;"	c
CocDisable	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocDisable      :call s:Disable()$/;"	c
CocDisable	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocDisable      :call s:Disable()$/;"	c
CocEnable	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocEnable       :call s:Enable()$/;"	c
CocEnable	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocEnable       :call s:Enable()$/;"	c
CocFix	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -range CocFix    :call coc#rpc#notify('codeActionRange', [<line1>, <line2>, 'q/;"	c
CocFix	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -range CocFix    :call coc#rpc#notify('codeActionRange', [<line1>, <line2>, 'q/;"	c
CocInfo	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocInfo         :call s:ShowInfo()$/;"	c
CocInfo	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocInfo         :call s:ShowInfo()$/;"	c
CocInstall	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=+ -complete=custom,s:InstallOptions CocInstall   :call coc#util#install_extensio/;"	c
CocInstall	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=+ -complete=custom,s:InstallOptions CocInstall   :call coc#util#install_extensio/;"	c
CocList	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -complete=custom,coc#list#options CocList      :call coc#rpc#notify('openList'/;"	c
CocList	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -complete=custom,coc#list#options CocList      :call coc#rpc#notify('openList'/;"	c
CocListResume	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocListResume   :call coc#rpc#notify('listResume', [])$/;"	c
CocListResume	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocListResume   :call coc#rpc#notify('listResume', [])$/;"	c
CocLocations	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocLocations(id, method, ...) abort$/;"	f
CocLocations	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! CocLocations(id, method, ...) abort$/;"	f
CocLocationsAsync	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocLocationsAsync(id, method, ...) abort$/;"	f
CocLocationsAsync	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! CocLocationsAsync(id, method, ...) abort$/;"	f
CocNext	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocNext         :call coc#rpc#notify('listNext', [])$/;"	c
CocNext	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocNext         :call coc#rpc#notify('listNext', [])$/;"	c
CocOpenLog	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocOpenLog      :call coc#rpc#notify('openLog',  [])$/;"	c
CocOpenLog	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocOpenLog      :call coc#rpc#notify('openLog',  [])$/;"	c
CocPrev	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocPrev         :call coc#rpc#notify('listPrev', [])$/;"	c
CocPrev	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocPrev         :call coc#rpc#notify('listPrev', [])$/;"	c
CocRebuild	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocRebuild      :call coc#util#rebuild()$/;"	c
CocRebuild	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocRebuild      :call coc#util#rebuild()$/;"	c
CocRegistNotification	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocRegistNotification(id, method, cb) abort$/;"	f
CocRegistNotification	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! CocRegistNotification(id, method, cb) abort$/;"	f
CocRequest	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocRequest(...) abort$/;"	f
CocRequest	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! CocRequest(...) abort$/;"	f
CocRequestAsync	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! CocRequestAsync(...)$/;"	f
CocRequestAsync	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! CocRequestAsync(...)$/;"	f
CocRestart	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocRestart      :call coc#rpc#restart()$/;"	c
CocRestart	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocRestart      :call coc#rpc#restart()$/;"	c
CocSnippet	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^export class CocSnippet {$/;"	c
CocSnippetPlaceholder	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^export interface CocSnippetPlaceholder {$/;"	i
CocStart	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocStart        :call coc#rpc#start_server()$/;"	c
CocStart	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocStart        :call coc#rpc#start_server()$/;"	c
CocUninstall	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=+ -complete=custom,s:ExtensionList  CocUninstall :call coc#rpc#notify('CocAction/;"	c
CocUninstall	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=+ -complete=custom,s:ExtensionList  CocUninstall :call coc#rpc#notify('CocAction/;"	c
CocUpdate	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocUpdate       :call coc#util#update_extensions(1)$/;"	c
CocUpdate	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocUpdate       :call coc#util#update_extensions(1)$/;"	c
CocUpdateSync	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocUpdateSync   :call coc#util#update_extensions()$/;"	c
CocUpdateSync	.vim/plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocUpdateSync   :call coc#util#update_extensions()$/;"	c
Code Actions	.vim/plugged/omnisharp-vim/README.md	/^#### Code Actions$/;"	t
Code Actions Available (see [wiki](https://github.com/OmniSharp/omnisharp-vim/wiki/Code-Actions-Available-flag) for details)	.vim/plugged/omnisharp-vim/README.md	/^#### Code Actions Available (see [wiki](https:\/\/github.com\/OmniSharp\/omnisharp-vim\/wiki\/Co/;"	t
CodeAction	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^      let action = item.data.action as CodeAction$/;"	v
CodeAction	.vim/plugged/coc.nvim/src/types.ts	/^export interface CodeAction extends protocol.CodeAction {$/;"	i
CodeActionFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class CodeActionFeature extends TextDocumentFeature<CodeActionRegistrationOptions> {$/;"	c
CodeActionManager	.vim/plugged/coc.nvim/src/provider/codeActionmanager.ts	/^export default class CodeActionManager extends Manager<CodeActionProvider> implements Disposable/;"	c
CodeActionProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface CodeActionProvider {$/;"	i
CodeActionProviderMetadata	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface CodeActionProviderMetadata {$/;"	i
CodeLensFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class CodeLensFeature extends TextDocumentFeature<CodeLensRegistrationOptions> {$/;"	c
CodeLensInfo	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^export interface CodeLensInfo {$/;"	i
CodeLensManager	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^export default class CodeLensManager {$/;"	c
CodeLensManager	.vim/plugged/coc.nvim/src/provider/codeLensManager.ts	/^export default class CodeLensManager extends Manager<CodeLensProvider> implements Disposable {$/;"	c
CodeLensProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface CodeLensProvider {$/;"	i
CoffeeScript arrows	.config/nvim/plugged/switch.vim/README.md	/^### CoffeeScript arrows$/;"	S
CoffeeScript dictionary shorthands	.config/nvim/plugged/switch.vim/README.md	/^### CoffeeScript dictionary shorthands$/;"	S
ColBorder	.vim/plugged/fzf/src/tui/tui.go	/^	ColBorder          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrent	.vim/plugged/fzf/src/tui/tui.go	/^	ColCurrent         ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentCursor	.vim/plugged/fzf/src/tui/tui.go	/^	ColCurrentCursor   ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentMatch	.vim/plugged/fzf/src/tui/tui.go	/^	ColCurrentMatch    ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentSelected	.vim/plugged/fzf/src/tui/tui.go	/^	ColCurrentSelected ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCursor	.vim/plugged/fzf/src/tui/tui.go	/^	ColCursor          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColHeader	.vim/plugged/fzf/src/tui/tui.go	/^	ColHeader          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInfo	.vim/plugged/fzf/src/tui/tui.go	/^	ColInfo            ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColMatch	.vim/plugged/fzf/src/tui/tui.go	/^	ColMatch           ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColNormal	.vim/plugged/fzf/src/tui/tui.go	/^	ColNormal          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPrompt	.vim/plugged/fzf/src/tui/tui.go	/^	ColPrompt          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSelected	.vim/plugged/fzf/src/tui/tui.go	/^	ColSelected        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSpinner	.vim/plugged/fzf/src/tui/tui.go	/^	ColSpinner         ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
Collection	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^export default class Collection implements DiagnosticCollection {$/;"	c
Colon	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  Colon,$/;"	e	enum:TokenType
Colon	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Colon = 58,$/;"	e	enum:CharCode
Color	.vim/plugged/fzf/src/tui/tui.go	/^type Color int32$/;"	t	package:tui	typeref:typename:int32
Color Format	.vim/plugged/papercolor-theme/DESIGN.md	/^# Color Format$/;"	c
Color Names	.vim/plugged/papercolor-theme/DESIGN.md	/^# Color Names$/;"	c
Color Ranges	.vim/plugged/papercolor-theme/README.md	/^### Color Ranges$/;"	S
ColorPair	.vim/plugged/fzf/src/tui/tui.go	/^type ColorPair struct {$/;"	s	package:tui
ColorProviderFeature	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^export class ColorProviderFeature extends TextDocumentFeature<$/;"	c
ColorProviderMiddleware	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^export interface ColorProviderMiddleware {$/;"	i
ColorRanges	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^export interface ColorRanges {$/;"	i
ColorTheme	.vim/plugged/fzf/src/tui/tui.go	/^type ColorTheme struct {$/;"	s	package:tui
Colors	.vim/plugged/coc.nvim/src/handler/colors.ts	/^export default class Colors {$/;"	c
Colors	.vim/plugged/fzf/src/item.go	/^func (item *Item) Colors() []ansiOffset {$/;"	f	struct:fzf.Item	typeref:typename:[]ansiOffset
Column	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/filename.py	/^class Column(Base):$/;"	c
Column	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/icon.py	/^class Column(Base):$/;"	c
Column	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/indent.py	/^class Column(Base):$/;"	c
Column	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/mark.py	/^class Column(Base):$/;"	c
Column	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/size.py	/^class Column(Base):$/;"	c
Column	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/time.py	/^class Column(Base):$/;"	c
Column	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/type.py	/^class Column(Base):$/;"	c
Column	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^from defx.base.column import Base as Column$/;"	x
Comma	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  Comma,$/;"	e	enum:TokenType
Comma	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Comma = 44,$/;"	e	enum:CharCode
Command	.config/nvim/plugged/defx.nvim/rplugin/python3/denite/source/defx/session.py	/^from denite.kind.command import Kind as Command$/;"	x
Command	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^from denite.kind.command import Kind as Command$/;"	x
Command	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^from denite.kind.command import Kind as Command$/;"	x
Command	.vim/plugged/coc.nvim/src/commands.ts	/^export interface Command {$/;"	i
Command	.vim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^from denite.kind.command import Kind as Command$/;"	x
Command	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^from denite.kind.command import Kind as Command$/;"	x
Command-local options	.config/nvim/plugged/fzf.vim/README.md	/^#### Command-local options$/;"	t
CommandItem	.vim/plugged/coc.nvim/src/commands.ts	/^class CommandItem implements Disposable, Command {$/;"	c
CommandItem	.vim/plugged/coc.nvim/src/handler/index.ts	/^interface CommandItem {$/;"	i
CommandManager	.vim/plugged/coc.nvim/src/commands.ts	/^export class CommandManager implements Disposable {$/;"	c
Commands	.config/nvim/plugged/fzf.vim/README.md	/^Commands$/;"	s
Commands	.config/nvim/plugged/vista.vim/README.md	/^### Commands$/;"	S
CommandsList	.vim/plugged/coc.nvim/src/list/source/commands.ts	/^export default class CommandsList extends BasicList {$/;"	c
Commentary	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^command! -range -bar Commentary call s:go(<line1>,<line2>)$/;"	c
CompareMovements	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^function! CompareMovements(movement1, movement2, backward)$/;"	f
Compile ctags with JSON format support	.config/nvim/plugged/vista.vim/README.md	/^#### Compile ctags with JSON format support$/;"	t
CompilerComplete_rake	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! CompilerComplete_rake(A, L, P) abort$/;"	f
CompilerSet	.config/nvim/plugged/vim-ruby/compiler/eruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.config/nvim/plugged/vim-ruby/compiler/rake.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.config/nvim/plugged/vim-ruby/compiler/rspec.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.config/nvim/plugged/vim-ruby/compiler/ruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	.config/nvim/plugged/vim-ruby/compiler/rubyunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
Complete	.vim/plugged/coc.nvim/src/completion/complete.ts	/^export default class Complete {$/;"	c
CompleteConfig	.vim/plugged/coc.nvim/src/languages.ts	/^interface CompleteConfig {$/;"	i
CompleteConfig	.vim/plugged/coc.nvim/src/types.ts	/^export interface CompleteConfig {$/;"	i
CompleteOption	.vim/plugged/coc.nvim/src/types.ts	/^export interface CompleteOption {$/;"	i
CompleteResult	.vim/plugged/coc.nvim/src/types.ts	/^export interface CompleteResult {$/;"	i
Completion	.vim/plugged/coc.nvim/src/completion/index.ts	/^export class Completion implements Disposable {$/;"	c
Completion helper	.config/nvim/plugged/fzf.vim/README.md	/^### Completion helper$/;"	S
Completion sources	.config/nvim/plugged/coc.nvim/Readme.md	/^## Completion sources$/;"	s
Completion sources	.vim/plugged/coc.nvim/Readme.md	/^## Completion sources$/;"	s
CompletionContext	.vim/plugged/coc.nvim/src/types.ts	/^export interface CompletionContext {$/;"	i
CompletionItemFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class CompletionItemFeature extends TextDocumentFeature<$/;"	c
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Class,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Color,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Constant,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Constructor,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Enum,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.EnumMember,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Event,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Field,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.File,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Folder,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Function,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Interface,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Keyword,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Method,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Module,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Operator,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Property,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Reference,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Snippet,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Struct,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.TypeParameter$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Unit,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Value,$/;"	C
CompletionItemKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  CompletionItemKind.Variable,$/;"	C
CompletionItemProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface CompletionItemProvider {$/;"	i
CompletionSource	.vim/plugged/coc.nvim/src/languages.ts	/^export interface CompletionSource {$/;"	i
CompletionTest	.vim/plugged/fzf/test/test_go.rb	/^module CompletionTest$/;"	m
Completion_BackwardsJumpWithoutCOMPL_ACCEPT	.config/nvim/plugged/ultisnips/test/test_Completion.py	/^class Completion_BackwardsJumpWithoutCOMPL_ACCEPT(_VimTest):$/;"	c
Completion_ForwardsJumpWithoutCOMPL_ACCEPT	.config/nvim/plugged/ultisnips/test/test_Completion.py	/^class Completion_ForwardsJumpWithoutCOMPL_ACCEPT(_VimTest):$/;"	c
Completion_SimpleExample_ECR	.config/nvim/plugged/ultisnips/test/test_Completion.py	/^class Completion_SimpleExample_ECR(_VimTest):$/;"	c
Complex text objects defined by functions	.config/nvim/plugged/vim-textobj-user/README.md	/^### Complex text objects defined by functions$/;"	S
Concept	.config/nvim/plugged/defx.nvim/README.md	/^## Concept$/;"	s
Configurable and extensible	.vim/plugged/vim-airline/README.md	/^## Configurable and extensible$/;"	s
Configuration	.config/nvim/plugged/comfortable-motion.vim/README.md	/^## Configuration$/;"	s
Configuration	.config/nvim/plugged/goyo.vim/README.md	/^Configuration$/;"	s
Configuration	.config/nvim/plugged/oceanic-next/README.md	/^## Configuration$/;"	s
Configuration	.config/nvim/plugged/vim-tmux-navigator/README.md	/^Configuration$/;"	s
Configuration	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^export class Configuration {$/;"	c
Configuration	.vim/plugged/fzf/README-VIM.md	/^### Configuration$/;"	S
Configuration	.vim/plugged/omnisharp-vim/README.md	/^## Configuration$/;"	s
Configuration 1: map `kj` to escape (default and recommended since i use this one)	.config/nvim/plugged/vim-easyescape-plus/README.md	/^### Configuration 1: map `kj` to escape (default and recommended since i use this one)$/;"	S
Configuration Examples	.config/nvim/plugged/defx.nvim/README.md	/^## Configuration Examples$/;"	s
ConfigurationChangeEvent	.vim/plugged/coc.nvim/src/types.ts	/^export interface ConfigurationChangeEvent {$/;"	i
ConfigurationFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class ConfigurationFeature$/;"	c
ConfigurationFeature	.vim/plugged/coc.nvim/src/language-client/configuration.ts	/^export class ConfigurationFeature implements StaticFeature {$/;"	c
ConfigurationInspect	.vim/plugged/coc.nvim/src/types.ts	/^export interface ConfigurationInspect<T> {$/;"	i
ConfigurationModel	.vim/plugged/coc.nvim/src/configuration/model.ts	/^export class ConfigurationModel implements IConfigurationModel {$/;"	c
ConfigurationProxy	.vim/plugged/coc.nvim/src/configuration/shape.ts	/^export default class ConfigurationProxy implements ConfigurationShape {$/;"	c
ConfigurationShape	.vim/plugged/coc.nvim/src/types.ts	/^export interface ConfigurationShape {$/;"	i
ConfigurationTarget	.vim/plugged/coc.nvim/src/configuration/index.ts	/^        let target = isUser ? ConfigurationTarget.User : ConfigurationTarget.Workspace$/;"	v
ConfigurationTarget	.vim/plugged/coc.nvim/src/types.ts	/^export enum ConfigurationTarget {$/;"	g
ConfigurationWorkspaceMiddleware	.vim/plugged/coc.nvim/src/language-client/configuration.ts	/^export interface ConfigurationWorkspaceMiddleware {$/;"	i
Configurations	.vim/plugged/coc.nvim/src/configuration/index.ts	/^export default class Configurations {$/;"	c
Configure	.config/nvim/plugged/html5.vim/README.md	/^## Configure$/;"	s
ConnectionCloseHandler	.vim/plugged/coc.nvim/src/language-client/client.ts	/^interface ConnectionCloseHandler {$/;"	i
ConnectionErrorHandler	.vim/plugged/coc.nvim/src/language-client/client.ts	/^interface ConnectionErrorHandler {$/;"	i
Console	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bang -bar -nargs=* -complete=customlist,s:Complete_environments Console   :R/;"	c
ConsoleLogger	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class ConsoleLogger implements Logger {$/;"	c
Constrain	.vim/plugged/fzf/src/util/util.go	/^func Constrain(val int, min int, max int) int {$/;"	f	package:util	typeref:typename:int
Constrain32	.vim/plugged/fzf/src/util/util.go	/^func Constrain32(val int32, min int32, max int32) int32 {$/;"	f	package:util	typeref:typename:int32
ContainerProxy	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^class ContainerProxy(Proxy):$/;"	c
ContainerProxy	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^class ContainerProxy(Proxy):$/;"	c
Contents	.config/nvim/plugged/vim-snippets/README.md	/^Contents$/;"	s
Contents	.vim/plugged/vim-snippets/README.md	/^Contents$/;"	s
Context	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^class Context(typing.NamedTuple):$/;"	c
Context	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/context.py	/^class Context(object):$/;"	c
Context	.vim/plugged/denite.nvim/rplugin/python3/denite/context.py	/^class Context(object):$/;"	c
ContextSnippets_ContextHasAccessToVisual	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_ContextHasAccessToVisual(_VimTest):$/;"	c
ContextSnippets_ContextIsClearedBeforeExpand	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_ContextIsClearedBeforeExpand(_VimTest):$/;"	c
ContextSnippets_CursorIsZeroBased	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_CursorIsZeroBased(_VimTest):$/;"	c
ContextSnippets_DoNotExpandOnFalse	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_DoNotExpandOnFalse(_VimTest):$/;"	c
ContextSnippets_ExpandOnTrue	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_ExpandOnTrue(_VimTest):$/;"	c
ContextSnippets_Header_DoNotExpandOnFalse	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_Header_DoNotExpandOnFalse(_VimTest):$/;"	c
ContextSnippets_Header_ExpandOnTrue	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_Header_ExpandOnTrue(_VimTest):$/;"	c
ContextSnippets_PriorityKeyword	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_PriorityKeyword(_VimTest):$/;"	c
ContextSnippets_ReportError	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_ReportError(_VimTest):$/;"	c
ContextSnippets_ReportErrorOnIndexOutOfRange	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_ReportErrorOnIndexOutOfRange(_VimTest):$/;"	c
ContextSnippets_SimpleSnippet	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_SimpleSnippet(_VimTest):$/;"	c
ContextSnippets_SnippetPriority	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_SnippetPriority(_VimTest):$/;"	c
ContextSnippets_UseContext	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_UseContext(_VimTest):$/;"	c
Continue	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  Continue = 1,$/;"	e	enum:ErrorAction
Contrast options	.config/nvim/plugged/gruvbox/README.md	/^Contrast options$/;"	s
Contribute Code	.vim/plugged/coc.nvim/CONTRIBUTING.md	/^## Contribute Code$/;"	s
Contribute Documentation	.vim/plugged/coc.nvim/CONTRIBUTING.md	/^## Contribute Documentation$/;"	s
Contributing	.config/nvim/plugged/dsf.vim/CONTRIBUTING.md	/^# Contributing$/;"	c
Contributing	.config/nvim/plugged/dsf.vim/README.md	/^## Contributing$/;"	s
Contributing	.config/nvim/plugged/switch.vim/CONTRIBUTING.md	/^# Contributing$/;"	c
Contributing	.config/nvim/plugged/switch.vim/README.md	/^## Contributing$/;"	s
Contributing	.config/nvim/plugged/tagalong.vim/CONTRIBUTING.md	/^# Contributing$/;"	c
Contributing	.config/nvim/plugged/tagalong.vim/README.md	/^## Contributing$/;"	s
Contributing	.config/nvim/plugged/vim-gutentags/CONTRIBUTING.md	/^# Contributing$/;"	c
Contributing	.config/nvim/plugged/vim-repeat/README.markdown	/^## Contributing$/;"	s
Contributing	.config/nvim/plugged/vim-rsi/README.markdown	/^## Contributing$/;"	s
Contributing	.config/nvim/plugged/vim-surround/README.markdown	/^## Contributing$/;"	s
Contributing	.config/nvim/plugged/vista.vim/README.md	/^## Contributing$/;"	s
Contributing	.vim/plugged/coc.nvim/CONTRIBUTING.md	/^# Contributing$/;"	c
Contributing	.vim/plugged/omnisharp-vim/README.md	/^## Contributing$/;"	s
Contributing	.vim/plugged/vim-surround/README.markdown	/^## Contributing$/;"	s
Contributing to UltiSnips	.config/nvim/plugged/ultisnips/CONTRIBUTING.md	/^# Contributing to UltiSnips$/;"	c
Contributions	.config/nvim/plugged/gruvbox/README.md	/^Contributions$/;"	s
Contributions	.vim/plugged/vim-airline/CONTRIBUTING.md	/^# Contributions$/;"	c
Contributor Covenant Code of Conduct	.config/nvim/plugged/dsf.vim/CODE_OF_CONDUCT.md	/^# Contributor Covenant Code of Conduct$/;"	c
Contributor Covenant Code of Conduct	.config/nvim/plugged/tagalong.vim/CODE_OF_CONDUCT.md	/^# Contributor Covenant Code of Conduct$/;"	c
CopyRunes	.vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) CopyRunes(dest []rune) {$/;"	f	struct:util.Chars
CountItems	.vim/plugged/fzf/src/chunklist.go	/^func CountItems(cs []*Chunk) int {$/;"	f	package:fzf	typeref:typename:int
Create your own theme	.vim/plugged/papercolor-theme/DESIGN.md	/^# Create your own theme$/;"	c
CreateParamsSignature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^interface CreateParamsSignature<E, P> {$/;"	i
Credits	.config/nvim/plugged/vim-textobj-rubyblock/README.md	/^Credits$/;"	c
Criteria	.vim/plugged/fzf/src/options.go	/^	Criteria    []criterion$/;"	m	struct:fzf.Options	typeref:typename:[]criterion
Ctags	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=0 Ctags       :execute s:TagsCommand()$/;"	c
CtrlA	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlA$/;"	c	package:tui
CtrlAltA	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlAltA = AltZ + 1$/;"	c	package:tui
CtrlAltM	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlAltM = CtrlAltA + 'm' - 'a'$/;"	c	package:tui
CtrlB	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlB$/;"	c	package:tui
CtrlC	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlC$/;"	c	package:tui
CtrlD	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlD$/;"	c	package:tui
CtrlE	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlE$/;"	c	package:tui
CtrlF	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlF$/;"	c	package:tui
CtrlG	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlG$/;"	c	package:tui
CtrlH	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlH$/;"	c	package:tui
CtrlJ	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlJ$/;"	c	package:tui
CtrlK	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlK$/;"	c	package:tui
CtrlL	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlL$/;"	c	package:tui
CtrlM	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlM$/;"	c	package:tui
CtrlN	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlN$/;"	c	package:tui
CtrlO	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlO$/;"	c	package:tui
CtrlP	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlP$/;"	c	package:tui
CtrlQ	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlQ$/;"	c	package:tui
CtrlR	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlR$/;"	c	package:tui
CtrlS	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlS$/;"	c	package:tui
CtrlSpace	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlSpace$/;"	c	package:tui
CtrlT	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlT$/;"	c	package:tui
CtrlU	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlU$/;"	c	package:tui
CtrlV	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlV$/;"	c	package:tui
CtrlW	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlW$/;"	c	package:tui
CtrlX	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlX$/;"	c	package:tui
CtrlY	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlY$/;"	c	package:tui
CtrlZ	.vim/plugged/fzf/src/tui/tui.go	/^	CtrlZ$/;"	c	package:tui
CurlyClose	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  CurlyClose,$/;"	e	enum:TokenType
CurlyOpen	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  CurlyOpen,$/;"	e	enum:TokenType
Current	.vim/plugged/fzf/src/tui/tui.go	/^	Current      Color$/;"	m	struct:tui.ColorTheme	typeref:typename:Color
CurrentMatch	.vim/plugged/fzf/src/tui/tui.go	/^	CurrentMatch Color$/;"	m	struct:tui.ColorTheme	typeref:typename:Color
Currently available language options	.vim/plugged/papercolor-theme/README.md	/^#### Currently available language options$/;"	t
Currently available theme options	.vim/plugged/papercolor-theme/README.md	/^#### Currently available theme options$/;"	t
Cursor	.vim/plugged/fzf/src/tui/tui.go	/^	Cursor       Color$/;"	m	struct:tui.ColorTheme	typeref:typename:Color
CursorMovement_BS_InEditMode	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^class CursorMovement_BS_InEditMode(_VimTest):$/;"	c
CursorMovement_Multiline_ECR	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^class CursorMovement_Multiline_ECR(_VimTest):$/;"	c
CursorPos	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^function! CursorPos()$/;"	f
CursorPos	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^function! CursorPos()$/;"	f
CursorPos	.config/nvim/plugged/vim-easymotion/t/operator_pending_spec.vim	/^function! CursorPos()$/;"	f
CursorPos	.config/nvim/plugged/vim-easymotion/t/smartsign_spec.vim	/^function! CursorPos()$/;"	f
CursorPosition	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^export interface CursorPosition {$/;"	i
Custom Key Bindings	.config/nvim/plugged/vim-tmux-navigator/README.md	/^### Custom Key Bindings$/;"	S
Custom statusline	.config/nvim/plugged/fzf.vim/README.md	/^### Custom statusline$/;"	S
Customization	.config/nvim/plugged/fzf.vim/README.md	/^### Customization$/;"	S
Customization	.config/nvim/plugged/switch.vim/README.md	/^## Customization$/;"	s
Customization	.vim/plugged/leetcode.vim/README.md	/^## Customization$/;"	s
Customize Current Theme Colors	.vim/plugged/papercolor-theme/DESIGN.md	/^# Customize Current Theme Colors$/;"	c
Customize seeking	.config/nvim/plugged/targets.vim/cheatsheet.md	/^## Customize seeking$/;"	s
Cycle	.vim/plugged/fzf/src/options.go	/^	Cycle       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
D	.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
D	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
D	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  D = 68,$/;"	e	enum:CharCode
DB	.vim/plugged/coc.nvim/src/model/db.ts	/^export default class DB {$/;"	c
DB_FILE	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DEBUG	.vim/plugged/fzf/src/algo/algo.go	/^var DEBUG bool$/;"	v	package:algo	typeref:typename:bool
DEFAULT_SKIP_LIST	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/scantree.py	/^DEFAULT_SKIP_LIST = ['.git', '.hg']$/;"	v
DEFAULT_SKIP_LIST	.vim/plugged/denite.nvim/rplugin/python3/denite/scantree.py	/^DEFAULT_SKIP_LIST = ['.git', '.hg']$/;"	v
DEPEND_DIR	.config/nvim/plugged/html5.vim/Makefile	/^DEPEND_DIR=\/tmp\/vim-deps$/;"	m
DESCRIPTION	.vim/plugged/fzf/man/man1/fzf-tmux.1	/^.SH DESCRIPTION$/;"	s	title:fzf-tmux
DESCRIPTION	.vim/plugged/fzf/man/man1/fzf.1	/^.SH DESCRIPTION$/;"	s	title:fzf
DIRS	.config/nvim/plugged/html5.vim/Makefile	/^DIRS=`ls -1F | grep \/ | sed -e 's\/\\\/\/\/'`$/;"	m
DUMP_FILENAME	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/debug.py	/^DUMP_FILENAME = '\/tmp\/file.txt' if not sys.platform.lower().startswith('win') \\$/;"	v
Dark mode	.config/nvim/plugged/gruvbox/README.md	/^### Dark mode$/;"	S
Dark256	.vim/plugged/fzf/src/tui/tui.go	/^	Dark256   *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
DarkBg	.vim/plugged/fzf/src/tui/tui.go	/^	DarkBg       Color$/;"	m	struct:tui.ColorTheme	typeref:typename:Color
Dash	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  Dash,$/;"	e	enum:TokenType
Dash	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Dash = 45,$/;"	e	enum:CharCode
Debugging	.vim/plugged/nvim-yarp/README.md	/^## Debugging$/;"	s
Debugging	.vim/plugged/vim-hug-neovim-rpc/README.md	/^## Debugging$/;"	s
DeclarationFeature	.vim/plugged/coc.nvim/src/language-client/declaration.ts	/^export class DeclarationFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> {$/;"	c
DeclarationManager	.vim/plugged/coc.nvim/src/provider/declarationManager.ts	/^export default class DeclarationManager extends Manager<DeclarationProvider> implements Disposab/;"	c
DeclarationMiddleware	.vim/plugged/coc.nvim/src/language-client/declaration.ts	/^export interface DeclarationMiddleware {$/;"	i
DeclarationProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface DeclarationProvider {$/;"	i
Default	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^class Default(object):$/;"	c
Default	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^class Default(object):$/;"	c
Default bindings	.config/nvim/plugged/vim-easymotion/README.md	/^### Default bindings$/;"	S
Default16	.vim/plugged/fzf/src/tui/tui.go	/^	Default16 *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
DefaultErrorHandler	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class DefaultErrorHandler implements ErrorHandler {$/;"	c
DefinitionFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class DefinitionFeature extends TextDocumentFeature<$/;"	c
DefinitionManager	.vim/plugged/coc.nvim/src/provider/definitionManager.ts	/^export default class DefinitionManager extends Manager<DefinitionProvider> implements Disposable/;"	c
DefinitionProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface DefinitionProvider {$/;"	i
Defx	.config/nvim/plugged/defx.nvim/plugin/defx.vim	/^      \\ Defx$/;"	c
Defx	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/defx.py	/^class Defx(object):$/;"	c
DefxHandlers	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/__init__.py	/^    class DefxHandlers:$/;"	c
Del	.vim/plugged/fzf/src/tui/tui.go	/^	Del$/;"	c	package:tui
Delayer	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^export class Delayer<T> implements Disposable {$/;"	c
DeleteCurrentTabStop1_JumpBack	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class DeleteCurrentTabStop1_JumpBack(_VimTest):$/;"	c
DeleteCurrentTabStop2_JumpBack	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class DeleteCurrentTabStop2_JumpBack(_VimTest):$/;"	c
DeleteCurrentTabStop3_JumpAround	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class DeleteCurrentTabStop3_JumpAround(_VimTest):$/;"	c
DeleteLastTwoLinesInSnippet	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class DeleteLastTwoLinesInSnippet(_VimTest):$/;"	c
DeleteSnippetInsertion0	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class DeleteSnippetInsertion0(_VimTest):$/;"	c
DeleteSnippetInsertion1	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class DeleteSnippetInsertion1(_VimTest):$/;"	c
Delimiter	.vim/plugged/fzf/src/options.go	/^	Delimiter   Delimiter$/;"	m	struct:fzf.Options	typeref:typename:Delimiter
Delimiter	.vim/plugged/fzf/src/tokenizer.go	/^type Delimiter struct {$/;"	s	package:fzf
Demo	.vim/plugged/fzf/README.md	/^#### Demo$/;"	t
Denite	.config/nvim/plugged/denite.nvim/plugin/denite.vim	/^      \\ Denite$/;"	c
Denite	.vim/plugged/denite.nvim/plugin/denite.vim	/^      \\ Denite$/;"	c
DeniteBufferDir	.config/nvim/plugged/denite.nvim/plugin/denite.vim	/^      \\ DeniteBufferDir$/;"	c
DeniteBufferDir	.vim/plugged/denite.nvim/plugin/denite.vim	/^      \\ DeniteBufferDir$/;"	c
DeniteCursorWord	.config/nvim/plugged/denite.nvim/plugin/denite.vim	/^      \\ DeniteCursorWord$/;"	c
DeniteCursorWord	.vim/plugged/denite.nvim/plugin/denite.vim	/^      \\ DeniteCursorWord$/;"	c
DeniteHandlers	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    class DeniteHandlers(object):$/;"	c
DeniteHandlers	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    class DeniteHandlers(object):$/;"	c
DeniteProjectDir	.config/nvim/plugged/denite.nvim/plugin/denite.vim	/^      \\ DeniteProjectDir$/;"	c
DeniteProjectDir	.vim/plugged/denite.nvim/plugin/denite.vim	/^      \\ DeniteProjectDir$/;"	c
Dependency	.config/nvim/plugged/vim-easyescape-plus/README.md	/^## Dependency$/;"	s
Deprecated settings	.config/nvim/plugged/targets.vim/README.md	/^### Deprecated settings$/;"	S
Describe the bug	.vim/plugged/coc.nvim/.github/ISSUE_TEMPLATE/bug_report.md	/^## Describe the bug$/;"	s
Design Guideline	.vim/plugged/papercolor-theme/DESIGN.md	/^Design Guideline$/;"	c
Destroy	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=*       -complete=customlist,s:Complete_destroy  Destroy       :e/;"	c
Development	.config/nvim/plugged/vim-textobj-rubyblock/README.md	/^Development$/;"	c
Diagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^    let entries: [string, Diagnostic[] | null][] = [$/;"	v
Diagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^    let entries: [string, Diagnostic[]][] = [$/;"	v
DiagnosticBuffer	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^export class DiagnosticBuffer implements Disposable {$/;"	c
DiagnosticCollection	.vim/plugged/coc.nvim/src/types.ts	/^export interface DiagnosticCollection {$/;"	i
DiagnosticConfig	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^export interface DiagnosticConfig {$/;"	i
DiagnosticInfo	.vim/plugged/coc.nvim/src/types.ts	/^export interface DiagnosticInfo {$/;"	i
DiagnosticItem	.vim/plugged/coc.nvim/src/types.ts	/^export interface DiagnosticItem {$/;"	i
DiagnosticKind	.vim/plugged/coc.nvim/src/types.ts	/^export enum DiagnosticKind {$/;"	g
DiagnosticManager	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^export class DiagnosticManager implements Disposable {$/;"	c
DiagnosticSeverity	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        case DiagnosticSeverity.Hint:$/;"	v
DiagnosticSeverity	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        case DiagnosticSeverity.Information:$/;"	v
DiagnosticSeverity	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        case DiagnosticSeverity.Warning:$/;"	v
DiagnosticsList	.vim/plugged/coc.nvim/src/list/source/diagnostics.ts	/^export default class DiagnosticsList extends LocationList {$/;"	c
Dict definitions	.config/nvim/plugged/switch.vim/README.md	/^### Dict definitions$/;"	S
DidChangeTextDocumentData	.vim/plugged/coc.nvim/src/language-client/client.ts	/^interface DidChangeTextDocumentData {$/;"	i
DidChangeTextDocumentFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class DidChangeTextDocumentFeature$/;"	c
DidCloseTextDocumentFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class DidCloseTextDocumentFeature extends DocumentNotifiactions<$/;"	c
DidOpenTextDocumentFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class DidOpenTextDocumentFeature extends DocumentNotifiactions<DidOpenTextDocumentParams, TextDo/;"	c
DidSaveTextDocumentFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class DidSaveTextDocumentFeature extends DocumentNotifiactions<$/;"	c
Digit0	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Digit0 = 48,$/;"	e	enum:CharCode
Digit1	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Digit1 = 49,$/;"	e	enum:CharCode
Digit2	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Digit2 = 50,$/;"	e	enum:CharCode
Digit3	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Digit3 = 51,$/;"	e	enum:CharCode
Digit4	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Digit4 = 52,$/;"	e	enum:CharCode
Digit5	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Digit5 = 53,$/;"	e	enum:CharCode
Digit6	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Digit6 = 54,$/;"	e	enum:CharCode
Digit7	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Digit7 = 55,$/;"	e	enum:CharCode
Digit8	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Digit8 = 56,$/;"	e	enum:CharCode
Digit9	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Digit9 = 57,$/;"	e	enum:CharCode
Dim	.vim/plugged/fzf/src/tui/dummy.go	/^	Dim              = Attr(1 << 1)$/;"	c	package:tui
Dim	.vim/plugged/fzf/src/tui/tcell.go	/^	Dim            = Attr(tcell.AttrDim)$/;"	c	package:tui
Dimension expression	.config/nvim/plugged/goyo.vim/README.md	/^### Dimension expression$/;"	S
Disable While Zoomed	.config/nvim/plugged/vim-tmux-navigator/README.md	/^##### Disable While Zoomed$/;"	T
Disposable	.vim/plugged/coc.nvim/src/list/manager.ts	/^export class ListManager implements Disposable {$/;"	C
Disposable	.vim/plugged/coc.nvim/src/model/status.ts	/^export default class StatusLine implements Disposable {$/;"	C
Do	.config/nvim/plugged/vim-operator-user/t/register-designations.vim	/^function! Do(normal_command)$/;"	f
DoNotCrashOnUndoAndJumpInNestedSnippet	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class DoNotCrashOnUndoAndJumpInNestedSnippet(_VimTest):$/;"	c
DoNotExpandAfterSpace_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^class DoNotExpandAfterSpace_ExpectCorrectResult(_SimpleExpands):$/;"	c
DoNotRestart	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  DoNotRestart = 1,$/;"	e	enum:CloseAction
DoNotTrimSpacesAtEndOfLinesByDefault	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class DoNotTrimSpacesAtEndOfLinesByDefault(_VimTest):$/;"	c
Document	.vim/plugged/coc.nvim/src/model/document.ts	/^export default class Document {$/;"	c
DocumentColorManager	.vim/plugged/coc.nvim/src/provider/documentColorManager.ts	/^export default class DocumentColorManager extends Manager<DocumentColorProvider> implements Disp/;"	c
DocumentColorProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface DocumentColorProvider {$/;"	i
DocumentFormattingEditProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface DocumentFormattingEditProvider {$/;"	i
DocumentFormattingFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class DocumentFormattingFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> {$/;"	c
DocumentHighlightFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class DocumentHighlightFeature extends TextDocumentFeature<$/;"	c
DocumentHighlightManager	.vim/plugged/coc.nvim/src/provider/documentHighlightManager.ts	/^export default class DocumentHighlightManager extends Manager<DocumentHighlightProvider> impleme/;"	c
DocumentHighlightProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface DocumentHighlightProvider {$/;"	i
DocumentHighlighter	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^export default class DocumentHighlighter {$/;"	c
DocumentLinkFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class DocumentLinkFeature extends TextDocumentFeature<$/;"	c
DocumentLinkManager	.vim/plugged/coc.nvim/src/provider/documentLinkManager.ts	/^export default class DocumentLinkManager extends Manager<DocumentLinkProvider> implements Dispos/;"	c
DocumentLinkProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface DocumentLinkProvider {$/;"	i
DocumentNotifiactions	.vim/plugged/coc.nvim/src/language-client/client.ts	/^abstract class DocumentNotifiactions<P, E>$/;"	c
DocumentOnTypeFormattingFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class DocumentOnTypeFormattingFeature extends TextDocumentFeature<DocumentOnTypeFormattingRegist/;"	c
DocumentRangeFormattingEditProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface DocumentRangeFormattingEditProvider {$/;"	i
DocumentRangeFormattingFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class DocumentRangeFormattingFeature extends TextDocumentFeature<TextDocumentRegistrationOptions/;"	c
DocumentSymbolFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class DocumentSymbolFeature extends TextDocumentFeature<$/;"	c
DocumentSymbolManager	.vim/plugged/coc.nvim/src/provider/documentSymbolManager.ts	/^export default class DocumentSymbolManager extends Manager<DocumentSymbolProvider> implements Di/;"	c
DocumentSymbolProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface DocumentSymbolProvider {$/;"	i
Documentation	.config/nvim/plugged/gruvbox/README.md	/^Documentation$/;"	s
Documentation	.vim/plugged/coc.nvim/src/types.ts	/^export interface Documentation {$/;"	i
Documentation	.vim/plugged/vim-airline/README.md	/^# Documentation$/;"	c
Documenting	.config/nvim/plugged/ultisnips/CONTRIBUTING.md	/^## Documenting$/;"	s
DoesAutoWrap	.vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) DoesAutoWrap() bool { return false }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:bool
DoesAutoWrap	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) DoesAutoWrap() bool {$/;"	f	struct:tui.LightRenderer	typeref:typename:bool
DoesAutoWrap	.vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) DoesAutoWrap() bool {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:bool
DoesAutoWrap	.vim/plugged/fzf/src/tui/tui.go	/^	DoesAutoWrap() bool$/;"	n	interface:tui.Renderer	typeref:typename:bool
Dollar	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  Dollar,$/;"	e	enum:TokenType
DollarSign	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  DollarSign = 36,$/;"	e	enum:CharCode
DoneParseArgs	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
Double	.vim/plugged/fzf/src/tui/tui.go	/^	Double bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
DoubleClick	.vim/plugged/fzf/src/tui/tui.go	/^	DoubleClick$/;"	c	package:tui
DoubleQuote	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  DoubleQuote = 34,$/;"	e	enum:CharCode
Down	.vim/plugged/fzf/src/tui/tui.go	/^	Down   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Down	.vim/plugged/fzf/src/tui/tui.go	/^	Down$/;"	c	package:tui
DurWithin	.vim/plugged/fzf/src/util/util.go	/^func DurWithin($/;"	f	package:util	typeref:typename:time.Duration
Dynamic tabstop generation	.config/nvim/plugged/ultisnips/doc/examples/tabstop-generation/README.md	/^# Dynamic tabstop generation$/;"	c
DynamicFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^export interface DynamicFeature<T> {$/;"	i
DynamicFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^namespace DynamicFeature {$/;"	n
E	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> E$/;"	m
E	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  E = 69,$/;"	e	enum:CharCode
EA	.config/nvim/plugged/ultisnips/test/constant.py	/^EA = '#'  # Expand anonymous$/;"	v
EMCommandLineMap	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^\\   EMCommandLineMap$/;"	c
EMCommandLineNoreMap	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^\\   EMCommandLineNoreMap$/;"	c
EMCommandLineUnMap	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^\\   EMCommandLineUnMap$/;"	c
ENCODING	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^ENCODING = vim.eval('&encoding')$/;"	v
ENCODING	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^ENCODING = vim.eval('&encoding')$/;"	v
ENVIRONMENT	.vim/plugged/fzf/man/man1/fzf.1	/^.SH ENVIRONMENT VARIABLES$/;"	s	title:fzf
EOF	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  EOF$/;"	e	enum:TokenType
EOF	.vim/plugged/fzf/install	/^  cat << EOF$/;"	h
EOF	.vim/plugged/fzf/install	/^  cat > "$src" << EOF$/;"	h
EOF	.vim/plugged/fzf/install	/^  fish << EOF$/;"	h
EOF	.vim/plugged/fzf/uninstall	/^  cat << EOF$/;"	h
EOF	.vim/plugged/omnisharp-vim/installer/omnisharp-manager.sh	/^    cat << EOF$/;"	h
EOF	.vim/plugged/papercolor-theme/test/test.sh	/^cat > "${custom_rtp}\/.vimrc" <<- EOF$/;"	h
ERB	.config/nvim/plugged/tagalong.vim/spec/plugin/filetype_support_spec.rb	/^  describe "ERB" do$/;"	d
ESC	.config/nvim/plugged/ultisnips/test/constant.py	/^ESC = '\\x1b'$/;"	v
ESC	.vim/plugged/fzf/src/tui/tui.go	/^	ESC$/;"	c	package:tui
EX	.config/nvim/plugged/ultisnips/test/constant.py	/^EX = '\\t'  # EXPAND$/;"	v
EXIT	.vim/plugged/fzf/man/man1/fzf.1	/^.SH EXIT STATUS$/;"	s	title:fzf
EXTENDED	.vim/plugged/fzf/man/man1/fzf.1	/^.SH EXTENDED SEARCH MODE$/;"	s	title:fzf
EasyMotion#DotRepeat	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#DotRepeat() " {{{$/;"	f
EasyMotion#E	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#E(visualmode, direction) " {{{$/;"	f
EasyMotion#EK	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#EK(visualmode, direction) " {{{$/;"	f
EasyMotion#EL	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#EL(visualmode, direction) " {{{$/;"	f
EasyMotion#EW	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#EW(visualmode, direction) " {{{$/;"	f
EasyMotion#Eol	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#Eol(visualmode, direction) " {{{$/;"	f
EasyMotion#JK	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#JK(visualmode, direction) " {{{$/;"	f
EasyMotion#JumpToAnywhere	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#JumpToAnywhere(visualmode, direction) " {{{$/;"	f
EasyMotion#LineAnywhere	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#LineAnywhere(visualmode, direction) " {{{$/;"	f
EasyMotion#NextPrevious	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#NextPrevious(visualmode, direction) " {{{$/;"	f
EasyMotion#OverwinF	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#OverwinF(num_strokes) " {{{$/;"	f
EasyMotion#Repeat	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#Repeat(visualmode) " {{{$/;"	f
EasyMotion#S	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#S(num_strokes, visualmode, direction) " {{{$/;"	f
EasyMotion#SL	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#SL(num_strokes, visualmode, direction) " {{{$/;"	f
EasyMotion#Search	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#Search(visualmode, direction, respect_direction) " {{{$/;"	f
EasyMotion#Sol	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#Sol(visualmode, direction) " {{{$/;"	f
EasyMotion#T	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#T(num_strokes, visualmode, direction) " {{{$/;"	f
EasyMotion#TL	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#TL(num_strokes, visualmode, direction) " {{{$/;"	f
EasyMotion#User	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#User(pattern, visualmode, direction, inclusive, ...) " {{{$/;"	f
EasyMotion#WB	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#WB(visualmode, direction) " {{{$/;"	f
EasyMotion#WBK	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#WBK(visualmode, direction) " {{{$/;"	f
EasyMotion#WBL	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#WBL(visualmode, direction) " {{{$/;"	f
EasyMotion#WBW	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#WBW(visualmode, direction) " {{{$/;"	f
EasyMotion#activate	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#activate(is_visual) "{{{$/;"	f
EasyMotion#attach_active_autocmd	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#attach_active_autocmd() "{{{$/;"	f
EasyMotion#cmigemo#getMigemoPattern	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/cmigemo.vim	/^function! EasyMotion#cmigemo#getMigemoPattern(input) "{{{$/;"	f
EasyMotion#cmigemo#system	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/cmigemo.vim	/^function! EasyMotion#cmigemo#system(...) "{{{$/;"	f
EasyMotion#command_line#GetInput	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! EasyMotion#command_line#GetInput(num_strokes, prev, direction) "{{{$/;"	f
EasyMotion#command_line#cmap	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! EasyMotion#command_line#cmap(args)$/;"	f
EasyMotion#command_line#cnoremap	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! EasyMotion#command_line#cnoremap(args)$/;"	f
EasyMotion#command_line#cunmap	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! EasyMotion#command_line#cunmap(lhs)$/;"	f
EasyMotion#go	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#go(...) abort$/;"	f
EasyMotion#helper#VarReset	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/helper.vim	/^function! EasyMotion#helper#VarReset(var, ...) "{{{$/;"	f
EasyMotion#helper#get_char_by_coord	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/helper.vim	/^function! EasyMotion#helper#get_char_by_coord(coord) "{{{$/;"	f
EasyMotion#helper#include_multibyte_char	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/helper.vim	/^function! EasyMotion#helper#include_multibyte_char(str) "{{{$/;"	f
EasyMotion#helper#is_folded	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/helper.vim	/^function! EasyMotion#helper#is_folded(line) "{{{$/;"	f
EasyMotion#helper#is_greater_coords	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/helper.vim	/^function! EasyMotion#helper#is_greater_coords(coords1, coords2) "{{{$/;"	f
EasyMotion#helper#load_migemo_dict	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/helper.vim	/^function! EasyMotion#helper#load_migemo_dict() "{{{$/;"	f
EasyMotion#helper#mode	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/helper.vim	/^function! EasyMotion#helper#mode(flag) "{{{$/;"	f
EasyMotion#helper#should_case_sensitive	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/helper.vim	/^function! EasyMotion#helper#should_case_sensitive(input, is_search) "{{{$/;"	f
EasyMotion#helper#silent_feedkeys	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/helper.vim	/^function! EasyMotion#helper#silent_feedkeys(expr, name, ...) "{{{$/;"	f
EasyMotion#helper#strchars	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/helper.vim	/^    function! EasyMotion#helper#strchars(str)$/;"	f
EasyMotion#helper#vcol	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/helper.vim	/^function! EasyMotion#helper#vcol(expr) abort$/;"	f
EasyMotion#highlight#InitHL	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^function! EasyMotion#highlight#InitHL(group, colors) " {{{$/;"	f
EasyMotion#highlight#add_color_group	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^function! EasyMotion#highlight#add_color_group(new_groups) "{{{$/;"	f
EasyMotion#highlight#add_highlight	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^function! EasyMotion#highlight#add_highlight(re, group) "{{{$/;"	f
EasyMotion#highlight#add_pos_highlight	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^function! EasyMotion#highlight#add_pos_highlight(line_num, col_num, group) "{{{$/;"	f
EasyMotion#highlight#attach_autocmd	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^function! EasyMotion#highlight#attach_autocmd() "{{{$/;"	f
EasyMotion#highlight#capture	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^function! EasyMotion#highlight#capture(hlname) "{{{$/;"	f
EasyMotion#highlight#delete_highlight	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^function! EasyMotion#highlight#delete_highlight(...) "{{{$/;"	f
EasyMotion#highlight#init	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^function! EasyMotion#highlight#init() "{{{$/;"	f
EasyMotion#highlight#load	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^function! EasyMotion#highlight#load()$/;"	f
EasyMotion#highlight#turn_off	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^function! EasyMotion#highlight#turn_off(hl) "{{{$/;"	f
EasyMotion#highlight#turn_on	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^function! EasyMotion#highlight#turn_on(hl) "{{{$/;"	f
EasyMotion#init	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#init()$/;"	f
EasyMotion#is_active	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#is_active() "{{{$/;"	f
EasyMotion#migemo#cp932#load_dict	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/migemo/cp932.vim	/^function! EasyMotion#migemo#cp932#load_dict()$/;"	f
EasyMotion#migemo#eucjp#load_dict	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/migemo/eucjp.vim	/^function! EasyMotion#migemo#eucjp#load_dict()$/;"	f
EasyMotion#migemo#utf8#load_dict	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/migemo/utf8.vim	/^function! EasyMotion#migemo#utf8#load_dict()$/;"	f
EasyMotion#overwin#line	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/overwin.vim	/^function! EasyMotion#overwin#line() abort$/;"	f
EasyMotion#overwin#move	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/overwin.vim	/^function! EasyMotion#overwin#move(pattern) abort$/;"	f
EasyMotion#overwin#w	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/overwin.vim	/^function! EasyMotion#overwin#w() abort$/;"	f
EasyMotion#reset	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! EasyMotion#reset()$/;"	f
EasyMotion#sticky_table#jp	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/sticky_table.vim	/^let EasyMotion#sticky_table#jp = {$/;"	v
EasyMotion#sticky_table#us	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/sticky_table.vim	/^let EasyMotion#sticky_table#us = {$/;"	v
EasyMotion#undo#save	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/undo.vim	/^function! EasyMotion#undo#save() abort$/;"	f
EasyMotionInitHL	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^augroup EasyMotionInitHL$/;"	a
EasyescapeMapEnd	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^function! <SID>EasyescapeMapEnd(char)$/;"	f
EasyescapeMapStart	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^function! <SID>EasyescapeMapStart(char)$/;"	f
EditableTextObject	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^class EditableTextObject(TextObject):$/;"	c
EditerState	.vim/plugged/coc.nvim/src/types.ts	/^export interface EditerState {$/;"	i
EmailField	.config/nvim/plugged/oceanic-next/test/test.jsx	/^const EmailField = function (props) {$/;"	f
Emmet	.config/nvim/plugged/emmet-vim/plugin/emmet.vim	/^  command! -nargs=1 Emmet call emmet#expandAbbr(4, <q-args>)$/;"	c
EmmetInstall	.config/nvim/plugged/emmet-vim/plugin/emmet.vim	/^command! -nargs=0 -bar EmmetInstall call <SID>install_plugin(get(g:, 'user_emmet_mode', 'a'), 1)$/;"	c
EmmetUnitTest	.config/nvim/plugged/emmet-vim/unittest.vim	/^command! -bang -nargs=* -complete=customlist,<SID>emmet_unittest_complete EmmetUnitTest call s:d/;"	c
EmptyEvents	.vim/plugged/coc.nvim/src/events.ts	/^export type EmptyEvents = 'FocusGained'$/;"	a
EmptyMerger	.vim/plugged/fzf/src/merger.go	/^var EmptyMerger = NewMerger(nil, [][]Result{}, false, false)$/;"	v	package:fzf
EmptyTheme	.vim/plugged/fzf/src/tui/tui.go	/^func EmptyTheme() *ColorTheme {$/;"	f	package:tui	typeref:typename:*ColorTheme
Enclose	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Enclose(y int, x int) bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
Enclose	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Enclose(y int, x int) bool {$/;"	f	struct:tui.TcellWindow	typeref:typename:bool
Enclose	.vim/plugged/fzf/src/tui/tui.go	/^	Enclose(y int, x int) bool$/;"	n	interface:tui.Window	typeref:typename:bool
End	.vim/plugged/fzf/src/algo/algo.go	/^	End   int$/;"	m	struct:algo.Result	typeref:typename:int
End	.vim/plugged/fzf/src/tui/tui.go	/^	End$/;"	c	package:tui
EndOfTextToken	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^class EndOfTextToken(Token):$/;"	c
Enforcement	.config/nvim/plugged/dsf.vim/CODE_OF_CONDUCT.md	/^## Enforcement$/;"	s
Enforcement	.config/nvim/plugged/tagalong.vim/CODE_OF_CONDUCT.md	/^## Enforcement$/;"	s
Env	.vim/plugged/coc.nvim/src/types.ts	/^export interface Env {$/;"	i
Env	.vim/plugged/coc.nvim/src/util/highlight.ts	/^interface Env {$/;"	i
Environment Information	.config/nvim/plugged/defx.nvim/.github/ISSUE_TEMPLATE.md	/^## Environment Information$/;"	s
Environment Information	.config/nvim/plugged/oceanic-next/.github/ISSUE_TEMPLATE.md	/^## Environment Information$/;"	s
Environment Information (Required!)	.config/nvim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^## Environment Information (Required!)$/;"	s
Environment Information (Required!)	.vim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^## Environment Information (Required!)$/;"	s
Environment variables	.vim/plugged/fzf/README.md	/^#### Environment variables$/;"	t
Environment variables / Aliases	.vim/plugged/fzf/README.md	/^#### Environment variables \/ Aliases$/;"	t
EqualMatch	.vim/plugged/fzf/src/algo/algo.go	/^func EqualMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []ru/;"	f	package:algo	typeref:typename:(Result, *[]int)
Equals	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Equals = 61,$/;"	e	enum:CharCode
Erase	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Erase() {$/;"	f	struct:tui.LightWindow
Erase	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Erase() {$/;"	f	struct:tui.TcellWindow
Erase	.vim/plugged/fzf/src/tui/tui.go	/^	Erase()$/;"	n	interface:tui.Window
Error	.vim/plugged/coc.nvim/src/list/manager.ts	/^      let msg = e instanceof Error ? e.message : e.toString()$/;"	C
Error	.vim/plugged/coc.nvim/src/types.ts	/^  Error$/;"	e	enum:MessageLevel
ErrorAction	.vim/plugged/coc.nvim/src/language-client/client.ts	/^export enum ErrorAction {$/;"	g
ErrorHandler	.vim/plugged/coc.nvim/src/language-client/client.ts	/^export interface ErrorHandler {$/;"	i
ErrorItem	.vim/plugged/coc.nvim/src/types.ts	/^export interface ErrorItem {$/;"	i
ErrorList	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^class ErrorList extends BasicList {$/;"	c
ErrorTaskList	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^class ErrorTaskList extends BasicList {$/;"	c
Eruby	.config/nvim/plugged/switch.vim/README.md	/^### Eruby$/;"	S
ErubyAtCursor	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^function! ErubyAtCursor() abort$/;"	f
EscapeCharToken	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^class EscapeCharToken(Token):$/;"	c
EscapedChar	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_escaped_char.py	/^class EscapedChar(NoneditableTextObject):$/;"	c
Event	.vim/plugged/fzf/src/tui/tui.go	/^type Event struct {$/;"	s	package:tui
EventBox	.vim/plugged/fzf/src/util/eventbox.go	/^type EventBox struct {$/;"	s	package:util
EventType	.vim/plugged/fzf/src/util/eventbox.go	/^type EventType int$/;"	t	package:util	typeref:typename:int
Events	.vim/plugged/coc.nvim/src/events.ts	/^class Events {$/;"	c
Events	.vim/plugged/fzf/src/util/eventbox.go	/^type Events map[EventType]interface{}$/;"	t	package:util	typeref:typename:map[EventType]interface{}
EvtClose	.vim/plugged/fzf/src/util/eventbox_test.go	/^	EvtClose$/;"	c	package:util
EvtHeader	.vim/plugged/fzf/src/constants.go	/^	EvtHeader$/;"	c	package:fzf
EvtReadFin	.vim/plugged/fzf/src/constants.go	/^	EvtReadFin$/;"	c	package:fzf
EvtReadFin	.vim/plugged/fzf/src/util/eventbox_test.go	/^	EvtReadFin$/;"	c	package:util
EvtReadNew	.vim/plugged/fzf/src/constants.go	/^	EvtReadNew util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
EvtReadNew	.vim/plugged/fzf/src/util/eventbox_test.go	/^	EvtReadNew EventType = iota$/;"	c	package:util	typeref:typename:EventType
EvtReady	.vim/plugged/fzf/src/constants.go	/^	EvtReady$/;"	c	package:fzf
EvtSearchFin	.vim/plugged/fzf/src/constants.go	/^	EvtSearchFin$/;"	c	package:fzf
EvtSearchFin	.vim/plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchFin$/;"	c	package:util
EvtSearchNew	.vim/plugged/fzf/src/constants.go	/^	EvtSearchNew$/;"	c	package:fzf
EvtSearchNew	.vim/plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchNew$/;"	c	package:util
EvtSearchProgress	.vim/plugged/fzf/src/constants.go	/^	EvtSearchProgress$/;"	c	package:fzf
EvtSearchProgress	.vim/plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchProgress$/;"	c	package:util
ExactMatchNaive	.vim/plugged/fzf/src/algo/algo.go	/^func ExactMatchNaive(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern/;"	f	package:algo	typeref:typename:(Result, *[]int)
Example	.config/nvim/plugged/vim-projectionist/README.markdown	/^## Example$/;"	s
Example configuration	.config/nvim/plugged/vim-easymotion/README.md	/^#### Example configuration$/;"	t
Example for existing neovim rplugin porting to Vim 8	.vim/plugged/nvim-yarp/README.md	/^## Example for existing neovim rplugin porting to Vim 8$/;"	s
Example vim configuration	.config/nvim/plugged/coc.nvim/Readme.md	/^## Example vim configuration$/;"	s
Example vim configuration	.vim/plugged/coc.nvim/Readme.md	/^## Example vim configuration$/;"	s
Example vimrc	.vim/plugged/omnisharp-vim/README.md	/^### Example vimrc$/;"	S
Examples	.config/nvim/plugged/denite.nvim/README.md	/^## Examples$/;"	s
Examples	.config/nvim/plugged/targets.vim/README.md	/^## Examples$/;"	s
Examples	.config/nvim/plugged/vim-textobj-user/README.md	/^## Examples$/;"	s
Examples	.vim/plugged/denite.nvim/README.md	/^## Examples$/;"	s
Examples	.vim/plugged/fzf/README-VIM.md	/^#### Examples$/;"	t
Examples	.vim/plugged/fzf/README.md	/^Examples$/;"	s
Examples	.vim/plugged/omnisharp-vim/installer/README.md	/^### Examples$/;"	S
Exchanger	.vim/plugged/ghost-text.vim/python3/exchanger.py	/^class Exchanger:$/;"	c
ExclamationMark	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  ExclamationMark = 33,$/;"	e	enum:CharCode
ExclusiveSelection_RealWorldCase_Test	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^class ExclusiveSelection_RealWorldCase_Test(_ES_Base):$/;"	c
ExclusiveSelection_SimpleTabstop_Test	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^class ExclusiveSelection_SimpleTabstop_Test(_ES_Base):$/;"	c
ExecCommand	.vim/plugged/fzf/src/util/util_unix.go	/^func ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommand	.vim/plugged/fzf/src/util/util_windows.go	/^func ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommandWith	.vim/plugged/fzf/src/util/util_unix.go	/^func ExecCommandWith(shell string, command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommandWith	.vim/plugged/fzf/src/util/util_windows.go	/^func ExecCommandWith(_shell string, command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
Executable	.vim/plugged/coc.nvim/src/language-client/index.ts	/^export interface Executable {$/;"	i
Executable	.vim/plugged/coc.nvim/src/language-client/index.ts	/^namespace Executable {$/;"	n
ExecuteCommandFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class ExecuteCommandFeature$/;"	c
Executing external programs	.vim/plugged/fzf/README.md	/^### Executing external programs$/;"	S
Exit0	.vim/plugged/fzf/src/options.go	/^	Exit0       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
ExitSnippetModeAfterTabstopZero	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^class ExitSnippetModeAfterTabstopZero(_VimTest):$/;"	c
ExpandInTheMiddleOfLine_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^class ExpandInTheMiddleOfLine_ExpectCorrectResult(_SimpleExpands):$/;"	c
Expect	.vim/plugged/fzf/src/options.go	/^	Expect      map[int]string$/;"	m	struct:fzf.Options	typeref:typename:map[int]string
Expected	.config/nvim/plugged/defx.nvim/.github/ISSUE_TEMPLATE.md	/^## Expected$/;"	s
Expected	.config/nvim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^## Expected$/;"	s
Expected	.config/nvim/plugged/oceanic-next/.github/ISSUE_TEMPLATE.md	/^## Expected$/;"	s
Expected	.vim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^## Expected$/;"	s
Extended	.vim/plugged/fzf/src/options.go	/^	Extended    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Extended Colors	.vim/plugged/papercolor-theme/DESIGN.md	/^## Extended Colors$/;"	s
ExtendedItem	.vim/plugged/coc.nvim/src/list/worker.ts	/^        for (let item of filtered as ExtendedItem[]) {$/;"	v
ExtendedItem	.vim/plugged/coc.nvim/src/list/worker.ts	/^export interface ExtendedItem extends ListItem {$/;"	i
Extensible pipeline	.vim/plugged/vim-airline/README.md	/^#### Extensible pipeline$/;"	t
Extension	.vim/plugged/coc.nvim/src/types.ts	/^export interface Extension<T> {$/;"	i
ExtensionContext	.vim/plugged/coc.nvim/src/types.ts	/^export interface ExtensionContext {$/;"	i
ExtensionExport	.vim/plugged/coc.nvim/src/util/factory.ts	/^export interface ExtensionExport {$/;"	i
ExtensionInfo	.vim/plugged/coc.nvim/src/types.ts	/^export interface ExtensionInfo {$/;"	i
ExtensionItem	.vim/plugged/coc.nvim/src/extensions.ts	/^export interface ExtensionItem {$/;"	i
ExtensionList	.vim/plugged/coc.nvim/src/list/source/extensions.ts	/^export default class ExtensionList extends BasicList {$/;"	c
ExtensionState	.vim/plugged/coc.nvim/src/types.ts	/^export type ExtensionState = 'disabled' | 'loaded' | 'activated' | 'unknown'$/;"	a
Extensions	.config/nvim/plugged/coc.nvim/Readme.md	/^## Extensions$/;"	s
Extensions	.vim/plugged/coc.nvim/Readme.md	/^## Extensions$/;"	s
Extensions	.vim/plugged/coc.nvim/src/extensions.ts	/^export class Extensions {$/;"	c
Extract	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^    command! -buffer -bar -bang -nargs=1 -range -complete=customlist,s:controllerList Extract  :/;"	c
Extract	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^    command! -buffer -bar -bang -nargs=1 -range Extract  :<line1>,<line2>call s:RubyExtract(<ban/;"	c
Extras	.vim/plugged/vim-airline/README.md	/^## Extras$/;"	s
F	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map F <Plug>(easymotion-F)$/;"	m
F	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  F = 70,$/;"	e	enum:CharCode
F/	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map F\/ <Plug>(easymotion-Fn)$/;"	m
F1	.vim/plugged/fzf/src/tui/tui.go	/^	F1$/;"	c	package:tui
F10	.vim/plugged/fzf/src/tui/tui.go	/^	F10$/;"	c	package:tui
F11	.vim/plugged/fzf/src/tui/tui.go	/^	F11$/;"	c	package:tui
F12	.vim/plugged/fzf/src/tui/tui.go	/^	F12$/;"	c	package:tui
F2	.vim/plugged/fzf/src/tui/tui.go	/^	F2$/;"	c	package:tui
F3	.vim/plugged/fzf/src/tui/tui.go	/^	F3$/;"	c	package:tui
F4	.vim/plugged/fzf/src/tui/tui.go	/^	F4$/;"	c	package:tui
F5	.vim/plugged/fzf/src/tui/tui.go	/^	F5$/;"	c	package:tui
F6	.vim/plugged/fzf/src/tui/tui.go	/^	F6$/;"	c	package:tui
F7	.vim/plugged/fzf/src/tui/tui.go	/^	F7$/;"	c	package:tui
F8	.vim/plugged/fzf/src/tui/tui.go	/^	F8$/;"	c	package:tui
F9	.vim/plugged/fzf/src/tui/tui.go	/^	F9$/;"	c	package:tui
FAQ	.config/nvim/plugged/vim-bundler/README.markdown	/^## FAQ$/;"	s
FAQ	.config/nvim/plugged/vim-commentary/README.markdown	/^## FAQ$/;"	s
FAQ	.config/nvim/plugged/vim-projectionist/README.markdown	/^## FAQ$/;"	s
FAQ	.config/nvim/plugged/vim-rails/README.markdown	/^## FAQ$/;"	s
FAQ	.config/nvim/plugged/vim-rake/README.markdown	/^## FAQ$/;"	s
FAQ	.vim/plugged/leetcode.vim/README.md	/^## FAQ$/;"	s
FAQ	.vim/plugged/vim-airline/README.md	/^# FAQ$/;"	c
FIELD	.vim/plugged/fzf/man/man1/fzf.1	/^.SH FIELD INDEX EXPRESSION$/;"	s	title:fzf
FILES	.config/nvim/plugged/html5.vim/Makefile	/^FILES=`ls -1 | grep '.vim$$'`$/;"	m
FILESIZE	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^for \/F %%F in ("%DB_FILE%.files") do set FILESIZE=%%~zF$/;"	v
FILESIZE	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILESIZE=0$/;"	v
FILE_LIST_CMD	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
FIRST_TIMEOUT	.vim/plugged/coc.nvim/src/completion/complete.ts	/^const FIRST_TIMEOUT = 500$/;"	C
FOSimple_Break_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Format.py	/^class FOSimple_Break_ExpectCorrectResult(_FormatoptionsBase):$/;"	c
FOTextAfter_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Format.py	/^class FOTextAfter_ExpectCorrectResult(_FormatoptionsBase):$/;"	c
FOTextBeforeAndAfter_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Format.py	/^class FOTextBeforeAndAfter_ExpectCorrectResult(_FormatoptionsBase):$/;"	c
FOWrapOnLongWord_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Format.py	/^class FOWrapOnLongWord_ExpectCorrectResult(_FormatoptionsBase):$/;"	c
FZF	.vim/plugged/fzf/plugin/fzf.vim	/^command! -nargs=* -complete=dir -bang FZF call s:cmd(<bang>0, <f-args>)$/;"	c
FZF Vim integration	.vim/plugged/fzf/README-VIM.md	/^FZF Vim integration$/;"	c
Feature	.config/nvim/plugged/html5.vim/README.md	/^## Feature$/;"	s
Features	.config/nvim/plugged/gruvbox/README.md	/^Features$/;"	s
Features	.config/nvim/plugged/vim-projectionist/README.markdown	/^## Features$/;"	s
Features	.config/nvim/plugged/vim-rsi/README.markdown	/^## Features$/;"	s
Features	.config/nvim/plugged/vista.vim/README.md	/^## Features$/;"	s
Features	.vim/plugged/omnisharp-vim/README.md	/^## Features$/;"	s
Features	.vim/plugged/vim-airline/README.md	/^# Features$/;"	c
Features and Limitations	.config/nvim/plugged/tagalong.vim/README.md	/^## Features and Limitations$/;"	s
Fedora	.vim/plugged/fzf/README.md	/^### Fedora$/;"	S
FeedBack	.config/nvim/plugged/vim-indent-object/README.md	/^### FeedBack$/;"	S
Feedback	.config/nvim/plugged/coc.nvim/Readme.md	/^## Feedback$/;"	s
Feedback	.vim/plugged/coc.nvim/Readme.md	/^## Feedback$/;"	s
Fg	.vim/plugged/fzf/src/tui/tui.go	/^	Fg           Color$/;"	m	struct:tui.ColorTheme	typeref:typename:Color
Fg	.vim/plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Fg() Color {$/;"	f	struct:tui.ColorPair	typeref:typename:Color
File	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/defx.py	/^from defx.source.file import Source as File$/;"	x
File	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^from denite.kind.file import Kind as File$/;"	x
File	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^from denite.kind.file import Kind as File$/;"	x
File	.vim/plugged/coc.nvim/src/source/file.ts	/^export default class File extends Source {$/;"	c
File	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^from denite.kind.file import Kind as File$/;"	x
File	.vim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^from denite.kind.file import Kind as File$/;"	x
FileChange	.vim/plugged/coc.nvim/src/watchman.ts	/^export interface FileChange {$/;"	i
FileChangeItem	.vim/plugged/coc.nvim/src/watchman.ts	/^export interface FileChangeItem {$/;"	i
FileSystemWatcher	.vim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^export default class FileSystemWatcher implements Disposable {$/;"	c
FileSystemWatcherFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class FileSystemWatcherFeature$/;"	c
FileWord	.vim/plugged/fzf/src/options.go	/^	FileWord    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Files and directories	.vim/plugged/fzf/README.md	/^#### Files and directories$/;"	t
Fill	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Fill(text string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
Fill	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Fill(str string) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
Fill	.vim/plugged/fzf/src/tui/tui.go	/^	Fill(text string) FillReturn$/;"	n	interface:tui.Window	typeref:typename:FillReturn
FillBuffer	.config/nvim/plugged/vim-textobj-entire/t/basics.vim	/^function! FillBuffer()$/;"	f
FillBuffer	.config/nvim/plugged/vim-textobj-entire/t/jumplist.vim	/^function! FillBuffer()$/;"	f
FillBuffer	.config/nvim/plugged/vim-textobj-entire/t/mark.vim	/^function! FillBuffer()$/;"	f
FillContinue	.vim/plugged/fzf/src/tui/tui.go	/^	FillContinue FillReturn = iota$/;"	c	package:tui	typeref:type:FillReturn
FillNextLine	.vim/plugged/fzf/src/tui/tui.go	/^	FillNextLine$/;"	c	package:tui
FillReturn	.vim/plugged/fzf/src/tui/tui.go	/^type FillReturn int$/;"	t	package:tui	typeref:typename:int
FillSuspend	.vim/plugged/fzf/src/tui/tui.go	/^	FillSuspend$/;"	c	package:tui
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/abbr_word.py	/^class Filter(Base):$/;"	c
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/relative_abbr.py	/^class Filter(Base):$/;"	c
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/relative_word.py	/^class Filter(Base):$/;"	c
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/cpsm.py	/^class Filter(Base):$/;"	c
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/fuzzy.py	/^class Filter(Base):$/;"	c
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/hide_hidden_files.py	/^class Filter(Base):$/;"	c
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/ignore_current_buffer.py	/^class Filter(Base):$/;"	c
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/ignore_globs.py	/^class Filter(Base):$/;"	c
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/project_files.py	/^class Filter(Base):$/;"	c
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/regexp.py	/^class Filter(Base):$/;"	c
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/substring.py	/^class Filter(Base):$/;"	c
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/rank.py	/^class Filter(Base):$/;"	c
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/reverse.py	/^class Filter(Base):$/;"	c
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^class Filter(Base):$/;"	c
Filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/word.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/abbr_word.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/relative_abbr.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/relative_word.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/cpsm.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/fuzzy.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/hide_hidden_files.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/ignore_current_buffer.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/ignore_globs.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/project_files.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/regexp.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/substring.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/rank.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/reverse.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/word.py	/^class Filter(Base):$/;"	c
Filter	.vim/plugged/fzf/src/options.go	/^	Filter      *string$/;"	m	struct:fzf.Options	typeref:typename:*string
Find Symbols	.vim/plugged/omnisharp-vim/README.md	/^#### Find Symbols$/;"	t
Find Usages	.vim/plugged/omnisharp-vim/README.md	/^#### Find Usages$/;"	t
Fine-tuned configuration	.vim/plugged/vim-airline/README.md	/^#### Fine-tuned configuration$/;"	t
FinishFill	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) FinishFill() {$/;"	f	struct:tui.LightWindow
FinishFill	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) FinishFill() {$/;"	f	struct:tui.TcellWindow
FinishFill	.vim/plugged/fzf/src/tui/tui.go	/^	FinishFill()$/;"	n	interface:tui.Window
Fish shell	.vim/plugged/fzf/README.md	/^#### Fish shell$/;"	t
Fixes and improvements	.vim/plugged/fzf/CHANGELOG.md	/^### Fixes and improvements$/;"	S
FloatBuffer	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^export default class FloatBuffer {$/;"	c
FloatFactory	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^export default class FloatFactory implements Disposable {$/;"	c
Floating	.vim/plugged/coc.nvim/src/completion/floating.ts	/^export default class Floating {$/;"	c
FloatingConfig	.vim/plugged/coc.nvim/src/completion/floating.ts	/^export interface FloatingConfig {$/;"	i
FoldList	.vim/plugged/coc.nvim/src/list/source/folders.ts	/^export default class FoldList extends BasicList {$/;"	c
FoldOverwrite_Simple_ECR	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^class FoldOverwrite_Simple_ECR(_VimTest):$/;"	c
Fold_DeleteMiddleLine_ECR	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^class Fold_DeleteMiddleLine_ECR(_VimTest):$/;"	c
FoldingContext	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface FoldingContext { }$/;"	i
FoldingEnabled_SnippetWithFold_ExpectNoFolding	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^class FoldingEnabled_SnippetWithFold_ExpectNoFolding(_VimTest):$/;"	c
FoldingRangeFeature	.vim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^export class FoldingRangeFeature extends TextDocumentFeature<$/;"	c
FoldingRangeManager	.vim/plugged/coc.nvim/src/provider/foldingRangeManager.ts	/^export default class FoldingRangeManager extends Manager<FoldingRangeProvider> implements Dispos/;"	c
FoldingRangeProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface FoldingRangeProvider {$/;"	i
FoldingRangeProviderMiddleware	.vim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^export interface FoldingRangeProviderMiddleware {$/;"	i
Foo	.config/nvim/plugged/vim-ruby/spec/indent/method_definitions_spec.rb	/^      class Foo$/;"	c
Foo	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        class Foo < Bar$/;"	c
Foo	.config/nvim/plugged/vim-textobj-rubyblock/t/examples.rb	/^class Foo$/;"	c
Foo	.config/nvim/plugged/vim-textobj-rubyblock/t/examples.rb	/^module Foo$/;"	m
Foo	.config/nvim/plugged/vim-textobj-rubyblock/t/samples/class.rb	/^class Foo$/;"	c
Foo	.config/nvim/plugged/vim-textobj-rubyblock/t/samples/commented-end.rb	/^class Foo$/;"	c
Foo	.config/nvim/plugged/vim-textobj-rubyblock/t/samples/if-else.rb	/^class Foo$/;"	c
Foo	.config/nvim/plugged/vim-textobj-rubyblock/t/samples/nested-blocks.rb	/^module Foo$/;"	m
Footnotes [fn \\#]	.vim/plugged/omnisharp-vim/installer/README.md	/^#### Footnotes [fn \\#]$/;"	t
For Windows users	.config/nvim/plugged/denite.nvim/README.md	/^### For Windows users$/;"	S
For Windows users	.vim/plugged/denite.nvim/README.md	/^### For Windows users$/;"	S
For users of the forked version	.config/nvim/plugged/vim-easymotion/README.md	/^### For users of the forked version$/;"	S
ForkOptions	.vim/plugged/coc.nvim/src/language-client/index.ts	/^export interface ForkOptions {$/;"	i
Format	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  Format,$/;"	e	enum:TokenType
FormatManager	.vim/plugged/coc.nvim/src/provider/formatManager.ts	/^export default class FormatManager extends Manager<DocumentFormattingEditProvider> implements Di/;"	c
FormatRangeManager	.vim/plugged/coc.nvim/src/provider/formatRangeManager.ts	/^export default class FormatRangeManager extends Manager<DocumentRangeFormattingEditProvider> imp/;"	c
FormatString	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^export class FormatString extends Marker {$/;"	c
FormattingOptions	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^    "FormattingOptions": {$/;"	o
Forwardslash	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  Forwardslash,$/;"	e	enum:TokenType
Fragment	.vim/plugged/coc.nvim/src/types.ts	/^export interface Fragment {$/;"	i
Friction & Air Resistance	.config/nvim/plugged/comfortable-motion.vim/README.md	/^### Friction & Air Resistance$/;"	S
Friction Only	.config/nvim/plugged/comfortable-motion.vim/README.md	/^### Friction Only$/;"	S
FullscreenRenderer	.vim/plugged/fzf/src/tui/tui.go	/^type FullscreenRenderer struct {$/;"	s	package:tui
FuncNamespace	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^class FuncNamespace:$/;"	c
FuncNamespace	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^class FuncNamespace:$/;"	c
Further reading	.config/nvim/plugged/vim-textobj-user/README.md	/^## Further reading$/;"	s
Future ideas and examples	.config/nvim/plugged/vim-snippets/README.md	/^Future ideas and examples$/;"	s
Future ideas and examples	.vim/plugged/vim-snippets/README.md	/^Future ideas and examples$/;"	s
Fuzzy	.vim/plugged/fzf/src/options.go	/^	Fuzzy       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Fuzzy completion for bash and zsh	.vim/plugged/fzf/README.md	/^Fuzzy completion for bash and zsh$/;"	s
FuzzyAlgo	.vim/plugged/fzf/src/options.go	/^	FuzzyAlgo   algo.Algo$/;"	m	struct:fzf.Options	typeref:typename:algo.Algo
FuzzyMatchV1	.vim/plugged/fzf/src/algo/algo.go	/^func FuzzyMatchV1(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []/;"	f	package:algo	typeref:typename:(Result, *[]int)
FuzzyMatchV2	.vim/plugged/fzf/src/algo/algo.go	/^func FuzzyMatchV2(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern [/;"	f	package:algo	typeref:typename:(Result, *[]int)
G	.config/nvim/plugged/vim-rails/ftplugin/railslog.vim	/^nnoremap <buffer> <silent> G :<C-U>exe <SID>reload_log()<Bar>exe v:count ? v:count : '$'<CR>$/;"	m
G	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  G = 71,$/;"	e	enum:CharCode
GIT_SOURCES	.config/nvim/plugged/html5.vim/Makefile	/^GIT_SOURCES=$/;"	m
GO	.vim/plugged/fzf/Makefile	/^GO             ?= go$/;"	m
GOOS	.vim/plugged/fzf/Makefile	/^GOOS           ?= $(word 1, $(subst \/, " ", $(word 4, $(shell go version))))$/;"	m
GREP_FILE_HIGHLIGHT	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^GREP_FILE_HIGHLIGHT = 'highlight default link deniteSource_grepFile Comment'$/;"	v
GREP_FILE_HIGHLIGHT	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^GREP_FILE_HIGHLIGHT = 'highlight default link deniteSource_grepFile Comment'$/;"	v
GREP_FILE_SYNTAX	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^GREP_FILE_SYNTAX = ($/;"	v
GREP_FILE_SYNTAX	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^GREP_FILE_SYNTAX = ($/;"	v
GREP_HEADER_SYNTAX	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^GREP_HEADER_SYNTAX = ($/;"	v
GREP_HEADER_SYNTAX	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^GREP_HEADER_SYNTAX = ($/;"	v
GREP_LINE_HIGHLIGHT	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^GREP_LINE_HIGHLIGHT = 'highlight default link deniteSource_grepLineNR LineNR'$/;"	v
GREP_LINE_HIGHLIGHT	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^GREP_LINE_HIGHLIGHT = 'highlight default link deniteSource_grepLineNR LineNR'$/;"	v
GREP_LINE_SYNTAX	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^GREP_LINE_SYNTAX = ($/;"	v
GREP_LINE_SYNTAX	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^GREP_LINE_SYNTAX = ($/;"	v
GREP_PATTERNS_HIGHLIGHT	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^GREP_PATTERNS_HIGHLIGHT = 'highlight default link deniteGrepPatterns Function'$/;"	v
GREP_PATTERNS_HIGHLIGHT	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^GREP_PATTERNS_HIGHLIGHT = 'highlight default link deniteGrepPatterns Function'$/;"	v
GTabularize	.config/nvim/plugged/tabular/plugin/Tabular.vim	/^   \\ GTabularize <line1>,<line2>$/;"	c
GVim	.vim/plugged/fzf/README-VIM.md	/^GVim$/;"	s
Generate	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bang -bar -nargs=* -complete=customlist,s:Complete_generate Generate      :e/;"	c
Generate a logfile if appropriate	.config/nvim/plugged/defx.nvim/.github/ISSUE_TEMPLATE.md	/^## Generate a logfile if appropriate$/;"	s
Generate a logfile if appropriate	.config/nvim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^## Generate a logfile if appropriate$/;"	s
Generate a logfile if appropriate	.vim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^## Generate a logfile if appropriate$/;"	s
Generating a vimball	.config/nvim/plugged/vim-textobj-rubyblock/README.md	/^Generating a vimball$/;"	s
Get	.vim/plugged/fzf/src/merger.go	/^func (mg *Merger) Get(idx int) Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
Get	.vim/plugged/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Get() bool {$/;"	f	struct:util.AtomicBool	typeref:typename:bool
Get	.vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) Get(i int) rune {$/;"	f	struct:util.Chars	typeref:typename:rune
GetCSIndent	.vim/plugged/omnisharp-vim/indent/cs.vim	/^function! GetCSIndent(lnum) abort$/;"	f
GetChar	.vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) GetChar() Event     { return Event{} }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Event
GetChar	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) GetChar() Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
GetChar	.vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) GetChar() Event {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Event
GetChar	.vim/plugged/fzf/src/tui/tui.go	/^	GetChar() Event$/;"	n	interface:tui.Renderer	typeref:typename:Event
GetErubyIndent	.config/nvim/plugged/vim-ruby/indent/eruby.vim	/^function! GetErubyIndent(...)$/;"	f
GetRubyIndent	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! GetRubyIndent(...) abort$/;"	f
Getting help	.config/nvim/plugged/vim-snippets/README.md	/^Getting help$/;"	s
Getting help	.vim/plugged/vim-snippets/README.md	/^Getting help$/;"	s
GhostTextDebug0	.vim/plugged/ghost-text.vim/plugin/ghost-text.vim	/^command! -bar GhostTextDebug0 :let g:ghost_text_verbose = 0$/;"	c
GhostTextDebug1	.vim/plugged/ghost-text.vim/plugin/ghost-text.vim	/^command! -bar GhostTextDebug1 :let g:ghost_text_verbose = 1$/;"	c
GhostTextDebug2	.vim/plugged/ghost-text.vim/plugin/ghost-text.vim	/^command! -bar GhostTextDebug2 :let g:ghost_text_verbose = 2$/;"	c
GhostTextHttpHandlerFactory	.vim/plugged/ghost-text.vim/python3/http_handler.py	/^class GhostTextHttpHandlerFactory:$/;"	c
GhostTextStart	.vim/plugged/ghost-text.vim/plugin/ghost-text.vim	/^command! -bar GhostTextStart :py3 vim_ghost_text.start_server()$/;"	c
GhostTextStop	.vim/plugged/ghost-text.vim/plugin/ghost-text.vim	/^command! -bar GhostTextStop :py3 vim_ghost_text.stop_server()$/;"	c
GhostTextUpdateText	.vim/plugged/ghost-text.vim/plugin/ghost-text.vim	/^function! GhostTextUpdateText(name, text, selections)$/;"	f
GhostTextUpdateText	.vim/plugged/ghost-text.vim/python3/test/test_vim_buffer.vim	/^command! GhostTextUpdateText call GhostTextUpdateText(['line 1', 'line 2', 'line 3'])$/;"	c
GhostTextUpdateText	.vim/plugged/ghost-text.vim/python3/test/test_vim_buffer.vim	/^function! GhostTextUpdateText(text)$/;"	f
GhostTextVimBuffer	.vim/plugged/ghost-text.vim/python3/test/test_vim_buffer.vim	/^command! -nargs=1 GhostTextVimBuffer call GhostTextVimBuffer(<f-args>)$/;"	c
GhostTextVimBuffer	.vim/plugged/ghost-text.vim/python3/test/test_vim_buffer.vim	/^function! GhostTextVimBuffer(name)$/;"	f
GhostTextWebsocketConnectionHandler	.vim/plugged/ghost-text.vim/python3/test/test_websocket_handler.py	/^class GhostTextWebsocketConnectionHandler:$/;"	c
GhostTextWebsocketHandler	.vim/plugged/ghost-text.vim/python3/test/test_websocket_handler.py	/^class GhostTextWebsocketHandler:$/;"	c
Git Rebase	.config/nvim/plugged/switch.vim/README.md	/^### Git Rebase$/;"	S
Global	.config/nvim/plugged/switch.vim/README.md	/^### Global$/;"	S
Global	.vim/plugged/coc.nvim/src/types.ts	/^  Global,$/;"	e	enum:ConfigurationTarget
Global	.vim/plugged/coc.nvim/src/types.ts	/^  Global,$/;"	e	enum:PatternType
Global and per project projection definitions	.config/nvim/plugged/vim-projectionist/README.markdown	/^### Global and per project projection definitions$/;"	S
Global options	.config/nvim/plugged/fzf.vim/README.md	/^#### Global options$/;"	t
Goyo	.config/nvim/plugged/goyo.vim/plugin/goyo.vim	/^command! -nargs=? -bar -bang Goyo call goyo#execute(<bang>0, <q-args>)$/;"	c
GreaterThan	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  GreaterThan = 62,$/;"	e	enum:CharCode
GruvboxHlsHideCursor	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^function! GruvboxHlsHideCursor()$/;"	f
GruvboxHlsShowCursor	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^function! GruvboxHlsShowCursor()$/;"	f
Gutentags	.config/nvim/plugged/vim-gutentags/README.md	/^# Gutentags$/;"	c
GutentagsToggleEnabled	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
GutentagsUpdate	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    command! -buffer -bang GutentagsUpdate :call s:manual_update_tags(<bang>0)$/;"	c
Gutter	.vim/plugged/fzf/src/tui/tui.go	/^	Gutter       Color$/;"	m	struct:tui.ColorTheme	typeref:typename:Color
H	.config/nvim/plugged/vim-operator-user/t/example-b-advanced.vim	/^map H  <Plug>(operator-align-left)$/;"	m
H	.config/nvim/plugged/vim-operator-user/t/example-c-ex-command.vim	/^map H  <Plug>(operator-align-left)$/;"	m
H	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  H = 72,$/;"	e	enum:CharCode
HTML	.config/nvim/plugged/tagalong.vim/spec/plugin/filetype_support_spec.rb	/^  describe "HTML" do$/;"	d
Haml	.config/nvim/plugged/switch.vim/README.md	/^### Haml$/;"	S
HandleTextObjectMapping	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^function! <Sid>HandleTextObjectMapping(inner, incbelow, vis, range)$/;"	f
Handler	.vim/plugged/coc.nvim/src/handler/index.ts	/^export default class Handler {$/;"	c
HasFullscreenRenderer	.vim/plugged/fzf/src/tui/dummy.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui	typeref:typename:bool
HasFullscreenRenderer	.vim/plugged/fzf/src/tui/tcell.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui	typeref:typename:bool
Hash	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Hash = 35,$/;"	e	enum:CharCode
Header	.vim/plugged/fzf/src/options.go	/^	Header      []string$/;"	m	struct:fzf.Options	typeref:typename:[]string
Header	.vim/plugged/fzf/src/tui/tui.go	/^	Header       Color$/;"	m	struct:tui.ColorTheme	typeref:typename:Color
HeaderLines	.vim/plugged/fzf/src/options.go	/^	HeaderLines int$/;"	m	struct:fzf.Options	typeref:typename:int
Height	.vim/plugged/fzf/src/options.go	/^	Height      sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:sizeSpec
Height	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Height() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Height	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Height() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Height	.vim/plugged/fzf/src/tui/tui.go	/^	Height() int$/;"	n	interface:tui.Window	typeref:typename:int
Helper	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^export class Helper extends Emitter {$/;"	c
Here is a H1	.config/nvim/plugged/oceanic-next/test/test.md	/^# Here is a H1$/;"	c
Here is a H2	.config/nvim/plugged/oceanic-next/test/test.md	/^## Here is a H2$/;"	s
Here is a H3	.config/nvim/plugged/oceanic-next/test/test.md	/^### Here is a H3$/;"	S
HexToColor	.vim/plugged/fzf/src/tui/tui.go	/^func HexToColor(rrggbb string) Color {$/;"	f	package:tui	typeref:typename:Color
Hide statusline	.config/nvim/plugged/fzf.vim/README.md	/^### Hide statusline$/;"	S
Hide statusline	.vim/plugged/fzf/README-VIM.md	/^### Hide statusline$/;"	S
Highlight	.vim/plugged/coc.nvim/src/util/highlight.ts	/^export interface Highlight {$/;"	i
Highlighter	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^export default class Highlighter implements Disposable {$/;"	c
Highlighting problems on: `vertical-align`, `box-shadow`, and others	.config/nvim/plugged/vim-css3-syntax/README.md	/^### Highlighting problems on: `vertical-align`, `box-shadow`, and others$/;"	S
Historical notes	.config/nvim/plugged/vim-snippets/README.md	/^Historical notes$/;"	s
Historical notes	.vim/plugged/vim-snippets/README.md	/^Historical notes$/;"	s
History	.vim/plugged/coc.nvim/src/list/history.ts	/^export default class History {$/;"	c
History	.vim/plugged/fzf/src/history.go	/^type History struct {$/;"	s	package:fzf
History	.vim/plugged/fzf/src/options.go	/^	History     *History$/;"	m	struct:fzf.Options	typeref:typename:*History
Home	.vim/plugged/fzf/src/tui/tui.go	/^	Home$/;"	c	package:tui
Host names	.vim/plugged/fzf/README.md	/^#### Host names$/;"	t
HoverFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class HoverFeature extends TextDocumentFeature<$/;"	c
HoverManager	.vim/plugged/coc.nvim/src/provider/hoverManager.ts	/^export default class HoverManager extends Manager<HoverProvider> implements Disposable {$/;"	c
HoverProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface HoverProvider {$/;"	i
How This Work	.config/nvim/plugged/emmet-vim/docs/index.html	/^				<h2 class="maintitle">How This Work<\/h2>$/;"	i
How do I... <a name="toc"></a>	.vim/plugged/coc.nvim/CONTRIBUTING.md	/^## How do I... <a name="toc"><\/a>$/;"	s
How to reproduce problems from neovim startup (Required!)	.config/nvim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^## How to reproduce problems from neovim startup (Required!)$/;"	s
How to reproduce problems from neovim startup (Required!)	.vim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^## How to reproduce problems from neovim startup (Required!)$/;"	s
How to use	.vim/plugged/omnisharp-vim/README.md	/^## How to use$/;"	s
How?	.config/nvim/plugged/vim-gutentags/README.md	/^## How?$/;"	s
Hscroll	.vim/plugged/fzf/src/options.go	/^	Hscroll     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
HscrollOff	.vim/plugged/fzf/src/options.go	/^	HscrollOff  int$/;"	m	struct:fzf.Options	typeref:typename:int
HtmlIndent	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent()$/;"	f
HtmlIndent_CheckUserSettings	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_CheckUserSettings()$/;"	f
HtmlIndent_CountBraces	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_CountBraces(lnum)$/;"	f
HtmlIndent_FindStartTag	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_FindStartTag()$/;"	f
HtmlIndent_FindTagEnd	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_FindTagEnd()$/;"	f
HtmlIndent_FindTagStart	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_FindTagStart(lnum)$/;"	f
HtmlIndent_IsOpenTag	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! HtmlIndent_IsOpenTag(tagname)$/;"	f
I	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  I = 73,$/;"	e	enum:CharCode
I16	.vim/plugged/fzf/src/util/slab.go	/^	I16 []int16$/;"	m	struct:util.Slab	typeref:typename:[]int16
I32	.vim/plugged/fzf/src/util/slab.go	/^	I32 []int32$/;"	m	struct:util.Slab	typeref:typename:[]int32
IConfigurationData	.vim/plugged/coc.nvim/src/types.ts	/^export interface IConfigurationData {$/;"	i
IConfigurationModel	.vim/plugged/coc.nvim/src/types.ts	/^export interface IConfigurationModel {$/;"	i
IConnection	.vim/plugged/coc.nvim/src/language-client/client.ts	/^interface IConnection {$/;"	i
IList	.vim/plugged/coc.nvim/src/types.ts	/^export interface IList {$/;"	i
IMMoving_AcceptInputWhenMoved_ECR	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^class IMMoving_AcceptInputWhenMoved_ECR(_VimTest):$/;"	c
IMMoving_CursorsKeys_ECR	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^class IMMoving_CursorsKeys_ECR(_VimTest):$/;"	c
IMMoving_ExitWhenOutsideAbove_ECR	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^class IMMoving_ExitWhenOutsideAbove_ECR(_VimTest):$/;"	c
IMMoving_ExitWhenOutsideBelow_ECR	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^class IMMoving_ExitWhenOutsideBelow_ECR(_VimTest):$/;"	c
IMMoving_ExitWhenOutsideLeft_ECR	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^class IMMoving_ExitWhenOutsideLeft_ECR(_VimTest):$/;"	c
IMMoving_ExitWhenOutsideRight_ECR	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^class IMMoving_ExitWhenOutsideRight_ECR(_VimTest):$/;"	c
IMMoving_NoExitingEventAtEnd_ECR	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^class IMMoving_NoExitingEventAtEnd_ECR(_VimTest):$/;"	c
IMMoving_NoExiting_ECR	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^class IMMoving_NoExiting_ECR(_VimTest):$/;"	c
IMMoving_NotExitingWhenBarelyOutsideLeft_ECR	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^class IMMoving_NotExitingWhenBarelyOutsideLeft_ECR(_VimTest):$/;"	c
IModule	.vim/plugged/coc.nvim/src/util/factory.ts	/^export interface IModule {$/;"	i
INDEX_WHOLE_PROJECT	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
INSTALLATION	.config/nvim/plugged/vim-css3-syntax/README.md	/^INSTALLATION$/;"	s
INavigator	.vim/plugged/coc.nvim/src/util/platform.ts	/^interface INavigator {$/;"	i
INodeProcess	.vim/plugged/coc.nvim/src/util/platform.ts	/^interface INodeProcess {$/;"	i
IOverrides	.vim/plugged/coc.nvim/src/types.ts	/^export interface IOverrides {$/;"	i
IProcessEnvironment	.vim/plugged/coc.nvim/src/util/platform.ts	/^export interface IProcessEnvironment {$/;"	i
ISandbox	.vim/plugged/coc.nvim/src/util/factory.ts	/^  }) as ISandbox$/;"	C	function:createSandbox
ISandbox	.vim/plugged/coc.nvim/src/util/factory.ts	/^export interface ISandbox {$/;"	i
IServiceProvider	.vim/plugged/coc.nvim/src/types.ts	/^export interface IServiceProvider {$/;"	i
ISource	.vim/plugged/coc.nvim/src/types.ts	/^export interface ISource {$/;"	i
IWorkspace	.vim/plugged/coc.nvim/src/types.ts	/^export interface IWorkspace {$/;"	i
Implementation	.config/nvim/plugged/ultisnips/doc/examples/autojump-if-empty/README.md	/^## Implementation$/;"	s
ImplementationFeature	.vim/plugged/coc.nvim/src/language-client/implementation.ts	/^export class ImplementationFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> /;"	c
ImplementationManager	.vim/plugged/coc.nvim/src/provider/implementatioinManager.ts	/^export default class ImplementationManager extends Manager<ImplementationProvider> implements Di/;"	c
ImplementationMiddleware	.vim/plugged/coc.nvim/src/language-client/implementation.ts	/^export interface ImplementationMiddleware {$/;"	i
ImplementationProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface ImplementationProvider {$/;"	i
Important notes	.config/nvim/plugged/vim-easymotion/README.md	/^Important notes$/;"	c
Improvements	.vim/plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S
In Argument	.config/nvim/plugged/targets.vim/README.md	/^#### In Argument$/;"	t
In Pair	.config/nvim/plugged/targets.vim/README.md	/^#### In Pair$/;"	t
In Quote	.config/nvim/plugged/targets.vim/README.md	/^#### In Quote$/;"	t
In Separator	.config/nvim/plugged/targets.vim/README.md	/^#### In Separator$/;"	t
Inclusive support	.vim/plugged/papercolor-theme/README.md	/^## Inclusive support$/;"	s
Incompatibility issues	.vim/plugged/vim-hug-neovim-rpc/README.md	/^## Incompatibility issues$/;"	s
IndentBlock	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "IndentBlock": true,$/;"	b	object:FormattingOptions
IndentBraces	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "IndentBraces": false,$/;"	b	object:FormattingOptions
IndentSwitchCaseSection	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "IndentSwitchCaseSection": true,$/;"	b	object:FormattingOptions
IndentSwitchCaseSectionWhenBlock	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "IndentSwitchCaseSectionWhenBlock": true,$/;"	b	object:FormattingOptions
IndentSwitchSection	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "IndentSwitchSection": true,$/;"	b	object:FormattingOptions
IndentUtil	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/indent_util.py	/^class IndentUtil(object):$/;"	c
IndentationSize	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "IndentationSize": 4,$/;"	n	object:FormattingOptions
Indenting	.config/nvim/plugged/vim-ruby/spec/indent/arguments_spec.rb	/^describe "Indenting" do$/;"	d
Indenting	.config/nvim/plugged/vim-ruby/spec/indent/basic_spec.rb	/^describe "Indenting" do$/;"	d
Indenting	.config/nvim/plugged/vim-ruby/spec/indent/blocks_spec.rb	/^describe "Indenting" do$/;"	d
Indenting	.config/nvim/plugged/vim-ruby/spec/indent/continuations_spec.rb	/^describe "Indenting" do$/;"	d
Indenting	.config/nvim/plugged/vim-ruby/spec/indent/end_constructs_spec.rb	/^describe "Indenting" do$/;"	d
Indenting	.config/nvim/plugged/vim-ruby/spec/indent/eruby_spec.rb	/^describe "Indenting" do$/;"	d
Indenting	.config/nvim/plugged/vim-ruby/spec/indent/identifiers_spec.rb	/^describe "Indenting" do$/;"	d
Indenting	.config/nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^describe "Indenting" do$/;"	d
Indenting	.config/nvim/plugged/vim-ruby/spec/indent/method_definitions_spec.rb	/^describe "Indenting" do$/;"	d
Indenting	.config/nvim/plugged/vim-ruby/spec/indent/nesting_spec.rb	/^describe "Indenting" do$/;"	d
Indenting	.config/nvim/plugged/vim-ruby/spec/indent/splat_spec.rb	/^describe "Indenting" do$/;"	d
Index	.vim/plugged/fzf/src/item.go	/^func (item *Item) Index() int32 {$/;"	f	struct:fzf.Item	typeref:typename:int32
Index	.vim/plugged/fzf/src/result.go	/^func (result *Result) Index() int32 {$/;"	f	struct:fzf.Result	typeref:typename:int32
Index	.vim/plugged/fzf/src/util/chars.go	/^	Index int32$/;"	m	struct:util.Chars	typeref:typename:int32
Infinity	.vim/plugged/coc.nvim/src/util/fzy.ts	/^let SCORE_MIN = -Infinity$/;"	v
Info	.vim/plugged/fzf/src/tui/tui.go	/^	Info         Color$/;"	m	struct:tui.ColorTheme	typeref:typename:Color
Init	.vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Init()       {}$/;"	f	unknown:tui.FullscreenRenderer
Init	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Init() {$/;"	f	struct:tui.LightRenderer
Init	.vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Init() {$/;"	f	unknown:tui.FullscreenRenderer
Init	.vim/plugged/fzf/src/tui/tui.go	/^	Init()$/;"	n	interface:tui.Renderer
Initial	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  Initial,$/;"	e	enum:ClientState
Initial	.vim/plugged/coc.nvim/src/types.ts	/^  Initial,$/;"	e	enum:ServiceStat
InlineInfo	.vim/plugged/fzf/src/options.go	/^	InlineInfo  bool$/;"	m	struct:fzf.Options	typeref:typename:bool
InnerClass	.config/nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        class InnerClass$/;"	c	class:OuterClass
Input	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) Input() []rune {$/;"	f	struct:fzf.Terminal	typeref:typename:[]rune
InsertTestText1	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^function! InsertTestText1()$/;"	f
Inside Argument	.config/nvim/plugged/targets.vim/README.md	/^#### Inside Argument$/;"	t
Inside Pair	.config/nvim/plugged/targets.vim/README.md	/^#### Inside Pair$/;"	t
Inside Quote	.config/nvim/plugged/targets.vim/README.md	/^#### Inside Quote$/;"	t
Inside Separator	.config/nvim/plugged/targets.vim/README.md	/^#### Inside Separator$/;"	t
Inspiration	.config/nvim/plugged/goyo.vim/README.md	/^Inspiration$/;"	s
Install	.config/nvim/plugged/emmet-vim/docs/index.html	/^				<h2 class="maintitle">Install<\/h2>$/;"	i
Install	.config/nvim/plugged/html5.vim/README.md	/^## Install$/;"	s
Install	.config/nvim/plugged/vim-indent-object/README.md	/^### Install$/;"	S
Install	.vim/plugged/vim-closer/README.md	/^## Install$/;"	s
Install OmniSharp-roslyn with PowerShell	.vim/plugged/omnisharp-vim/installer/README.md	/^### Install OmniSharp-roslyn with PowerShell$/;"	S
Install Python (HTTP only)	.vim/plugged/omnisharp-vim/README.md	/^### Install Python (HTTP only)$/;"	S
Installation	.config/nvim/plugged/comfortable-motion.vim/README.md	/^## Installation$/;"	s
Installation	.config/nvim/plugged/defx.nvim/README.md	/^## Installation$/;"	s
Installation	.config/nvim/plugged/fzf.vim/README.md	/^Installation$/;"	s
Installation	.config/nvim/plugged/goyo.vim/README.md	/^Installation$/;"	s
Installation	.config/nvim/plugged/oceanic-next/README.md	/^## Installation$/;"	s
Installation	.config/nvim/plugged/tabular/README.md	/^Installation$/;"	c
Installation	.config/nvim/plugged/targets.vim/README.md	/^## Installation$/;"	s
Installation	.config/nvim/plugged/vim-after-object/README.md	/^Installation$/;"	s
Installation	.config/nvim/plugged/vim-bundler/README.markdown	/^## Installation$/;"	s
Installation	.config/nvim/plugged/vim-commentary/README.markdown	/^## Installation$/;"	s
Installation	.config/nvim/plugged/vim-easyescape-plus/README.md	/^## Installation$/;"	s
Installation	.config/nvim/plugged/vim-easymotion/README.md	/^Installation$/;"	s
Installation	.config/nvim/plugged/vim-projectionist/README.markdown	/^## Installation$/;"	s
Installation	.config/nvim/plugged/vim-rails/README.markdown	/^## Installation$/;"	s
Installation	.config/nvim/plugged/vim-rake/README.markdown	/^## Installation$/;"	s
Installation	.config/nvim/plugged/vim-repeat/README.markdown	/^## Installation$/;"	s
Installation	.config/nvim/plugged/vim-rsi/README.markdown	/^## Installation$/;"	s
Installation	.config/nvim/plugged/vim-ruby/INSTALL.markdown	/^Installation$/;"	c
Installation	.config/nvim/plugged/vim-snippets/README.md	/^Installation$/;"	s
Installation	.config/nvim/plugged/vim-surround/README.markdown	/^## Installation$/;"	s
Installation	.config/nvim/plugged/vim-tmux-navigator/README.md	/^Installation$/;"	s
Installation	.config/nvim/plugged/vista.vim/README.md	/^## Installation$/;"	s
Installation	.vim/plugged/fzf/README.md	/^Installation$/;"	s
Installation	.vim/plugged/leetcode.vim/README.md	/^## Installation$/;"	s
Installation	.vim/plugged/omnisharp-vim/README.md	/^## Installation$/;"	s
Installation	.vim/plugged/papercolor-theme/README.md	/^## Installation$/;"	s
Installation	.vim/plugged/vim-airline/README.md	/^# Installation$/;"	c
Installation	.vim/plugged/vim-snippets/README.md	/^Installation$/;"	s
Installation	.vim/plugged/vim-surround/README.markdown	/^## Installation$/;"	s
Int	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  Int,$/;"	e	enum:TokenType
Integrating with powerline fonts	.vim/plugged/vim-airline/README.md	/^# Integrating with powerline fonts$/;"	c
Integration with incsearch.vim	.config/nvim/plugged/vim-easymotion/README.md	/^#### Integration with incsearch.vim$/;"	t
InteractiveList	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^class InteractiveList extends BasicList {$/;"	c
Internals	.config/nvim/plugged/targets.vim/plugins.md	/^## Internals$/;"	s
Internals and Advanced Usage	.config/nvim/plugged/tagalong.vim/README.md	/^## Internals and Advanced Usage$/;"	s
Intro	.config/nvim/plugged/vim-indent-object/README.md	/^### Intro$/;"	S
Introduction	.config/nvim/plugged/targets.vim/README.md	/^## Introduction$/;"	s
Introduction	.config/nvim/plugged/vim-easymotion/README.md	/^Introduction$/;"	c
Introduction	.config/nvim/plugged/vista.vim/README.md	/^## Introduction$/;"	s
Introduction	.vim/plugged/coc.nvim/CONTRIBUTING.md	/^## Introduction$/;"	s
Invalid	.vim/plugged/fzf/src/tui/tui.go	/^	Invalid$/;"	c	package:tui
IsBytes	.vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) IsBytes() bool {$/;"	f	struct:util.Chars	typeref:typename:bool
IsEmpty	.vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) IsEmpty() bool {$/;"	f	struct:fzf.Pattern	typeref:typename:bool
IsFull	.vim/plugged/fzf/src/chunklist.go	/^func (c *Chunk) IsFull() bool {$/;"	f	struct:fzf.Chunk	typeref:typename:bool
IsTty	.vim/plugged/fzf/src/util/util.go	/^func IsTty() bool {$/;"	f	package:util	typeref:typename:bool
IsWindows	.vim/plugged/fzf/src/util/util_unix.go	/^func IsWindows() bool {$/;"	f	package:util	typeref:typename:bool
IsWindows	.vim/plugged/fzf/src/util/util_windows.go	/^func IsWindows() bool {$/;"	f	package:util	typeref:typename:bool
Issues	.config/nvim/plugged/switch.vim/README.md	/^## Issues$/;"	s
Issues	.config/nvim/plugged/targets.vim/README.md	/^## Issues$/;"	s
It Doesn't Work in tmate	.config/nvim/plugged/vim-tmux-navigator/README.md	/^### It Doesn't Work in tmate$/;"	S
It Still Doesn't Work!!!	.config/nvim/plugged/vim-tmux-navigator/README.md	/^### It Still Doesn't Work!!!$/;"	S
It doesn't work in Vim's `terminal` mode	.config/nvim/plugged/vim-tmux-navigator/README.md	/^### It doesn't work in Vim's `terminal` mode$/;"	S
Italic	.vim/plugged/fzf/src/tui/dummy.go	/^	Italic           = Attr(1 << 2)$/;"	c	package:tui
Italic	.vim/plugged/fzf/src/tui/tcell.go	/^	Italic         = Attr(tcell.AttrNone) \/\/ Not supported$/;"	c	package:tui
Item	.vim/plugged/fzf/src/item.go	/^type Item struct {$/;"	s	package:fzf
ItemBuilder	.vim/plugged/fzf/src/chunklist.go	/^type ItemBuilder func(*Item, []byte) bool$/;"	t	package:fzf	typeref:typename:func(*Item, []byte) bool
J	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  J = 74,$/;"	e	enum:CharCode
JB	.config/nvim/plugged/ultisnips/test/constant.py	/^JB = '+'  # Jump backwards$/;"	v
JF	.config/nvim/plugged/ultisnips/test/constant.py	/^JF = '?'  # Jump forwards$/;"	v
JSX	.config/nvim/plugged/tagalong.vim/spec/plugin/filetype_support_spec.rb	/^  describe "JSX" do$/;"	d
JUMP_HIGHLIGHT_SYNTAX	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^JUMP_HIGHLIGHT_SYNTAX = [$/;"	v
JUMP_HIGHLIGHT_SYNTAX	.vim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^JUMP_HIGHLIGHT_SYNTAX = [$/;"	v
JavaScript	.config/nvim/plugged/switch.vim/README.md	/^### JavaScript$/;"	S
Join the Project Team	.vim/plugged/coc.nvim/CONTRIBUTING.md	/^## Join the Project Team$/;"	s
Jump to next/previous match (even on next/previous page)	.config/nvim/plugged/vim-easymotion/README.md	/^#### Jump to next\/previous match (even on next\/previous page)$/;"	t
JumpForward_DefSnippet	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class JumpForward_DefSnippet(_VimTest):$/;"	c
JumpLabels	.vim/plugged/fzf/src/options.go	/^	JumpLabels  string$/;"	m	struct:fzf.Options	typeref:typename:string
K	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> K$/;"	m
K	.config/nvim/configs/plugins.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
K	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  K = 75,$/;"	e	enum:CharCode
KEY	.vim/plugged/fzf/man/man1/fzf.1	/^.SH KEY BINDINGS$/;"	s	title:fzf
Key bindings for command-line	.vim/plugged/fzf/README.md	/^Key bindings for command-line$/;"	s
Keymap	.vim/plugged/fzf/src/options.go	/^	Keymap      map[int][]action$/;"	m	struct:fzf.Options	typeref:typename:map[int][]action
KeymapOption	.vim/plugged/coc.nvim/src/types.ts	/^export interface KeymapOption {$/;"	i
Keys and Mouse Wheel	.config/nvim/plugged/comfortable-motion.vim/README.md	/^### Keys and Mouse Wheel$/;"	S
KillCommand	.vim/plugged/fzf/src/util/util_unix.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f	package:util	typeref:typename:error
KillCommand	.vim/plugged/fzf/src/util/util_windows.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f	package:util	typeref:typename:error
Kind	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/source.py	/^        from defx.base.kind import Base as Kind$/;"	x	member:Base.__init__	file:
Kind	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^class Kind(Base):$/;"	c
Kind	.config/nvim/plugged/defx.nvim/rplugin/python3/denite/source/defx/session.py	/^class Kind(Command):$/;"	c
Kind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^class Kind(Base):$/;"	c
Kind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^from denite.base.kind import Base as Kind$/;"	x
Kind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^class Kind(Openable):$/;"	c
Kind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/command.py	/^class Kind(Base):$/;"	c
Kind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/directory.py	/^class Kind(Base):$/;"	c
Kind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^class Kind(Openable):$/;"	c
Kind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^class Kind(Base):$/;"	c
Kind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/source.py	/^class Kind(Base):$/;"	c
Kind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/word.py	/^class Kind(Base):$/;"	c
Kind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^class Kind(Command):$/;"	c
Kind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^class Kind(Command):$/;"	c
Kind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^class Kind(File):$/;"	c
Kind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^class Kind(File):$/;"	c
Kind	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^class Kind(Base):$/;"	c
Kind	.vim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^from denite.base.kind import Base as Kind$/;"	x
Kind	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^class Kind(Openable):$/;"	c
Kind	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/command.py	/^class Kind(Base):$/;"	c
Kind	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/directory.py	/^class Kind(Base):$/;"	c
Kind	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^class Kind(Openable):$/;"	c
Kind	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^class Kind(Base):$/;"	c
Kind	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/source.py	/^class Kind(Base):$/;"	c
Kind	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/word.py	/^class Kind(Base):$/;"	c
Kind	.vim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^class Kind(Command):$/;"	c
Kind	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^class Kind(Command):$/;"	c
Kind	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^class Kind(File):$/;"	c
Kind	.vim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^class Kind(File):$/;"	c
Known problems	.config/nvim/plugged/vim-easyescape-plus/README.md	/^## Known problems$/;"	s
L	.config/nvim/autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	.config/nvim/autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	.config/nvim/plugged/vim-operator-user/t/example-a-basic.vim	/^map L  <Plug>(operator-align-right)$/;"	m
L	.config/nvim/plugged/vim-operator-user/t/example-b-advanced.vim	/^map L  <Plug>(operator-align-right)$/;"	m
L	.config/nvim/plugged/vim-operator-user/t/example-c-ex-command.vim	/^map L  <Plug>(operator-align-right)$/;"	m
L	.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	.vim/autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  L = 76,$/;"	e	enum:CharCode
LC_BASE	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^LC_BASE = 'https:\/\/leetcode.com'$/;"	v
LC_CATEGORY_PROBLEMS	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^LC_CATEGORY_PROBLEMS = 'https:\/\/leetcode.com\/api\/problems\/{category}'$/;"	v
LC_CHECK	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^LC_CHECK = 'https:\/\/leetcode.com\/submissions\/detail\/{submission}\/check\/'$/;"	v
LC_GRAPHQL	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^LC_GRAPHQL = 'https:\/\/leetcode.com\/graphql'$/;"	v
LC_LOGIN	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^LC_LOGIN = 'https:\/\/leetcode.com\/accounts\/login\/'$/;"	v
LC_PROBLEM	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^LC_PROBLEM = 'https:\/\/leetcode.com\/problems\/{slug}\/description'$/;"	v
LC_SUBMISSION	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^LC_SUBMISSION = 'https:\/\/leetcode.com\/submissions\/detail\/{submission}\/'$/;"	v
LC_SUBMISSIONS	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^LC_SUBMISSIONS = 'https:\/\/leetcode.com\/api\/submissions\/{slug}'$/;"	v
LC_SUBMIT	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^LC_SUBMIT = 'https:\/\/leetcode.com\/problems\/{slug}\/submit\/'$/;"	v
LC_TEST	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^LC_TEST = 'https:\/\/leetcode.com\/problems\/{slug}\/interpret_solution\/'$/;"	v
LEADING_LETTER_PENALTY	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^LEADING_LETTER_PENALTY = -3$/;"	v
LEADING_LETTER_PENALTY	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^LEADING_LETTER_PENALTY = -3$/;"	v
LICENSE	.config/nvim/plugged/vim-css3-syntax/README.md	/^LICENSE$/;"	s
LICENSE	.vim/plugged/fzf/man/man1/fzf.1	/^.SH LICENSE$/;"	s	title:fzf
LINE_NUMBER_HIGHLIGHT	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^LINE_NUMBER_HIGHLIGHT = 'highlight default link deniteSource_lineNumber LineNR'$/;"	v
LINE_NUMBER_HIGHLIGHT	.vim/plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^LINE_NUMBER_HIGHLIGHT = 'highlight default link deniteSource_lineNumber LineNR'$/;"	v
LINE_NUMBER_SYNTAX	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^LINE_NUMBER_SYNTAX = ($/;"	v
LINE_NUMBER_SYNTAX	.vim/plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^LINE_NUMBER_SYNTAX = ($/;"	v
LINE_SEPARATOR_2028	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  LINE_SEPARATOR_2028 = 8232,$/;"	e	enum:CharCode
LOG_FILE	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
LS	.config/nvim/plugged/ultisnips/test/constant.py	/^LS = '@'  # List snippets$/;"	v
LabelPositioning	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "LabelPositioning": "oneLess",$/;"	s	object:FormattingOptions
Language maintainers	.config/nvim/plugged/vim-snippets/README.md	/^Language maintainers$/;"	s
Language maintainers	.vim/plugged/vim-snippets/README.md	/^Language maintainers$/;"	s
Language-specific options	.vim/plugged/papercolor-theme/README.md	/^### Language-specific options$/;"	S
LanguageClient	.vim/plugged/coc.nvim/src/language-client/index.ts	/^export class LanguageClient extends BaseLanguageClient {$/;"	c
LanguageClient	.vim/plugged/coc.nvim/src/services.ts	/^    let client = service.client as LanguageClient$/;"	v
LanguageServer	.vim/plugged/coc.nvim/src/types.ts	/^  LanguageServer,$/;"	e	enum:PatternType
LanguageServerConfig	.vim/plugged/coc.nvim/src/types.ts	/^export interface LanguageServerConfig {$/;"	i
Languages	.vim/plugged/coc.nvim/src/languages.ts	/^class Languages {$/;"	c
Languages and Plugins	.vim/plugged/papercolor-theme/README.md	/^### Languages and Plugins$/;"	S
LastChangeType	.vim/plugged/coc.nvim/src/model/document.ts	/^export type LastChangeType = 'insert' | 'change' | 'delete'$/;"	a
LastInsert	.vim/plugged/coc.nvim/src/completion/index.ts	/^export interface LastInsert {$/;"	C
Layout	.vim/plugged/fzf/README.md	/^#### Layout$/;"	t
Layout	.vim/plugged/fzf/src/options.go	/^	Layout      layoutType$/;"	m	struct:fzf.Options	typeref:typename:layoutType
Lcd	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^      command! -buffer -bar -bang -nargs=? -range=1 -complete=customlist,s:dir_complete Lcd$/;"	c
LeaveTrailingWhitespace	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class LeaveTrailingWhitespace(_VimTest):$/;"	c
LeetCodeList	.vim/plugged/leetcode.vim/plugin/leetcode.vim	/^command! -nargs=0 LeetCodeList call leetcode#ListProblems()$/;"	c
LeetCodeReset	.vim/plugged/leetcode.vim/plugin/leetcode.vim	/^command! -nargs=0 LeetCodeReset call leetcode#ResetSolution(0)$/;"	c
LeetCodeSignIn	.vim/plugged/leetcode.vim/plugin/leetcode.vim	/^command! -nargs=0 LeetCodeSignIn call leetcode#SignIn(1)$/;"	c
LeetCodeSubmit	.vim/plugged/leetcode.vim/plugin/leetcode.vim	/^command! -nargs=0 LeetCodeSubmit call leetcode#SubmitSolution()$/;"	c
LeetCodeTest	.vim/plugged/leetcode.vim/plugin/leetcode.vim	/^command! -nargs=0 LeetCodeTest call leetcode#TestSolution()$/;"	c
Left	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Left() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Left	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Left() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Left	.vim/plugged/fzf/src/tui/tui.go	/^	Left   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Left	.vim/plugged/fzf/src/tui/tui.go	/^	Left$/;"	c	package:tui
Left	.vim/plugged/fzf/src/tui/tui.go	/^	Left() int$/;"	n	interface:tui.Window	typeref:typename:int
LeftClick	.vim/plugged/fzf/src/tui/tui.go	/^	LeftClick$/;"	c	package:tui
Len	.vim/plugged/fzf/src/result.go	/^func (a ByOrder) Len() int {$/;"	f	type:fzf.ByOrder	typeref:typename:int
Len	.vim/plugged/fzf/src/result.go	/^func (a ByRelevance) Len() int {$/;"	f	type:fzf.ByRelevance	typeref:typename:int
Len	.vim/plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Len() int {$/;"	f	type:fzf.ByRelevanceTac	typeref:typename:int
Len	.vim/plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Len() int {$/;"	f	type:fzf.byTimeOrder	typeref:typename:int
Length	.vim/plugged/fzf/src/merger.go	/^func (mg *Merger) Length() int {$/;"	f	struct:fzf.Merger	typeref:typename:int
Length	.vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) Length() int {$/;"	f	struct:util.Chars	typeref:typename:int
Less	.vim/plugged/fzf/src/result.go	/^func (a ByOrder) Less(i, j int) bool {$/;"	f	type:fzf.ByOrder	typeref:typename:bool
Less	.vim/plugged/fzf/src/result.go	/^func (a ByRelevance) Less(i, j int) bool {$/;"	f	type:fzf.ByRelevance	typeref:typename:bool
Less	.vim/plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Less(i, j int) bool {$/;"	f	type:fzf.ByRelevanceTac	typeref:typename:bool
Less	.vim/plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Less(i, j int) bool {$/;"	f	type:fzf.byTimeOrder	typeref:typename:bool
LessThan	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  LessThan = 60,$/;"	e	enum:CharCode
License	.config/nvim/plugged/coc.nvim/Readme.md	/^## License$/;"	s
License	.config/nvim/plugged/comfortable-motion.vim/README.md	/^## License$/;"	s
License	.config/nvim/plugged/emmet-vim/docs/index.html	/^				<h2 class="maintitle">License<\/h2>$/;"	i
License	.config/nvim/plugged/fzf.vim/README.md	/^License$/;"	s
License	.config/nvim/plugged/goyo.vim/README.md	/^License$/;"	s
License	.config/nvim/plugged/gruvbox/README.md	/^License$/;"	s
License	.config/nvim/plugged/html5.vim/README.md	/^## License$/;"	s
License	.config/nvim/plugged/vim-bundler/README.markdown	/^## License$/;"	s
License	.config/nvim/plugged/vim-commentary/README.markdown	/^## License$/;"	s
License	.config/nvim/plugged/vim-projectionist/README.markdown	/^## License$/;"	s
License	.config/nvim/plugged/vim-rails/README.markdown	/^## License$/;"	s
License	.config/nvim/plugged/vim-rake/README.markdown	/^## License$/;"	s
License	.config/nvim/plugged/vim-repeat/README.markdown	/^## License$/;"	s
License	.config/nvim/plugged/vim-rsi/README.markdown	/^## License$/;"	s
License	.config/nvim/plugged/vim-snippets/README.md	/^License$/;"	s
License	.config/nvim/plugged/vim-surround/README.markdown	/^## License$/;"	s
License	.config/nvim/plugged/vim-textobj-rubyblock/README.md	/^License$/;"	c
License	.config/nvim/plugged/vista.vim/README.md	/^## License$/;"	s
License	.vim/plugged/coc.nvim/Readme.md	/^## License$/;"	s
License	.vim/plugged/fzf/BUILD.md	/^License$/;"	s
License	.vim/plugged/vim-airline/README.md	/^# License$/;"	c
License	.vim/plugged/vim-snippets/README.md	/^License$/;"	s
License	.vim/plugged/vim-surround/README.markdown	/^## License$/;"	s
Light mode	.config/nvim/plugged/gruvbox/README.md	/^### Light mode$/;"	S
Light256	.vim/plugged/fzf/src/tui/tui.go	/^	Light256  *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
LightRenderer	.vim/plugged/fzf/src/tui/light.go	/^type LightRenderer struct {$/;"	s	package:tui
LightWindow	.vim/plugged/fzf/src/tui/light.go	/^type LightWindow struct {$/;"	s	package:tui
Limitations	.config/nvim/plugged/vim-textobj-rubyblock/README.md	/^Limitations$/;"	s
LineFeed	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  LineFeed = 10,$/;"	e	enum:CharCode
LineIterator	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text.py	/^class LineIterator(object):$/;"	c
LinewiseSelectA	.config/nvim/plugged/vim-textobj-user/t/selection.vim	/^function! LinewiseSelectA()$/;"	f
LinksList	.vim/plugged/coc.nvim/src/list/source/links.ts	/^export default class LinksList extends BasicList {$/;"	c
LinksList	.vim/plugged/coc.nvim/src/list/source/lists.ts	/^export default class LinksList extends BasicList {$/;"	c
Linux	.vim/plugged/coc.nvim/src/util/platform.ts	/^  Linux = 3$/;"	e	enum:OperatingSystem
Linux	.vim/plugged/coc.nvim/src/util/platform.ts	/^  Linux,$/;"	e	enum:Platform
Linux and Mac	.vim/plugged/omnisharp-vim/README.md	/^#### Linux and Mac$/;"	t
List definitions	.config/nvim/plugged/switch.vim/README.md	/^### List definitions$/;"	S
ListAction	.vim/plugged/coc.nvim/src/types.ts	/^export interface ListAction {$/;"	i
ListAllAvailable_BraceInFront_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^class ListAllAvailable_BraceInFront_ExpectCorrectResult(_ListAllSnippets):$/;"	c
ListAllAvailable_NonDefined_NoExpectionShouldBeRaised	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^class ListAllAvailable_NonDefined_NoExpectionShouldBeRaised(_ListAllSnippets):$/;"	c
ListAllAvailable_NothingTyped_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^class ListAllAvailable_NothingTyped_ExpectCorrectResult(_ListAllSnippets):$/;"	c
ListAllAvailable_SpaceInFront_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^class ListAllAvailable_SpaceInFront_ExpectCorrectResult(_ListAllSnippets):$/;"	c
ListAllAvailable_testtypedSecondOpt_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^class ListAllAvailable_testtypedSecondOpt_ExpectCorrectResult($/;"	c
ListAllAvailable_testtyped_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^class ListAllAvailable_testtyped_ExpectCorrectResult(_ListAllSnippets):$/;"	c
ListArgument	.vim/plugged/coc.nvim/src/types.ts	/^export interface ListArgument {$/;"	i
ListConfiguration	.vim/plugged/coc.nvim/src/list/configuration.ts	/^export default class ListConfiguration {$/;"	C
ListContext	.vim/plugged/coc.nvim/src/types.ts	/^export interface ListContext {$/;"	i
ListHighlights	.vim/plugged/coc.nvim/src/types.ts	/^export interface ListHighlights {$/;"	i
ListItem	.vim/plugged/coc.nvim/src/types.ts	/^export interface ListItem {$/;"	i
ListItemsEvent	.vim/plugged/coc.nvim/src/types.ts	/^export interface ListItemsEvent {$/;"	i
ListManager	.vim/plugged/coc.nvim/src/list/manager.ts	/^export class ListManager implements Disposable {$/;"	C
ListMode	.vim/plugged/coc.nvim/src/types.ts	/^export type ListMode = 'normal' | 'insert'$/;"	a
ListOptions	.vim/plugged/coc.nvim/src/types.ts	/^export interface ListOptions {$/;"	i
ListTask	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let totalItems = this.totalItems = []$/;"	v
ListTask	.vim/plugged/coc.nvim/src/types.ts	/^export interface ListTask {$/;"	i
ListUI	.vim/plugged/coc.nvim/src/list/ui.ts	/^export default class ListUI {$/;"	c
Location	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let location = definition[0] as Location$/;"	v
Location	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let locations: Location[] = Array.isArray(definition) ? definition as Location[] : [definiti/;"	v
LocationLink	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let link = definition[0] as LocationLink$/;"	v
LocationList	.vim/plugged/coc.nvim/src/list/source/location.ts	/^export default class LocationList extends BasicList {$/;"	c
LocationListItem	.vim/plugged/coc.nvim/src/types.ts	/^export interface LocationListItem {$/;"	i
LocationWithLine	.vim/plugged/coc.nvim/src/types.ts	/^export interface LocationWithLine {$/;"	i
Lookup	.vim/plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Lookup(chunk *Chunk, key string) []Result {$/;"	f	struct:fzf.ChunkCache	typeref:typename:[]Result
Loop	.vim/plugged/fzf/src/matcher.go	/^func (m *Matcher) Loop() {$/;"	f	struct:fzf.Matcher
Loop	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) Loop() {$/;"	f	struct:fzf.Terminal
LoopParseArgs	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
M	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> M$/;"	m
M	.config/nvim/plugged/vim-operator-user/t/example-b-advanced.vim	/^map M  <Plug>(operator-align-center)$/;"	m
M	.config/nvim/plugged/vim-operator-user/t/example-c-ex-command.vim	/^map M  <Plug>(operator-align-center)$/;"	m
M	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  M = 77,$/;"	e	enum:CharCode
MAKEFILE	.vim/plugged/fzf/Makefile	/^MAKEFILE       := $(realpath $(lastword $(MAKEFILE_LIST)))$/;"	m
MAKEFILE_DIR	.config/nvim/plugged/ultisnips/Makefile	/^MAKEFILE_DIR := $(dir ${MAKEFILE_PATH})$/;"	m
MAKEFILE_PATH	.config/nvim/plugged/ultisnips/Makefile	/^MAKEFILE_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))$/;"	m
MAPPINGS	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^MAPPINGS = {$/;"	v
MAPPINGS	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^MAPPINGS = {$/;"	v
MARK	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/action.py	/^    MARK = auto()$/;"	v	class:ActionAttr
MARK_HIGHLIGHT_SYNTAX	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^MARK_HIGHLIGHT_SYNTAX = [$/;"	v
MARK_HIGHLIGHT_SYNTAX	.vim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^MARK_HIGHLIGHT_SYNTAX = [$/;"	v
MAX_LEADING_LETTER_PENALTY	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^MAX_LEADING_LETTER_PENALTY = -9$/;"	v
MAX_LEADING_LETTER_PENALTY	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^MAX_LEADING_LETTER_PENALTY = -9$/;"	v
MAX_LOG_BACKUPS	.vim/plugged/coc.nvim/src/util/logger.ts	/^const MAX_LOG_BACKUPS = 10$/;"	C
MAX_LOG_SIZE	.vim/plugged/coc.nvim/src/util/logger.ts	/^const MAX_LOG_SIZE = 1024 * 1024$/;"	C
MKFILES	.config/nvim/plugged/html5.vim/Makefile	/^MKFILES=Makefile `ls -1 | grep '.mk$$'`$/;"	m
MOVE	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/clipboard.py	/^    MOVE = auto()$/;"	v	class:ClipboardAction
Mac	.vim/plugged/coc.nvim/src/util/platform.ts	/^  Mac,$/;"	e	enum:Platform
Macintosh	.vim/plugged/coc.nvim/src/util/platform.ts	/^  Macintosh = 2,$/;"	e	enum:OperatingSystem
Main	.vim/plugged/omnisharp-vim/test/example/Program.cs	/^        static void Main(string[] args)$/;"	m	class:example.Program	file:
Maintainers	.vim/plugged/vim-airline/README.md	/^# Maintainers$/;"	c
Maintenance	.vim/plugged/vim-airline/CONTRIBUTING.md	/^# Maintenance$/;"	c
MakeBorderStyle	.vim/plugged/fzf/src/tui/tui.go	/^func MakeBorderStyle(shape BorderShape, unicode bool) BorderStyle {$/;"	f	package:tui	typeref:typename:BorderStyle
MakeSlab	.vim/plugged/fzf/src/util/slab.go	/^func MakeSlab(size16 int, size32 int) *Slab {$/;"	f	package:util	typeref:typename:*Slab
Manager	.vim/plugged/coc.nvim/src/provider/manager.ts	/^export default class Manager<T> {$/;"	c
Manager	.vim/plugged/ghost-text.vim/python3/vim_websocket_handler.py	/^class Manager:$/;"	c
Manual	.config/nvim/plugged/vim-css3-syntax/README.md	/^### Manual$/;"	S
Manual installation	.vim/plugged/omnisharp-vim/README.md	/^#### Manual installation$/;"	t
Manually	.config/nvim/plugged/vim-ruby/INSTALL.markdown	/^Manually$/;"	s
MapMode	.vim/plugged/coc.nvim/src/types.ts	/^export type MapMode = 'n' | 'i' | 'v' | 'x' | 's'$/;"	a
Mappings	.config/nvim/plugged/fzf.vim/README.md	/^Mappings$/;"	s
Mappings	.vim/plugged/coc.nvim/src/list/mappings.ts	/^export default class Mappings {$/;"	c
Margin	.vim/plugged/fzf/src/options.go	/^	Margin      [4]sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:[4]sizeSpec
Marker	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^export abstract class Marker {$/;"	c
Match	.vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) Match(chunk *Chunk, slab *util.Slab) []Result {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Result
Match	.vim/plugged/fzf/src/tui/tui.go	/^	Match        Color$/;"	m	struct:tui.ColorTheme	typeref:typename:Color
MatchIsTooCheap	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class MatchIsTooCheap(_Base, unittest.TestCase):$/;"	c
MatchItem	.vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) MatchItem(item *Item, withPos bool, slab *util.Slab) (*Result, []Offset, *[]in/;"	f	struct:fzf.Pattern	typeref:typename:(*Result, []Offset, *[]int)
MatchRequest	.vim/plugged/fzf/src/matcher.go	/^type MatchRequest struct {$/;"	s	package:fzf
MatchResult	.vim/plugged/coc.nvim/src/util/score.ts	/^export interface MatchResult {$/;"	i
Matcher	.vim/plugged/coc.nvim/src/types.ts	/^export type Matcher = 'strict' | 'fuzzy' | 'regex'$/;"	a
Matcher	.vim/plugged/fzf/src/matcher.go	/^type Matcher struct {$/;"	s	package:fzf
Max	.vim/plugged/fzf/src/util/util.go	/^func Max(first int, second int) int {$/;"	f	package:util	typeref:typename:int
Max16	.vim/plugged/fzf/src/util/util.go	/^func Max16(first int16, second int16) int16 {$/;"	f	package:util	typeref:typename:int16
Max32	.vim/plugged/fzf/src/util/util.go	/^func Max32(first int32, second int32) int32 {$/;"	f	package:util	typeref:typename:int32
MaxX	.vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxX() int          { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxX	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxX() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
MaxX	.vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxX() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxX	.vim/plugged/fzf/src/tui/tui.go	/^	MaxX() int$/;"	n	interface:tui.Renderer	typeref:typename:int
MaxY	.vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxY() int          { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxY	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxY() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
MaxY	.vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxY() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxY	.vim/plugged/fzf/src/tui/tui.go	/^	MaxY() int$/;"	n	interface:tui.Renderer	typeref:typename:int
Media Queries	.config/nvim/plugged/vim-css3-syntax/README.md	/^### Media Queries$/;"	S
Memento	.vim/plugged/coc.nvim/src/types.ts	/^export interface Memento {$/;"	i
Memos	.vim/plugged/coc.nvim/src/model/memos.ts	/^export default class Memos {$/;"	c
Merge	.vim/plugged/fzf/src/tui/dummy.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	type:tui.Attr	typeref:typename:Attr
Merge	.vim/plugged/fzf/src/tui/tcell.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	type:tui.Attr	typeref:typename:Attr
Merger	.vim/plugged/fzf/src/merger.go	/^type Merger struct {$/;"	s	package:fzf
MessageLevel	.vim/plugged/coc.nvim/src/types.ts	/^export enum MessageLevel {$/;"	g
MessageTransports	.vim/plugged/coc.nvim/src/language-client/client.ts	/^export interface MessageTransports {$/;"	i
MessageTransports	.vim/plugged/coc.nvim/src/language-client/client.ts	/^export namespace MessageTransports {$/;"	n
Methods	.vim/plugged/nvim-yarp/README.md	/^## Methods$/;"	s
Middleware	.vim/plugged/coc.nvim/src/language-client/client.ts	/^export type Middleware = _Middleware &$/;"	p	class:DefaultErrorHandler
Migemo feature (for Japanese user)	.config/nvim/plugged/vim-easymotion/README.md	/^### Migemo feature (for Japanese user)$/;"	S
Min	.vim/plugged/fzf/src/util/util.go	/^func Min(first int, second int) int {$/;"	f	package:util	typeref:typename:int
Min32	.vim/plugged/fzf/src/util/util.go	/^func Min32(first int32, second int32) int32 {$/;"	f	package:util	typeref:typename:int32
MinHeight	.vim/plugged/fzf/src/options.go	/^	MinHeight   int$/;"	m	struct:fzf.Options	typeref:typename:int
Minimal Configuration Tutorial	.config/nvim/plugged/vim-easymotion/README.md	/^Minimal Configuration Tutorial$/;"	s
Minor improvements/fixes	.vim/plugged/fzf/CHANGELOG.md	/^### Minor improvements\/fixes$/;"	S
Mirror	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_mirror.py	/^class Mirror(NoneditableTextObject):$/;"	c
MirrorBeforeTabstopLeave_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class MirrorBeforeTabstopLeave_ExpectCorrectResult(_VimTest):$/;"	c
MirrorBeforeTabstopOverwrite_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class MirrorBeforeTabstopOverwrite_ExpectCorrectResult(_VimTest):$/;"	c
MirrorRealLifeExample_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class MirrorRealLifeExample_ExpectCorrectResult(_VimTest):$/;"	c
MirrorToken	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^class MirrorToken(Token):$/;"	c
Mirror_TestKillTabstop_Kill	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class Mirror_TestKillTabstop_Kill(_VimTest):$/;"	c
Mirror_TestKill_InsertAfter_NoKill	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class Mirror_TestKill_InsertAfter_NoKill(_VimTest):$/;"	c
Mirror_TestKill_InsertBefore_NoKill	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class Mirror_TestKill_InsertBefore_NoKill(_VimTest):$/;"	c
Mirror_TestKill_InsertBeginning_Kill	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class Mirror_TestKill_InsertBeginning_Kill(_VimTest):$/;"	c
Mirror_TestKill_InsertEnd_Kill	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class Mirror_TestKill_InsertEnd_Kill(_VimTest):$/;"	c
Mod	.vim/plugged/fzf/src/tui/tui.go	/^	Mod    bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Module	.vim/plugged/coc.nvim/src/util/factory.ts	/^const Module: IModule = require('module')$/;"	C
ModuleResolve	.vim/plugged/coc.nvim/src/types.ts	/^export type ModuleResolve = () => Promise<string>$/;"	a
More	.vim/plugged/coc.nvim/src/types.ts	/^  More,$/;"	e	enum:MessageLevel
More complicated mappings	.config/nvim/plugged/switch.vim/README.md	/^### More complicated mappings$/;"	S
Mouse	.vim/plugged/fzf/src/options.go	/^	Mouse       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Mouse	.vim/plugged/fzf/src/tui/tui.go	/^	Mouse$/;"	c	package:tui
MouseEvent	.vim/plugged/coc.nvim/src/list/ui.ts	/^export type MouseEvent = 'mouseDown' | 'mouseDrag' | 'mouseUp' | 'doubleClick'$/;"	a
MouseEvent	.vim/plugged/fzf/src/tui/tui.go	/^	MouseEvent *MouseEvent$/;"	m	struct:tui.Event	typeref:typename:*MouseEvent
MouseEvent	.vim/plugged/fzf/src/tui/tui.go	/^type MouseEvent struct {$/;"	s	package:tui
MousePosition	.vim/plugged/coc.nvim/src/list/ui.ts	/^export interface MousePosition {$/;"	i
Move	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Move(y int, x int) {$/;"	f	struct:tui.LightWindow
Move	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Move(y int, x int) {$/;"	f	struct:tui.TcellWindow
Move	.vim/plugged/fzf/src/tui/tui.go	/^	Move(y int, x int)$/;"	n	interface:tui.Window
MoveAndClear	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) MoveAndClear(y int, x int) {$/;"	f	struct:tui.LightWindow
MoveAndClear	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) MoveAndClear(y int, x int) {$/;"	f	struct:tui.TcellWindow
MoveAndClear	.vim/plugged/fzf/src/tui/tui.go	/^	MoveAndClear(y int, x int)$/;"	n	interface:tui.Window
MoveEvents	.vim/plugged/coc.nvim/src/events.ts	/^export type MoveEvents = 'CursorMoved' | 'CursorMovedI'$/;"	a
MovePosition_DelSameLine	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^class MovePosition_DelSameLine(_MPBase, unittest.TestCase):$/;"	c
MovePosition_DelSameLine1	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^class MovePosition_DelSameLine1(_MPBase, unittest.TestCase):$/;"	c
MovePosition_DelSecondLine	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^class MovePosition_DelSecondLine(_MPBase, unittest.TestCase):$/;"	c
MovePosition_DelSecondLine1	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^class MovePosition_DelSecondLine1(_MPBase, unittest.TestCase):$/;"	c
MovePosition_InsSameLine1	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^class MovePosition_InsSameLine1(_MPBase, unittest.TestCase):$/;"	c
MovePosition_InsSameLine2	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^class MovePosition_InsSameLine2(_MPBase, unittest.TestCase):$/;"	c
Move_N	.config/nvim/plugged/vim-textobj-user/t/move.vim	/^function! Move_N()$/;"	f
Move_P	.config/nvim/plugged/vim-textobj-user/t/move.vim	/^function! Move_P()$/;"	f
Move_n	.config/nvim/plugged/vim-textobj-user/t/move.vim	/^function! Move_n()$/;"	f
Move_p	.config/nvim/plugged/vim-textobj-user/t/move.vim	/^function! Move_p()$/;"	f
Mru	.vim/plugged/coc.nvim/src/model/mru.ts	/^export default class Mru {$/;"	c
MsBuild	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^    "MsBuild": {$/;"	o
MsgTypes	.vim/plugged/coc.nvim/src/types.ts	/^export type MsgTypes = 'error' | 'warning' | 'more'$/;"	a
Multi	.vim/plugged/fzf/src/options.go	/^	Multi       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Multi Text Objects	.config/nvim/plugged/targets.vim/README.md	/^### Multi Text Objects$/;"	S
MultiLine	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class MultiLine(_Base, unittest.TestCase):$/;"	c
MultiLineDefault_BS	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class MultiLineDefault_BS(_MultiLineDefault):$/;"	c
MultiLineDefault_Jump	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class MultiLineDefault_Jump(_MultiLineDefault):$/;"	c
MultiLineDefault_Type	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class MultiLineDefault_Type(_MultiLineDefault):$/;"	c
MultiWordSnippet_Simple	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWordSnippet_Simple(_VimTest):$/;"	c
MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle(_VimTest):$/;"	c
MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand(_VimTest):$/;"	c
MultiWord_SnippetOptions_ExpandWordSnippets_ExpandSuffix	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandWordSnippets_ExpandSuffix($/;"	c
MultiWord_SnippetOptions_ExpandWordSnippets_NoExpand	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandWordSnippets_NoExpand($/;"	c
MultiWord_SnippetOptions_ExpandWordSnippets_NormalExpand	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandWordSnippets_NormalExpand($/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand(_VimTest):$/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand(_VimTest):$/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2(_VimTest):$/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO(_VimTest):$/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose($/;"	c
MultilineExpandTestTyping_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^class MultilineExpandTestTyping_ExpectCorrectResult(_VimTest):$/;"	c
MultilineExpand_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^class MultilineExpand_ExpectCorrectResult(_VimTest):$/;"	c
MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult(_VimTest):$/;"	c
MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult(_VimTest):$/;"	c
MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult(_VimTest):$/;"	c
Multiple_ManySnippetsOneTrigger_ECR	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^class Multiple_ManySnippetsOneTrigger_ECR(_VimTest):$/;"	c
Multiple_SimpleCaseEscapeOut_ECR	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^class Multiple_SimpleCaseEscapeOut_ECR(_MultipleMatches):$/;"	c
Multiple_SimpleCaseSelectFirst_ECR	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^class Multiple_SimpleCaseSelectFirst_ECR(_MultipleMatches):$/;"	c
Multiple_SimpleCaseSelectSecond_ECR	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^class Multiple_SimpleCaseSelectSecond_ECR(_MultipleMatches):$/;"	c
Multiple_SimpleCaseSelectTooHigh_ESelectLast	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^class Multiple_SimpleCaseSelectTooHigh_ESelectLast(_MultipleMatches):$/;"	c
Multiple_SimpleCaseSelectZero_EEscape	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^class Multiple_SimpleCaseSelectZero_EEscape(_MultipleMatches):$/;"	c
MyAppend1	.vim/plugged/vim-airline/t/airline.vim	/^function! MyAppend1(...)$/;"	f
MyAppend2	.vim/plugged/vim-airline/t/airline.vim	/^function! MyAppend2(...)$/;"	f
MyFuncref	.vim/plugged/vim-airline/t/airline.vim	/^function! MyFuncref(...)$/;"	f
MyIgnoreFuncref	.vim/plugged/vim-airline/t/airline.vim	/^function! MyIgnoreFuncref(...)$/;"	f
N	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> N$/;"	m
N	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  N = 78,$/;"	e	enum:CharCode
NAME	.config/nvim/plugged/html5.vim/Makefile	/^NAME=`basename \\`pwd\\``$/;"	m
NAME	.vim/plugged/fzf/man/man1/fzf-tmux.1	/^.SH NAME$/;"	s	title:fzf-tmux
NAME	.vim/plugged/fzf/man/man1/fzf.1	/^.SH NAME$/;"	s	title:fzf
NAME_SPACE	.vim/plugged/coc.nvim/src/workspace.ts	/^let NAME_SPACE = 1080$/;"	v
NEVER	.config/nvim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^NEVER = 'never'$/;"	v
NEVER	.vim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^NEVER = 'never'$/;"	v
NONE	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/action.py	/^    NONE = 0$/;"	v	class:ActionAttr
NOTES	.config/nvim/plugged/vim-css3-syntax/README.md	/^NOTES$/;"	s
NO_TAGETS	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/action.py	/^    NO_TAGETS = auto()$/;"	v	class:ActionAttr
Native	.vim/plugged/coc.nvim/src/types.ts	/^  Native,$/;"	e	enum:SourceType
Navigation commands	.config/nvim/plugged/vim-projectionist/README.markdown	/^### Navigation commands$/;"	S
NeoBundle (https://github.com/Shougo/neobundle.vim)	.config/nvim/plugged/vim-easymotion/README.md	/^### NeoBundle (https:\/\/github.com\/Shougo\/neobundle.vim)$/;"	S
NeoVim	.config/nvim/plugged/vista.vim/README.md	/^#### NeoVim$/;"	t
Neovim	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^class Neovim(Proxy):$/;"	c
Neovim	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^class Neovim(Proxy):$/;"	c
Nested dict definitions	.config/nvim/plugged/switch.vim/README.md	/^### Nested dict definitions$/;"	S
Nesting	.config/nvim/plugged/vim-tmux-navigator/README.md	/^#### Nesting$/;"	t
New features	.vim/plugged/fzf/CHANGELOG.md	/^### New features$/;"	S
New features in version 2.0	.config/nvim/plugged/vim-easymotion/README.md	/^New features in version 2.0$/;"	c
New features in version 3.0	.config/nvim/plugged/vim-easymotion/README.md	/^New features in version 3.0$/;"	c
New! Asynchronous server interactions	.vim/plugged/omnisharp-vim/README.md	/^## New! Asynchronous server interactions$/;"	s
NewAtomicBool	.vim/plugged/fzf/src/util/atomicbool.go	/^func NewAtomicBool(initialState bool) *AtomicBool {$/;"	f	package:util	typeref:typename:*AtomicBool
NewChunkCache	.vim/plugged/fzf/src/cache.go	/^func NewChunkCache() ChunkCache {$/;"	f	package:fzf	typeref:typename:ChunkCache
NewChunkList	.vim/plugged/fzf/src/chunklist.go	/^func NewChunkList(trans ItemBuilder) *ChunkList {$/;"	f	package:fzf	typeref:typename:*ChunkList
NewColorPair	.vim/plugged/fzf/src/tui/tui.go	/^func NewColorPair(fg Color, bg Color) ColorPair {$/;"	f	package:tui	typeref:typename:ColorPair
NewEventBox	.vim/plugged/fzf/src/util/eventbox.go	/^func NewEventBox() *EventBox {$/;"	f	package:util	typeref:typename:*EventBox
NewFullscreenRenderer	.vim/plugged/fzf/src/tui/tui.go	/^func NewFullscreenRenderer(theme *ColorTheme, forceBlack bool, mouse bool) Renderer {$/;"	f	package:tui	typeref:typename:Renderer
NewHistory	.vim/plugged/fzf/src/history.go	/^func NewHistory(path string, maxSize int) (*History, error) {$/;"	f	package:fzf	typeref:typename:(*History, error)
NewLightRenderer	.vim/plugged/fzf/src/tui/light.go	/^func NewLightRenderer(theme *ColorTheme, forceBlack bool, mouse bool, tabstop int, clearOnExit b/;"	f	package:tui	typeref:typename:Renderer
NewLine	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLine": "\\n",$/;"	s	object:FormattingOptions
NewLineForCatch	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLineForCatch": true,$/;"	b	object:FormattingOptions
NewLineForClausesInQuery	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLineForClausesInQuery": true$/;"	b	object:FormattingOptions
NewLineForElse	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLineForElse": true,$/;"	b	object:FormattingOptions
NewLineForFinally	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLineForFinally": true,$/;"	b	object:FormattingOptions
NewLineForMembersInAnonymousTypes	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLineForMembersInAnonymousTypes": true,$/;"	b	object:FormattingOptions
NewLineForMembersInObjectInit	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLineForMembersInObjectInit": true,$/;"	b	object:FormattingOptions
NewLinesForBracesInAccessors	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLinesForBracesInAccessors": true,$/;"	b	object:FormattingOptions
NewLinesForBracesInAnonymousMethods	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLinesForBracesInAnonymousMethods": true,$/;"	b	object:FormattingOptions
NewLinesForBracesInAnonymousTypes	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLinesForBracesInAnonymousTypes": true,$/;"	b	object:FormattingOptions
NewLinesForBracesInControlBlocks	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLinesForBracesInControlBlocks": true,$/;"	b	object:FormattingOptions
NewLinesForBracesInLambdaExpressionBody	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLinesForBracesInLambdaExpressionBody": true,$/;"	b	object:FormattingOptions
NewLinesForBracesInMethods	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLinesForBracesInMethods": true,$/;"	b	object:FormattingOptions
NewLinesForBracesInObjectCollectionArrayInitializers	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLinesForBracesInObjectCollectionArrayInitializers": true,$/;"	b	object:FormattingOptions
NewLinesForBracesInProperties	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLinesForBracesInProperties": true,$/;"	b	object:FormattingOptions
NewLinesForBracesInTypes	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "NewLinesForBracesInTypes": true,$/;"	b	object:FormattingOptions
NewMatcher	.vim/plugged/fzf/src/matcher.go	/^func NewMatcher(patternBuilder func([]rune) *Pattern,$/;"	f	package:fzf	typeref:typename:*Matcher
NewMerger	.vim/plugged/fzf/src/merger.go	/^func NewMerger(pattern *Pattern, lists [][]Result, sorted bool, tac bool) *Merger {$/;"	f	package:fzf	typeref:typename:*Merger
NewReader	.vim/plugged/fzf/src/reader.go	/^func NewReader(pusher func([]byte) bool, eventBox *util.EventBox, delimNil bool) *Reader {$/;"	f	package:fzf	typeref:typename:*Reader
NewTerminal	.vim/plugged/fzf/src/terminal.go	/^func NewTerminal(opts *Options, eventBox *util.EventBox) *Terminal {$/;"	f	package:fzf	typeref:typename:*Terminal
NewWindow	.vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, borderStyle Bor/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Window
NewWindow	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) NewWindow(top int, left int, width int, height int, borderStyle BorderSt/;"	f	struct:tui.LightRenderer	typeref:typename:Window
NewWindow	.vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, borderStyle Bor/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Window
NewWindow	.vim/plugged/fzf/src/tui/tui.go	/^	NewWindow(top int, left int, width int, height int, borderStyle BorderStyle) Window$/;"	n	interface:tui.Renderer	typeref:typename:Window
Next and Last Argument	.config/nvim/plugged/targets.vim/README.md	/^#### Next and Last Argument$/;"	t
Next and Last Pair	.config/nvim/plugged/targets.vim/README.md	/^#### Next and Last Pair$/;"	t
Next and Last Quote	.config/nvim/plugged/targets.vim/README.md	/^#### Next and Last Quote$/;"	t
Next and Last Separator	.config/nvim/plugged/targets.vim/README.md	/^#### Next and Last Separator$/;"	t
NilClass	.vim/plugged/fzf/test/test_go.rb	/^class NilClass$/;"	c
NoUmlautsBeforeTriggerAndCharsAfter	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class NoUmlautsBeforeTriggerAndCharsAfter(_UmlautsBase):$/;"	c
No_Tab_Expand_ET	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_ET(_No_Tab_Expand):$/;"	c
No_Tab_Expand_ET_Leading_Spaces	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_ET_Leading_Spaces(_No_Tab_Expand):$/;"	c
No_Tab_Expand_ET_SW	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_ET_SW(_No_Tab_Expand):$/;"	c
No_Tab_Expand_ET_SW_TS	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_ET_SW_TS(_No_Tab_Expand):$/;"	c
No_Tab_Expand_Leading_Spaces	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_Leading_Spaces(_No_Tab_Expand):$/;"	c
No_Tab_Expand_Leading_Tabs	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_Leading_Tabs(_No_Tab_Expand):$/;"	c
No_Tab_Expand_No_TS	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_No_TS(_No_Tab_Expand):$/;"	c
No_Tab_Expand_RealWorld	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_RealWorld(_TabExpand_RealWorld, _VimTest):$/;"	c
No_Tab_Expand_Simple	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_Simple(_No_Tab_Expand):$/;"	c
NodeModule	.vim/plugged/coc.nvim/src/language-client/index.ts	/^export interface NodeModule {$/;"	i
NodeModule	.vim/plugged/coc.nvim/src/language-client/index.ts	/^namespace NodeModule {$/;"	n
NonUnicodeDataInUnnamedRegister	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^class NonUnicodeDataInUnnamedRegister(_VimTest):$/;"	c
NoneditableTextObject	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^class NoneditableTextObject(TextObject):$/;"	c
Normal	.config/nvim/plugged/vim-textobj-user/t/map.vim	/^function! Normal(s)$/;"	f
Normalize	.vim/plugged/fzf/src/options.go	/^	Normalize   bool$/;"	m	struct:fzf.Options	typeref:typename:bool
NormalizeRunes	.vim/plugged/fzf/src/algo/normalize.go	/^func NormalizeRunes(runes []rune) []rune {$/;"	f	package:algo	typeref:typename:[]rune
Normalized case mapping	.config/nvim/plugged/switch.vim/spec/plugin/normalized_case_mapping_spec.rb	/^describe "Normalized case mapping" do$/;"	d
Note: Python3 must be enabled before updating remote plugins	.config/nvim/plugged/defx.nvim/README.md	/^## Note: Python3 must be enabled before updating remote plugins$/;"	s
Notes	.config/nvim/plugged/targets.vim/README.md	/^## Notes$/;"	s
Nth	.vim/plugged/fzf/src/options.go	/^	Nth         []Range$/;"	m	struct:fzf.Options	typeref:typename:[]Range
Null	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Null = 0,$/;"	e	enum:CharCode
NvimHandler	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^class NvimHandler(socketserver.BaseRequestHandler):$/;"	c
O	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  O = 79,$/;"	e	enum:CharCode
OMNISHARP_ROOT	.vim/plugged/omnisharp-vim/rplugin/python3/deoplete/sources/deoplete_OmniSharp.py	/^OMNISHARP_ROOT = abspath(join(dirname(__file__), pardir, pardir, pardir,$/;"	v
OPTIONS	.vim/plugged/fzf/man/man1/fzf-tmux.1	/^.SH OPTIONS$/;"	s	title:fzf-tmux
OPTIONS	.vim/plugged/fzf/man/man1/fzf.1	/^.SH OPTIONS$/;"	s	title:fzf
OS	.vim/plugged/coc.nvim/src/util/platform.ts	/^export const OS = _isMacintosh$/;"	C
OUTLINE_HIGHLIGHT_SYNTAX	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/outline.py	/^OUTLINE_HIGHLIGHT_SYNTAX = [$/;"	v
OUTLINE_HIGHLIGHT_SYNTAX	.vim/plugged/denite.nvim/rplugin/python3/denite/source/outline.py	/^OUTLINE_HIGHLIGHT_SYNTAX = [$/;"	v
Object	.vim/plugged/coc.nvim/src/__tests__/modules/array.test.ts	/^      return Object.keys(item).reduce((p, c) => p.concat(item[c]), [])$/;"	v
Oceanic-Next.vim	.config/nvim/plugged/oceanic-next/README.md	/^# Oceanic-Next.vim$/;"	c
Offset	.vim/plugged/fzf/src/result.go	/^type Offset [2]int32$/;"	t	package:fzf	typeref:typename:[2]int32
OldSelection_RealWorldCase_Test	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^class OldSelection_RealWorldCase_Test(_OS_Base):$/;"	c
OldSelection_SimpleTabstop_Test	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^class OldSelection_SimpleTabstop_Test(_OS_Base):$/;"	c
Older versions	.vim/plugged/omnisharp-vim/README.md	/^#### Older versions$/;"	t
OmniSharp	.vim/plugged/omnisharp-vim/README.md	/^# OmniSharp$/;"	c
OmniSharp	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^  augroup OmniSharp#CountCodeActions$/;"	a
OmniSharp	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^augroup OmniSharp#FileType$/;"	a
OmniSharp	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^  augroup OmniSharp#HighlightTypes$/;"	a
OmniSharp	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^augroup OmniSharp#Integrations$/;"	a
OmniSharp Installers	.vim/plugged/omnisharp-vim/installer/README.md	/^# OmniSharp Installers$/;"	c
OmniSharp#AppendCtrlPExtensions	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#AppendCtrlPExtensions() abort$/;"	f
OmniSharp#BufferHasChanged	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#BufferHasChanged() abort$/;"	f
OmniSharp#CheckPyError	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#CheckPyError(...)$/;"	f
OmniSharp#CodeCheck	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#CodeCheck(...) abort$/;"	f
OmniSharp#CodeFormat	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#CodeFormat(...) abort$/;"	f
OmniSharp#Complete	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#Complete(findstart, base) abort$/;"	f
OmniSharp#CountCodeActions	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#CountCodeActions(...) abort$/;"	f
OmniSharp#ExpandAutoCompleteSnippet	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#ExpandAutoCompleteSnippet()$/;"	f
OmniSharp#FindImplementations	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#FindImplementations(...) abort$/;"	f
OmniSharp#FindMembers	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#FindMembers(...) abort$/;"	f
OmniSharp#FindSolutionOrDir	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#FindSolutionOrDir(...) abort$/;"	f
OmniSharp#FindSymbol	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#FindSymbol(...) abort$/;"	f
OmniSharp#FindUsages	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#FindUsages(...) abort$/;"	f
OmniSharp#FixUsings	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#FixUsings(...) abort$/;"	f
OmniSharp#FugitiveCheck	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#FugitiveCheck() abort$/;"	f
OmniSharp#GetCodeActions	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#GetCodeActions(mode) range abort$/;"	f
OmniSharp#GetCompletions	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#GetCompletions(partial, ...) abort$/;"	f
OmniSharp#GetHost	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#GetHost(...) abort$/;"	f
OmniSharp#GetPort	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#GetPort(...) abort$/;"	f
OmniSharp#GlobalCodeCheck	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#GlobalCodeCheck() abort$/;"	f
OmniSharp#GotoDefinition	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#GotoDefinition(...) abort$/;"	f
OmniSharp#GotoMetadata	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#GotoMetadata(open_in_preview, metadata, opts) abort$/;"	f
OmniSharp#HighlightBuffer	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#HighlightBuffer() abort$/;"	f
OmniSharp#HighlightEchoKind	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function OmniSharp#HighlightEchoKind() abort$/;"	f
OmniSharp#Install	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#Install(...) abort$/;"	f
OmniSharp#IsAnyServerRunning	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#IsAnyServerRunning() abort$/;"	f
OmniSharp#IsServerRunning	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#IsServerRunning(...) abort$/;"	f
OmniSharp#JumpToLocation	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#JumpToLocation(location, noautocmds) abort$/;"	f
OmniSharp#NavigateDown	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#NavigateDown() abort$/;"	f
OmniSharp#NavigateUp	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#NavigateUp() abort$/;"	f
OmniSharp#OpenLog	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#OpenLog() abort$/;"	f
OmniSharp#OpenPythonLog	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#OpenPythonLog() abort$/;"	f
OmniSharp#PreviewDefinition	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#PreviewDefinition(...) abort$/;"	f
OmniSharp#PreviewImplementation	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#PreviewImplementation() abort$/;"	f
OmniSharp#Rename	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#Rename() abort$/;"	f
OmniSharp#RenameTo	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#RenameTo(renameto, ...) abort$/;"	f
OmniSharp#RestartAllServers	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#RestartAllServers() abort$/;"	f
OmniSharp#RestartServer	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#RestartServer() abort$/;"	f
OmniSharp#SignatureHelp	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#SignatureHelp() abort$/;"	f
OmniSharp#StartServer	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#StartServer(...) abort$/;"	f
OmniSharp#StartServerIfNotRunning	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#StartServerIfNotRunning(...) abort$/;"	f
OmniSharp#StopAllServers	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#StopAllServers() abort$/;"	f
OmniSharp#StopServer	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#StopServer(...) abort$/;"	f
OmniSharp#TypeLookup	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#TypeLookup(includeDocumentation, ...) abort$/;"	f
OmniSharp#TypeLookupWithDocumentation	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#TypeLookupWithDocumentation(...) abort$/;"	f
OmniSharp#TypeLookupWithoutDocumentation	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#TypeLookupWithoutDocumentation(...) abort$/;"	f
OmniSharp#UpdateBuffer	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! OmniSharp#UpdateBuffer(...) abort$/;"	f
OmniSharp#proc#GetJob	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#GetJob(jobkey) abort$/;"	f
OmniSharp#proc#IsJobRunning	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#IsJobRunning(job) abort$/;"	f
OmniSharp#proc#ListRunningJobs	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#ListRunningJobs() abort$/;"	f
OmniSharp#proc#Start	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#Start(command, jobkey) abort$/;"	f
OmniSharp#proc#StopJob	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#StopJob(jobkey) abort$/;"	f
OmniSharp#proc#dispatchStart	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#dispatchStart(command) abort$/;"	f
OmniSharp#proc#neovimErrHandler	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#neovimErrHandler(job_id, data, event) dict abort$/;"	f
OmniSharp#proc#neovimExitHandler	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#neovimExitHandler(job_id, data, event) dict abort$/;"	f
OmniSharp#proc#neovimJobStart	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#neovimJobStart(command) abort$/;"	f
OmniSharp#proc#neovimOutHandler	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#neovimOutHandler(job_id, data, event) dict abort$/;"	f
OmniSharp#proc#supportsNeovimJobs	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#supportsNeovimJobs() abort$/;"	f
OmniSharp#proc#supportsVimDispatch	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#supportsVimDispatch() abort$/;"	f
OmniSharp#proc#supportsVimJobs	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#supportsVimJobs() abort$/;"	f
OmniSharp#proc#supportsVimProc	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#supportsVimProc() abort$/;"	f
OmniSharp#proc#vimErrHandler	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#vimErrHandler(channel, message) abort$/;"	f
OmniSharp#proc#vimJobStart	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#vimJobStart(command) abort$/;"	f
OmniSharp#proc#vimOutHandler	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#vimOutHandler(channel, message) abort$/;"	f
OmniSharp#proc#vimprocStart	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! OmniSharp#proc#vimprocStart(command) abort$/;"	f
OmniSharp#py#bootstrap	.vim/plugged/omnisharp-vim/autoload/OmniSharp/py.vim	/^function! OmniSharp#py#bootstrap()$/;"	f
OmniSharp#py#eval	.vim/plugged/omnisharp-vim/autoload/OmniSharp/py.vim	/^function! OmniSharp#py#eval(cmd) abort$/;"	f
OmniSharp#py#load	.vim/plugged/omnisharp-vim/autoload/OmniSharp/py.vim	/^function! OmniSharp#py#load(filename)$/;"	f
OmniSharp#stdio#CodeCheck	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#CodeCheck(opts, Callback) abort$/;"	f
OmniSharp#stdio#CodeFormat	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#CodeFormat(opts) abort$/;"	f
OmniSharp#stdio#FindHighlightTypes	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#FindHighlightTypes(Callback) abort$/;"	f
OmniSharp#stdio#FindImplementations	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#FindImplementations(Callback) abort$/;"	f
OmniSharp#stdio#FindMembers	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#FindMembers(Callback) abort$/;"	f
OmniSharp#stdio#FindSymbol	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#FindSymbol(filter, Callback) abort$/;"	f
OmniSharp#stdio#FindTextProperties	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#FindTextProperties(bufnum) abort$/;"	f
OmniSharp#stdio#FindUsages	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#FindUsages(Callback) abort$/;"	f
OmniSharp#stdio#FixUsings	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#FixUsings(Callback) abort$/;"	f
OmniSharp#stdio#GetCodeActions	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#GetCodeActions(mode, Callback) abort$/;"	f
OmniSharp#stdio#GetCompletions	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#GetCompletions(partial, Callback) abort$/;"	f
OmniSharp#stdio#GetLogFile	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#GetLogFile() abort$/;"	f
OmniSharp#stdio#GlobalCodeCheck	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#GlobalCodeCheck(Callback) abort$/;"	f
OmniSharp#stdio#GotoDefinition	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#GotoDefinition(Callback) abort$/;"	f
OmniSharp#stdio#GotoMetadata	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#GotoMetadata(Callback, metadata) abort$/;"	f
OmniSharp#stdio#HandleResponse	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#HandleResponse(job, message) abort$/;"	f
OmniSharp#stdio#HighlightEchoKind	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function OmniSharp#stdio#HighlightEchoKind() abort$/;"	f
OmniSharp#stdio#NavigateDown	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#NavigateDown() abort$/;"	f
OmniSharp#stdio#NavigateUp	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#NavigateUp() abort$/;"	f
OmniSharp#stdio#RenameTo	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#RenameTo(renameto, opts) abort$/;"	f
OmniSharp#stdio#RunCodeAction	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#RunCodeAction(action, ...) abort$/;"	f
OmniSharp#stdio#SignatureHelp	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#SignatureHelp(Callback) abort$/;"	f
OmniSharp#stdio#TypeLookup	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#TypeLookup(includeDocumentation, Callback) abort$/;"	f
OmniSharp#stdio#UpdateBuffer	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! OmniSharp#stdio#UpdateBuffer(opts) abort$/;"	f
OmniSharp#util#CheckCapabilities	.vim/plugged/omnisharp-vim/autoload/OmniSharp/util.vim	/^function! OmniSharp#util#CheckCapabilities() abort$/;"	f
OmniSharp#util#EchoErr	.vim/plugged/omnisharp-vim/autoload/OmniSharp/util.vim	/^function! OmniSharp#util#EchoErr(msg)$/;"	f
OmniSharp#util#GetStartCmd	.vim/plugged/omnisharp-vim/autoload/OmniSharp/util.vim	/^function! OmniSharp#util#GetStartCmd(solution_file) abort$/;"	f
OmniSharp#util#PathJoin	.vim/plugged/omnisharp-vim/autoload/OmniSharp/util.vim	/^function! OmniSharp#util#PathJoin(parts) abort$/;"	f
OmniSharp#util#TranslatePathForClient	.vim/plugged/omnisharp-vim/autoload/OmniSharp/util.vim	/^function! OmniSharp#util#TranslatePathForClient(filename) abort$/;"	f
OmniSharp#util#TranslatePathForServer	.vim/plugged/omnisharp-vim/autoload/OmniSharp/util.vim	/^function! OmniSharp#util#TranslatePathForServer(filename) abort$/;"	f
OmniSharpCodeFormat	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpCodeFormat                          call OmniSharp#CodeFormat()$/;"	c
OmniSharpDocumentation	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpDocumentation                       call OmniSharp#TypeLookupWith/;"	c
OmniSharpFindImplementations	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpFindImplementations                 call OmniSharp#FindImplementa/;"	c
OmniSharpFindMembers	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpFindMembers                         call OmniSharp#FindMembers()$/;"	c
OmniSharpFindSymbol	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar -nargs=? OmniSharpFindSymbol                 call OmniSharp#FindSymbol(<q-/;"	c
OmniSharpFindUsages	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpFindUsages                          call OmniSharp#FindUsages()$/;"	c
OmniSharpFixUsings	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpFixUsings                           call OmniSharp#FixUsings()$/;"	c
OmniSharpGetCodeActions	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpGetCodeActions                      call OmniSharp#GetCodeActions/;"	c
OmniSharpGlobalCodeCheck	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpGlobalCodeCheck                     call OmniSharp#GlobalCodeChec/;"	c
OmniSharpGotoDefinition	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpGotoDefinition                      call OmniSharp#GotoDefinition/;"	c
OmniSharpHighlightEchoKind	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpHighlightEchoKind                   call OmniSharp#HighlightEchoK/;"	c
OmniSharpHighlightTypes	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpHighlightTypes                      call OmniSharp#HighlightBuffe/;"	c
OmniSharpInstall	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar -nargs=? OmniSharpInstall                    call OmniSharp#Install(<f-arg/;"	c
OmniSharpNavigateDown	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpNavigateDown                        call OmniSharp#NavigateDown()$/;"	c
OmniSharpNavigateUp	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpNavigateUp                          call OmniSharp#NavigateUp()$/;"	c
OmniSharpOpenLog	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpOpenLog                             call OmniSharp#OpenLog()$/;"	c
OmniSharpOpenPythonLog	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpOpenPythonLog                       call OmniSharp#OpenPythonLog(/;"	c
OmniSharpPreviewDefinition	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpPreviewDefinition                   call OmniSharp#PreviewDefinit/;"	c
OmniSharpPreviewImplementation	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpPreviewImplementation               call OmniSharp#PreviewImpleme/;"	c
OmniSharpRename	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpRename                              call OmniSharp#Rename()$/;"	c
OmniSharpRenameTo	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -nargs=1 OmniSharpRenameTo                        call OmniSharp#RenameTo(<q-ar/;"	c
OmniSharpRestartAllServers	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpRestartAllServers                   call OmniSharp#RestartAllServ/;"	c
OmniSharpRestartServer	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpRestartServer                       call OmniSharp#RestartServer(/;"	c
OmniSharpSignatureHelp	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpSignatureHelp                       call OmniSharp#SignatureHelp(/;"	c
OmniSharpStartServer	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar -nargs=? -complete=file OmniSharpStartServer call OmniSharp#StartServer(<q/;"	c
OmniSharpStopAllServers	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpStopAllServers                      call OmniSharp#StopAllServers/;"	c
OmniSharpStopServer	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpStopServer                          call OmniSharp#StopServer()$/;"	c
OmniSharpTypeLookup	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^command! -buffer -bar OmniSharpTypeLookup                          call OmniSharp#TypeLookupWith/;"	c
OnReadLine	.vim/plugged/coc.nvim/src/util/fs.ts	/^export type OnReadLine = (line: string) => void$/;"	a
OnReady	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class OnReady {$/;"	c
OnTypeFormatManager	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^export default class OnTypeFormatManager implements Disposable {$/;"	c
OnTypeFormattingEditProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface OnTypeFormattingEditProvider {$/;"	i
Op_command	.config/nvim/plugged/vim-operator-user/t/example-b-advanced.vim	/^function! Op_command(motion_wiseness)$/;"	f
Op_command_right	.config/nvim/plugged/vim-operator-user/t/example-a-basic.vim	/^function! Op_command_right(motion_wiseness)$/;"	f
Op_count	.config/nvim/plugged/vim-operator-user/t/count-designations.vim	/^function! Op_count(_)$/;"	f
OpenCurlyBrace	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  OpenCurlyBrace = 123,$/;"	e	enum:CharCode
OpenParen	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  OpenParen = 40,$/;"	e	enum:CharCode
OpenSquareBracket	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  OpenSquareBracket = 91,$/;"	e	enum:CharCode
OpenURL	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^      command -bar -nargs=1 OpenURL Browse <args>$/;"	c
OpenURL	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^      command -bar -nargs=1 OpenURL exe '!git web--browse' shellescape(<q-args>, 1)$/;"	c
OpenURL	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^      command -bar -nargs=1 OpenURL exe '!launchy' shellescape(<q-args>, 1)$/;"	c
OpenURL	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^      command -bar -nargs=1 OpenURL exe '!open' shellescape(<q-args>, 1)$/;"	c
OpenURL	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^      command -bar -nargs=1 OpenURL exe '!sensible-browser' shellescape(<q-args>, 1)$/;"	c
OpenURL	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^      command -bar -nargs=1 OpenURL exe '!start cmd \/cstart \/b' shellescape(<q-args>, 1)$/;"	c
OpenURL	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^      command -bar -nargs=1 OpenURL exe '!xdg-open' shellescape(<q-args>, 1) '&'$/;"	c
Openable	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^from denite.kind.openable import Kind as Openable$/;"	x
Openable	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^from denite.kind.openable import Kind as Openable$/;"	x
Openable	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^from denite.kind.openable import Kind as Openable$/;"	x
Openable	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^from denite.kind.openable import Kind as Openable$/;"	x
OperatingSystem	.vim/plugged/coc.nvim/src/util/platform.ts	/^export const enum OperatingSystem {$/;"	g
OperatorMemorize	.config/nvim/plugged/vim-operator-user/t/register-designations.vim	/^function! OperatorMemorize(motion_wise)$/;"	f
OperatorVoidDelete	.config/nvim/plugged/vim-operator-user/t/example-d-motion-type.vim	/^function! OperatorVoidDelete(motion_wise)$/;"	f
OptionList	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^class OptionList extends BasicList {$/;"	v
OptionValue	.vim/plugged/coc.nvim/src/events.ts	/^export type OptionValue = string | number | boolean$/;"	a
Options	.config/nvim/plugged/vista.vim/README.md	/^### Options$/;"	S
Options	.vim/plugged/fzf/README.md	/^#### Options$/;"	t
Options	.vim/plugged/fzf/src/options.go	/^type Options struct {$/;"	s	package:fzf
Options	.vim/plugged/nvim-yarp/README.md	/^## Options$/;"	s
Other tips	.config/nvim/plugged/vista.vim/README.md	/^### Other tips$/;"	S
Our Pledge	.config/nvim/plugged/dsf.vim/CODE_OF_CONDUCT.md	/^## Our Pledge$/;"	s
Our Pledge	.config/nvim/plugged/tagalong.vim/CODE_OF_CONDUCT.md	/^## Our Pledge$/;"	s
Our Responsibilities	.config/nvim/plugged/dsf.vim/CODE_OF_CONDUCT.md	/^## Our Responsibilities$/;"	s
Our Responsibilities	.config/nvim/plugged/tagalong.vim/CODE_OF_CONDUCT.md	/^## Our Responsibilities$/;"	s
Our Standards	.config/nvim/plugged/dsf.vim/CODE_OF_CONDUCT.md	/^## Our Standards$/;"	s
Our Standards	.config/nvim/plugged/tagalong.vim/CODE_OF_CONDUCT.md	/^## Our Standards$/;"	s
OuterClass	.config/nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^      class OuterClass$/;"	c
Outline	.vim/plugged/coc.nvim/src/list/source/outline.ts	/^export default class Outline extends LocationList {$/;"	c
Output	.vim/plugged/omnisharp-vim/installer/README.md	/^### Output$/;"	S
OutputChannel	.vim/plugged/coc.nvim/src/types.ts	/^export interface OutputChannel {$/;"	i
OutputList	.vim/plugged/coc.nvim/src/list/source/output.ts	/^export default class OutputList extends BasicList {$/;"	c
Overall Implementation	.vim/plugged/vim-hug-neovim-rpc/README.md	/^## Overall Implementation$/;"	s
Overview	.config/nvim/plugged/targets.vim/README.md	/^## Overview$/;"	s
Overwin motions	.config/nvim/plugged/vim-easymotion/README.md	/^### Overwin motions$/;"	S
P	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> P$/;"	m
P	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  P = 80,$/;"	e	enum:CharCode
PATH	.config/nvim/plugged/defx.nvim/Makefile	/^PATH := .\/vim-themis\/bin:$(PATH)$/;"	m
PATH	.config/nvim/plugged/denite.nvim/Makefile	/^PATH := .\/vim-themis\/bin:$(PATH)$/;"	m
PATH	.vim/plugged/denite.nvim/Makefile	/^PATH := .\/vim-themis\/bin:$(PATH)$/;"	m
PAUSE_BEFORE_EXIT	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
PHP	.config/nvim/plugged/tagalong.vim/spec/plugin/filetype_support_spec.rb	/^  describe "PHP" do$/;"	d
PHP "echo" in tags:	.config/nvim/plugged/switch.vim/README.md	/^### PHP "echo" in tags:$/;"	S
POST_PROCESS_CMD	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PROJECT_ROOT	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PWD	.config/nvim/plugged/html5.vim/Makefile	/^PWD=`pwd`$/;"	m
PYTHON3	.config/nvim/plugged/ultisnips/test/constant.py	/^PYTHON3 = sys.version_info >= (3, 0)$/;"	v
PYTHON3	.config/nvim/plugged/ultisnips/test/test_Plugin.py	/^PYTHON3 = sys.version_info >= (3, 0)$/;"	v
Package management	.config/nvim/plugged/vista.vim/README.md	/^### Package management$/;"	S
Pair Seek	.config/nvim/plugged/targets.vim/README.md	/^#### Pair Seek$/;"	t
Pair Text Objects	.config/nvim/plugged/targets.vim/README.md	/^### Pair Text Objects$/;"	S
Pair mappings	.config/nvim/plugged/targets.vim/cheatsheet.md	/^## Pair mappings$/;"	s
Palette	.config/nvim/plugged/gruvbox/README.md	/^Palette$/;"	s
PaperColor	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^command! -nargs=0 PaperColor :call g:PaperColor()$/;"	c
PaperColor	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^fun! g:PaperColor()$/;"	f
PaperColor Theme	.vim/plugged/papercolor-theme/README.md	/^PaperColor Theme$/;"	c
ParseArgs	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParseOptions	.vim/plugged/fzf/src/options.go	/^func ParseOptions() *Options {$/;"	f	package:fzf	typeref:typename:*Options
ParseRange	.vim/plugged/fzf/src/tokenizer.go	/^func ParseRange(str *string) (Range, bool) {$/;"	f	package:fzf	typeref:typename:(Range, bool)
ParseSnippets_ClearAll	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_ClearAll(_VimTest):$/;"	c
ParseSnippets_ClearOne	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_ClearOne(_VimTest):$/;"	c
ParseSnippets_ClearTwo	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_ClearTwo(_VimTest):$/;"	c
ParseSnippets_ExtendsWithoutFiletype	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_ExtendsWithoutFiletype(_VimTest):$/;"	c
ParseSnippets_Global_Local_Python	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_Global_Local_Python(_VimTest):$/;"	c
ParseSnippets_Global_Python	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_Global_Python(_VimTest):$/;"	c
ParseSnippets_InvalidPriorityLine	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_InvalidPriorityLine(_VimTest):$/;"	c
ParseSnippets_InvalidPriorityLine1	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_InvalidPriorityLine1(_VimTest):$/;"	c
ParseSnippets_MissingEndSnippet	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MissingEndSnippet(_VimTest):$/;"	c
ParseSnippets_MultiWord_Description	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_Description(_ParseSnippets_MultiWord):$/;"	c
ParseSnippets_MultiWord_Description_Option	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_Description_Option(_ParseSnippets_MultiWord):$/;"	c
ParseSnippets_MultiWord_NoContainer	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_NoContainer(_VimTest):$/;"	c
ParseSnippets_MultiWord_Quotes	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_Quotes(_VimTest):$/;"	c
ParseSnippets_MultiWord_RE1	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_RE1(_ParseSnippets_MultiWord_RE):$/;"	c
ParseSnippets_MultiWord_RE2	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_RE2(_ParseSnippets_MultiWord_RE):$/;"	c
ParseSnippets_MultiWord_RE3	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_RE3(_ParseSnippets_MultiWord_RE):$/;"	c
ParseSnippets_MultiWord_Simple	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_Simple(_ParseSnippets_MultiWord):$/;"	c
ParseSnippets_MultiWord_UnmatchedContainer	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_UnmatchedContainer(_VimTest):$/;"	c
ParseSnippets_MultiWord_WithQuotes	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_WithQuotes(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippet	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippet(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippetContext	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippetContext(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippetLocation	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippetLocation(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippetPostAction	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippetPostAction(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippetPreAction	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippetPreAction(_VimTest):$/;"	c
ParseSnippets_PrintPythonStacktrace	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_PrintPythonStacktrace(_VimTest):$/;"	c
ParseSnippets_PrintPythonStacktraceMultiline	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_PrintPythonStacktraceMultiline(_VimTest):$/;"	c
ParseSnippets_SimpleSnippet	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_SimpleSnippet(_VimTest):$/;"	c
ParseSnippets_UnknownDirective	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_UnknownDirective(_VimTest):$/;"	c
PassMerger	.vim/plugged/fzf/src/merger.go	/^func PassMerger(chunks *[]*Chunk, tac bool) *Merger {$/;"	f	package:fzf	typeref:typename:*Merger
PathOption	.vim/plugged/coc.nvim/src/source/file.ts	/^interface PathOption {$/;"	i
Pathogen (https://github.com/tpope/vim-pathogen)	.config/nvim/plugged/vim-easymotion/README.md	/^### Pathogen (https:\/\/github.com\/tpope\/vim-pathogen)$/;"	S
Pattern	.vim/plugged/fzf/src/pattern.go	/^type Pattern struct {$/;"	s	package:fzf
PatternType	.vim/plugged/coc.nvim/src/types.ts	/^export enum PatternType {$/;"	g
PatternType	.vim/plugged/coc.nvim/src/workspace.ts	/^    let types = [PatternType.Buffer, PatternType.LanguageServer, PatternType.Global]$/;"	v
Pause	.vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Pause(bool)  {}$/;"	f	unknown:tui.FullscreenRenderer
Pause	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Pause(clear bool) {$/;"	f	struct:tui.LightRenderer
Pause	.vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Pause(clear bool) {$/;"	f	unknown:tui.FullscreenRenderer
Pause	.vim/plugged/fzf/src/tui/tui.go	/^	Pause(clear bool)$/;"	n	interface:tui.Renderer
Pcd	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^    command! -buffer -bar -bang -nargs=? -range=1 -complete=customlist,s:dir_complete Pcd$/;"	c
Peek	.vim/plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Peek(event EventType) bool {$/;"	f	struct:util.EventBox	typeref:typename:bool
PercentSign	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  PercentSign = 37,$/;"	e	enum:CharCode
Performance	.vim/plugged/fzf/README.md	/^### Performance$/;"	S
Performance	.vim/plugged/vim-airline/README.md	/^# Performance$/;"	c
Period	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Period = 46,$/;"	e	enum:CharCode
PerlSyntaxFold	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^class PerlSyntaxFold(_VimTest):$/;"	c
PgDn	.vim/plugged/fzf/src/tui/tui.go	/^	PgDn$/;"	c	package:tui
PgUp	.vim/plugged/fzf/src/tui/tui.go	/^	PgUp$/;"	c	package:tui
Pipe	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  Pipe,$/;"	e	enum:TokenType
Pipe	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Pipe = 124,$/;"	e	enum:CharCode
Placeholder	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^export class Placeholder extends TransformableMarker {$/;"	c
Platform	.vim/plugged/coc.nvim/src/util/platform.ts	/^export enum Platform {$/;"	g
Plcd	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^    command! -buffer -bar -bang -nargs=* -range=1 -complete=customlist,s:dir_complete Plcd$/;"	c
Plug	.config/nvim/autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
Plug	.vim/autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	.config/nvim/autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugClean	.vim/autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	.config/nvim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugDiff	.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	.config/nvim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugInstall	.vim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	.config/nvim/autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugLOD	.vim/autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	.config/nvim/autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugSnapshot	.vim/autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	.config/nvim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugStatus	.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	.config/nvim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpdate	.vim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	.config/nvim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
PlugUpgrade	.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
Plugin	.vim/plugged/coc.nvim/src/plugin.ts	/^export default class Plugin extends EventEmitter {$/;"	c
Plugin	.vim/plugged/omnisharp-vim/README.md	/^### Plugin$/;"	S
Plugin Manager	.config/nvim/plugged/vista.vim/README.md	/^### Plugin Manager$/;"	S
Plugin_SuperTab_SimpleTest	.config/nvim/plugged/ultisnips/test/test_Plugin.py	/^class Plugin_SuperTab_SimpleTest(_VimTest):$/;"	c
Plugins	.config/nvim/plugged/targets.vim/plugins.md	/^## Plugins$/;"	s
Plus	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  Plus,$/;"	e	enum:TokenType
Plus	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Plus = 43,$/;"	e	enum:CharCode
Popup	.vim/plugged/coc.nvim/src/model/popup.ts	/^export class Popup {$/;"	c
PopupChangeEvent	.vim/plugged/coc.nvim/src/types.ts	/^export interface PopupChangeEvent {$/;"	i
PopupOptions	.vim/plugged/coc.nvim/src/types.ts	/^export interface PopupOptions {$/;"	i
PopupProps	.vim/plugged/coc.nvim/src/types.ts	/^export interface PopupProps {$/;"	i
Position	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/position.py	/^class Position(object):$/;"	c
PowerShell Restrictions	.vim/plugged/omnisharp-vim/installer/README.md	/^## PowerShell Restrictions$/;"	s
PowerlineMain	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^    augroup PowerlineMain$/;"	a
Preferences	.vim/plugged/coc.nvim/src/handler/index.ts	/^interface Preferences {$/;"	i
PrefixMatch	.vim/plugged/fzf/src/algo/algo.go	/^func PrefixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo	typeref:typename:(Result, *[]int)
PreiewOptions	.vim/plugged/coc.nvim/src/types.ts	/^export interface PreiewOptions {$/;"	i
Prepend	.vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) Prepend(prefix string) {$/;"	f	struct:util.Chars
Prerequisites	.vim/plugged/fzf/BUILD.md	/^### Prerequisites$/;"	S
Preview	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=? -bang -range -complete=customlist,s:Complete_preview Preview :c/;"	c
Preview	.vim/plugged/fzf/src/options.go	/^	Preview     previewOpts$/;"	m	struct:fzf.Options	typeref:typename:previewOpts
Preview window	.vim/plugged/fzf/README.md	/^### Preview window$/;"	S
Print	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Print(text string) {$/;"	f	struct:tui.LightWindow
Print	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Print(text string) {$/;"	f	struct:tui.TcellWindow
Print	.vim/plugged/fzf/src/tui/tui.go	/^	Print(text string)$/;"	n	interface:tui.Window
PrintQuery	.vim/plugged/fzf/src/options.go	/^	PrintQuery  bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Printer	.vim/plugged/fzf/src/options.go	/^	Printer     func(string)$/;"	m	struct:fzf.Options	typeref:typename:func(string)
Problems	.config/nvim/plugged/vim-easyescape-plus/README.md	/^## Problems$/;"	s
Problems summary	.config/nvim/plugged/defx.nvim/.github/ISSUE_TEMPLATE.md	/^# Problems summary$/;"	c
Problems summary	.config/nvim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^# Problems summary$/;"	c
Problems summary	.config/nvim/plugged/oceanic-next/.github/ISSUE_TEMPLATE.md	/^# Problems summary$/;"	c
Problems summary	.vim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^# Problems summary$/;"	c
Process	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/aprocess.py	/^class Process(asyncio.SubprocessProtocol):$/;"	c
Process	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/process.py	/^class Process(object):$/;"	c
Process	.vim/plugged/denite.nvim/rplugin/python3/denite/aprocess.py	/^class Process(asyncio.SubprocessProtocol):$/;"	c
Process	.vim/plugged/denite.nvim/rplugin/python3/denite/process.py	/^class Process(object):$/;"	c
Process IDs	.vim/plugged/fzf/README.md	/^#### Process IDs$/;"	t
Program	.vim/plugged/omnisharp-vim/test/example/Program.cs	/^    class Program$/;"	c	namespace:example
Project Setup	.vim/plugged/coc.nvim/CONTRIBUTING.md	/^## Project Setup$/;"	s
ProjectDo	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^    command! -buffer -bang -nargs=1 -range=0 -complete=command ProjectDo$/;"	c
ProjectionistDetect	.config/nvim/plugged/vim-projectionist/plugin/projectionist.vim	/^function! ProjectionistDetect(path) abort$/;"	f
ProjectionistHas	.config/nvim/plugged/vim-projectionist/plugin/projectionist.vim	/^function! ProjectionistHas(req, ...) abort$/;"	f
Promise	.vim/plugged/coc.nvim/src/__tests__/client/delayer.test.ts	/^    return Promise.resolve(++count)$/;"	v
Promise	.vim/plugged/coc.nvim/src/__tests__/client/delayer.test.ts	/^    return Promise.resolve(n)$/;"	v
Promise	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^        return Promise.resolve(result)$/;"	v
Promise	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^        return Promise.resolve({$/;"	v
Promise	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^        return Promise.resolve(result)$/;"	v
Promise	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^        return Promise.resolve([{ label: 'foo' }, { label: 'bar' }])$/;"	v
Promise	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^        return Promise.resolve(item)$/;"	v
Promise	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^    return Promise.resolve(listItems)$/;"	v
Promise	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^          return Promise.resolve({ items: [{ word: 'bar' }] })$/;"	v
Promise	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return Promise.resolve({ items: [{ word: 'foo#abc' }] })$/;"	v
Promise	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return Promise.resolve({ items: [{ word: 'foo#bar' }] })$/;"	v
Promise	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return Promise.resolve({ items: [{ word: 'foo' }] })$/;"	v
Promise	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return Promise.resolve({$/;"	v
Promise	.vim/plugged/coc.nvim/src/__tests__/modules/sources.test.ts	/^        return Promise.resolve({ items: [] })$/;"	v
Promise	.vim/plugged/coc.nvim/src/list/ui.ts	/^    if (!window) return Promise.resolve(null)$/;"	v
Promise	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^      Promise.resolve(buffer.setLines([], {$/;"	v
Promise	.vim/plugged/coc.nvim/src/services.ts	/^          return Promise.resolve()$/;"	v
Promise	.vim/plugged/coc.nvim/src/util/extensions.ts	/^declare interface Promise<T> {$/;"	i
Promise	.vim/plugged/coc.nvim/src/util/factory.ts	/^  Promise: any$/;"	p	interface:ISandbox
PromiseCallback	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^export type PromiseCallback = (event: TextDocumentWillSaveEvent) => Promise<void>$/;"	a
Prompt	.vim/plugged/coc.nvim/src/list/prompt.ts	/^export default class Prompt {$/;"	c
Prompt	.vim/plugged/fzf/src/options.go	/^	Prompt      string$/;"	m	struct:fzf.Options	typeref:typename:string
Prompt	.vim/plugged/fzf/src/tui/tui.go	/^	Prompt       Color$/;"	m	struct:tui.ColorTheme	typeref:typename:Color
ProperIndenting_AutoIndentAndNewline_ECR	.config/nvim/plugged/ultisnips/test/test_Format.py	/^class ProperIndenting_AutoIndentAndNewline_ECR(_VimTest):$/;"	c
ProperIndenting_FirstLineInFileComplete_ECR	.config/nvim/plugged/ultisnips/test/test_Format.py	/^class ProperIndenting_FirstLineInFileComplete_ECR($/;"	c
ProperIndenting_FirstLineInFile_ECR	.config/nvim/plugged/ultisnips/test/test_Format.py	/^class ProperIndenting_FirstLineInFile_ECR(_VimTest):$/;"	c
ProperIndenting_SimpleCase_ECR	.config/nvim/plugged/ultisnips/test/test_Format.py	/^class ProperIndenting_SimpleCase_ECR(_VimTest):$/;"	c
ProperIndenting_SingleLineNoReindenting_ECR	.config/nvim/plugged/ultisnips/test/test_Format.py	/^class ProperIndenting_SingleLineNoReindenting_ECR(_VimTest):$/;"	c
PropertyScheme	.vim/plugged/coc.nvim/src/extensions.ts	/^export interface PropertyScheme {$/;"	i
ProposedFeatures	.vim/plugged/coc.nvim/src/language-client/index.ts	/^export namespace ProposedFeatures {$/;"	n
Pros	.vim/plugged/fzf/README.md	/^Pros$/;"	s
Pros.	.config/nvim/plugged/goyo.vim/README.md	/^Pros.$/;"	s
Provide Support on Issues	.vim/plugged/coc.nvim/CONTRIBUTING.md	/^## Provide Support on Issues$/;"	s
Provide a minimal init.vim with less than 50 lines (Required!)	.config/nvim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^## Provide a minimal init.vim with less than 50 lines (Required!)$/;"	s
Provide a minimal init.vim with less than 50 lines (Required!)	.vim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^## Provide a minimal init.vim with less than 50 lines (Required!)$/;"	s
Provide a minimal init.vim/vimrc with less than 50 lines (Required!)	.config/nvim/plugged/defx.nvim/.github/ISSUE_TEMPLATE.md	/^## Provide a minimal init.vim\/vimrc with less than 50 lines (Required!)$/;"	s
Provide a minimal vim rc with less than 50 lines (Required!)	.config/nvim/plugged/oceanic-next/.github/ISSUE_TEMPLATE.md	/^## Provide a minimal vim rc with less than 50 lines (Required!)$/;"	s
ProvideColorPresentationSignature	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^export type ProvideColorPresentationSignature = ($/;"	a
ProvideDeclarationSignature	.vim/plugged/coc.nvim/src/language-client/declaration.ts	/^export interface ProvideDeclarationSignature {$/;"	i
ProvideDocumentColorsSignature	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^export type ProvideDocumentColorsSignature = (document: TextDocument, token: CancellationToken) /;"	a
ProvideFoldingRangeSignature	.vim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^export type ProvideFoldingRangeSignature = ($/;"	a
ProvideImplementationSignature	.vim/plugged/coc.nvim/src/language-client/implementation.ts	/^export interface ProvideImplementationSignature {$/;"	i
ProvideSelectionRangeSignature	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^export interface ProvideSelectionRangeSignature {$/;"	i
ProvideTypeDefinitionSignature	.vim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^export interface ProvideTypeDefinitionSignature {$/;"	i
ProviderItem	.vim/plugged/coc.nvim/src/provider/manager.ts	/^export interface ProviderItem<T> {$/;"	i
ProviderItem	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^export interface ProviderItem {$/;"	i
ProviderResult	.vim/plugged/coc.nvim/src/provider/index.ts	/^export type ProviderResult<T> =$/;"	a
Proxy	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^class Proxy:$/;"	c
Proxy	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^class Proxy:$/;"	c
PumBounding	.vim/plugged/coc.nvim/src/types.ts	/^export interface PumBounding {$/;"	i
Push	.vim/plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Push(data []byte) bool {$/;"	f	struct:fzf.ChunkList	typeref:typename:bool
Pushing	.config/nvim/plugged/vim-gutentags/CONTRIBUTING.md	/^## Pushing$/;"	s
Python module for the plug-in	.vim/plugged/omnisharp-vim/python/README.md	/^# Python module for the plug-in$/;"	c
PythonCode	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^class PythonCode(NoneditableTextObject):$/;"	c
PythonCodeOld_IndentedMultiline	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCodeOld_IndentedMultiline(_VimTest):$/;"	c
PythonCodeOld_ReferencePlaceholderAfter	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCodeOld_ReferencePlaceholderAfter(_VimTest):$/;"	c
PythonCodeOld_ReferencePlaceholderBefore	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCodeOld_ReferencePlaceholderBefore(_VimTest):$/;"	c
PythonCodeOld_SimpleExample	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCodeOld_SimpleExample(_VimTest):$/;"	c
PythonCodeOld_TransformedBeforeMultiLine	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCodeOld_TransformedBeforeMultiLine(_VimTest):$/;"	c
PythonCodeToken	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^class PythonCodeToken(Token):$/;"	c
PythonCode_AccessKilledTabstop_OverwriteFirst	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_AccessKilledTabstop_OverwriteFirst(_VimTest):$/;"	c
PythonCode_AccessKilledTabstop_OverwriteSecond	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_AccessKilledTabstop_OverwriteSecond(_VimTest):$/;"	c
PythonCode_CanOverwriteTabstop	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_CanOverwriteTabstop(_VimTest):$/;"	c
PythonCode_IndentEtSw	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_IndentEtSw(_VimTest):$/;"	c
PythonCode_IndentEtSwOffset	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_IndentEtSwOffset(_VimTest):$/;"	c
PythonCode_IndentNoetSwTs	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_IndentNoetSwTs(_VimTest):$/;"	c
PythonCode_IndentProblem	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_IndentProblem(_VimTest):$/;"	c
PythonCode_Locals	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_Locals(_VimTest):$/;"	c
PythonCode_LongerTextThanSource_Chars	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_LongerTextThanSource_Chars(_VimTest):$/;"	c
PythonCode_LongerTextThanSource_MultiLine	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_LongerTextThanSource_MultiLine(_VimTest):$/;"	c
PythonCode_MultiAppend	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_MultiAppend(_VimTest):$/;"	c
PythonCode_MultiAppendShift	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_MultiAppendShift(_VimTest):$/;"	c
PythonCode_MultiAppendShiftMethods	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_MultiAppendShiftMethods(_VimTest):$/;"	c
PythonCode_MultiAppendSimpleIndent	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_MultiAppendSimpleIndent(_VimTest):$/;"	c
PythonCode_MultilineIndented	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_MultilineIndented(_VimTest):$/;"	c
PythonCode_OptExists	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_OptExists(_VimTest):$/;"	c
PythonCode_OptNoExists	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_OptNoExists(_VimTest):$/;"	c
PythonCode_ReferencePlaceholder	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_ReferencePlaceholder(_VimTest):$/;"	c
PythonCode_ReferencePlaceholderBefore	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_ReferencePlaceholderBefore(_VimTest):$/;"	c
PythonCode_ResetIndent	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_ResetIndent(_VimTest):$/;"	c
PythonCode_SimpleAppend	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_SimpleAppend(_VimTest):$/;"	c
PythonCode_SimpleExample	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_SimpleExample(_VimTest):$/;"	c
PythonCode_SimpleExample_ReturnValueIsEmptyString	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_SimpleExample_ReturnValueIsEmptyString(_VimTest):$/;"	c
PythonCode_SimpleMkline	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_SimpleMkline(_VimTest):$/;"	c
PythonCode_TransformedBeforeMultiLine	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_TransformedBeforeMultiLine(_VimTest):$/;"	c
PythonCode_TrickyReferences	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_TrickyReferences(_VimTest):$/;"	c
PythonCode_UseNewOverOld	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_UseNewOverOld(_VimTest):$/;"	c
PythonVisual_HasAccessToSelectedPlaceholders	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonVisual_HasAccessToSelectedPlaceholders(_VimTest):$/;"	c
PythonVisual_HasAccessToZeroPlaceholders	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonVisual_HasAccessToZeroPlaceholders(_VimTest):$/;"	c
PythonVisual_LineSelect_Simple	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonVisual_LineSelect_Simple(_VimTest):$/;"	c
PythonVisual_NoVisualSelection_Ignore	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonVisual_NoVisualSelection_Ignore(_VimTest):$/;"	c
PythonVisual_SelectOneWord	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class PythonVisual_SelectOneWord(_VimTest):$/;"	c
Python_WeirdScoping_Error	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class Python_WeirdScoping_Error(_VimTest):$/;"	c
Q	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Q = 81,$/;"	e	enum:CharCode
Query	.vim/plugged/fzf/src/options.go	/^	Query       string$/;"	m	struct:fzf.Options	typeref:typename:string
QuestionMark	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  QuestionMark,$/;"	e	enum:TokenType
QuestionMark	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  QuestionMark = 63,$/;"	e	enum:CharCode
QueueEmpty	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    from Queue import Queue, Empty as QueueEmpty$/;"	x
QueueEmpty	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    from queue import Queue, Empty as QueueEmpty$/;"	x
Quick Start	.config/nvim/plugged/ultisnips/README.md	/^Quick Start$/;"	s
Quick Start	.vim/plugged/leetcode.vim/README.md	/^## Quick Start$/;"	s
QuickfixItem	.vim/plugged/coc.nvim/src/types.ts	/^export interface QuickfixItem {$/;"	i
Quote Seek	.config/nvim/plugged/targets.vim/README.md	/^#### Quote Seek$/;"	t
Quote Text Objects	.config/nvim/plugged/targets.vim/README.md	/^### Quote Text Objects$/;"	S
Quote mappings	.config/nvim/plugged/targets.vim/cheatsheet.md	/^## Quote mappings$/;"	s
R	.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
R	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_related   R   exe   s:/;"	c
R	.config/nvim/plugged/vim-rails/ftplugin/railslog.vim	/^nnoremap <buffer> <silent> R :<C-U>exe <SID>reload_log()<CR>$/;"	m
R	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
R	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  R = 82,$/;"	e	enum:CharCode
RD	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_edit      RD  exe   s:/;"	c
RE	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_related   RE  exe   s:/;"	c
README_FILES	.config/nvim/plugged/html5.vim/Makefile	/^README_FILES=`ls -1 | grep -i readme`$/;"	m
RECORD_FILE	.config/nvim/plugged/html5.vim/Makefile	/^RECORD_FILE=.record$/;"	m
RECORD_SCRIPT	.config/nvim/plugged/html5.vim/Makefile	/^RECORD_SCRIPT=.mkrecord$/;"	m
REDRAW	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/action.py	/^    REDRAW = auto()$/;"	v	class:ActionAttr
RELEASE32	.vim/plugged/fzf/Makefile	/^RELEASE32      := fzf-$(VERSION)-$(GOOS)_386$/;"	m
RELEASE64	.vim/plugged/fzf/Makefile	/^RELEASE64      := fzf-$(VERSION)-$(GOOS)_amd64$/;"	m
RELEASEARM5	.vim/plugged/fzf/Makefile	/^RELEASEARM5    := fzf-$(VERSION)-$(GOOS)_arm5$/;"	m
RELEASEARM6	.vim/plugged/fzf/Makefile	/^RELEASEARM6    := fzf-$(VERSION)-$(GOOS)_arm6$/;"	m
RELEASEARM7	.vim/plugged/fzf/Makefile	/^RELEASEARM7    := fzf-$(VERSION)-$(GOOS)_arm7$/;"	m
RELEASEARM8	.vim/plugged/fzf/Makefile	/^RELEASEARM8    := fzf-$(VERSION)-$(GOOS)_arm8$/;"	m
RELEASEPPC64LE	.vim/plugged/fzf/Makefile	/^RELEASEPPC64LE := fzf-$(VERSION)-$(GOOS)_ppc64le$/;"	m
REMOVED_GLOBALS	.vim/plugged/coc.nvim/src/util/factory.ts	/^const REMOVED_GLOBALS = [$/;"	C
REVISION	.vim/plugged/fzf/Makefile	/^REVISION       := $(shell git log -n 1 --pretty=format:%h -- $(SOURCES))$/;"	m
ROOT_DIR	.vim/plugged/fzf/Makefile	/^ROOT_DIR       := $(shell dirname $(MAKEFILE))$/;"	m
RS	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_related   RS  exe   s:/;"	c
RT	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_related   RT  exe   s:/;"	c
RV	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -range=0 -complete=customlist,s:Complete_related   RV  exe   s:/;"	c
Rabbrev	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=* -bang Rabbrev :echoerr "Rabbrev has been removed."$/;"	c
Rails	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^command! -bang -bar -nargs=* -count -complete=customlist,rails#complete_rails Rails execute rail/;"	c
RailsDetect	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^function! RailsDetect(...) abort$/;"	f
Rake	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=? -bang -count -complete=customlist,rails#complete_rake Rake    :/;"	c
Rake	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^  command! -buffer -bar -bang -nargs=? -complete=customlist,s:RakeComplete Rake$/;"	c
Range	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^      Range.create(1, 0, 2, 10),$/;"	v
Range	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^      Range.create(3, 0, 4, 0)]$/;"	v
Range	.vim/plugged/coc.nvim/src/model/chars.ts	/^export class Range {$/;"	c
Range	.vim/plugged/fzf/src/tokenizer.go	/^type Range struct {$/;"	s	package:fzf
Ranges after (right of/below) cursor	.config/nvim/plugged/targets.vim/cheatsheet.md	/^#### Ranges after (right of\/below) cursor$/;"	t
Ranges around cursor:	.config/nvim/plugged/targets.vim/cheatsheet.md	/^#### Ranges around cursor:$/;"	t
Ranges before (left of/above) cursor	.config/nvim/plugged/targets.vim/cheatsheet.md	/^#### Ranges before (left of\/above) cursor$/;"	t
Ranges on cursor:	.config/nvim/plugged/targets.vim/cheatsheet.md	/^#### Ranges on cursor:$/;"	t
Rationale	.config/nvim/plugged/fzf.vim/README.md	/^Rationale$/;"	s
Rationale	.vim/plugged/vim-airline/README.md	/^# Rationale$/;"	c
Rbrowse	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=? -bang -range -complete=customlist,s:Complete_preview Rbrowse :c/;"	c
Rdbext	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^    command! -buffer -bar -nargs=? -complete=customlist,s:Complete_environments Rdbext  :echoerr/;"	c
Read	.vim/plugged/fzf/src/util/util_unix.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util	typeref:typename:(int, error)
Read	.vim/plugged/fzf/src/util/util_windows.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util	typeref:typename:(int, error)
ReadSource	.vim/plugged/fzf/src/reader.go	/^func (r *Reader) ReadSource() {$/;"	f	struct:fzf.Reader
ReadZero	.vim/plugged/fzf/src/options.go	/^	ReadZero    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Reader	.vim/plugged/fzf/src/reader.go	/^type Reader struct {$/;"	s	package:fzf
Rec	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/directory_rec.py	/^from denite.source.file.rec import Source as Rec$/;"	x
Rec	.vim/plugged/denite.nvim/rplugin/python3/denite/source/directory_rec.py	/^from denite.source.file.rec import Source as Rec$/;"	x
RecTabStopsWithExpandtab_SimpleExample_ECR	.config/nvim/plugged/ultisnips/test/test_Format.py	/^class RecTabStopsWithExpandtab_SimpleExample_ECR(_ExpandTabs):$/;"	c
RecTabStopsWithExpandtab_SpecialIndentProblem_ECR	.config/nvim/plugged/ultisnips/test/test_Format.py	/^class RecTabStopsWithExpandtab_SpecialIndentProblem_ECR(_ExpandTabs):$/;"	c
RecTabStops_BarelyNotLeavingInner_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_BarelyNotLeavingInner_ECR(_VimTest):$/;"	c
RecTabStops_ChildTriggerContainsParentTextObjects	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_ChildTriggerContainsParentTextObjects(_VimTest):$/;"	c
RecTabStops_ExpandedInZeroTSSecondTime_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_ExpandedInZeroTSSecondTime_ECR(_VimTest):$/;"	c
RecTabStops_ExpandedInZeroTSTwice_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_ExpandedInZeroTSTwice_ECR(_VimTest):$/;"	c
RecTabStops_ExpandedInZeroTS_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_ExpandedInZeroTS_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineInTabstop_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InNewlineInTabstop_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_InNewlineManualIndentTextInFront_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InNewlineManualIndentTextInFront_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineManualIndent_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InNewlineManualIndent_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineMultilineWithIndent_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InNewlineMultilineWithIndent_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineMultilineWithNonZeroTS_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InNewlineMultilineWithNonZeroTS_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineMultiline_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InNewlineMultiline_ECR(_VimTest):$/;"	c
RecTabStops_InnerWOTabStopTwiceDirectly_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InnerWOTabStopTwiceDirectly_ECR(_VimTest):$/;"	c
RecTabStops_InnerWOTabStopTwice_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InnerWOTabStopTwice_ECR(_VimTest):$/;"	c
RecTabStops_InnerWOTabStop_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InnerWOTabStop_ECR(_VimTest):$/;"	c
RecTabStops_LeavingInnerInnerTwo_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_LeavingInnerInnerTwo_ECR(_VimTest):$/;"	c
RecTabStops_LeavingInnerInner_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_LeavingInnerInner_ECR(_VimTest):$/;"	c
RecTabStops_LeavingInner_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_LeavingInner_ECR(_VimTest):$/;"	c
RecTabStops_MirrorInnerSnippet_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_MirrorInnerSnippet_ECR(_VimTest):$/;"	c
RecTabStops_MirroredZeroTS_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_MirroredZeroTS_ECR(_VimTest):$/;"	c
RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_OuterOnlyWithZeroTS_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_OuterOnlyWithZeroTS_ECR(_VimTest):$/;"	c
RecTabStops_OuterOnlyWithZero_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_OuterOnlyWithZero_ECR(_VimTest):$/;"	c
RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_SimpleCase_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_SimpleCase_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_ZeroTSisNothingSpecial_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_ZeroTSisNothingSpecial_ECR(_VimTest):$/;"	c
RecTabsStops_BackspaceZero_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabsStops_BackspaceZero_ECR(_VimTest):$/;"	c
RecTabsStops_TypeInZero2_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabsStops_TypeInZero2_ECR(_VimTest):$/;"	c
RecTabsStops_TypeInZero_ECR	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^class RecTabsStops_TypeInZero_ECR(_VimTest):$/;"	c
RecentScore	.vim/plugged/coc.nvim/src/types.ts	/^export interface RecentScore {$/;"	i
RedirectStream	.config/nvim/plugged/denite.nvim/autoload/denite/_main.py	/^class RedirectStream(io.IOBase):$/;"	c
RedirectStream	.vim/plugged/denite.nvim/autoload/denite/_main.py	/^class RedirectStream(io.IOBase):$/;"	c
Reduced initial memory footprint (#151)	.vim/plugged/fzf/CHANGELOG.md	/^#### Reduced initial memory footprint (#151)$/;"	t
Reducer example	.config/nvim/plugged/fzf.vim/README.md	/^#### Reducer example$/;"	t
ReferenceContext	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface ReferenceContext {$/;"	i
ReferenceManager	.vim/plugged/coc.nvim/src/provider/referenceManager.ts	/^export default class ReferenceManager extends Manager<ReferenceProvider> implements Disposable {$/;"	c
ReferenceProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface ReferenceProvider {$/;"	i
References	.config/nvim/plugged/html5.vim/README.md	/^## References$/;"	s
ReferencesFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class ReferencesFeature extends TextDocumentFeature<$/;"	c
Reflect	.vim/plugged/coc.nvim/src/util/factory.ts	/^  Reflect: any$/;"	p	interface:ISandbox
Refresh	.vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Refresh()    {}$/;"	f	unknown:tui.FullscreenRenderer
Refresh	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Refresh() {$/;"	f	struct:tui.LightRenderer
Refresh	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Refresh() {$/;"	f	struct:tui.LightWindow
Refresh	.vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Refresh() {$/;"	f	unknown:tui.FullscreenRenderer
Refresh	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Refresh() {$/;"	f	struct:tui.TcellWindow
Refresh	.vim/plugged/fzf/src/tui/tui.go	/^	Refresh()$/;"	n	interface:tui.Renderer
Refresh	.vim/plugged/fzf/src/tui/tui.go	/^	Refresh()$/;"	n	interface:tui.Window
RefreshWindows	.vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {}$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) RefreshWindows(windows []Window) {$/;"	f	struct:tui.LightRenderer
RefreshWindows	.vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	.vim/plugged/fzf/src/tui/tui.go	/^	RefreshWindows(windows []Window)$/;"	n	interface:tui.Renderer
RegistrationData	.vim/plugged/coc.nvim/src/language-client/client.ts	/^export interface RegistrationData<T> {$/;"	i
Related Projects	.config/nvim/plugged/vim-gutentags/README.md	/^# Related Projects$/;"	c
Related Projects Based On PaperColor	.vim/plugged/papercolor-theme/README.md	/^# Related Projects Based On PaperColor$/;"	c
Related projects	.vim/plugged/fzf/README.md	/^Related projects$/;"	s
Related repositories	.config/nvim/plugged/vim-snippets/README.md	/^Related repositories$/;"	s
Related repositories	.vim/plugged/vim-snippets/README.md	/^Related repositories$/;"	s
Remote	.vim/plugged/coc.nvim/src/types.ts	/^  Remote,$/;"	e	enum:SourceType
RemoveTrailingWhitespace	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class RemoveTrailingWhitespace(_VimTest):$/;"	c
RenameEvent	.vim/plugged/coc.nvim/src/types.ts	/^export interface RenameEvent {$/;"	i
RenameFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class RenameFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> {$/;"	c
RenameManager	.vim/plugged/coc.nvim/src/provider/renameManager.ts	/^export default class RenameManager extends Manager<RenameProvider> implements Disposable {$/;"	c
RenameProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface RenameProvider {$/;"	i
Renderer	.vim/plugged/fzf/src/tui/tui.go	/^type Renderer interface {$/;"	i	package:tui
Repeat motions	.config/nvim/plugged/vim-easymotion/README.md	/^### Repeat motions$/;"	S
Repeat the last find motion	.config/nvim/plugged/vim-easymotion/README.md	/^#### Repeat the last find motion$/;"	t
Repeat the last motion	.config/nvim/plugged/vim-easymotion/README.md	/^#### Repeat the last motion$/;"	t
Repository	.config/nvim/plugged/emmet-vim/docs/index.html	/^				<h2 class="maintitle">Repository<\/h2>$/;"	i
Reproduce the bug	.vim/plugged/coc.nvim/.github/ISSUE_TEMPLATE/bug_report.md	/^## Reproduce the bug$/;"	s
Reproducing Bugs	.config/nvim/plugged/ultisnips/CONTRIBUTING.md	/^# Reproducing Bugs$/;"	c
Requirement	.config/nvim/plugged/vista.vim/README.md	/^## Requirement$/;"	s
Requirements	.config/nvim/plugged/comfortable-motion.vim/README.md	/^## Requirements$/;"	s
Requirements	.config/nvim/plugged/defx.nvim/README.md	/^## Requirements$/;"	s
Requirements	.config/nvim/plugged/denite.nvim/README.md	/^## Requirements$/;"	s
Requirements	.vim/plugged/denite.nvim/README.md	/^## Requirements$/;"	s
Requirements	.vim/plugged/nvim-yarp/README.md	/^## Requirements$/;"	s
Requirements	.vim/plugged/vim-hug-neovim-rpc/README.md	/^## Requirements$/;"	s
Reset	.vim/plugged/fzf/src/matcher.go	/^func (m *Matcher) Reset(chunks []*Chunk, patternRunes []rune, cancel bool, final bool, sort bool/;"	f	struct:fzf.Matcher
Resize	.vim/plugged/fzf/src/tui/tui.go	/^	Resize$/;"	c	package:tui
ResolvedClientOptions	.vim/plugged/coc.nvim/src/language-client/client.ts	/^interface ResolvedClientOptions {$/;"	i
ResolvedTextDocumentSyncCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^interface ResolvedTextDocumentSyncCapabilities {$/;"	i
Resolver	.vim/plugged/coc.nvim/src/model/resolver.ts	/^export default class Resolver {$/;"	c
Respecting `.gitignore`	.vim/plugged/fzf/README.md	/^#### Respecting `.gitignore`$/;"	t
ResponseError	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      const responseError = data as ResponseError<any>$/;"	C	method:BaseLanguageClient.data2String
Restart	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  Restart = 2$/;"	e	enum:CloseAction
Restoring Clear Screen (C-l)	.config/nvim/plugged/vim-tmux-navigator/README.md	/^#### Restoring Clear Screen (C-l)$/;"	t
Result	.vim/plugged/coc.nvim/src/events.ts	/^export type Result = void | Promise<void>$/;"	a
Result	.vim/plugged/fzf/src/algo/algo.go	/^type Result struct {$/;"	s	package:algo
Result	.vim/plugged/fzf/src/result.go	/^type Result struct {$/;"	s	package:fzf
Result from CocInfo	.vim/plugged/coc.nvim/.github/ISSUE_TEMPLATE/bug_report.md	/^## Result from CocInfo$/;"	s
Resume	.vim/plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Resume(bool) {}$/;"	f	unknown:tui.FullscreenRenderer
Resume	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Resume(clear bool) {$/;"	f	struct:tui.LightRenderer
Resume	.vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Resume(clear bool) {$/;"	f	unknown:tui.FullscreenRenderer
Resume	.vim/plugged/fzf/src/tui/tui.go	/^	Resume(clear bool)$/;"	n	interface:tui.Renderer
RetainsTheUnnamedRegister	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^class RetainsTheUnnamedRegister(_VimTest):$/;"	c
RetainsTheUnnamedRegister_ButOnlyOnce	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^class RetainsTheUnnamedRegister_ButOnlyOnce(_VimTest):$/;"	c
Reverse	.vim/plugged/fzf/src/tui/dummy.go	/^	Reverse          = Attr(1 << 6)$/;"	c	package:tui
Reverse	.vim/plugged/fzf/src/tui/tcell.go	/^	Reverse        = Attr(tcell.AttrReverse)$/;"	c	package:tui
Reversed definitions	.config/nvim/plugged/switch.vim/spec/plugin/reversing_spec.rb	/^describe "Reversed definitions" do$/;"	d
Review Pull Requests	.vim/plugged/coc.nvim/CONTRIBUTING.md	/^## Review Pull Requests$/;"	s
RhsesOf	.config/nvim/plugged/vim-textobj-user/t/plugin.vim	/^function! RhsesOf(lhs)$/;"	f
Right	.vim/plugged/fzf/src/tui/tui.go	/^	Right$/;"	c	package:tui
RightClick	.vim/plugged/fzf/src/tui/tui.go	/^	RightClick$/;"	c	package:tui
Rinvert	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^    command! -buffer -bar                 Rinvert  :call s:Invert(<bang>0)$/;"	c
Rp	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer       -nargs=1 -range=0 -complete=customlist,s:Complete_ruby Rp            :e/;"	c
Rplugin	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/rplugin.py	/^class Rplugin:$/;"	c
Rplugin	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^class Rplugin:$/;"	c
Rplugin	.vim/plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^class Rplugin:$/;"	c
Rpp	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer       -nargs=1 -range=0 -complete=customlist,s:Complete_ruby Rpp           :e/;"	c
Rrefresh	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=0 -bang Rrefresh :if <bang>0|unlet! g:autoloaded_rails|source `=s/;"	c
Rtags	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=0 Rtags       :echoerr "Use :Ctags"$/;"	c
Ruby	.config/nvim/plugged/switch.vim/README.md	/^### Ruby$/;"	S
RubyBalloonexpr	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! RubyBalloonexpr() abort$/;"	f
RubyCursorFile	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! RubyCursorFile() abort$/;"	f
RubyCursorIdentifier	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! RubyCursorIdentifier() abort$/;"	f
RubyCursorTag	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! RubyCursorTag() abort$/;"	f
Run	.vim/plugged/fzf/src/core.go	/^func Run(opts *Options, revision string) {$/;"	f	package:fzf
Rune	.vim/plugged/fzf/src/tui/tui.go	/^	Rune = iota$/;"	c	package:tui
RuneWidth	.vim/plugged/fzf/src/util/util.go	/^func RuneWidth(r rune, prefixWidth int, tabstop int) int {$/;"	f	package:util	typeref:typename:int
RunesToChars	.vim/plugged/fzf/src/util/chars.go	/^func RunesToChars(runes []rune) Chars {$/;"	f	package:util	typeref:typename:Chars
Runner	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bang -nargs=? -range=0 -complete=customlist,s:Complete_edit Runner        :e/;"	c
Running	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  Running = 2,$/;"	e	enum:State
Running	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  Running,$/;"	e	enum:ClientState
Running	.vim/plugged/coc.nvim/src/types.ts	/^  Running,$/;"	e	enum:ServiceStat
Running tests	.vim/plugged/omnisharp-vim/test/README.md	/^### Running tests$/;"	S
Running the specs	.config/nvim/plugged/vim-textobj-rubyblock/README.md	/^Running the specs$/;"	s
Running the test suite.	.config/nvim/plugged/ultisnips/CONTRIBUTING.md	/^### Running the test suite.$/;"	S
Running using docker.	.config/nvim/plugged/ultisnips/CONTRIBUTING.md	/^#### Running using docker.$/;"	t
S	.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
S	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> S$/;"	m
S	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^  xmap S   <Plug>VSurround$/;"	m
S	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
S	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  S = 83,$/;"	e	enum:CharCode
S	.vim/plugged/fzf/src/tui/tui.go	/^	S      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
S	.vim/plugged/vim-surround/plugin/surround.vim	/^  xmap S   <Plug>VSurround$/;"	m
S	.vim/sessions/foo.vim	/^xmap S <Plug>VSurround$/;"	m
SCORE_GAP_INNER	.vim/plugged/coc.nvim/src/util/fzy.ts	/^let SCORE_GAP_INNER = -0.01$/;"	v
SCORE_GAP_LEADING	.vim/plugged/coc.nvim/src/util/fzy.ts	/^let SCORE_GAP_LEADING = -0.005$/;"	v
SCORE_GAP_TRAILING	.vim/plugged/coc.nvim/src/util/fzy.ts	/^let SCORE_GAP_TRAILING = -0.005$/;"	v
SCORE_MATCH_CAPITAL	.vim/plugged/coc.nvim/src/util/fzy.ts	/^let SCORE_MATCH_CAPITAL = 0.7$/;"	v
SCORE_MATCH_CONSECUTIVE	.vim/plugged/coc.nvim/src/util/fzy.ts	/^let SCORE_MATCH_CONSECUTIVE = 1$/;"	v
SCORE_MATCH_DOT	.vim/plugged/coc.nvim/src/util/fzy.ts	/^let SCORE_MATCH_DOT = 0.6$/;"	v
SCORE_MATCH_SLASH	.vim/plugged/coc.nvim/src/util/fzy.ts	/^let SCORE_MATCH_SLASH = 0.9$/;"	v
SCORE_MATCH_WORD	.vim/plugged/coc.nvim/src/util/fzy.ts	/^let SCORE_MATCH_WORD = 0.8$/;"	v
SCORE_MAX	.vim/plugged/coc.nvim/src/util/fzy.ts	/^let SCORE_MAX = Infinity$/;"	v
SCORE_MIN	.vim/plugged/coc.nvim/src/util/fzy.ts	/^let SCORE_MIN = -Infinity$/;"	v
SDown	.vim/plugged/fzf/src/tui/tui.go	/^	SDown$/;"	c	package:tui
SEE	.vim/plugged/fzf/man/man1/fzf.1	/^.SH SEE ALSO$/;"	s	title:fzf
SEPARATOR_BONUS	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^SEPARATOR_BONUS = 10$/;"	v
SEPARATOR_BONUS	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^SEPARATOR_BONUS = 10$/;"	v
SEQUENCES	.config/nvim/plugged/ultisnips/test/constant.py	/^SEQUENCES = [ARR_L, ARR_R, ARR_U, ARR_D]$/;"	v
SHELL	.config/nvim/plugged/html5.vim/Makefile	/^SHELL=bash$/;"	m
SLeft	.vim/plugged/fzf/src/tui/tui.go	/^	SLeft$/;"	c	package:tui
SNIPMATE_SNIPPET_PRIORITY	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/snipmate.py	/^    SNIPMATE_SNIPPET_PRIORITY = -1000$/;"	v	class:SnipMateSnippetDefinition
SORT_METHODS	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/sort.py	/^SORT_METHODS = {$/;"	v
SOURCES	.vim/plugged/fzf/Makefile	/^SOURCES        := $(wildcard *.go src\/*.go src\/*\/*.go) $(MAKEFILE)$/;"	m
SRight	.vim/plugged/fzf/src/tui/tui.go	/^	SRight$/;"	c	package:tui
STARTMATCHID	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^const STARTMATCHID = 1090$/;"	C
SUp	.vim/plugged/fzf/src/tui/tui.go	/^	SUp$/;"	c	package:tui
SYNOPSIS	.vim/plugged/fzf/man/man1/fzf-tmux.1	/^.SH SYNOPSIS$/;"	s	title:fzf-tmux
SYNOPSIS	.vim/plugged/fzf/man/man1/fzf.1	/^.SH SYNOPSIS$/;"	s	title:fzf
Scala	.config/nvim/plugged/switch.vim/README.md	/^### Scala$/;"	S
Scanner	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^export class Scanner {$/;"	c
Scope	.config/nvim/plugged/dsf.vim/CODE_OF_CONDUCT.md	/^## Scope$/;"	s
Scope	.config/nvim/plugged/tagalong.vim/CODE_OF_CONDUCT.md	/^## Scope$/;"	s
Score	.vim/plugged/fzf/src/algo/algo.go	/^	Score int$/;"	m	struct:algo.Result	typeref:typename:int
Screen shot (if possible)	.config/nvim/plugged/defx.nvim/.github/ISSUE_TEMPLATE.md	/^## Screen shot (if possible)$/;"	s
Screen shot (if possible)	.config/nvim/plugged/oceanic-next/.github/ISSUE_TEMPLATE.md	/^## Screen shot (if possible)$/;"	s
Screencast!	.config/nvim/plugged/switch.vim/README.md	/^## Screencast!$/;"	s
Screencasts	.config/nvim/plugged/ultisnips/README.md	/^Screencasts$/;"	s
Screenshot	.config/nvim/plugged/oceanic-next/README.md	/^## Screenshot$/;"	s
Screenshot (if possible)	.config/nvim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^## Screenshot (if possible)$/;"	s
Screenshot (if possible)	.vim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^## Screenshot (if possible)$/;"	s
Screenshots	.config/nvim/plugged/defx.nvim/README.md	/^## Screenshots$/;"	s
Screenshots	.config/nvim/plugged/denite.nvim/README.md	/^## Screenshots$/;"	s
Screenshots	.config/nvim/plugged/gruvbox/README.md	/^Screenshots$/;"	s
Screenshots	.vim/plugged/denite.nvim/README.md	/^## Screenshots$/;"	s
Screenshots	.vim/plugged/omnisharp-vim/README.md	/^## Screenshots$/;"	s
Screenshots	.vim/plugged/papercolor-theme/README.md	/^## Screenshots$/;"	s
Screenshots	.vim/plugged/vim-airline/README.md	/^# Screenshots$/;"	c
Screenshots (optional)	.vim/plugged/coc.nvim/.github/ISSUE_TEMPLATE/bug_report.md	/^## Screenshots (optional)$/;"	s
Scrolling Method	.config/nvim/plugged/comfortable-motion.vim/README.md	/^### Scrolling Method$/;"	S
Seamless integration	.vim/plugged/vim-airline/README.md	/^## Seamless integration$/;"	s
Search	.vim/plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Search(chunk *Chunk, key string) []Result {$/;"	f	struct:fzf.ChunkCache	typeref:typename:[]Result
Search syntax	.vim/plugged/fzf/README.md	/^#### Search syntax$/;"	t
SectionSpec	.vim/plugged/vim-airline/t/section.vim	/^function! SectionSpec()$/;"	f
Select	.config/nvim/plugged/vim-textobj-user/t/scan.vim	/^function! Select(lnum, col, object)$/;"	f
Select1	.vim/plugged/fzf/src/options.go	/^	Select1     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
SelectA	.config/nvim/plugged/vim-textobj-user/t/keep-marks.vim	/^function! SelectA()$/;"	f
SelectAroundFrom	.config/nvim/plugged/vim-textobj-rubyblock/t/rubyblock_test.vim	/^function! SelectAroundFrom(number, position)$/;"	f
SelectInsideFrom	.config/nvim/plugged/vim-textobj-rubyblock/t/rubyblock_test.vim	/^function! SelectInsideFrom(number, position)$/;"	f
SelectModeMappings_BufferLocalMappings_ECR	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^class SelectModeMappings_BufferLocalMappings_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_DisableRemoveBeforeSelecting_ECR	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^class SelectModeMappings_DisableRemoveBeforeSelecting_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_IgnoreMappings1_ECR	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^class SelectModeMappings_IgnoreMappings1_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_IgnoreMappings2_ECR	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^class SelectModeMappings_IgnoreMappings2_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_IgnoreMappings_ECR	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^class SelectModeMappings_IgnoreMappings_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_RemoveBeforeSelecting_ECR	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^class SelectModeMappings_RemoveBeforeSelecting_ECR(_SelectModeMappings):$/;"	c
SelectNthLine	.config/nvim/plugged/vim-textobj-user/t/select-x-function-countability.vim	/^function! SelectNthLine()$/;"	f
Selected	.vim/plugged/fzf/src/tui/tui.go	/^	Selected     Color$/;"	m	struct:tui.ColorTheme	typeref:typename:Color
SelectedRange	.config/nvim/plugged/vim-textobj-rubyblock/t/rubyblock_test.vim	/^function! SelectedRange()$/;"	f
SelectionRangeFeature	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^export class SelectionRangeFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> /;"	c
SelectionRangeManager	.vim/plugged/coc.nvim/src/provider/rangeManager.ts	/^export default class SelectionRangeManager extends Manager<SelectionRangeProvider> implements Di/;"	c
SelectionRangeProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface SelectionRangeProvider {$/;"	i
SelectionRangeProviderMiddleware	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^export interface SelectionRangeProviderMiddleware {$/;"	i
Self-Promotion	.config/nvim/plugged/gruvbox/README.md	/^Self-Promotion$/;"	s
Self-Promotion	.config/nvim/plugged/vim-bundler/README.markdown	/^## Self-Promotion$/;"	s
Self-Promotion	.config/nvim/plugged/vim-commentary/README.markdown	/^## Self-Promotion$/;"	s
Self-Promotion	.config/nvim/plugged/vim-rails/README.markdown	/^## Self-Promotion$/;"	s
Self-Promotion	.config/nvim/plugged/vim-rake/README.markdown	/^## Self-Promotion$/;"	s
Self-Promotion	.config/nvim/plugged/vim-repeat/README.markdown	/^## Self-Promotion$/;"	s
Self-Promotion	.config/nvim/plugged/vim-rsi/README.markdown	/^## Self-Promotion$/;"	s
Self-Promotion	.config/nvim/plugged/vim-surround/README.markdown	/^## Self-Promotion$/;"	s
Self-Promotion	.vim/plugged/vim-surround/README.markdown	/^## Self-Promotion$/;"	s
Semantic	.vim/plugged/coc.nvim/src/types.ts	/^  Semantic,$/;"	e	enum:DiagnosticKind
Semicolon	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Semicolon = 59,$/;"	e	enum:CharCode
Separate mappings	.config/nvim/plugged/switch.vim/README.md	/^### Separate mappings$/;"	S
Separator Seek	.config/nvim/plugged/targets.vim/README.md	/^#### Separator Seek$/;"	t
Separator Text Objects	.config/nvim/plugged/targets.vim/README.md	/^### Separator Text Objects$/;"	S
Separator mappings	.config/nvim/plugged/targets.vim/cheatsheet.md	/^## Separator mappings$/;"	s
Server	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  command! -buffer -bar -nargs=? -bang -complete=customlist,s:Complete_server   Server        :e/;"	c
Server	.vim/plugged/omnisharp-vim/README.md	/^### Server$/;"	S
ServerConnectionError	.vim/plugged/omnisharp-vim/python/omnisharp/exceptions.py	/^class ServerConnectionError(Exception):$/;"	c
ServerOptions	.vim/plugged/coc.nvim/src/language-client/index.ts	/^export type ServerOptions =$/;"	a
ServerStartException	.vim/plugged/ghost-text.vim/python3/server_thread.py	/^class ServerStartException (RuntimeError):$/;"	c
ServerThread	.vim/plugged/ghost-text.vim/python3/server_thread.py	/^class ServerThread:$/;"	c
Service	.vim/plugged/coc.nvim/src/types.ts	/^  Service,$/;"	e	enum:SourceType
ServiceInfo	.vim/plugged/coc.nvim/src/services.ts	/^interface ServiceInfo {$/;"	i
ServiceManager	.vim/plugged/coc.nvim/src/services.ts	/^export class ServiceManager extends EventEmitter implements Disposable {$/;"	c
ServiceStat	.vim/plugged/coc.nvim/src/types.ts	/^export enum ServiceStat {$/;"	g
ServicesList	.vim/plugged/coc.nvim/src/list/source/services.ts	/^export default class ServicesList extends BasicList {$/;"	c
Session	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/session.py	/^class Session(typing.NamedTuple):$/;"	c
SessionLoad	.vim/sessions/default.vim	/^let SessionLoad = 1$/;"	v
SessionLoad	.vim/sessions/foo.vim	/^let SessionLoad = 1$/;"	v
Set	.vim/plugged/coc.nvim/src/workspace.ts	/^    let res = new Set() as Set<string>$/;"	v
Set	.vim/plugged/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Set(newState bool) bool {$/;"	f	struct:util.AtomicBool	typeref:typename:bool
Set	.vim/plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Set(event EventType, value interface{}) {$/;"	f	struct:util.EventBox
SetNonblock	.vim/plugged/fzf/src/util/util_unix.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
SetNonblock	.vim/plugged/fzf/src/util/util_windows.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
Set_op_command	.config/nvim/plugged/vim-operator-user/t/example-b-advanced.vim	/^function! Set_op_command(command)$/;"	f
Setting up	.config/nvim/plugged/vim-after-object/README.md	/^Setting up$/;"	s
SettingMonitor	.vim/plugged/coc.nvim/src/language-client/index.ts	/^export class SettingMonitor {$/;"	c
Settings	.config/nvim/plugged/tagalong.vim/README.md	/^## Settings$/;"	s
Settings	.config/nvim/plugged/targets.vim/README.md	/^## Settings$/;"	s
Settings	.vim/plugged/fzf/README.md	/^#### Settings$/;"	t
Setup	.vim/plugged/omnisharp-vim/python/README.md	/^## Setup$/;"	s
Setup instructions for pyenv for UNIX	.vim/plugged/omnisharp-vim/python/README.md	/^## Setup instructions for pyenv for UNIX$/;"	s
Shell	.vim/plugged/fzf/test/test_go.rb	/^class Shell$/;"	c
ShellCode	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_shell_code.py	/^class ShellCode(NoneditableTextObject):$/;"	c
ShellCodeToken	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^class ShellCodeToken(Token):$/;"	c
ShiftWidthZero	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^class ShiftWidthZero(_VimTest):$/;"	c
Show the nearest method/function in the statusline	.config/nvim/plugged/vista.vim/README.md	/^### Show the nearest method\/function in the statusline$/;"	S
ShowError	.vim/plugged/coc.nvim/src/configuration/util.ts	/^export type ShowError = (errors: ErrorItem[]) => void$/;"	a
ShowUsage	.config/nvim/plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	.config/nvim/plugged/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
Shutdown	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  Shutdown = 2$/;"	e	enum:ErrorAction
SidewaysJumpLeft	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^command! SidewaysJumpLeft  call sideways#JumpLeft()$/;"	c
SidewaysJumpRight	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^command! SidewaysJumpRight call sideways#JumpRight()$/;"	c
SidewaysLeft	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^command! SidewaysLeft  call sideways#MoveLeft()  | silent! call repeat#set("\\<Plug>SidewaysLeft/;"	c
SidewaysRight	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^command! SidewaysRight call sideways#MoveRight() | silent! call repeat#set("\\<Plug>SidewaysRigh/;"	c
SignatureHelpFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class SignatureHelpFeature extends TextDocumentFeature<$/;"	c
SignatureHelpProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface SignatureHelpProvider {$/;"	i
SignatureManager	.vim/plugged/coc.nvim/src/provider/signatureManager.ts	/^export default class SignatureManager extends Manager<SignatureHelpProvider> implements Disposab/;"	c
SignaturePart	.vim/plugged/coc.nvim/src/handler/index.ts	/^interface SignaturePart {$/;"	i
Similar work	.config/nvim/plugged/switch.vim/README.md	/^## Similar work$/;"	s
Simple text objects defined by a pattern	.config/nvim/plugged/vim-textobj-user/README.md	/^### Simple text objects defined by a pattern$/;"	S
Simple text objects surrounded by a pair of patterns	.config/nvim/plugged/vim-textobj-user/README.md	/^### Simple text objects surrounded by a pair of patterns$/;"	S
SimpleExpandEndingWithNewline_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^class SimpleExpandEndingWithNewline_ExpectCorrectResult(_VimTest):$/;"	c
SimpleExpandNewLineAndBackspae_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^class SimpleExpandNewLineAndBackspae_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleExpandTwice_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^class SimpleExpandTwice_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleExpandTypeAfterExpand_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^class SimpleExpandTypeAfterExpand_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleExpandTypeAndDelete_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^class SimpleExpandTypeAndDelete_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleExpand_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^class SimpleExpand_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorDelete_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorDelete_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorMultilineMany_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorMultilineMany_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR(_VimTest):$/;"	c
SimpleMirrorSameLineBeforeTabDefVal_ECR	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLineBeforeTabDefVal_ECR(_VimTest):$/;"	c
SimpleMirrorSameLineManyMultiline_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLineManyMultiline_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLineMany_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLineMany_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLine_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLine_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLine_InText_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLine_InText_ExpectCorrectResult(_VimTest):$/;"	c
SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult(_VimTest):$/;"	c
SimpleTabstopWithDefaultComplexType_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class SimpleTabstopWithDefaultComplexType_ExpectCorrectResult(_VimTest):$/;"	c
SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult(_VimTest):$/;"	c
SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult(_VimTest):$/;"	c
Simulation Parameters	.config/nvim/plugged/comfortable-motion.vim/README.md	/^### Simulation Parameters$/;"	S
SingleQuote	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  SingleQuote = 39,$/;"	e	enum:CharCode
Slab	.vim/plugged/fzf/src/util/slab.go	/^type Slab struct {$/;"	s	package:util
Slash	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Slash = 47,$/;"	e	enum:CharCode
Smartcase & Smartsign	.config/nvim/plugged/vim-easymotion/README.md	/^### Smartcase & Smartsign$/;"	S
Smarter tab line	.vim/plugged/vim-airline/README.md	/^## Smarter tab line$/;"	s
Snapshot	.vim/plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Snapshot() ([]*Chunk, int) {$/;"	f	struct:fzf.ChunkList	typeref:typename:([]*Chunk, int)
SnipMateFileSource	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^class SnipMateFileSource(SnippetFileSource):$/;"	c
SnipMateSnippetDefinition	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/snipmate.py	/^class SnipMateSnippetDefinition(SnippetDefinition):$/;"	c
Snippet	.vim/plugged/coc.nvim/src/types.ts	/^export interface Snippet {$/;"	i
Snippet engines supporting vim-snippets	.config/nvim/plugged/vim-snippets/README.md	/^Snippet engines supporting vim-snippets$/;"	s
Snippet engines supporting vim-snippets	.vim/plugged/vim-snippets/README.md	/^Snippet engines supporting vim-snippets$/;"	s
SnippetActions_CanEvenWrapSnippetInPreAction	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanEvenWrapSnippetInPreAction(_VimTest):$/;"	c
SnippetActions_CanExpandAnonOnPreExpand	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanExpandAnonOnPreExpand(_VimTest):$/;"	c
SnippetActions_CanExpandAnonSnippetInJumpAction	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanExpandAnonSnippetInJumpAction(_VimTest):$/;"	c
SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected(_VimTest):$/;"	c
SnippetActions_CanExpandAnonSnippetOnFirstJump	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanExpandAnonSnippetOnFirstJump(_VimTest):$/;"	c
SnippetActions_CanExpandSnippetInDifferentPlace	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanExpandSnippetInDifferentPlace(_VimTest):$/;"	c
SnippetActions_CanMirrorTabStopsOutsideOfSnippet	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanMirrorTabStopsOutsideOfSnippet(_VimTest):$/;"	c
SnippetActions_CanModifyParentBody	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanModifyParentBody(_VimTest):$/;"	c
SnippetActions_CanUseContextFromContextMatch	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanUseContextFromContextMatch(_VimTest):$/;"	c
SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre(_VimTest):$/;"	c
SnippetActions_DoNotBreakCursorOnSingleLikeChange	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_DoNotBreakCursorOnSingleLikeChange(_VimTest):$/;"	c
SnippetActions_EnsureIndent	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_EnsureIndent(_VimTest):$/;"	c
SnippetActions_ErrorOnBufferModificationThroughCommand	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_ErrorOnBufferModificationThroughCommand(_VimTest):$/;"	c
SnippetActions_ErrorOnModificationSnippetLine	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_ErrorOnModificationSnippetLine(_VimTest):$/;"	c
SnippetActions_MoveParentSnippetFromChildInPreAction	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_MoveParentSnippetFromChildInPreAction(_VimTest):$/;"	c
SnippetActions_MoveVisual	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_MoveVisual(_VimTest):$/;"	c
SnippetActions_PostActionCanUseSnippetRange	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_PostActionCanUseSnippetRange(_VimTest):$/;"	c
SnippetActions_PostActionModifiesBuffer	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_PostActionModifiesBuffer(_VimTest):$/;"	c
SnippetActions_PostActionModifiesCharAfterSnippet	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_PostActionModifiesCharAfterSnippet(_VimTest):$/;"	c
SnippetActions_PostActionModifiesLineAfterSnippet	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_PostActionModifiesLineAfterSnippet(_VimTest):$/;"	c
SnippetActions_PreActionModifiesBuffer	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_PreActionModifiesBuffer(_VimTest):$/;"	c
SnippetActions_UseCorrectJumpActions	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_UseCorrectJumpActions(_VimTest):$/;"	c
SnippetDefinition	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^class SnippetDefinition(object):$/;"	c
SnippetDictionary	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_snippet_dictionary.py	/^class SnippetDictionary(object):$/;"	c
SnippetFileSource	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/_base.py	/^class SnippetFileSource(SnippetSource):$/;"	c
SnippetInstance	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_snippet_instance.py	/^class SnippetInstance(EditableTextObject):$/;"	c
SnippetManager	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^class SnippetManager(object):$/;"	c
SnippetManager	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^export class SnippetManager implements types.SnippetManager {$/;"	c
SnippetManager	.vim/plugged/coc.nvim/src/types.ts	/^export interface SnippetManager {$/;"	i
SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand(_VimTest):$/;"	c
SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2(_VimTest):$/;"	c
SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3(_VimTest):$/;"	c
SnippetOptions_ExpandInwordSnippets_ExpandSingle	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippets_ExpandSingle(_VimTest):$/;"	c
SnippetOptions_ExpandInwordSnippets_SimpleExpand	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippets_SimpleExpand(_VimTest):$/;"	c
SnippetOptions_ExpandWordSnippets_ExpandSuffix	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_ExpandSuffix($/;"	c
SnippetOptions_ExpandWordSnippets_ExpandSuffix2	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_ExpandSuffix2($/;"	c
SnippetOptions_ExpandWordSnippets_ExpandSuffix3	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_ExpandSuffix3($/;"	c
SnippetOptions_ExpandWordSnippets_NoExpand	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_NoExpand($/;"	c
SnippetOptions_ExpandWordSnippets_NormalExpand	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_NormalExpand($/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_DontExpand	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_DontExpand(_VimTest):$/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_Expand	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_Expand(_VimTest):$/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_Expand2	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_Expand2(_VimTest):$/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO(_VimTest):$/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose(_VimTest):$/;"	c
SnippetOptions_Regex_Expand	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_Expand(_VimTest):$/;"	c
SnippetOptions_Regex_Multiple	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_Multiple(_VimTest):$/;"	c
SnippetOptions_Regex_PythonBlockMatch	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_PythonBlockMatch(_VimTest):$/;"	c
SnippetOptions_Regex_PythonBlockNoMatch	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_PythonBlockNoMatch(_VimTest):$/;"	c
SnippetOptions_Regex_SameLine_Long_End	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_SameLine_Long_End(_VimTest):$/;"	c
SnippetOptions_Regex_SameLine_Long_Start	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_SameLine_Long_Start(_VimTest):$/;"	c
SnippetOptions_Regex_SameLine_Simple	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_SameLine_Simple(_VimTest):$/;"	c
SnippetOptions_Regex_Self_Space	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_Self_Space(_Regex_Self):$/;"	c
SnippetOptions_Regex_Self_Start	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_Self_Start(_Regex_Self):$/;"	c
SnippetOptions_Regex_Self_TextAfter	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_Self_TextAfter(_Regex_Self):$/;"	c
SnippetOptions_Regex_Self_TextBefore	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_Self_TextBefore(_Regex_Self):$/;"	c
SnippetOptions_Regex_WithSpace	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_WithSpace(_VimTest):$/;"	c
SnippetParser	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^export class SnippetParser {$/;"	c
SnippetPriorities_AddedHasHigherThanFile	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_AddedHasHigherThanFile(_VimTest):$/;"	c
SnippetPriorities_ClearedByChild	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_ClearedByChild(_VimTest):$/;"	c
SnippetPriorities_ClearedByParent	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_ClearedByParent(_VimTest):$/;"	c
SnippetPriorities_DoNotCareAboutNonMatchings	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_DoNotCareAboutNonMatchings(_VimTest):$/;"	c
SnippetPriorities_FileHasHigherThanAdded	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_FileHasHigherThanAdded(_VimTest):$/;"	c
SnippetPriorities_FileHasHigherThanAdded_neg_prio	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_FileHasHigherThanAdded_neg_prio(_VimTest):$/;"	c
SnippetPriorities_MultiWordTriggerOverwriteExisting	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_MultiWordTriggerOverwriteExisting(_VimTest):$/;"	c
SnippetPriorities_OverwriteExisting	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_OverwriteExisting(_VimTest):$/;"	c
SnippetPriorities_OverwriteThenChoose_ECR	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_OverwriteThenChoose_ECR(_VimTest):$/;"	c
SnippetPriorities_OverwriteTwice_ECR	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_OverwriteTwice_ECR(_VimTest):$/;"	c
SnippetPriorities_SimpleClear	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_SimpleClear(_VimTest):$/;"	c
SnippetPriorities_SimpleClear2	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_SimpleClear2(_VimTest):$/;"	c
SnippetProvider	.vim/plugged/coc.nvim/src/types.ts	/^export interface SnippetProvider {$/;"	i
SnippetSession	.vim/plugged/coc.nvim/src/snippets/session.ts	/^export class SnippetSession {$/;"	c
SnippetSource	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_base.py	/^class SnippetSource(object):$/;"	c
SnippetSyntaxError	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/_base.py	/^class SnippetSyntaxError(RuntimeError):$/;"	c
SnippetUtil	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^class SnippetUtil(object):$/;"	c
SnippetUtilForAction	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^class SnippetUtilForAction(dict):$/;"	c
SnippetVariableResolver	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^export class SnippetVariableResolver implements VariableResolver {$/;"	c
Snippet_With_DoubleQuote	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_DoubleQuote(_VimTest):$/;"	c
Snippet_With_DoubleQuote_List	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_DoubleQuote_List(_VimTest):$/;"	c
Snippet_With_SingleQuote	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_SingleQuote(_VimTest):$/;"	c
Snippet_With_SingleQuote_List	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_SingleQuote_List(_VimTest):$/;"	c
Snippet_With_Umlauts	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_List	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts_List(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_Mirrors	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts_Mirrors(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_OverwriteFirst	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts_OverwriteFirst(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_OverwriteNone	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts_OverwriteNone(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_OverwriteSecond	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts_OverwriteSecond(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_Python	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts_Python(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_TypeOn	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts_TypeOn(_UmlautsBase):$/;"	c
Socket	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^class Socket(object):$/;"	c
Socket	.vim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^class Socket(object):$/;"	c
SocketToStream	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^class SocketToStream():$/;"	c
SocketTransport	.vim/plugged/coc.nvim/src/language-client/index.ts	/^export interface SocketTransport {$/;"	i
Sort	.vim/plugged/fzf/src/options.go	/^	Sort        int$/;"	m	struct:fzf.Options	typeref:typename:int
SoundCloudAudio	.config/nvim/plugged/oceanic-next/test/test.js	/^class SoundCloudAudio extends SoundCloudAudio {$/;"	c
Source	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/source/file.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/defx.nvim/rplugin/python3/denite/source/defx/history.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/defx.nvim/rplugin/python3/denite/source/defx/session.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/directory_rec.py	/^class Source(Rec):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/__init__.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/point.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/filetype.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/help.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/menu.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/outline.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/output.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/register.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/source.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/spell.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/denite.nvim/rplugin/python3/deoplete/source/denite.py	/^class Source(Base):$/;"	c
Source	.config/nvim/plugged/ultisnips/rplugin/python3/deoplete/sources/ultisnips.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/coc.nvim/src/model/source.ts	/^export default class Source implements ISource {$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/directory_rec.py	/^class Source(Rec):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/__init__.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/point.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/filetype.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/help.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/menu.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/outline.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/output.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/register.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/source.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/spell.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/denite.nvim/rplugin/python3/deoplete/source/denite.py	/^class Source(Base):$/;"	c
Source	.vim/plugged/omnisharp-vim/rplugin/python3/deoplete/sources/deoplete_OmniSharp.py	/^class Source(Base):$/;"	c
SourceConfig	.vim/plugged/coc.nvim/src/types.ts	/^export interface SourceConfig extends ISource {$/;"	i
SourceStat	.vim/plugged/coc.nvim/src/types.ts	/^export interface SourceStat {$/;"	i
SourceType	.vim/plugged/coc.nvim/src/types.ts	/^export enum SourceType {$/;"	g
Sources	.vim/plugged/coc.nvim/src/sources.ts	/^export class Sources {$/;"	c
SourcesList	.vim/plugged/coc.nvim/src/list/source/sources.ts	/^export default class SourcesList extends BasicList {$/;"	c
Space	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Space = 32,$/;"	e	enum:CharCode
SpaceAfterCast	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceAfterCast": false,$/;"	b	object:FormattingOptions
SpaceAfterColonInBaseTypeDeclaration	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceAfterColonInBaseTypeDeclaration": true,$/;"	b	object:FormattingOptions
SpaceAfterComma	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceAfterComma": true,$/;"	b	object:FormattingOptions
SpaceAfterControlFlowStatementKeyword	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceAfterControlFlowStatementKeyword": true,$/;"	b	object:FormattingOptions
SpaceAfterDot	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceAfterDot": false,$/;"	b	object:FormattingOptions
SpaceAfterMethodCallName	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceAfterMethodCallName": false,$/;"	b	object:FormattingOptions
SpaceAfterSemicolonsInForStatement	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceAfterSemicolonsInForStatement": true,$/;"	b	object:FormattingOptions
SpaceBeforeColonInBaseTypeDeclaration	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceBeforeColonInBaseTypeDeclaration": true,$/;"	b	object:FormattingOptions
SpaceBeforeComma	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceBeforeComma": false,$/;"	b	object:FormattingOptions
SpaceBeforeDot	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceBeforeDot": false,$/;"	b	object:FormattingOptions
SpaceBeforeOpenSquareBracket	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceBeforeOpenSquareBracket": false,$/;"	b	object:FormattingOptions
SpaceBeforeSemicolonsInForStatement	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceBeforeSemicolonsInForStatement": false,$/;"	b	object:FormattingOptions
SpaceBetweenEmptyMethodCallParentheses	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceBetweenEmptyMethodCallParentheses": false,$/;"	b	object:FormattingOptions
SpaceBetweenEmptyMethodDeclarationParentheses	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceBetweenEmptyMethodDeclarationParentheses": false,$/;"	b	object:FormattingOptions
SpaceBetweenEmptySquareBrackets	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceBetweenEmptySquareBrackets": false,$/;"	b	object:FormattingOptions
SpaceWithinCastParentheses	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceWithinCastParentheses": false,$/;"	b	object:FormattingOptions
SpaceWithinExpressionParentheses	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceWithinExpressionParentheses": false,$/;"	b	object:FormattingOptions
SpaceWithinMethodCallParentheses	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceWithinMethodCallParentheses": false,$/;"	b	object:FormattingOptions
SpaceWithinMethodDeclarationParenthesis	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceWithinMethodDeclarationParenthesis": false,$/;"	b	object:FormattingOptions
SpaceWithinOtherParentheses	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceWithinOtherParentheses": false,$/;"	b	object:FormattingOptions
SpaceWithinSquareBrackets	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpaceWithinSquareBrackets": false,$/;"	b	object:FormattingOptions
SpacesIgnoreAroundVariableDeclaration	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpacesIgnoreAroundVariableDeclaration": false,$/;"	b	object:FormattingOptions
SpacingAfterMethodDeclarationName	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpacingAfterMethodDeclarationName": false,$/;"	b	object:FormattingOptions
SpacingAroundBinaryOperator	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "SpacingAroundBinaryOperator": "single",$/;"	s	object:FormattingOptions
SpawnOptions	.vim/plugged/coc.nvim/src/language-client/index.ts	/^export interface SpawnOptions {$/;"	i
Special Thanks	.config/nvim/plugged/tagalong.vim/README.md	/^## Special Thanks$/;"	s
Spinner	.vim/plugged/fzf/src/tui/tui.go	/^	Spinner      Color$/;"	m	struct:tui.ColorTheme	typeref:typename:Color
SplitCDeclarations	.config/nvim/plugged/tabular/after/plugin/TabularMaps.vim	/^function! SplitCDeclarations(lines)$/;"	f
Standard	.vim/plugged/papercolor-theme/DESIGN.md	/^## Standard$/;"	s
Start	.vim/plugged/fzf/src/algo/algo.go	/^	Start int$/;"	m	struct:algo.Result	typeref:typename:int
Start Vim with a minimal configuration	.config/nvim/plugged/fzf.vim/.github/ISSUE_TEMPLATE.md	/^Start Vim with a minimal configuration$/;"	c
StartFailed	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  StartFailed,$/;"	e	enum:ClientState
StartFailed	.vim/plugged/coc.nvim/src/types.ts	/^  StartFailed,$/;"	e	enum:ServiceStat
Starting	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  Starting = 3,$/;"	e	enum:State
Starting	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  Starting,$/;"	e	enum:ClientState
Starting	.vim/plugged/coc.nvim/src/types.ts	/^  Starting,$/;"	e	enum:ServiceStat
State	.vim/plugged/coc.nvim/src/language-client/client.ts	/^export enum State {$/;"	g
StateChangeEvent	.vim/plugged/coc.nvim/src/language-client/client.ts	/^export interface StateChangeEvent {$/;"	i
StaticFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^export interface StaticFeature {$/;"	i
Status line of terminal buffer	.config/nvim/plugged/fzf.vim/README.md	/^Status line of terminal buffer$/;"	s
StatusBarItem	.vim/plugged/coc.nvim/src/types.ts	/^export interface StatusBarItem {$/;"	i
StatusItemOption	.vim/plugged/coc.nvim/src/types.ts	/^export interface StatusItemOption {$/;"	i
StatusLine	.vim/plugged/coc.nvim/src/model/status.ts	/^export default class StatusLine implements Disposable {$/;"	C
StatusOf	.config/nvim/plugged/vim-textobj-user/t/plugin.vim	/^function! StatusOf(lhs)$/;"	f
Stopped	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  Stopped = 1,$/;"	e	enum:State
Stopped	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  Stopped$/;"	e	enum:ClientState
Stopped	.vim/plugged/coc.nvim/src/types.ts	/^  Stopped,$/;"	e	enum:ServiceStat
Stopping	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  Stopping,$/;"	e	enum:ClientState
Stopping	.vim/plugged/coc.nvim/src/types.ts	/^  Stopping,$/;"	e	enum:ServiceStat
Straightforward customization	.vim/plugged/vim-airline/README.md	/^## Straightforward customization$/;"	s
StreamInfo	.vim/plugged/coc.nvim/src/language-client/index.ts	/^export interface StreamInfo {$/;"	i
StreamInfo	.vim/plugged/coc.nvim/src/language-client/index.ts	/^namespace StreamInfo {$/;"	n
String	.vim/plugged/coc.nvim/src/util/factory.ts	/^  String: any$/;"	p	interface:ISandbox
String	.vim/plugged/fzf/src/pattern.go	/^func (t term) String() string {$/;"	f	struct:fzf.term	typeref:typename:string
String	.vim/plugged/fzf/src/tokenizer.go	/^func (d Delimiter) String() string {$/;"	f	struct:fzf.Delimiter	typeref:typename:string
String	.vim/plugged/fzf/src/tokenizer.go	/^func (t Token) String() string {$/;"	f	struct:fzf.Token	typeref:typename:string
String	.vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) String() string {$/;"	f	struct:util.Chars	typeref:typename:string
Style	.vim/plugged/fzf/src/tui/tcell.go	/^func (c Color) Style() tcell.Color {$/;"	f	unknown:tui.Color	typeref:typename:tcell.Color
SuffixMatch	.vim/plugged/fzf/src/algo/algo.go	/^func SuffixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo	typeref:typename:(Result, *[]int)
Suggestion	.vim/plugged/coc.nvim/src/types.ts	/^  Suggestion,$/;"	e	enum:DiagnosticKind
SupporedSymbolKinds	.vim/plugged/coc.nvim/src/language-client/client.ts	/^const SupporedSymbolKinds: SymbolKind[] = [$/;"	C
Support	.config/nvim/plugged/dsf.vim/spec/support/vim.rb	/^module Support$/;"	m
Support	.config/nvim/plugged/sideways.vim/spec/support/vim.rb	/^module Support$/;"	m
Support	.config/nvim/plugged/switch.vim/spec/support/vim.rb	/^module Support$/;"	m
Support	.config/nvim/plugged/tagalong.vim/spec/support/vim.rb	/^module Support$/;"	m
Support for dot repeat	.config/nvim/plugged/vim-easymotion/README.md	/^#### Support for dot repeat$/;"	t
Supported commands	.vim/plugged/fzf/README.md	/^#### Supported commands$/;"	t
SupportedCompletionItemKinds	.vim/plugged/coc.nvim/src/language-client/client.ts	/^const SupportedCompletionItemKinds: CompletionItemKind[] = [$/;"	C
Swap	.vim/plugged/fzf/src/result.go	/^func (a ByOrder) Swap(i, j int) {$/;"	f	type:fzf.ByOrder
Swap	.vim/plugged/fzf/src/result.go	/^func (a ByRelevance) Swap(i, j int) {$/;"	f	type:fzf.ByRelevance
Swap	.vim/plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Swap(i, j int) {$/;"	f	type:fzf.ByRelevanceTac
Swap	.vim/plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Swap(i, j int) {$/;"	f	type:fzf.byTimeOrder
Switch	.config/nvim/plugged/switch.vim/plugin/switch.vim	/^command! Switch call s:Switch()$/;"	c
SwitchReverse	.config/nvim/plugged/switch.vim/plugin/switch.vim	/^command! SwitchReverse call s:SwitchReverse()$/;"	c
Switching out of Vim Is Slow	.config/nvim/plugged/vim-tmux-navigator/README.md	/^### Switching out of Vim Is Slow$/;"	S
Symantic Highlighting	.vim/plugged/omnisharp-vim/README.md	/^### Symantic Highlighting$/;"	S
SymbolInfo	.vim/plugged/coc.nvim/src/handler/index.ts	/^interface SymbolInfo {$/;"	i
SymbolInformation	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let { name, kind, location, containerName } = sym as SymbolInformation$/;"	v
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Array,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Boolean,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Class,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Constant,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Constructor,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Enum,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.EnumMember,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Event,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Field,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Function,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Interface,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Key,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Method,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Module,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Namespace,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Null,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Number,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Object,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Operator,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Package,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Property,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.String,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Struct,$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.TypeParameter$/;"	C
SymbolKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  SymbolKind.Variable,$/;"	C
Symbols	.vim/plugged/coc.nvim/src/list/source/symbols.ts	/^export default class Symbols extends LocationList {$/;"	c
SynFold	.config/nvim/plugged/vim-ruby/syntax/ruby.vim	/^com! -nargs=* SynFold call s:run_syntax_fold(<q-args>)$/;"	c
Sync	.vim/plugged/fzf/src/options.go	/^	Sync        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
SyncParent	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^class SyncParent(_Parent):$/;"	c
SyncParent	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^class SyncParent(_Parent):$/;"	c
Syntax	.vim/plugged/coc.nvim/src/types.ts	/^  Syntax,$/;"	e	enum:DiagnosticKind
Syntax Highlighting Plugins Target	.vim/plugged/papercolor-theme/README.md	/^## Syntax Highlighting Plugins Target$/;"	s
Syntax highlighting	.config/nvim/plugged/vim-ruby/spec/syntax/blocks_spec.rb	/^describe "Syntax highlighting" do$/;"	d
Syntax highlighting	.config/nvim/plugged/vim-ruby/spec/syntax/characters_spec.rb	/^describe "Syntax highlighting" do$/;"	d
Syntax highlighting	.config/nvim/plugged/vim-ruby/spec/syntax/comments_spec.rb	/^describe "Syntax highlighting" do$/;"	d
Syntax highlighting	.config/nvim/plugged/vim-ruby/spec/syntax/line_continuations_spec.rb	/^describe "Syntax highlighting" do$/;"	d
Syntax highlighting	.config/nvim/plugged/vim-ruby/spec/syntax/methods_spec.rb	/^describe "Syntax highlighting" do$/;"	d
Syntax highlighting	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^describe "Syntax highlighting" do$/;"	d
Syntax highlighting	.config/nvim/plugged/vim-ruby/spec/syntax/regular_expressions_spec.rb	/^describe "Syntax highlighting" do$/;"	d
Syntax highlighting	.config/nvim/plugged/vim-ruby/spec/syntax/statement_modifiers_spec.rb	/^describe "Syntax highlighting" do$/;"	d
Syntax highlighting	.config/nvim/plugged/vim-ruby/spec/syntax/strings/heredoc_spec.rb	/^describe "Syntax highlighting" do$/;"	d
Syntax highlighting	.config/nvim/plugged/vim-ruby/spec/syntax/strings/interpolation_spec.rb	/^describe "Syntax highlighting" do$/;"	d
Syntax highlighting	.config/nvim/plugged/vim-ruby/spec/syntax/strings/strings_spec.rb	/^describe "Syntax highlighting" do$/;"	d
Syntax highlighting	.config/nvim/plugged/vim-ruby/spec/syntax/symbols_spec.rb	/^describe "Syntax highlighting" do$/;"	d
SyntaxCheckers_cs_code_checker_GetLocList	.vim/plugged/omnisharp-vim/syntax_checkers/cs/codecheck.vim	/^function! SyntaxCheckers_cs_code_checker_GetLocList() dict abort$/;"	f
SyntaxCheckers_cs_code_checker_IsAvailable	.vim/plugged/omnisharp-vim/syntax_checkers/cs/codecheck.vim	/^function! SyntaxCheckers_cs_code_checker_IsAvailable() dict abort$/;"	f
T	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map T <Plug>(easymotion-T)$/;"	m
T	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  T = 84,$/;"	e	enum:CharCode
T/	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map T\/ <Plug>(easymotion-Tn)$/;"	m
TAGS_FILE	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
TAG_HIGHLIGHT_SYNTAX	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^TAG_HIGHLIGHT_SYNTAX = [$/;"	v
TAG_HIGHLIGHT_SYNTAX	.vim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^TAG_HIGHLIGHT_SYNTAX = [$/;"	v
TAR	.config/nvim/plugged/html5.vim/Makefile	/^TAR=tar czvf$/;"	m
THEMIS_ARGS	.config/nvim/plugged/defx.nvim/Makefile	/^export THEMIS_ARGS := -e -s --headless$/;"	m
THEMIS_ARGS	.config/nvim/plugged/denite.nvim/Makefile	/^export THEMIS_ARGS := -e -s --headless$/;"	m
THEMIS_ARGS	.vim/plugged/denite.nvim/Makefile	/^export THEMIS_ARGS := -e -s --headless$/;"	m
THEMIS_HOME	.config/nvim/plugged/defx.nvim/Makefile	/^export THEMIS_HOME := .\/vim-themis$/;"	m
THEMIS_HOME	.config/nvim/plugged/denite.nvim/Makefile	/^export THEMIS_HOME := .\/vim-themis$/;"	m
THEMIS_HOME	.vim/plugged/denite.nvim/Makefile	/^export THEMIS_HOME := .\/vim-themis$/;"	m
THEMIS_VIM	.config/nvim/plugged/defx.nvim/Makefile	/^export THEMIS_VIM  := nvim$/;"	m
THEMIS_VIM	.config/nvim/plugged/denite.nvim/Makefile	/^export THEMIS_VIM  := nvim$/;"	m
THEMIS_VIM	.vim/plugged/denite.nvim/Makefile	/^export THEMIS_VIM  := nvim$/;"	m
TPM	.config/nvim/plugged/vim-tmux-navigator/README.md	/^#### TPM$/;"	t
TREE	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/action.py	/^    TREE = auto()$/;"	v	class:ActionAttr
Tab	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Tab = 9,$/;"	e	enum:CharCode
Tab	.vim/plugged/fzf/src/tui/tui.go	/^	Tab$/;"	c	package:tui
TabSize	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "TabSize": 4,$/;"	n	object:FormattingOptions
TabStop	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_tabstop.py	/^class TabStop(EditableTextObject):$/;"	c
TabStopEscapingWhenSelectedNoCharTS_ECR	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopEscapingWhenSelectedNoCharTS_ECR(_VimTest):$/;"	c
TabStopEscapingWhenSelectedSingleCharTS_ECR	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopEscapingWhenSelectedSingleCharTS_ECR(_VimTest):$/;"	c
TabStopEscapingWhenSelected_ECR	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopEscapingWhenSelected_ECR(_VimTest):$/;"	c
TabStopNavigatingInInsertModeSimple_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopNavigatingInInsertModeSimple_ExpectCorrectResult(_VimTest):$/;"	c
TabStopNoReplace_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopNoReplace_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplaceReversed_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopSimpleReplaceReversed_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplaceSurrounded1_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopSimpleReplaceSurrounded1_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplaceSurrounded_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopSimpleReplaceSurrounded_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplace_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopSimpleReplace_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestBackwardJumping2_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopTestBackwardJumping2_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestBackwardJumping_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopTestBackwardJumping_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestJumping2_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopTestJumping2_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult($/;"	c
TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestJumping_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopTestJumping_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestMultilineExpand_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopTestMultilineExpand_ExpectCorrectResult(_VimTest):$/;"	c
TabStopToken	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^class TabStopToken(Token):$/;"	c
TabStopWithOneChar_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStopWithOneChar_ExpectCorrectResult(_VimTest):$/;"	c
TabStop_AdjacentTabStopAddText_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_AdjacentTabStopAddText_ExpectCorrectResult(_VimTest):$/;"	c
TabStop_CROnlyOnSelectedNear	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_CROnlyOnSelectedNear(_VimTest):$/;"	c
TabStop_EscapingCharsBackticks	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingCharsBackticks(_VimTest):$/;"	c
TabStop_EscapingCharsDollars	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingCharsDollars(_VimTest):$/;"	c
TabStop_EscapingCharsDollars1	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingCharsDollars1(_VimTest):$/;"	c
TabStop_EscapingCharsDollars_BeginningOfDefinitionText	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingCharsDollars_BeginningOfDefinitionText(_VimTest):$/;"	c
TabStop_EscapingCharsDollars_BeginningOfLine	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingCharsDollars_BeginningOfLine(_VimTest):$/;"	c
TabStop_EscapingChars_Backslash	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingChars_Backslash(_VimTest):$/;"	c
TabStop_EscapingChars_Backslash2	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingChars_Backslash2(_VimTest):$/;"	c
TabStop_EscapingChars_Backslash3	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingChars_Backslash3(_VimTest):$/;"	c
TabStop_EscapingChars_Backslash4	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingChars_Backslash4(_VimTest):$/;"	c
TabStop_EscapingChars_RealLife	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingChars_RealLife(_VimTest):$/;"	c
TabStop_Exit_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_Exit_ExpectCorrectResult(_VimTest):$/;"	c
TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet(_VimTest):$/;"	c
TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE(_VimTest):$/;"	c
TabStop_Multiline_DelFirstOverwriteSecond_Overwrite	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_Multiline_DelFirstOverwriteSecond_Overwrite(_VimTest):$/;"	c
TabStop_Multiline_Leave	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_Multiline_Leave(_VimTest):$/;"	c
TabStop_Multiline_MirrorInFront_Leave	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_Multiline_MirrorInFront_Leave(_VimTest):$/;"	c
TabStop_Multiline_MirrorInFront_Overwrite	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_Multiline_MirrorInFront_Overwrite(_VimTest):$/;"	c
TabStop_Multiline_Overwrite	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_Multiline_Overwrite(_VimTest):$/;"	c
TabStop_Shell_InDefValue_Leave	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_InDefValue_Leave(_VimTest):$/;"	c
TabStop_Shell_InDefValue_Overwrite	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_InDefValue_Overwrite(_VimTest):$/;"	c
TabStop_Shell_ShebangPython	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_ShebangPython(_VimTest):$/;"	c
TabStop_Shell_SimpleExample	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_SimpleExample(_VimTest):$/;"	c
TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite(_VimTest):$/;"	c
TabStop_Shell_TestEscapedChars_Overwrite	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_TestEscapedChars_Overwrite(_VimTest):$/;"	c
TabStop_Shell_TextInNextLine	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_TextInNextLine(_VimTest):$/;"	c
TabStop_Shell_WithUmlauts	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_WithUmlauts(_VimTest):$/;"	c
TabStop_TSInDefaultNested_OverwriteOneJumpAround	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultNested_OverwriteOneJumpAround(_VimTest):$/;"	c
TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther(_VimTest):$/;"	c
TabStop_TSInDefaultNested_OverwriteOneJumpToThird	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultNested_OverwriteOneJumpToThird(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_DeleteFirst	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_DeleteFirst(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteSecond	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteSecond(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice(_VimTest):$/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst(_VimTest):$/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond(_VimTest):$/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0($/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1($/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite($/;"	c
TabStop_TSInDefaultText_ZeroLengthZerothTabstop	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthZerothTabstop(_VimTest):$/;"	c
TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_DoNothing	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_DoNothing(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_Overwrite0	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_Overwrite0(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_Overwrite1	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_Overwrite1(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteSecond	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteSecond(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample(_VimTest):$/;"	c
TabStop_VimScriptInterpolation_SimpleExample	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_VimScriptInterpolation_SimpleExample(_VimTest):$/;"	c
Table Of Contents	.config/nvim/plugged/vista.vim/README.md	/^## Table Of Contents$/;"	s
Table of Contents	.config/nvim/plugged/targets.vim/README.md	/^## Table of Contents$/;"	s
Table of Contents	.vim/plugged/fzf/README.md	/^Table of Contents$/;"	s
Table of contents	.config/nvim/plugged/coc.nvim/Readme.md	/^## Table of contents$/;"	s
Table of contents	.vim/plugged/coc.nvim/Readme.md	/^## Table of contents$/;"	s
Tabstop	.vim/plugged/fzf/src/options.go	/^	Tabstop     int$/;"	m	struct:fzf.Options	typeref:typename:int
TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult($/;"	c
TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultNoType_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultNoType_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorManyFromAll_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorManyFromAll_ExpectCorrectResult(_VimTest):$/;"	c
Tabular	.config/nvim/plugged/tabular/README.md	/^Tabular$/;"	c
Tabularize	.config/nvim/plugged/tabular/plugin/Tabular.vim	/^   \\ Tabularize <line1>,<line2>call Tabularize(<q-args>)$/;"	c
Tabularize	.config/nvim/plugged/tabular/plugin/Tabular.vim	/^function! Tabularize(command, ...) range$/;"	f
Tac	.vim/plugged/fzf/src/options.go	/^	Tac         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
TagalongDeinit	.config/nvim/plugged/tagalong.vim/plugin/tagalong.vim	/^command TagalongDeinit call tagalong#Deinit()$/;"	c
TagalongInit	.config/nvim/plugged/tagalong.vim/plugin/tagalong.vim	/^command TagalongInit   call tagalong#Init()$/;"	c
Target	.config/nvim/plugged/vim-textobj-user/t/old-property-names.vim	/^function! Target()$/;"	f
Task	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^export interface Task<T> {$/;"	i
Task	.vim/plugged/coc.nvim/src/model/task.ts	/^export default class Task implements Disposable {$/;"	c
TaskEvents	.vim/plugged/coc.nvim/src/events.ts	/^export type TaskEvents = 'TaskExit' | 'TaskStderr' | 'TaskStdout'$/;"	a
TaskList	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^class TaskList extends BasicList {$/;"	c
TaskOptions	.vim/plugged/coc.nvim/src/types.ts	/^export interface TaskOptions {$/;"	i
TcellWindow	.vim/plugged/fzf/src/tui/tcell.go	/^type TcellWindow struct {$/;"	s	package:tui
TcpServer	.vim/plugged/ghost-text.vim/python3/tcp_server.py	/^class TcpServer:$/;"	c
TempFileManager	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^class TempFileManager(object):$/;"	c
Terminal	.vim/plugged/coc.nvim/src/types.ts	/^export interface Terminal {$/;"	i
Terminal	.vim/plugged/fzf/src/terminal.go	/^type Terminal struct {$/;"	s	package:fzf
TerminalModel	.vim/plugged/coc.nvim/src/model/terminal.ts	/^export default class TerminalModel implements Terminal {$/;"	c
TerminalOptions	.vim/plugged/coc.nvim/src/types.ts	/^export interface TerminalOptions {$/;"	i
TerminalResult	.vim/plugged/coc.nvim/src/types.ts	/^export interface TerminalResult {$/;"	i
Test	.config/nvim/plugged/vim-textobj-user/t/scan.vim	/^function! Test(object, cases)$/;"	f
TestAdditiveExpect	.vim/plugged/fzf/src/options_test.go	/^func TestAdditiveExpect(t *testing.T) {$/;"	f	package:fzf
TestAllMatch	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestAllMatch(_Base, unittest.TestCase):$/;"	c
TestAnsiCodeStringConversion	.vim/plugged/fzf/src/ansi_test.go	/^func TestAnsiCodeStringConversion(t *testing.T) {$/;"	f	package:fzf
TestAtomicBool	.vim/plugged/fzf/src/util/atomicbool_test.go	/^func TestAtomicBool(t *testing.T) {$/;"	f	package:util
TestBase	.vim/plugged/fzf/test/test_go.rb	/^class TestBase < Minitest::Test$/;"	c
TestBash	.vim/plugged/fzf/test/test_go.rb	/^class TestBash < TestBase$/;"	c
TestBind	.vim/plugged/fzf/src/options_test.go	/^func TestBind(t *testing.T) {$/;"	f	package:fzf
TestCacheKey	.vim/plugged/fzf/src/pattern_test.go	/^func TestCacheKey(t *testing.T) {$/;"	f	package:fzf
TestCacheable	.vim/plugged/fzf/src/pattern_test.go	/^func TestCacheable(t *testing.T) {$/;"	f	package:fzf
TestCaseSensitivity	.vim/plugged/fzf/src/pattern_test.go	/^func TestCaseSensitivity(t *testing.T) {$/;"	f	package:fzf
TestCharsLength	.vim/plugged/fzf/src/util/chars_test.go	/^func TestCharsLength(t *testing.T) {$/;"	f	package:util
TestCharsToString	.vim/plugged/fzf/src/util/chars_test.go	/^func TestCharsToString(t *testing.T) {$/;"	f	package:util
TestCheapDelete	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestCheapDelete(_Base, unittest.TestCase):$/;"	c
TestChunkCache	.vim/plugged/fzf/src/cache_test.go	/^func TestChunkCache(t *testing.T) {$/;"	f	package:fzf
TestChunkList	.vim/plugged/fzf/src/chunklist_test.go	/^func TestChunkList(t *testing.T) {$/;"	f	package:fzf
TestColorOffset	.vim/plugged/fzf/src/result_test.go	/^func TestColorOffset(t *testing.T) {$/;"	f	package:fzf
TestColorSpec	.vim/plugged/fzf/src/options_test.go	/^func TestColorSpec(t *testing.T) {$/;"	f	package:fzf
TestCommonCharacters	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestCommonCharacters(_Base, unittest.TestCase):$/;"	c
TestContrain	.vim/plugged/fzf/src/util/util_test.go	/^func TestContrain(t *testing.T) {$/;"	f	package:util
TestCrash	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestCrash(_Base, unittest.TestCase):$/;"	c
TestDefaultCtrlNP	.vim/plugged/fzf/src/options_test.go	/^func TestDefaultCtrlNP(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegex	.vim/plugged/fzf/src/options_test.go	/^func TestDelimiterRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexRegex	.vim/plugged/fzf/src/options_test.go	/^func TestDelimiterRegexRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexString	.vim/plugged/fzf/src/options_test.go	/^func TestDelimiterRegexString(t *testing.T) {$/;"	f	package:fzf
TestEmptyMerger	.vim/plugged/fzf/src/merger_test.go	/^func TestEmptyMerger(t *testing.T) {$/;"	f	package:fzf
TestEmptyPattern	.vim/plugged/fzf/src/algo/algo_test.go	/^func TestEmptyPattern(t *testing.T) {$/;"	f	package:algo
TestEmptyString	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestEmptyString(_Base, unittest.TestCase):$/;"	c
TestEqual	.vim/plugged/fzf/src/pattern_test.go	/^func TestEqual(t *testing.T) {$/;"	f	package:fzf
TestEventBox	.vim/plugged/fzf/src/util/eventbox_test.go	/^func TestEventBox(t *testing.T) {$/;"	f	package:util
TestExact	.vim/plugged/fzf/src/pattern_test.go	/^func TestExact(t *testing.T) {$/;"	f	package:fzf
TestExactMatchNaive	.vim/plugged/fzf/src/algo/algo_test.go	/^func TestExactMatchNaive(t *testing.T) {$/;"	f	package:algo
TestExactMatchNaiveBackward	.vim/plugged/fzf/src/algo/algo_test.go	/^func TestExactMatchNaiveBackward(t *testing.T) {$/;"	f	package:algo
TestExtractColor	.vim/plugged/fzf/src/ansi_test.go	/^func TestExtractColor(t *testing.T) {$/;"	f	package:fzf
TestFish	.vim/plugged/fzf/test/test_go.rb	/^class TestFish < TestBase$/;"	c
TestFuzzyMatch	.vim/plugged/fzf/src/algo/algo_test.go	/^func TestFuzzyMatch(t *testing.T) {$/;"	f	package:algo
TestFuzzyMatchBackward	.vim/plugged/fzf/src/algo/algo_test.go	/^func TestFuzzyMatchBackward(t *testing.T) {$/;"	f	package:algo
TestGoFZF	.vim/plugged/fzf/test/test_go.rb	/^class TestGoFZF < TestBase$/;"	c
TestGuessing_BackspaceOneChar	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestGuessing_BackspaceOneChar(_BaseGuessing, unittest.TestCase):$/;"	c
TestGuessing_DeleteOneChar	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestGuessing_DeleteOneChar(_BaseGuessing, unittest.TestCase):$/;"	c
TestGuessing_InsertOneChar	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestGuessing_InsertOneChar(_BaseGuessing, unittest.TestCase):$/;"	c
TestGuessing_InsertOneChar1	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestGuessing_InsertOneChar1(_BaseGuessing, unittest.TestCase):$/;"	c
TestGuessing_Noop0	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestGuessing_Noop0(_BaseGuessing, unittest.TestCase):$/;"	c
TestHexToColor	.vim/plugged/fzf/src/tui/tui_test.go	/^func TestHexToColor(t *testing.T) {$/;"	f	package:tui
TestHistory	.vim/plugged/fzf/src/history_test.go	/^func TestHistory(t *testing.T) {$/;"	f	package:fzf
TestIrrelevantNth	.vim/plugged/fzf/src/options_test.go	/^func TestIrrelevantNth(t *testing.T) {$/;"	f	package:fzf
TestLangmapWithUtf8_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^class TestLangmapWithUtf8_ExpectCorrectResult(_VimTest):$/;"	c
TestList	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^class TestList extends BasicList {$/;"	c
TestLongString	.vim/plugged/fzf/src/algo/algo_test.go	/^func TestLongString(t *testing.T) {$/;"	f	package:algo
TestLotsaNewlines	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestLotsaNewlines(_Base, unittest.TestCase):$/;"	c
TestMax	.vim/plugged/fzf/src/util/util_test.go	/^func TestMax(t *testing.T) {$/;"	f	package:util
TestMergerSorted	.vim/plugged/fzf/src/merger_test.go	/^func TestMergerSorted(t *testing.T) {$/;"	f	package:fzf
TestMergerUnsorted	.vim/plugged/fzf/src/merger_test.go	/^func TestMergerUnsorted(t *testing.T) {$/;"	f	package:fzf
TestNoSubstring	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestNoSubstring(_Base, unittest.TestCase):$/;"	c
TestNonEmptyLangmapWithSemi_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^class TestNonEmptyLangmapWithSemi_ExpectCorrectResult(_VimTest):$/;"	c
TestNonEmptyLangmap_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^class TestNonEmptyLangmap_ExpectCorrectResult(_VimTest):$/;"	c
TestNormalize	.vim/plugged/fzf/src/algo/algo_test.go	/^func TestNormalize(t *testing.T) {$/;"	f	package:algo
TestOffsetSort	.vim/plugged/fzf/src/result_test.go	/^func TestOffsetSort(t *testing.T) {$/;"	f	package:fzf
TestOrigTextAndTransformed	.vim/plugged/fzf/src/pattern_test.go	/^func TestOrigTextAndTransformed(t *testing.T) {$/;"	f	package:fzf
TestParseKeys	.vim/plugged/fzf/src/options_test.go	/^func TestParseKeys(t *testing.T) {$/;"	f	package:fzf
TestParseKeysWithComma	.vim/plugged/fzf/src/options_test.go	/^func TestParseKeysWithComma(t *testing.T) {$/;"	f	package:fzf
TestParseNilTheme	.vim/plugged/fzf/src/options_test.go	/^func TestParseNilTheme(t *testing.T) {$/;"	f	package:fzf
TestParseRange	.vim/plugged/fzf/src/tokenizer_test.go	/^func TestParseRange(t *testing.T) {$/;"	f	package:fzf
TestParseTermsEmpty	.vim/plugged/fzf/src/pattern_test.go	/^func TestParseTermsEmpty(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtended	.vim/plugged/fzf/src/pattern_test.go	/^func TestParseTermsExtended(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtendedExact	.vim/plugged/fzf/src/pattern_test.go	/^func TestParseTermsExtendedExact(t *testing.T) {$/;"	f	package:fzf
TestPrefixMatch	.vim/plugged/fzf/src/algo/algo_test.go	/^func TestPrefixMatch(t *testing.T) {$/;"	f	package:algo
TestPreviewOpts	.vim/plugged/fzf/src/options_test.go	/^func TestPreviewOpts(t *testing.T) {$/;"	f	package:fzf
TestQuoteEntryCmd	.vim/plugged/fzf/src/terminal_test.go	/^func TestQuoteEntryCmd(t *testing.T) {$/;"	f	package:fzf
TestRankComparison	.vim/plugged/fzf/src/result_test.go	/^func TestRankComparison(t *testing.T) {$/;"	f	package:fzf
TestReadFromCommand	.vim/plugged/fzf/src/reader_test.go	/^func TestReadFromCommand(t *testing.T) {$/;"	f	package:fzf
TestRealLife	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestRealLife(_Base, unittest.TestCase):$/;"	c
TestRealLife1	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestRealLife1(_Base, unittest.TestCase):$/;"	c
TestReplacePlaceholder	.vim/plugged/fzf/src/terminal_test.go	/^func TestReplacePlaceholder(t *testing.T) {$/;"	f	package:fzf
TestResultRank	.vim/plugged/fzf/src/result_test.go	/^func TestResultRank(t *testing.T) {$/;"	f	package:fzf
TestShell	.vim/plugged/fzf/test/test_go.rb	/^module TestShell$/;"	m
TestSplitNth	.vim/plugged/fzf/src/options_test.go	/^func TestSplitNth(t *testing.T) {$/;"	f	package:fzf
TestStringPtr	.vim/plugged/fzf/src/item_test.go	/^func TestStringPtr(t *testing.T) {$/;"	f	package:fzf
TestSuffixMatch	.vim/plugged/fzf/src/algo/algo_test.go	/^func TestSuffixMatch(t *testing.T) {$/;"	f	package:algo
TestSyntax	.config/nvim/plugged/vim-ruby/spec/vim/plugin/syntax_test.vim	/^function! TestSyntax(pattern, group) abort$/;"	f
TestToCharsAscii	.vim/plugged/fzf/src/util/chars_test.go	/^func TestToCharsAscii(t *testing.T) {$/;"	f	package:util
TestToggle	.vim/plugged/fzf/src/options_test.go	/^func TestToggle(t *testing.T) {$/;"	f	package:fzf
TestTokenize	.vim/plugged/fzf/src/tokenizer_test.go	/^func TestTokenize(t *testing.T) {$/;"	f	package:fzf
TestTransform	.vim/plugged/fzf/src/tokenizer_test.go	/^func TestTransform(t *testing.T) {$/;"	f	package:fzf
TestTransformIndexOutOfBounds	.vim/plugged/fzf/src/tokenizer_test.go	/^func TestTransformIndexOutOfBounds(t *testing.T) {$/;"	f	package:fzf
TestTrimLength	.vim/plugged/fzf/src/util/chars_test.go	/^func TestTrimLength(t *testing.T) {$/;"	f	package:util
TestUltiSnipsProblem	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestUltiSnipsProblem(_Base, unittest.TestCase):$/;"	c
TestWithNewline	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestWithNewline(_Base, unittest.TestCase):$/;"	c
TestZsh	.vim/plugged/fzf/test/test_go.rb	/^class TestZsh < TestBase$/;"	c
Testing	.config/nvim/plugged/dsf.vim/CONTRIBUTING.md	/^## Testing$/;"	s
Testing	.config/nvim/plugged/switch.vim/CONTRIBUTING.md	/^## Testing$/;"	s
Testing	.config/nvim/plugged/tagalong.vim/CONTRIBUTING.md	/^## Testing$/;"	s
Testing	.config/nvim/plugged/ultisnips/CONTRIBUTING.md	/^## Testing$/;"	s
Testing	.config/nvim/plugged/vim-gutentags/CONTRIBUTING.md	/^## Testing$/;"	s
Text	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const expected = [Placeholder, Text, Text, Text]$/;"	C
Text	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^export class Text extends Marker {$/;"	c
TextDocumentContentProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface TextDocumentContentProvider {$/;"	i
TextDocumentEdit	.vim/plugged/coc.nvim/src/workspace.ts	/^            let { textDocument, edits } = change as TextDocumentEdit$/;"	v
TextDocumentEdit	.vim/plugged/coc.nvim/src/workspace.ts	/^        let { edits, textDocument } = change as TextDocumentEdit$/;"	v
TextDocumentEdit	.vim/plugged/coc.nvim/src/workspace.ts	/^        let { textDocument } = change as TextDocumentEdit$/;"	v
TextDocumentFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^export abstract class TextDocumentFeature<$/;"	c
TextDocumentRegistrationOptions	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^    const implCapabilities = capabilities.colorProvider as TextDocumentRegistrationOptions &$/;"	C	method:ColorProviderFeature.initialize
TextDocumentRegistrationOptions	.vim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^    const implCapabilities = capabilities.foldingRangeProvider as TextDocumentRegistrationOption/;"	C	method:FoldingRangeFeature.initialize
TextDocumentRegistrationOptions	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^    const implCapabilities = capabilities.selectionRangeProvider as TextDocumentRegistrationOpti/;"	C	method:SelectionRangeFeature.initialize
TextDocumentWillSaveEvent	.vim/plugged/coc.nvim/src/types.ts	/^export interface TextDocumentWillSaveEvent {$/;"	i
TextItem	.vim/plugged/coc.nvim/src/types.ts	/^export interface TextItem {$/;"	i
TextObject	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^class TextObject(object):$/;"	c
TextObject	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^function! <Sid>TextObject(inner, incbelow, vis, range, count)$/;"	f
TextObjectTransformation	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^class TextObjectTransformation(object):$/;"	c
TextTabStopAfterMirror_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopAfterMirror_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopAllSurrounded_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopAllSurrounded_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopSimpleMirrorMultilineMirrorInFront_ECR	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopSimpleMirrorMultilineMirrorInFront_ECR(_VimTest):$/;"	c
TextTabStopSimpleMirrorMultiline_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopSimpleMirrorMultiline_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopSurroundMirror_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopSurroundMirror_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopTextAfterTab_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopTextAfterTab_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopTextBeforeMirror_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopTextBeforeMirror_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopTextBeforeTab_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopTextBeforeTab_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopTextSurroundedTab_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopTextSurroundedTab_ExpectCorrectResult(_VimTest):$/;"	c
TextmateSnippet	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^export class TextmateSnippet extends Marker {$/;"	c
Thanks	.vim/plugged/vim-closer/README.md	/^## Thanks$/;"	s
The EasyMotion project, revived!	.config/nvim/plugged/vim-easymotion/README.md	/^The EasyMotion project, revived!$/;"	c
The reproduce ways from neovim starting	.config/nvim/plugged/oceanic-next/.github/ISSUE_TEMPLATE.md	/^## The reproduce ways from neovim starting$/;"	s
The reproduce ways from neovim/Vim starting (Required!)	.config/nvim/plugged/defx.nvim/.github/ISSUE_TEMPLATE.md	/^## The reproduce ways from neovim\/Vim starting (Required!)$/;"	s
TheLastRegion	.config/nvim/plugged/vim-textobj-user/t/region-type.vim	/^function! TheLastRegion()$/;"	f
Theme	.vim/plugged/fzf/src/options.go	/^	Theme       *tui.ColorTheme$/;"	m	struct:fzf.Options	typeref:typename:*tui.ColorTheme
Theme Options	.vim/plugged/papercolor-theme/README.md	/^### Theme Options$/;"	S
Themes	.vim/plugged/vim-airline/CONTRIBUTING.md	/^# Themes$/;"	c
Themes	.vim/plugged/vim-airline/README.md	/^## Themes$/;"	s
Thenable	.vim/plugged/coc.nvim/src/types.ts	/^export interface Thenable<T> {$/;"	i
Things to consider when contributing	.config/nvim/plugged/vim-snippets/README.md	/^Things to consider when contributing$/;"	s
Things to consider when contributing	.vim/plugged/vim-snippets/README.md	/^Things to consider when contributing$/;"	s
Third-party libraries used	.vim/plugged/fzf/BUILD.md	/^Third-party libraries used$/;"	s
ThreadedTCPServer	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):$/;"	c
ThreadedUnixServer	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    class ThreadedUnixServer(socketserver.ThreadingMixIn,$/;"	c
Tilde	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Tilde = 126,$/;"	e	enum:CharCode
Tips	.vim/plugged/fzf/README.md	/^Tips$/;"	s
Tmux	.config/nvim/plugged/vim-tmux-navigator/README.md	/^#### Tmux$/;"	t
Tmux	.vim/plugged/fzf/test/test_go.rb	/^class Tmux$/;"	c
Tmux Can't Tell if Vim Is Active	.config/nvim/plugged/vim-tmux-navigator/README.md	/^### Tmux Can't Tell if Vim Is Active$/;"	S
TmuxNavigateDown	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^  command! TmuxNavigateDown call s:VimNavigate('j')$/;"	c
TmuxNavigateDown	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^command! TmuxNavigateDown call s:TmuxAwareNavigate('j')$/;"	c
TmuxNavigateLeft	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^  command! TmuxNavigateLeft call s:VimNavigate('h')$/;"	c
TmuxNavigateLeft	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^command! TmuxNavigateLeft call s:TmuxAwareNavigate('h')$/;"	c
TmuxNavigatePrevious	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^  command! TmuxNavigatePrevious call s:VimNavigate('p')$/;"	c
TmuxNavigatePrevious	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^command! TmuxNavigatePrevious call s:TmuxAwareNavigate('p')$/;"	c
TmuxNavigateRight	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^  command! TmuxNavigateRight call s:VimNavigate('l')$/;"	c
TmuxNavigateRight	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^command! TmuxNavigateRight call s:TmuxAwareNavigate('l')$/;"	c
TmuxNavigateUp	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^  command! TmuxNavigateUp call s:VimNavigate('k')$/;"	c
TmuxNavigateUp	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^command! TmuxNavigateUp call s:TmuxAwareNavigate('k')$/;"	c
TmuxNavigatorProcessList	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^command! TmuxNavigatorProcessList call s:TmuxNavigatorProcessList()$/;"	c
ToChars	.vim/plugged/fzf/src/util/chars.go	/^func ToChars(bytes []byte) Chars {$/;"	f	package:util	typeref:typename:Chars
ToDo	.config/nvim/plugged/gruvbox/README.md	/^ToDo$/;"	s
ToRunes	.vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) ToRunes() []rune {$/;"	f	struct:util.Chars	typeref:typename:[]rune
ToString	.vim/plugged/fzf/src/ansi.go	/^func (s *ansiState) ToString() string {$/;"	f	struct:fzf.ansiState	typeref:typename:string
ToString	.vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) ToString() string {$/;"	f	struct:util.Chars	typeref:typename:string
ToUseRegister	.config/nvim/plugged/vim-operator-user/t/register-designations.vim	/^let ToUseRegister = {}$/;"	v
ToUseRegister.match	.config/nvim/plugged/vim-operator-user/t/register-designations.vim	/^function! ToUseRegister.match(actual, expected)$/;"	f
Todos	.config/nvim/plugged/targets.vim/README.md	/^## Todos$/;"	s
ToggleSort	.vim/plugged/fzf/src/options.go	/^	ToggleSort  bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Token	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^class Token(object):$/;"	c
Token	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^export interface Token {$/;"	i
Token	.vim/plugged/fzf/src/tokenizer.go	/^type Token struct {$/;"	s	package:fzf
TokenType	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^export const enum TokenType {$/;"	g
Tokenize	.vim/plugged/fzf/src/tokenizer.go	/^func Tokenize(text string, delimiter Delimiter) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
Top	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Top() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Top	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Top() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Top	.vim/plugged/fzf/src/tui/tui.go	/^	Top() int$/;"	n	interface:tui.Window	typeref:typename:int
TrailingNewline_TabStop_EndNL	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class TrailingNewline_TabStop_EndNL(_VimTest):$/;"	c
TrailingNewline_TabStop_EndStartNL	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class TrailingNewline_TabStop_EndStartNL(_VimTest):$/;"	c
TrailingNewline_TabStop_ExtraNL_ECR	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class TrailingNewline_TabStop_ExtraNL_ECR(_VimTest):$/;"	c
TrailingNewline_TabStop_JustNL	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class TrailingNewline_TabStop_JustNL(_VimTest):$/;"	c
TrailingNewline_TabStop_NLInsideStuffBehind	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class TrailingNewline_TabStop_NLInsideStuffBehind(_VimTest):$/;"	c
TrailingNewline_TabStop_NotEndStartNL	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class TrailingNewline_TabStop_NotEndStartNL(_VimTest):$/;"	c
TrailingNewline_TabStop_StartNL	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class TrailingNewline_TabStop_StartNL(_VimTest):$/;"	c
TrailingWhitespaces	.vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrailingWhitespaces() int {$/;"	f	struct:util.Chars	typeref:typename:int
Transform	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^export class Transform extends Marker {$/;"	c
Transform	.vim/plugged/fzf/src/tokenizer.go	/^func Transform(tokens []Token, withNth []Range) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
TransformableMarker	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^export abstract class TransformableMarker extends Marker {$/;"	c
Transformation	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^class Transformation(Mirror, TextObjectTransformation):$/;"	c
TransformationToken	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^class TransformationToken(Token):$/;"	c
TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR(_VimTest):$/;"	c
TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR($/;"	c
TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR($/;"	c
TransformationUsingBackspaceToDeleteDefaultValue_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class TransformationUsingBackspaceToDeleteDefaultValue_ECR(_VimTest):$/;"	c
Transformation_BackreferenceTwice_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_BackreferenceTwice_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_Backreference_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_Backreference_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CIBothDefinedNegative_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CIBothDefinedNegative_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CIBothDefinedPositive_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CIBothDefinedPositive_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CIEscapedParensinReplace_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CIEscapedParensinReplace_ECR(_VimTest):$/;"	c
Transformation_CINewlines_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CINewlines_ECR(_VimTest):$/;"	c
Transformation_CITabstop_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CITabstop_ECR(_VimTest):$/;"	c
Transformation_CleverTransformLongLower_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CleverTransformLongLower_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CleverTransformLongUpper_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CleverTransformLongUpper_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CleverTransformLowercaseChar_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CleverTransformLowercaseChar_ExpectCorrectResult($/;"	c
Transformation_CleverTransformUpercaseChar_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CleverTransformUpercaseChar_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_ConditionalInConditional_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_ConditionalInConditional_ECR(_VimTest):$/;"	c
Transformation_ConditionalInsertRWEllipsis_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_ConditionalInsertRWEllipsis_ECR(_VimTest):$/;"	c
Transformation_ConditionalInsertionSimple_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_ConditionalInsertionSimple_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_ConditionalWithBackslashBeforeDelimiter	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_ConditionalWithBackslashBeforeDelimiter(_VimTest):$/;"	c
Transformation_ConditionalWithBackslashBeforeDelimiter1	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_ConditionalWithBackslashBeforeDelimiter1(_VimTest):$/;"	c
Transformation_ConditionalWithEscapedDelimiter	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_ConditionalWithEscapedDelimiter(_VimTest):$/;"	c
Transformation_InsideTabLeaveAtDefault_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_InsideTabLeaveAtDefault_ECR(_VimTest):$/;"	c
Transformation_InsideTabOvertype_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_InsideTabOvertype_ECR(_VimTest):$/;"	c
Transformation_LowerCaseAsciiResult	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_LowerCaseAsciiResult(_VimTest):$/;"	c
Transformation_MultipleTransformations_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_MultipleTransformations_ECR(_VimTest):$/;"	c
Transformation_OptionIgnoreCase_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_OptionIgnoreCase_ECR(_VimTest):$/;"	c
Transformation_OptionMultiline_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_OptionMultiline_ECR(_VimTest):$/;"	c
Transformation_OptionReplaceGlobalMatchInReplace_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_OptionReplaceGlobalMatchInReplace_ECR(_VimTest):$/;"	c
Transformation_OptionReplaceGlobal_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_OptionReplaceGlobal_ECR(_VimTest):$/;"	c
Transformation_SimpleCaseAsciiResult	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_SimpleCaseAsciiResult(_VimTest):$/;"	c
Transformation_SimpleCaseNoTransform_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_SimpleCaseNoTransform_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_SimpleCaseTransformInFrontDefVal_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_SimpleCaseTransformInFrontDefVal_ECR(_VimTest):$/;"	c
Transformation_SimpleCaseTransformInFront_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_SimpleCaseTransformInFront_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_SimpleCase_ExpectCorrectResult	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_SimpleCase_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_TabIsAtEndAndDeleted1_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TabIsAtEndAndDeleted1_ECR(_VimTest):$/;"	c
Transformation_TabIsAtEndAndDeleted_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TabIsAtEndAndDeleted_ECR(_VimTest):$/;"	c
Transformation_TabIsAtEndNoTextLeave_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TabIsAtEndNoTextLeave_ECR(_VimTest):$/;"	c
Transformation_TabIsAtEndNoTextType_ECR	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TabIsAtEndNoTextType_ECR(_VimTest):$/;"	c
Transformation_TestKill_InsertAfter_NoKill	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TestKill_InsertAfter_NoKill(_VimTest):$/;"	c
Transformation_TestKill_InsertBefore_NoKill	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TestKill_InsertBefore_NoKill(_VimTest):$/;"	c
Transformation_TestKill_InsertBeginning_Kill	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TestKill_InsertBeginning_Kill(_VimTest):$/;"	c
Transformation_TestKill_InsertEnd_Kill	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TestKill_InsertEnd_Kill(_VimTest):$/;"	c
Transport	.vim/plugged/coc.nvim/src/language-client/index.ts	/^export type Transport = TransportKind | SocketTransport$/;"	a
Transport	.vim/plugged/coc.nvim/src/language-client/index.ts	/^namespace Transport {$/;"	n
TransportKind	.vim/plugged/coc.nvim/src/language-client/index.ts	/^export enum TransportKind {$/;"	g
TrimLength	.vim/plugged/fzf/src/item.go	/^func (item *Item) TrimLength() uint16 {$/;"	f	struct:fzf.Item	typeref:typename:uint16
TrimLength	.vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrimLength() uint16 {$/;"	f	struct:util.Chars	typeref:typename:uint16
TrimSpacesAtEndOfLines	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class TrimSpacesAtEndOfLines(_VimTest):$/;"	c
Trouble shooting	.config/nvim/plugged/coc.nvim/Readme.md	/^## Trouble shooting$/;"	s
Trouble shooting	.vim/plugged/coc.nvim/Readme.md	/^## Trouble shooting$/;"	s
Troubleshooting	.config/nvim/plugged/vim-tmux-navigator/README.md	/^Troubleshooting$/;"	s
TryNormal	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^function TryNormal(str)$/;"	f
Two key highlighting	.config/nvim/plugged/vim-easymotion/README.md	/^### Two key highlighting$/;"	S
Type	.vim/plugged/fzf/src/tui/tui.go	/^	Type       int$/;"	m	struct:tui.Event	typeref:typename:int
TypeDefinitionFeature	.vim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^export class TypeDefinitionFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> /;"	c
TypeDefinitionManager	.vim/plugged/coc.nvim/src/provider/typeDefinitionManager.ts	/^export default class TypeDefinitionManager extends Manager<TypeDefinitionProvider> implements Di/;"	c
TypeDefinitionMiddleware	.vim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^export interface TypeDefinitionMiddleware {$/;"	i
TypeDefinitionProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface TypeDefinitionProvider {$/;"	i
U	.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	.config/nvim/autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^    nmap U <Plug>(RepeatUndoLine)$/;"	m
U	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	.vim/autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U = 85,$/;"	e	enum:CharCode
UNAME_M	.vim/plugged/fzf/Makefile	/^UNAME_M := $(shell uname -m)$/;"	m
UNIDECODE_ALERT_RAISED	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^UNIDECODE_ALERT_RAISED = False$/;"	v
UNIDECODE_IMPORTED	.config/nvim/plugged/ultisnips/test/util.py	/^    UNIDECODE_IMPORTED = False$/;"	v
UNIDECODE_IMPORTED	.config/nvim/plugged/ultisnips/test/util.py	/^    UNIDECODE_IMPORTED = True$/;"	v
UNMATCHED_LETTER_PENALTY	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^UNMATCHED_LETTER_PENALTY = -1$/;"	v
UNMATCHED_LETTER_PENALTY	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^UNMATCHED_LETTER_PENALTY = -1$/;"	v
UPDATED_SOURCE	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
UTF8_BOM	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  UTF8_BOM = 65279$/;"	e	enum:CharCode
U_ACUTE_ACCENT	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_ACUTE_ACCENT = 0x00B4,        \/\/ U+00B4 ACUTE ACCENT$/;"	e	enum:CharCode
U_BREVE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_BREVE = 0x02D8,          \/\/ U+02D8 BREVE$/;"	e	enum:CharCode
U_CEDILLA	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_CEDILLA = 0x00B8,          \/\/ U+00B8 CEDILLA$/;"	e	enum:CharCode
U_CIRCUMFLEX	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_CIRCUMFLEX = 0x005E,         \/\/ U+005E CIRCUMFLEX$/;"	e	enum:CharCode
U_Combining_Acute_Accent	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Acute_Accent = 0x0301,        \/\/ U+0301 Combining Acute Accent$/;"	e	enum:CharCode
U_Combining_Acute_Accent_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Acute_Accent_Below = 0x0317,      \/\/ U+0317 Combining Acute Accent Below$/;"	e	enum:CharCode
U_Combining_Acute_Tone_Mark	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Acute_Tone_Mark = 0x0341,       \/\/  U+0341 Combining Acute Tone Mark$/;"	e	enum:CharCode
U_Combining_Almost_Equal_To_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Almost_Equal_To_Above = 0x034C,      \/\/  U+034C Combining Almost Equal To Above$/;"	e	enum:CharCode
U_Combining_Asterisk_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Asterisk_Below = 0x0359,       \/\/  U+0359 Combining Asterisk Below$/;"	e	enum:CharCode
U_Combining_Breve	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Breve = 0x0306,          \/\/ U+0306 Combining Breve$/;"	e	enum:CharCode
U_Combining_Breve_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Breve_Below = 0x032E,        \/\/ U+032E Combining Breve Below$/;"	e	enum:CharCode
U_Combining_Bridge_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Bridge_Above = 0x0346,        \/\/  U+0346 Combining Bridge Above$/;"	e	enum:CharCode
U_Combining_Bridge_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Bridge_Below = 0x032A,        \/\/ U+032A Combining Bridge Below$/;"	e	enum:CharCode
U_Combining_Candrabindu	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Candrabindu = 0x0310,        \/\/ U+0310 Combining Candrabindu$/;"	e	enum:CharCode
U_Combining_Caron	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Caron = 0x030C,          \/\/ U+030C Combining Caron$/;"	e	enum:CharCode
U_Combining_Caron_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Caron_Below = 0x032C,        \/\/ U+032C Combining Caron Below$/;"	e	enum:CharCode
U_Combining_Cedilla	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Cedilla = 0x0327,         \/\/ U+0327 Combining Cedilla$/;"	e	enum:CharCode
U_Combining_Circumflex_Accent	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Circumflex_Accent = 0x0302,       \/\/ U+0302 Combining Circumflex Accent$/;"	e	enum:CharCode
U_Combining_Circumflex_Accent_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Circumflex_Accent_Below = 0x032D,     \/\/ U+032D Combining Circumflex Accent Belo/;"	e	enum:CharCode
U_Combining_Comma_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Comma_Above = 0x0313,        \/\/ U+0313 Combining Comma Above$/;"	e	enum:CharCode
U_Combining_Comma_Above_Right	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Comma_Above_Right = 0x0315,       \/\/ U+0315 Combining Comma Above Right$/;"	e	enum:CharCode
U_Combining_Comma_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Comma_Below = 0x0326,        \/\/ U+0326 Combining Comma Below$/;"	e	enum:CharCode
U_Combining_Diaeresis	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Diaeresis = 0x0308,         \/\/ U+0308 Combining Diaeresis$/;"	e	enum:CharCode
U_Combining_Diaeresis_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Diaeresis_Below = 0x0324,       \/\/ U+0324 Combining Diaeresis Below$/;"	e	enum:CharCode
U_Combining_Dot_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Dot_Above = 0x0307,         \/\/ U+0307 Combining Dot Above$/;"	e	enum:CharCode
U_Combining_Dot_Above_Right	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Dot_Above_Right = 0x0358,       \/\/  U+0358 Combining Dot Above Right$/;"	e	enum:CharCode
U_Combining_Dot_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Dot_Below = 0x0323,         \/\/ U+0323 Combining Dot Below$/;"	e	enum:CharCode
U_Combining_Double_Acute_Accent	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Acute_Accent = 0x030B,      \/\/ U+030B Combining Double Acute Accent$/;"	e	enum:CharCode
U_Combining_Double_Breve	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Breve = 0x035D,        \/\/  U+035D Combining Double Breve$/;"	e	enum:CharCode
U_Combining_Double_Breve_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Breve_Below = 0x035C,      \/\/  U+035C Combining Double Breve Below$/;"	e	enum:CharCode
U_Combining_Double_Grave_Accent	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Grave_Accent = 0x030F,      \/\/ U+030F Combining Double Grave Accent$/;"	e	enum:CharCode
U_Combining_Double_Inverted_Breve	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Inverted_Breve = 0x0361,      \/\/  U+0361 Combining Double Inverted Breve$/;"	e	enum:CharCode
U_Combining_Double_Low_Line	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Low_Line = 0x0333,       \/\/ U+0333 Combining Double Low Line$/;"	e	enum:CharCode
U_Combining_Double_Macron	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Macron = 0x035E,        \/\/  U+035E Combining Double Macron$/;"	e	enum:CharCode
U_Combining_Double_Macron_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Macron_Below = 0x035F,      \/\/  U+035F Combining Double Macron Below$/;"	e	enum:CharCode
U_Combining_Double_Overline	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Overline = 0x033F,       \/\/  U+033F Combining Double Overline$/;"	e	enum:CharCode
U_Combining_Double_Rightwards_Arrow_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Rightwards_Arrow_Below = 0x0362,    \/\/  U+0362 Combining Double Rightward/;"	e	enum:CharCode
U_Combining_Double_Ring_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Ring_Below = 0x035A,       \/\/  U+035A Combining Double Ring Below$/;"	e	enum:CharCode
U_Combining_Double_Tilde	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Tilde = 0x0360,        \/\/  U+0360 Combining Double Tilde$/;"	e	enum:CharCode
U_Combining_Double_Vertical_Line_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Vertical_Line_Above = 0x030E,    \/\/ U+030E Combining Double Vertical Line/;"	e	enum:CharCode
U_Combining_Double_Vertical_Line_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Vertical_Line_Below = 0x0348,    \/\/  U+0348 Combining Double Vertical Lin/;"	e	enum:CharCode
U_Combining_Down_Tack_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Down_Tack_Below = 0x031E,       \/\/ U+031E Combining Down Tack Below$/;"	e	enum:CharCode
U_Combining_Equals_Sign_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Equals_Sign_Below = 0x0347,       \/\/  U+0347 Combining Equals Sign Below$/;"	e	enum:CharCode
U_Combining_Fermata	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Fermata = 0x0352,         \/\/  U+0352 Combining Fermata$/;"	e	enum:CharCode
U_Combining_Grapheme_Joiner	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Grapheme_Joiner = 0x034F,       \/\/  U+034F Combining Grapheme Joiner$/;"	e	enum:CharCode
U_Combining_Grave_Accent	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Grave_Accent = 0x0300,        \/\/ U+0300 Combining Grave Accent$/;"	e	enum:CharCode
U_Combining_Grave_Accent_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Grave_Accent_Below = 0x0316,      \/\/ U+0316 Combining Grave Accent Below$/;"	e	enum:CharCode
U_Combining_Grave_Tone_Mark	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Grave_Tone_Mark = 0x0340,       \/\/  U+0340 Combining Grave Tone Mark$/;"	e	enum:CharCode
U_Combining_Greek_Dialytika_Tonos	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Greek_Dialytika_Tonos = 0x0344,      \/\/  U+0344 Combining Greek Dialytika Tonos$/;"	e	enum:CharCode
U_Combining_Greek_Koronis	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Greek_Koronis = 0x0343,        \/\/  U+0343 Combining Greek Koronis$/;"	e	enum:CharCode
U_Combining_Greek_Perispomeni	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Greek_Perispomeni = 0x0342,       \/\/  U+0342 Combining Greek Perispomeni$/;"	e	enum:CharCode
U_Combining_Greek_Ypogegrammeni	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Greek_Ypogegrammeni = 0x0345,      \/\/  U+0345 Combining Greek Ypogegrammeni$/;"	e	enum:CharCode
U_Combining_Homothetic_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Homothetic_Above = 0x034B,       \/\/  U+034B Combining Homothetic Above$/;"	e	enum:CharCode
U_Combining_Hook_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Hook_Above = 0x0309,        \/\/ U+0309 Combining Hook Above$/;"	e	enum:CharCode
U_Combining_Horn	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Horn = 0x031B,          \/\/ U+031B Combining Horn$/;"	e	enum:CharCode
U_Combining_Inverted_Breve	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Inverted_Breve = 0x0311,       \/\/ U+0311 Combining Inverted Breve$/;"	e	enum:CharCode
U_Combining_Inverted_Breve_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Inverted_Breve_Below = 0x032F,      \/\/ U+032F Combining Inverted Breve Below$/;"	e	enum:CharCode
U_Combining_Inverted_Bridge_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Inverted_Bridge_Below = 0x033A,      \/\/  U+033A Combining Inverted Bridge Below$/;"	e	enum:CharCode
U_Combining_Inverted_Double_Arch_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Inverted_Double_Arch_Below = 0x032B,    \/\/ U+032B Combining Inverted Double Arch/;"	e	enum:CharCode
U_Combining_Latin_Small_Letter_A	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_A = 0x0363,       \/\/  U+0363 Combining Latin Small Letter A$/;"	e	enum:CharCode
U_Combining_Latin_Small_Letter_C	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_C = 0x0368,       \/\/  U+0368 Combining Latin Small Letter C$/;"	e	enum:CharCode
U_Combining_Latin_Small_Letter_D	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_D = 0x0369,       \/\/  U+0369 Combining Latin Small Letter D$/;"	e	enum:CharCode
U_Combining_Latin_Small_Letter_E	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_E = 0x0364,       \/\/  U+0364 Combining Latin Small Letter E$/;"	e	enum:CharCode
U_Combining_Latin_Small_Letter_H	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_H = 0x036A,       \/\/  U+036A Combining Latin Small Letter H$/;"	e	enum:CharCode
U_Combining_Latin_Small_Letter_I	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_I = 0x0365,       \/\/  U+0365 Combining Latin Small Letter I$/;"	e	enum:CharCode
U_Combining_Latin_Small_Letter_M	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_M = 0x036B,       \/\/  U+036B Combining Latin Small Letter M$/;"	e	enum:CharCode
U_Combining_Latin_Small_Letter_O	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_O = 0x0366,       \/\/  U+0366 Combining Latin Small Letter O$/;"	e	enum:CharCode
U_Combining_Latin_Small_Letter_R	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_R = 0x036C,       \/\/  U+036C Combining Latin Small Letter R$/;"	e	enum:CharCode
U_Combining_Latin_Small_Letter_T	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_T = 0x036D,       \/\/  U+036D Combining Latin Small Letter T$/;"	e	enum:CharCode
U_Combining_Latin_Small_Letter_U	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_U = 0x0367,       \/\/  U+0367 Combining Latin Small Letter U$/;"	e	enum:CharCode
U_Combining_Latin_Small_Letter_V	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_V = 0x036E,       \/\/  U+036E Combining Latin Small Letter V$/;"	e	enum:CharCode
U_Combining_Latin_Small_Letter_X	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_X = 0x036F,       \/\/  U+036F Combining Latin Small Letter X$/;"	e	enum:CharCode
U_Combining_Left_Angle_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Left_Angle_Above = 0x031A,       \/\/ U+031A Combining Left Angle Above$/;"	e	enum:CharCode
U_Combining_Left_Angle_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Left_Angle_Below = 0x0349,       \/\/  U+0349 Combining Left Angle Below$/;"	e	enum:CharCode
U_Combining_Left_Arrowhead_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Left_Arrowhead_Below = 0x0354,      \/\/  U+0354 Combining Left Arrowhead Below$/;"	e	enum:CharCode
U_Combining_Left_Half_Ring_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Left_Half_Ring_Above = 0x0351,      \/\/  U+0351 Combining Left Half Ring Above$/;"	e	enum:CharCode
U_Combining_Left_Half_Ring_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Left_Half_Ring_Below = 0x031C,      \/\/ U+031C Combining Left Half Ring Below$/;"	e	enum:CharCode
U_Combining_Left_Right_Arrow_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Left_Right_Arrow_Below = 0x034D,     \/\/  U+034D Combining Left Right Arrow Below$/;"	e	enum:CharCode
U_Combining_Left_Tack_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Left_Tack_Below = 0x0318,       \/\/ U+0318 Combining Left Tack Below$/;"	e	enum:CharCode
U_Combining_Long_Solidus_Overlay	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Long_Solidus_Overlay = 0x0338,      \/\/  U+0338 Combining Long Solidus Overlay$/;"	e	enum:CharCode
U_Combining_Long_Stroke_Overlay	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Long_Stroke_Overlay = 0x0336,      \/\/ U+0336 Combining Long Stroke Overlay$/;"	e	enum:CharCode
U_Combining_Low_Line	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Low_Line = 0x0332,         \/\/ U+0332 Combining Low Line$/;"	e	enum:CharCode
U_Combining_Macron	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Macron = 0x0304,         \/\/ U+0304 Combining Macron$/;"	e	enum:CharCode
U_Combining_Macron_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Macron_Below = 0x0331,        \/\/ U+0331 Combining Macron Below$/;"	e	enum:CharCode
U_Combining_Minus_Sign_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Minus_Sign_Below = 0x0320,       \/\/ U+0320 Combining Minus Sign Below$/;"	e	enum:CharCode
U_Combining_Not_Tilde_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Not_Tilde_Above = 0x034A,       \/\/  U+034A Combining Not Tilde Above$/;"	e	enum:CharCode
U_Combining_Ogonek	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Ogonek = 0x0328,         \/\/ U+0328 Combining Ogonek$/;"	e	enum:CharCode
U_Combining_Overline	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Overline = 0x0305,         \/\/ U+0305 Combining Overline$/;"	e	enum:CharCode
U_Combining_Palatalized_Hook_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Palatalized_Hook_Below = 0x0321,     \/\/ U+0321 Combining Palatalized Hook Below$/;"	e	enum:CharCode
U_Combining_Plus_Sign_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Plus_Sign_Below = 0x031F,       \/\/ U+031F Combining Plus Sign Below$/;"	e	enum:CharCode
U_Combining_Retroflex_Hook_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Retroflex_Hook_Below = 0x0322,      \/\/ U+0322 Combining Retroflex Hook Below$/;"	e	enum:CharCode
U_Combining_Reversed_Comma_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Reversed_Comma_Above = 0x0314,      \/\/ U+0314 Combining Reversed Comma Above$/;"	e	enum:CharCode
U_Combining_Right_Arrowhead_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Right_Arrowhead_Above = 0x0350,      \/\/  U+0350 Combining Right Arrowhead Above$/;"	e	enum:CharCode
U_Combining_Right_Arrowhead_And_Up_Arrowhead_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Right_Arrowhead_And_Up_Arrowhead_Below = 0x0356, \/\/  U+0356 Combining Right Arro/;"	e	enum:CharCode
U_Combining_Right_Arrowhead_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Right_Arrowhead_Below = 0x0355,      \/\/  U+0355 Combining Right Arrowhead Below$/;"	e	enum:CharCode
U_Combining_Right_Half_Ring_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Right_Half_Ring_Above = 0x0357,      \/\/  U+0357 Combining Right Half Ring Above$/;"	e	enum:CharCode
U_Combining_Right_Half_Ring_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Right_Half_Ring_Below = 0x0339,      \/\/  U+0339 Combining Right Half Ring Below$/;"	e	enum:CharCode
U_Combining_Right_Tack_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Right_Tack_Below = 0x0319,       \/\/ U+0319 Combining Right Tack Below$/;"	e	enum:CharCode
U_Combining_Ring_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Ring_Above = 0x030A,        \/\/ U+030A Combining Ring Above$/;"	e	enum:CharCode
U_Combining_Ring_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Ring_Below = 0x0325,        \/\/ U+0325 Combining Ring Below$/;"	e	enum:CharCode
U_Combining_Seagull_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Seagull_Below = 0x033C,        \/\/  U+033C Combining Seagull Below$/;"	e	enum:CharCode
U_Combining_Short_Solidus_Overlay	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Short_Solidus_Overlay = 0x0337,      \/\/ U+0337 Combining Short Solidus Overlay$/;"	e	enum:CharCode
U_Combining_Short_Stroke_Overlay	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Short_Stroke_Overlay = 0x0335,      \/\/ U+0335 Combining Short Stroke Overlay$/;"	e	enum:CharCode
U_Combining_Square_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Square_Below = 0x033B,        \/\/  U+033B Combining Square Below$/;"	e	enum:CharCode
U_Combining_Tilde	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Tilde = 0x0303,          \/\/ U+0303 Combining Tilde$/;"	e	enum:CharCode
U_Combining_Tilde_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Tilde_Below = 0x0330,        \/\/ U+0330 Combining Tilde Below$/;"	e	enum:CharCode
U_Combining_Tilde_Overlay	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Tilde_Overlay = 0x0334,        \/\/ U+0334 Combining Tilde Overlay$/;"	e	enum:CharCode
U_Combining_Turned_Comma_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Turned_Comma_Above = 0x0312,      \/\/ U+0312 Combining Turned Comma Above$/;"	e	enum:CharCode
U_Combining_Up_Tack_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Up_Tack_Below = 0x031D,        \/\/ U+031D Combining Up Tack Below$/;"	e	enum:CharCode
U_Combining_Upwards_Arrow_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Upwards_Arrow_Below = 0x034E,      \/\/  U+034E Combining Upwards Arrow Below$/;"	e	enum:CharCode
U_Combining_Vertical_Line_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Vertical_Line_Above = 0x030D,      \/\/ U+030D Combining Vertical Line Above$/;"	e	enum:CharCode
U_Combining_Vertical_Line_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Vertical_Line_Below = 0x0329,      \/\/ U+0329 Combining Vertical Line Below$/;"	e	enum:CharCode
U_Combining_Vertical_Tilde	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Vertical_Tilde = 0x033E,       \/\/  U+033E Combining Vertical Tilde$/;"	e	enum:CharCode
U_Combining_X_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_X_Above = 0x033D,         \/\/  U+033D Combining X Above$/;"	e	enum:CharCode
U_Combining_X_Below	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_X_Below = 0x0353,         \/\/  U+0353 Combining X Below$/;"	e	enum:CharCode
U_Combining_Zigzag_Above	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Zigzag_Above = 0x035B,        \/\/  U+035B Combining Zigzag Above$/;"	e	enum:CharCode
U_DIAERESIS	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_DIAERESIS = 0x00A8,         \/\/ U+00A8 DIAERESIS$/;"	e	enum:CharCode
U_DOT_ABOVE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_DOT_ABOVE = 0x02D9,         \/\/ U+02D9 DOT ABOVE$/;"	e	enum:CharCode
U_DOUBLE_ACUTE_ACCENT	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_DOUBLE_ACUTE_ACCENT = 0x02DD,       \/\/ U+02DD DOUBLE ACUTE ACCENT$/;"	e	enum:CharCode
U_GRAVE_ACCENT	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GRAVE_ACCENT = 0x0060,        \/\/ U+0060 GRAVE ACCENT$/;"	e	enum:CharCode
U_GREEK_DASIA	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DASIA = 0x1FFE,         \/\/ U+1FFE GREEK DASIA$/;"	e	enum:CharCode
U_GREEK_DASIA_AND_OXIA	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DASIA_AND_OXIA = 0x1FDE,      \/\/ U+1FDE GREEK DASIA AND OXIA$/;"	e	enum:CharCode
U_GREEK_DASIA_AND_PERISPOMENI	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DASIA_AND_PERISPOMENI = 0x1FDF,     \/\/ U+1FDF GREEK DASIA AND PERISPOMENI$/;"	e	enum:CharCode
U_GREEK_DASIA_AND_VARIA	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DASIA_AND_VARIA = 0x1FDD,      \/\/ U+1FDD GREEK DASIA AND VARIA$/;"	e	enum:CharCode
U_GREEK_DIALYTIKA_AND_OXIA	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DIALYTIKA_AND_OXIA = 0x1FEE,     \/\/ U+1FEE GREEK DIALYTIKA AND OXIA$/;"	e	enum:CharCode
U_GREEK_DIALYTIKA_AND_PERISPOMENI	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DIALYTIKA_AND_PERISPOMENI = 0x1FC1,    \/\/ U+1FC1 GREEK DIALYTIKA AND PERISPOMENI$/;"	e	enum:CharCode
U_GREEK_DIALYTIKA_AND_VARIA	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DIALYTIKA_AND_VARIA = 0x1FED,     \/\/ U+1FED GREEK DIALYTIKA AND VARIA$/;"	e	enum:CharCode
U_GREEK_DIALYTIKA_TONOS	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DIALYTIKA_TONOS = 0x0385,      \/\/ U+0385 GREEK DIALYTIKA TONOS$/;"	e	enum:CharCode
U_GREEK_KORONIS	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_KORONIS = 0x1FBD,        \/\/ U+1FBD GREEK KORONIS$/;"	e	enum:CharCode
U_GREEK_LOWER_NUMERAL_SIGN	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_LOWER_NUMERAL_SIGN = 0x0375,     \/\/ U+0375 GREEK LOWER NUMERAL SIGN$/;"	e	enum:CharCode
U_GREEK_OXIA	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_OXIA = 0x1FFD,         \/\/ U+1FFD GREEK OXIA$/;"	e	enum:CharCode
U_GREEK_PERISPOMENI	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_PERISPOMENI = 0x1FC0,       \/\/ U+1FC0 GREEK PERISPOMENI$/;"	e	enum:CharCode
U_GREEK_PSILI	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_PSILI = 0x1FBF,         \/\/ U+1FBF GREEK PSILI$/;"	e	enum:CharCode
U_GREEK_PSILI_AND_OXIA	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_PSILI_AND_OXIA = 0x1FCE,      \/\/ U+1FCE GREEK PSILI AND OXIA$/;"	e	enum:CharCode
U_GREEK_PSILI_AND_PERISPOMENI	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_PSILI_AND_PERISPOMENI = 0x1FCF,     \/\/ U+1FCF GREEK PSILI AND PERISPOMENI$/;"	e	enum:CharCode
U_GREEK_PSILI_AND_VARIA	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_PSILI_AND_VARIA = 0x1FCD,      \/\/ U+1FCD GREEK PSILI AND VARIA$/;"	e	enum:CharCode
U_GREEK_TONOS	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_TONOS = 0x0384,         \/\/ U+0384 GREEK TONOS$/;"	e	enum:CharCode
U_GREEK_VARIA	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_VARIA = 0x1FEF,         \/\/ U+1FEF GREEK VARIA$/;"	e	enum:CharCode
U_MACRON	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MACRON = 0x00AF,          \/\/ U+00AF MACRON$/;"	e	enum:CharCode
U_MODIFIER_LETTER_BEGIN_HIGH_TONE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_BEGIN_HIGH_TONE = 0x02F9,    \/\/ U+02F9 MODIFIER LETTER BEGIN HIGH TONE$/;"	e	enum:CharCode
U_MODIFIER_LETTER_BEGIN_LOW_TONE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_BEGIN_LOW_TONE = 0x02FB,    \/\/ U+02FB MODIFIER LETTER BEGIN LOW TONE$/;"	e	enum:CharCode
U_MODIFIER_LETTER_CENTRED_LEFT_HALF_RING	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_CENTRED_LEFT_HALF_RING = 0x02D3,  \/\/ U+02D3 MODIFIER LETTER CENTRED LEFT H/;"	e	enum:CharCode
U_MODIFIER_LETTER_CENTRED_RIGHT_HALF_RING	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_CENTRED_RIGHT_HALF_RING = 0x02D2,  \/\/ U+02D2 MODIFIER LETTER CENTRED RIGHT/;"	e	enum:CharCode
U_MODIFIER_LETTER_CROSS_ACCENT	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_CROSS_ACCENT = 0x02DF,    \/\/ U+02DF MODIFIER LETTER CROSS ACCENT$/;"	e	enum:CharCode
U_MODIFIER_LETTER_DOWN_ARROWHEAD	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_DOWN_ARROWHEAD = 0x02C5,    \/\/ U+02C5 MODIFIER LETTER DOWN ARROWHEAD$/;"	e	enum:CharCode
U_MODIFIER_LETTER_DOWN_TACK	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_DOWN_TACK = 0x02D5,     \/\/ U+02D5 MODIFIER LETTER DOWN TACK$/;"	e	enum:CharCode
U_MODIFIER_LETTER_END_HIGH_TONE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_END_HIGH_TONE = 0x02FA,    \/\/ U+02FA MODIFIER LETTER END HIGH TONE$/;"	e	enum:CharCode
U_MODIFIER_LETTER_END_LOW_TONE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_END_LOW_TONE = 0x02FC,    \/\/ U+02FC MODIFIER LETTER END LOW TONE$/;"	e	enum:CharCode
U_MODIFIER_LETTER_EXTRA_HIGH_TONE_BAR	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_EXTRA_HIGH_TONE_BAR = 0x02E5,   \/\/ U+02E5 MODIFIER LETTER EXTRA-HIGH TONE /;"	e	enum:CharCode
U_MODIFIER_LETTER_EXTRA_LOW_TONE_BAR	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_EXTRA_LOW_TONE_BAR = 0x02E9,   \/\/ U+02E9 MODIFIER LETTER EXTRA-LOW TONE BA/;"	e	enum:CharCode
U_MODIFIER_LETTER_HIGH_TONE_BAR	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_HIGH_TONE_BAR = 0x02E6,    \/\/ U+02E6 MODIFIER LETTER HIGH TONE BAR$/;"	e	enum:CharCode
U_MODIFIER_LETTER_LEFT_ARROWHEAD	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LEFT_ARROWHEAD = 0x02C2,    \/\/ U+02C2 MODIFIER LETTER LEFT ARROWHEAD$/;"	e	enum:CharCode
U_MODIFIER_LETTER_LOW_DOWN_ARROWHEAD	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_DOWN_ARROWHEAD = 0x02EF,   \/\/ U+02EF MODIFIER LETTER LOW DOWN ARROWHEA/;"	e	enum:CharCode
U_MODIFIER_LETTER_LOW_LEFT_ARROW	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_LEFT_ARROW = 0x02FF,    \/\/ U+02FF MODIFIER LETTER LOW LEFT ARROW$/;"	e	enum:CharCode
U_MODIFIER_LETTER_LOW_LEFT_ARROWHEAD	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_LEFT_ARROWHEAD = 0x02F1,   \/\/ U+02F1 MODIFIER LETTER LOW LEFT ARROWHEA/;"	e	enum:CharCode
U_MODIFIER_LETTER_LOW_RIGHT_ARROWHEAD	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_RIGHT_ARROWHEAD = 0x02F2,   \/\/ U+02F2 MODIFIER LETTER LOW RIGHT ARROWH/;"	e	enum:CharCode
U_MODIFIER_LETTER_LOW_RING	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_RING = 0x02F3,     \/\/ U+02F3 MODIFIER LETTER LOW RING$/;"	e	enum:CharCode
U_MODIFIER_LETTER_LOW_TILDE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_TILDE = 0x02F7,     \/\/ U+02F7 MODIFIER LETTER LOW TILDE$/;"	e	enum:CharCode
U_MODIFIER_LETTER_LOW_TONE_BAR	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_TONE_BAR = 0x02E8,    \/\/ U+02E8 MODIFIER LETTER LOW TONE BAR$/;"	e	enum:CharCode
U_MODIFIER_LETTER_LOW_UP_ARROWHEAD	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_UP_ARROWHEAD = 0x02F0,   \/\/ U+02F0 MODIFIER LETTER LOW UP ARROWHEAD$/;"	e	enum:CharCode
U_MODIFIER_LETTER_MIDDLE_DOUBLE_ACUTE_ACCENT	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_MIDDLE_DOUBLE_ACUTE_ACCENT = 0x02F6, \/\/ U+02F6 MODIFIER LETTER MIDDLE DOUB/;"	e	enum:CharCode
U_MODIFIER_LETTER_MIDDLE_DOUBLE_GRAVE_ACCENT	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_MIDDLE_DOUBLE_GRAVE_ACCENT = 0x02F5, \/\/ U+02F5 MODIFIER LETTER MIDDLE DOUB/;"	e	enum:CharCode
U_MODIFIER_LETTER_MIDDLE_GRAVE_ACCENT	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_MIDDLE_GRAVE_ACCENT = 0x02F4,   \/\/ U+02F4 MODIFIER LETTER MIDDLE GRAVE ACC/;"	e	enum:CharCode
U_MODIFIER_LETTER_MID_TONE_BAR	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_MID_TONE_BAR = 0x02E7,    \/\/ U+02E7 MODIFIER LETTER MID TONE BAR$/;"	e	enum:CharCode
U_MODIFIER_LETTER_MINUS_SIGN	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_MINUS_SIGN = 0x02D7,     \/\/ U+02D7 MODIFIER LETTER MINUS SIGN$/;"	e	enum:CharCode
U_MODIFIER_LETTER_OPEN_SHELF	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_OPEN_SHELF = 0x02FE,     \/\/ U+02FE MODIFIER LETTER OPEN SHELF$/;"	e	enum:CharCode
U_MODIFIER_LETTER_PLUS_SIGN	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_PLUS_SIGN = 0x02D6,     \/\/ U+02D6 MODIFIER LETTER PLUS SIGN$/;"	e	enum:CharCode
U_MODIFIER_LETTER_RAISED_COLON	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_RAISED_COLON = 0x02F8,    \/\/ U+02F8 MODIFIER LETTER RAISED COLON$/;"	e	enum:CharCode
U_MODIFIER_LETTER_RHOTIC_HOOK	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_RHOTIC_HOOK = 0x02DE,     \/\/ U+02DE MODIFIER LETTER RHOTIC HOOK$/;"	e	enum:CharCode
U_MODIFIER_LETTER_RIGHT_ARROWHEAD	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_RIGHT_ARROWHEAD = 0x02C3,    \/\/ U+02C3 MODIFIER LETTER RIGHT ARROWHEAD$/;"	e	enum:CharCode
U_MODIFIER_LETTER_SHELF	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_SHELF = 0x02FD,      \/\/ U+02FD MODIFIER LETTER SHELF$/;"	e	enum:CharCode
U_MODIFIER_LETTER_UNASPIRATED	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_UNASPIRATED = 0x02ED,     \/\/ U+02ED MODIFIER LETTER UNASPIRATED$/;"	e	enum:CharCode
U_MODIFIER_LETTER_UP_ARROWHEAD	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_UP_ARROWHEAD = 0x02C4,    \/\/ U+02C4 MODIFIER LETTER UP ARROWHEAD$/;"	e	enum:CharCode
U_MODIFIER_LETTER_UP_TACK	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_UP_TACK = 0x02D4,      \/\/ U+02D4 MODIFIER LETTER UP TACK$/;"	e	enum:CharCode
U_MODIFIER_LETTER_YANG_DEPARTING_TONE_MARK	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_YANG_DEPARTING_TONE_MARK = 0x02EB, \/\/ U+02EB MODIFIER LETTER YANG DEPARTIN/;"	e	enum:CharCode
U_MODIFIER_LETTER_YIN_DEPARTING_TONE_MARK	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_YIN_DEPARTING_TONE_MARK = 0x02EA,  \/\/ U+02EA MODIFIER LETTER YIN DEPARTING/;"	e	enum:CharCode
U_OGONEK	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_OGONEK = 0x02DB,          \/\/ U+02DB OGONEK$/;"	e	enum:CharCode
U_OVERLINE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_OVERLINE = 0x203E, \/\/ Unicode Character 'OVERLINE'$/;"	e	enum:CharCode
U_RING_ABOVE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_RING_ABOVE = 0x02DA,         \/\/ U+02DA RING ABOVE$/;"	e	enum:CharCode
U_SMALL_TILDE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_SMALL_TILDE = 0x02DC,         \/\/ U+02DC SMALL TILDE$/;"	e	enum:CharCode
UltiSnips	.config/nvim/plugged/ultisnips/README.md	/^UltiSnips$/;"	c
UltiSnips#AddFiletypes	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#AddFiletypes(filetypes) abort$/;"	f
UltiSnips#AddSnippetWithPriority	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#AddSnippetWithPriority(trigger, value, description, options, filetype, prior/;"	f
UltiSnips#Anon	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#Anon(value, ...) abort$/;"	f
UltiSnips#CursorMoved	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#CursorMoved() abort$/;"	f
UltiSnips#Edit	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#Edit(bang, ...) abort$/;"	f
UltiSnips#ExpandSnippet	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#ExpandSnippet() abort$/;"	f
UltiSnips#ExpandSnippetOrJump	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#ExpandSnippetOrJump() abort$/;"	f
UltiSnips#FileTypeComplete	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#FileTypeComplete(arglead, cmdline, cursorpos) abort$/;"	f
UltiSnips#JumpBackwards	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#JumpBackwards() abort$/;"	f
UltiSnips#JumpForwards	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#JumpForwards() abort$/;"	f
UltiSnips#LeavingBuffer	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#LeavingBuffer() abort$/;"	f
UltiSnips#LeavingInsertMode	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#LeavingInsertMode() abort$/;"	f
UltiSnips#ListSnippets	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#ListSnippets() abort$/;"	f
UltiSnips#RefreshSnippets	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#RefreshSnippets() abort$/;"	f
UltiSnips#SaveLastVisualSelection	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#SaveLastVisualSelection() range abort$/;"	f
UltiSnips#SnippetsInCurrentScope	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#SnippetsInCurrentScope(...) abort$/;"	f
UltiSnips#TrackChange	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#TrackChange() abort$/;"	f
UltiSnips#map_keys#MapKeys	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^function! UltiSnips#map_keys#MapKeys() abort$/;"	f
UltiSnipsAddFiletypes	.config/nvim/plugged/ultisnips/plugin/UltiSnips.vim	/^command! -nargs=1 UltiSnipsAddFiletypes :call UltiSnips#AddFiletypes(<q-args>)$/;"	c
UltiSnipsEdit	.config/nvim/plugged/ultisnips/plugin/UltiSnips.vim	/^command! -bang -nargs=? -complete=customlist,UltiSnips#FileTypeComplete UltiSnipsEdit$/;"	c
UltiSnipsFileSource	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^class UltiSnipsFileSource(SnippetFileSource):$/;"	c
UltiSnipsSnippetDefinition	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/ulti_snips.py	/^class UltiSnipsSnippetDefinition(SnippetDefinition):$/;"	c
UltiSnips_AutoTrigger	.config/nvim/plugged/ultisnips/plugin/UltiSnips.vim	/^augroup UltiSnips_AutoTrigger$/;"	a
UltiSnips_Manager	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^UltiSnips_Manager = SnippetManager(  # pylint:disable=invalid-name$/;"	v
UmlautsBeforeTriggerAndCharsAfter	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class UmlautsBeforeTriggerAndCharsAfter(_UmlautsBase):$/;"	c
Underline	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Underline = 95,$/;"	e	enum:CharCode
Underline	.vim/plugged/fzf/src/tui/dummy.go	/^	Underline        = Attr(1 << 3)$/;"	c	package:tui
Underline	.vim/plugged/fzf/src/tui/tcell.go	/^	Underline      = Attr(tcell.AttrUnderline)$/;"	c	package:tui
Undo_ChangesInPlaceholder	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class Undo_ChangesInPlaceholder(_VimTest):$/;"	c
Undo_CompletelyUndoSnippet	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class Undo_CompletelyUndoSnippet(_VimTest):$/;"	c
Undo_RemoveEditInTabstop	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class Undo_RemoveEditInTabstop(_VimTest):$/;"	c
Undo_RemoveMultilineSnippet	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class Undo_RemoveMultilineSnippet(_VimTest):$/;"	c
Undo_RemoveOneSnippetByTime	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class Undo_RemoveOneSnippetByTime(_VimTest):$/;"	c
Undo_RemoveOneSnippetByTime2	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class Undo_RemoveOneSnippetByTime2(_VimTest):$/;"	c
Undo_RemoveWholeSnippet	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class Undo_RemoveWholeSnippet(_VimTest):$/;"	c
Unicode	.vim/plugged/fzf/src/options.go	/^	Unicode     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
UnknownVariable	.config/nvim/plugged/ultisnips/utils/get_tm_snippets.py	/^class UnknownVariable(Exception):$/;"	c
Unlock	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
UnsupportedVariableExpression	.config/nvim/plugged/ultisnips/utils/get_tm_snippets.py	/^class UnsupportedVariableExpression(Exception):$/;"	c
Unwatch	.vim/plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Unwatch(events ...EventType) {$/;"	f	struct:util.EventBox
Up	.vim/plugged/fzf/src/tui/tui.go	/^	Up$/;"	c	package:tui
UpdateCount	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateCount(cnt int, final bool, success bool) {$/;"	f	struct:fzf.Terminal
UpdateHeader	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateHeader(header []string) {$/;"	f	struct:fzf.Terminal
UpdateList	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateList(merger *Merger) {$/;"	f	struct:fzf.Terminal
UpdateModifiedSnippetWithoutCursorMove1	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class UpdateModifiedSnippetWithoutCursorMove1(_VimTest):$/;"	c
UpdateModifiedSnippetWithoutCursorMove2	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^class UpdateModifiedSnippetWithoutCursorMove2(_VimTest):$/;"	c
UpdateProgress	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateProgress(progress float32) {$/;"	f	struct:fzf.Terminal
Upgrading fzf	.vim/plugged/fzf/README.md	/^Upgrading fzf$/;"	s
Upload the log file	.config/nvim/plugged/defx.nvim/.github/ISSUE_TEMPLATE.md	/^## Upload the log file$/;"	s
Upload the log file	.config/nvim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^## Upload the log file$/;"	s
Upload the log file	.vim/plugged/denite.nvim/.github/ISSUE_TEMPLATE.md	/^## Upload the log file$/;"	s
Usage	.config/nvim/plugged/dsf.vim/README.md	/^## Usage$/;"	s
Usage	.config/nvim/plugged/fzf.vim/README.md	/^### Usage$/;"	S
Usage	.config/nvim/plugged/goyo.vim/README.md	/^Usage$/;"	s
Usage	.config/nvim/plugged/sideways.vim/README.markdown	/^## Usage$/;"	s
Usage	.config/nvim/plugged/switch.vim/README.md	/^## Usage$/;"	s
Usage	.config/nvim/plugged/vim-after-object/README.md	/^Usage$/;"	s
Usage	.config/nvim/plugged/vim-easyescape-plus/README.md	/^## Usage$/;"	s
Usage	.config/nvim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
Usage	.config/nvim/plugged/vim-indent-object/README.md	/^### Usage$/;"	S
Usage	.config/nvim/plugged/vim-textobj-rubyblock/README.md	/^Usage$/;"	c
Usage	.config/nvim/plugged/vim-tmux-navigator/README.md	/^Usage$/;"	s
Usage	.config/nvim/plugged/vista.vim/README.md	/^## Usage$/;"	s
Usage	.vim/plugged/fzf/README.md	/^Usage$/;"	s
Usage	.vim/plugged/nvim-yarp/README.md	/^## Usage$/;"	s
Usage Syntax	.vim/plugged/omnisharp-vim/installer/README.md	/^### Usage Syntax$/;"	S
Usage example for the base features	.config/nvim/plugged/vim-easymotion/README.md	/^Usage example for the base features$/;"	c
Use case	.vim/plugged/nvim-yarp/README.md	/^## Use case$/;"	s
UseLegacySdkResolver	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "UseLegacySdkResolver": true$/;"	b	object:MsBuild
UseTabs	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "UseTabs": false,$/;"	b	object:FormattingOptions
User	.vim/plugged/coc.nvim/src/types.ts	/^  User,$/;"	e	enum:ConfigurationTarget
User-config Options	.vim/plugged/papercolor-theme/README.md	/^## User-config Options$/;"	s
Using Homebrew or Linuxbrew	.vim/plugged/fzf/README.md	/^### Using Homebrew or Linuxbrew$/;"	S
Using Makefile	.vim/plugged/fzf/BUILD.md	/^### Using Makefile$/;"	S
Using [vim-plug](https://github.com/junegunn/vim-plug)	.config/nvim/plugged/fzf.vim/README.md	/^### Using [vim-plug](https:\/\/github.com\/junegunn\/vim-plug)$/;"	S
Using `go get`	.vim/plugged/fzf/BUILD.md	/^### Using `go get`$/;"	S
Using git	.vim/plugged/fzf/README.md	/^### Using git$/;"	S
Using the finder	.vim/plugged/fzf/README.md	/^#### Using the finder$/;"	t
Util1	.vim/plugged/vim-airline/t/util.vim	/^function! Util1()$/;"	f
Util2	.vim/plugged/vim-airline/t/util.vim	/^function! Util2()$/;"	f
Util3	.vim/plugged/vim-airline/t/util.vim	/^function! Util3(...)$/;"	f
UtilCtx	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^class UtilCtx(BaseCtx):$/;"	c
V	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  V = 86,$/;"	e	enum:CharCode
VERSION	.config/nvim/plugged/html5.vim/Makefile	/^VERSION=0.1$/;"	m
VERSION	.config/nvim/plugged/html5.vim/config.mk	/^VERSION=0.26$/;"	m
VERSION	.vim/plugged/fzf/Makefile	/^VERSION        := $(shell awk -F= '\/version =\/ {print $$2}' src\/constants.go | tr -d "\\" ")$/;"	m
VIMRUNTIME	.config/nvim/plugged/html5.vim/Makefile	/^VIMRUNTIME=~\/.vim$/;"	m
Variable	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^export class Variable extends TransformableMarker {$/;"	c
VariableName	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  VariableName,$/;"	e	enum:TokenType
VariableResolver	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^export interface VariableResolver {$/;"	i
Vendor Prefixes	.config/nvim/plugged/vim-css3-syntax/README.md	/^### Vendor Prefixes$/;"	S
Vendor Snippets	.config/nvim/plugged/vim-snippets/README.md	/^Vendor Snippets$/;"	s
Vendor Snippets	.vim/plugged/vim-snippets/README.md	/^Vendor Snippets$/;"	s
VerifyVimDict1	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^class VerifyVimDict1(_VimTest):$/;"	c
VerifyVimDict2	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^class VerifyVimDict2(_VimTest):$/;"	c
VerifyVimDict3	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^class VerifyVimDict3(_VimTest):$/;"	c
Version	.vim/plugged/fzf/src/options.go	/^	Version     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Version 0.1	.config/nvim/plugged/html5.vim/CHANGES.markdown	/^### Version 0.1$/;"	S
Version 0.2	.config/nvim/plugged/html5.vim/CHANGES.markdown	/^### Version 0.2$/;"	S
Version 0.25	.config/nvim/plugged/html5.vim/CHANGES.markdown	/^### Version 0.25$/;"	S
Version 0.26	.config/nvim/plugged/html5.vim/CHANGES.markdown	/^### Version 0.26$/;"	S
Version 0.27	.config/nvim/plugged/html5.vim/CHANGES.markdown	/^### Version 0.27$/;"	S
Version 0.27	.config/nvim/plugged/html5.vim/README.md	/^### Version 0.27$/;"	S
Versions / dialects / ..	.config/nvim/plugged/vim-snippets/README.md	/^Versions \/ dialects \/ ..$/;"	c
Versions / dialects / ..	.vim/plugged/vim-snippets/README.md	/^Versions \/ dialects \/ ..$/;"	c
View	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^class View(object):$/;"	c
Vim	.config/nvim/plugged/dsf.vim/spec/support/vim.rb	/^  module Vim$/;"	m	module:Support
Vim	.config/nvim/plugged/sideways.vim/spec/support/vim.rb	/^  module Vim$/;"	m	module:Support
Vim	.config/nvim/plugged/switch.vim/spec/support/vim.rb	/^  module Vim$/;"	m	module:Support
Vim	.config/nvim/plugged/tagalong.vim/spec/support/vim.rb	/^  module Vim$/;"	m	module:Support
Vim	.config/nvim/plugged/vim-tmux-navigator/README.md	/^### Vim$/;"	S
Vim	.config/nvim/plugged/vim-tmux-navigator/README.md	/^#### Vim$/;"	t
Vim -> Tmux doesn't work!	.config/nvim/plugged/vim-tmux-navigator/README.md	/^### Vim -> Tmux doesn't work!$/;"	S
Vim 8	.config/nvim/plugged/vista.vim/README.md	/^#### Vim 8$/;"	t
Vim 8.1 text properties	.vim/plugged/omnisharp-vim/README.md	/^#### Vim 8.1 text properties$/;"	t
Vim Tmux Navigator	.config/nvim/plugged/vim-tmux-navigator/README.md	/^Vim Tmux Navigator$/;"	c
Vim motion on speed!	.config/nvim/plugged/vim-easymotion/README.md	/^Vim motion on speed!$/;"	c
Vim package	.config/nvim/plugged/vim-css3-syntax/README.md	/^### Vim package$/;"	S
Vim plugin	.vim/plugged/fzf/README.md	/^Vim plugin$/;"	s
VimBuffer	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^class VimBuffer(object):$/;"	c
VimBufferProxy	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^class VimBufferProxy(_vim.VimBuffer):$/;"	c
VimCompleteItem	.vim/plugged/coc.nvim/src/types.ts	/^export interface VimCompleteItem {$/;"	i
VimHandler	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^class VimHandler(socketserver.BaseRequestHandler):$/;"	c
VimInterface	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^class VimInterface(TempFileManager):$/;"	c
VimInterfaceTmux	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^class VimInterfaceTmux(VimInterface):$/;"	c
VimInterfaceTmuxNeovim	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^class VimInterfaceTmuxNeovim(VimInterfaceTmux):$/;"	c
VimInterfaceWindows	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^class VimInterfaceWindows(VimInterface):$/;"	c
VimLCode	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_viml_code.py	/^class VimLCode(NoneditableTextObject):$/;"	c
VimLCodeToken	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^class VimLCodeToken(Token):$/;"	c
VimPosition	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^class VimPosition(Position):$/;"	c
VimSource	.vim/plugged/coc.nvim/src/model/source-vim.ts	/^export default class VimSource extends Source {$/;"	c
VimState	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^class VimState(object):$/;"	c
VimTestCase	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^class VimTestCase(unittest.TestCase, TempFileManager):$/;"	c
VimUtilCtx	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^class VimUtilCtx(BaseCtx):$/;"	c
VirtualEdit	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^class VirtualEdit(_VimTest):$/;"	c
Vista	.config/nvim/plugged/vista.vim/plugin/vista.vim	/^command! -bang -nargs=* -bar -complete=custom,vista#util#Complete Vista call vista#(<bang>0, <f-/;"	c
Vista.vim	.config/nvim/plugged/vista.vim/README.md	/^# Vista.vim$/;"	c
VistaBlink	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^    augroup VistaBlink$/;"	a
VistaCursor	.config/nvim/plugged/vista.vim/ftplugin/vista.vim	/^augroup VistaCursor$/;"	a
VistaCursor	.config/nvim/plugged/vista.vim/ftplugin/vista_kind.vim	/^augroup VistaCursor$/;"	a
VistaFloatingWin	.config/nvim/plugged/vista.vim/autoload/vista/floating.vim	/^  augroup VistaFloatingWin$/;"	a
VistaMOF	.config/nvim/plugged/vista.vim/autoload/vista/autocmd.vim	/^  augroup VistaMOF$/;"	a
VistaPopup	.config/nvim/plugged/vista.vim/autoload/vista/popup.vim	/^  augroup VistaPopup$/;"	a
Visual	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_visual.py	/^class Visual(NoneditableTextObject, TextObjectTransformation):$/;"	c
VisualContentPreserver	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^class VisualContentPreserver(object):$/;"	c
VisualToken	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^class VisualToken(Token):$/;"	c
VisualTransformationWithDefault_ExpandWithVisual	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class VisualTransformationWithDefault_ExpandWithVisual(_VimTest):$/;"	c
VisualTransformationWithDefault_ExpandWithoutVisual	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class VisualTransformationWithDefault_ExpandWithoutVisual(_VimTest):$/;"	c
VisualTransformation_InDefaultText_LineSelect_NoOverwrite	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class VisualTransformation_InDefaultText_LineSelect_NoOverwrite(_VimTest):$/;"	c
VisualTransformation_InDefaultText_LineSelect_Overwrite	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class VisualTransformation_InDefaultText_LineSelect_Overwrite(_VimTest):$/;"	c
VisualTransformation_LineSelect_Simple	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class VisualTransformation_LineSelect_Simple(_VimTest):$/;"	c
VisualTransformation_SelectOneWord	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class VisualTransformation_SelectOneWord(_VimTest):$/;"	c
VisualWithDefaultWithSlashes_ExpandWithoutVisual	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class VisualWithDefaultWithSlashes_ExpandWithoutVisual(_VimTest):$/;"	c
VisualWithDefault_ExpandWithVisual	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class VisualWithDefault_ExpandWithVisual(_VimTest):$/;"	c
VisualWithDefault_ExpandWithoutVisual	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class VisualWithDefault_ExpandWithoutVisual(_VimTest):$/;"	c
Visual_CrossOneLine	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_CrossOneLine(_VimTest):$/;"	c
Visual_ExpandTwice	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_ExpandTwice(_VimTest):$/;"	c
Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite(_VimTest):$/;"	c
Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite(_VimTest):$/;"	c
Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1(_VimTest):$/;"	c
Visual_InDefaultText_IndentSpacesToTabstop_Overwrite	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_IndentSpacesToTabstop_Overwrite(_VimTest):$/;"	c
Visual_InDefaultText_LineSelect_NoOverwrite	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_LineSelect_NoOverwrite(_VimTest):$/;"	c
Visual_InDefaultText_LineSelect_Overwrite	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_LineSelect_Overwrite(_VimTest):$/;"	c
Visual_InDefaultText_SelectOneWord	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_SelectOneWord(_VimTest):$/;"	c
Visual_InDefaultText_SelectOneWord_NoOverwrite	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_SelectOneWord_NoOverwrite(_VimTest):$/;"	c
Visual_LineSelect_CheckIndentSimple	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_LineSelect_CheckIndentSimple(_VimTest):$/;"	c
Visual_LineSelect_CheckIndentTwice	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_LineSelect_CheckIndentTwice(_VimTest):$/;"	c
Visual_LineSelect_CheckIndentWithTS_NoOverwrite	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_LineSelect_CheckIndentWithTS_NoOverwrite(_VimTest):$/;"	c
Visual_LineSelect_DedentLine	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_LineSelect_DedentLine(_VimTest):$/;"	c
Visual_LineSelect_Simple	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_LineSelect_Simple(_VimTest):$/;"	c
Visual_LineSelect_WithTabStop	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_LineSelect_WithTabStop(_VimTest):$/;"	c
Visual_NoVisualSelection_Ignore	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_NoVisualSelection_Ignore(_VimTest):$/;"	c
Visual_SelectOneWord	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWord(_VimTest):$/;"	c
Visual_SelectOneWordExclusive	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWordExclusive(_VimTest):$/;"	c
Visual_SelectOneWordInclusive	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWordInclusive(_VimTest):$/;"	c
Visual_SelectOneWordWithTabstop_TillEndOfLine	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWordWithTabstop_TillEndOfLine(_VimTest):$/;"	c
Visual_SelectOneWord_Inword	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWord_Inword(_VimTest):$/;"	c
Visual_SelectOneWord_ProblemAfterTab	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWord_ProblemAfterTab(_VimTest):$/;"	c
Visual_SelectOneWord_TillEndOfLine	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWord_TillEndOfLine(_VimTest):$/;"	c
Visual_SelectOneWord_TwiceVisual	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWord_TwiceVisual(_VimTest):$/;"	c
Vundle (https://github.com/gmarik/vundle)	.config/nvim/plugged/vim-easymotion/README.md	/^### Vundle (https:\/\/github.com\/gmarik\/vundle)$/;"	S
W	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  W = 87,$/;"	e	enum:CharCode
WGET_OPT	.config/nvim/plugged/html5.vim/Makefile	/^WGET_OPT=-c -nv$/;"	m
WINDOW_TYPE	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^WINDOW_TYPE = type(vim.current.window)$/;"	v
WINDOW_TYPE_ID	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^WINDOW_TYPE_ID = neovim_rpc_server_api_info.API_INFO['types']['Window']['id']$/;"	v
WIN_ESCAPES	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    WIN_ESCAPES = ['+', '^', '%', '~', '[', ']', '<', '>', '(', ')']$/;"	v	class:VimInterfaceWindows
WIN_REPLACES	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    WIN_REPLACES = [$/;"	v	class:VimInterfaceWindows
Wait	.vim/plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Wait(callback func(*Events)) {$/;"	f	struct:util.EventBox
WaitFor	.vim/plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) WaitFor(event EventType) {$/;"	f	struct:util.EventBox
Warning	.vim/plugged/coc.nvim/src/types.ts	/^  Warning,$/;"	e	enum:MessageLevel
Watch	.vim/plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Watch(events ...EventType) {$/;"	f	struct:util.EventBox
WatchResponse	.vim/plugged/coc.nvim/src/watchman.ts	/^export interface WatchResponse {$/;"	C
Watchman	.vim/plugged/coc.nvim/src/watchman.ts	/^export default class Watchman {$/;"	c
Watchman	.vim/plugged/coc.nvim/src/workspace.ts	/^    let promise = watchmanPath ? Watchman.createClient(watchmanPath, this.root, channel) : Promi/;"	v
Ways to Join	.vim/plugged/coc.nvim/CONTRIBUTING.md	/^### Ways to Join$/;"	S
Web	.vim/plugged/coc.nvim/src/util/platform.ts	/^  Web,$/;"	e	enum:Platform
WebsocketServer	.vim/plugged/ghost-text.vim/python3/websocket_server.py	/^class WebsocketServer:$/;"	c
What	.vim/plugged/vim-closer/README.md	/^## What$/;"	s
What can you do with UltiSnips?	.config/nvim/plugged/ultisnips/README.md	/^What can you do with UltiSnips?$/;"	s
What?	.config/nvim/plugged/vim-gutentags/README.md	/^## What?$/;"	s
Whats	.config/nvim/plugged/emmet-vim/docs/index.html	/^				<h2 class="maintitle">Whats<\/h2>$/;"	i
Where did the name come from?	.vim/plugged/vim-airline/README.md	/^# Where did the name come from?$/;"	c
Why can't I test and submit solutions?	.vim/plugged/leetcode.vim/README.md	/^### Why can't I test and submit solutions?$/;"	S
Why you should use fzf on Vim	.config/nvim/plugged/fzf.vim/README.md	/^Why you should use fzf on Vim$/;"	s
Why?	.config/nvim/plugged/coc.nvim/Readme.md	/^## Why?$/;"	s
Why?	.config/nvim/plugged/vim-gutentags/README.md	/^## Why?$/;"	s
Why?	.vim/plugged/coc.nvim/Readme.md	/^## Why?$/;"	s
Width	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Width() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Width	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Width() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Width	.vim/plugged/fzf/src/tui/tui.go	/^	Width() int$/;"	n	interface:tui.Window	typeref:typename:int
WillSaveFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class WillSaveFeature extends DocumentNotifiactions<WillSaveTextDocumentParams, TextDocumentWill/;"	c
WillSaveUntilHandler	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^export default class WillSaveUntilHandler {$/;"	c
WillSaveWaitUntilFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class WillSaveWaitUntilFeature implements DynamicFeature<TextDocumentRegistrationOptions> {$/;"	c
Window	.vim/plugged/fzf/src/tui/tui.go	/^type Window interface {$/;"	i	package:tui
WindowConfig	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^export interface WindowConfig {$/;"	i
Windows	.vim/plugged/coc.nvim/src/util/platform.ts	/^  Windows = 1,$/;"	e	enum:OperatingSystem
Windows	.vim/plugged/coc.nvim/src/util/platform.ts	/^  Windows$/;"	e	enum:Platform
Windows	.vim/plugged/fzf/README.md	/^### Windows$/;"	S
Windows Subsystem for Linux (WSL)	.vim/plugged/omnisharp-vim/README.md	/^#### Windows Subsystem for Linux (WSL)$/;"	t
Windows: Cygwin	.vim/plugged/omnisharp-vim/README.md	/^#### Windows: Cygwin$/;"	t
With Vundle	.config/nvim/plugged/vim-ruby/INSTALL.markdown	/^With Vundle$/;"	s
With pathogen.vim	.config/nvim/plugged/vim-ruby/INSTALL.markdown	/^With pathogen.vim$/;"	s
With patience	.config/nvim/plugged/vim-ruby/INSTALL.markdown	/^With patience$/;"	s
WithNth	.vim/plugged/fzf/src/options.go	/^	WithNth     []Range$/;"	m	struct:fzf.Options	typeref:typename:[]Range
Within line motion	.config/nvim/plugged/vim-easymotion/README.md	/^### Within line motion$/;"	S
Worker	.vim/plugged/coc.nvim/src/list/worker.ts	/^export default class Worker {$/;"	c
Workspace	.vim/plugged/coc.nvim/src/types.ts	/^  Workspace$/;"	e	enum:ConfigurationTarget
Workspace	.vim/plugged/coc.nvim/src/workspace.ts	/^export class Workspace implements IWorkspace {$/;"	c
WorkspaceConfiguration	.vim/plugged/coc.nvim/src/types.ts	/^export interface WorkspaceConfiguration {$/;"	i
WorkspaceFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^abstract class WorkspaceFeature<T> implements DynamicFeature<T> {$/;"	c
WorkspaceFolderWorkspaceMiddleware	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^export interface WorkspaceFolderWorkspaceMiddleware {$/;"	i
WorkspaceFoldersFeature	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^export class WorkspaceFoldersFeature implements DynamicFeature<undefined> {$/;"	c
WorkspaceSymbolFeature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^class WorkspaceSymbolFeature extends WorkspaceFeature<TextDocumentRegistrationOptions> {$/;"	c
WorkspaceSymbolManager	.vim/plugged/coc.nvim/src/provider/workspaceSymbolsManager.ts	/^export default class WorkspaceSymbolManager extends Manager<WorkspaceSymbolProvider> implements /;"	c
WorkspaceSymbolProvider	.vim/plugged/coc.nvim/src/provider/index.ts	/^export interface WorkspaceSymbolProvider {$/;"	i
WrappingKeepStatementsOnSingleLine	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "WrappingKeepStatementsOnSingleLine": true,$/;"	b	object:FormattingOptions
WrappingPreserveSingleLine	.vim/plugged/omnisharp-vim/test/example/omnisharp.json	/^        "WrappingPreserveSingleLine": true,$/;"	b	object:FormattingOptions
Writing	.config/nvim/plugged/vim-gutentags/CONTRIBUTING.md	/^## Writing$/;"	s
X	.config/nvim/autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
X	.config/nvim/plugged/vim-ruby/spec/indent/blocks_spec.rb	/^      module X$/;"	m
X	.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
X	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  X = 88,$/;"	e	enum:CharCode
X	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) X() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
X	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) X() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
X	.vim/plugged/fzf/src/tui/tui.go	/^	X      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
X	.vim/plugged/fzf/src/tui/tui.go	/^	X() int$/;"	n	interface:tui.Window	typeref:typename:int
XML	.config/nvim/plugged/tagalong.vim/spec/plugin/filetype_support_spec.rb	/^  describe "XML" do$/;"	d
XTabReopen	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    com! XTabReopen call airline#extensions#tabline#xtabline#reopen_last_tab()$/;"	c
Y	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Y = 89,$/;"	e	enum:CharCode
Y	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Y() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Y	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Y() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Y	.vim/plugged/fzf/src/tui/tui.go	/^	Y      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
Y	.vim/plugged/fzf/src/tui/tui.go	/^	Y() int$/;"	n	interface:tui.Window	typeref:typename:int
Yet Another Remote Plugin Framework for Neovim	.vim/plugged/nvim-yarp/README.md	/^# Yet Another Remote Plugin Framework for Neovim$/;"	c
Z	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  Z = 90,$/;"	e	enum:CharCode
[	.config/nvim/configs/keymap.vim	/^inoremap [ []<left>$/;"	m
[0.10] - 2018-12-15	.vim/plugged/vim-airline/CHANGELOG.md	/^## [0.10] - 2018-12-15$/;"	s
[0.1] - 2013-07-17	.vim/plugged/vim-airline/CHANGELOG.md	/^## [0.1] - 2013-07-17$/;"	s
[0.2] - 2013-07-28	.vim/plugged/vim-airline/CHANGELOG.md	/^## [0.2] - 2013-07-28$/;"	s
[0.3] - 2013-08-12	.vim/plugged/vim-airline/CHANGELOG.md	/^## [0.3] - 2013-08-12$/;"	s
[0.4] - 2013-08-26	.vim/plugged/vim-airline/CHANGELOG.md	/^## [0.4] - 2013-08-26$/;"	s
[0.5] - 2013-09-13	.vim/plugged/vim-airline/CHANGELOG.md	/^## [0.5] - 2013-09-13$/;"	s
[0.6] - 2013-10-08	.vim/plugged/vim-airline/CHANGELOG.md	/^## [0.6] - 2013-10-08$/;"	s
[0.7] - 2014-12-10	.vim/plugged/vim-airline/CHANGELOG.md	/^## [0.7] - 2014-12-10$/;"	s
[0.8] - 2016-03-09	.vim/plugged/vim-airline/CHANGELOG.md	/^## [0.8] - 2016-03-09$/;"	s
[0.9] - 2018-01-15	.vim/plugged/vim-airline/CHANGELOG.md	/^## [0.9] - 2018-01-15$/;"	s
[LanguageClient][57]	.vim/plugged/vim-airline/README.md	/^#### [LanguageClient][57]$/;"	t
[License](LICENSE)	.vim/plugged/fzf/README-VIM.md	/^[License](LICENSE)$/;"	s
[License](LICENSE)	.vim/plugged/fzf/README.md	/^[License](LICENSE)$/;"	s
[M	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'b','n')<CR/;"	m
[M	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'b','v')<CR/;"	m
[PLEASE READ THIS] Why can't I test the problem/submit the problem/list the problems?	.vim/plugged/leetcode.vim/README.md	/^### [PLEASE READ THIS] Why can't I test the problem\/submit the problem\/list the problems?$/;"	S
[Unreleased]	.vim/plugged/vim-airline/CHANGELOG.md	/^## [Unreleased]$/;"	s
[Unreleased](https://github.com/morhetz/gruvbox/tree/HEAD)	.config/nvim/plugged/gruvbox/CHANGELOG.md	/^## [Unreleased](https:\/\/github.com\/morhetz\/gruvbox\/tree\/HEAD)$/;"	s
[[	.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
[[	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['ru/;"	m
[[	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['ru/;"	m
[[	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
[]	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass']/;"	m
[]	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass']/;"	m
[c	.config/nvim/configs/plugins.vim	/^nmap <silent> [c <Plug>(coc-diagnostic-prev)$/;"	m
[csv.vim][28]	.vim/plugged/vim-airline/README.md	/^#### [csv.vim][28]$/;"	t
[ctrlp.vim][10]	.vim/plugged/vim-airline/README.md	/^#### [ctrlp.vim][10]$/;"	t
[ctrlspace][38]	.vim/plugged/vim-airline/README.md	/^#### [ctrlspace][38]$/;"	t
[denite.nvim][51]	.vim/plugged/vim-airline/README.md	/^#### [denite.nvim][51]$/;"	t
[lightline.vim](https://github.com/itchyny/lightline.vim)	.config/nvim/plugged/vista.vim/README.md	/^#### [lightline.vim](https:\/\/github.com\/itchyny\/lightline.vim)$/;"	t
[localsearch][54]	.vim/plugged/vim-airline/README.md	/^#### [localsearch][54]$/;"	t
[m	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'b','n')<CR/;"	m
[m	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'b','v')<CR/;"	m
[promptline][36]	.vim/plugged/vim-airline/README.md	/^#### [promptline][36]$/;"	t
[syntastic][5]	.vim/plugged/vim-airline/README.md	/^#### [syntastic][5]$/;"	t
[tagbar][19]	.vim/plugged/vim-airline/README.md	/^#### [tagbar][19]$/;"	t
[tmuxline][35]	.vim/plugged/vim-airline/README.md	/^#### [tmuxline][35]$/;"	t
[unite.vim][9]	.vim/plugged/vim-airline/README.md	/^#### [unite.vim][9]$/;"	t
[v0.0.8](https://github.com/morhetz/gruvbox/tree/v0.0.8) (2012-12-08)	.config/nvim/plugged/gruvbox/CHANGELOG.md	/^## [v0.0.8](https:\/\/github.com\/morhetz\/gruvbox\/tree\/v0.0.8) (2012-12-08)$/;"	s
[v1.3.5](https://github.com/morhetz/gruvbox/tree/v1.3.5) (2014-03-19)	.config/nvim/plugged/gruvbox/CHANGELOG.md	/^## [v1.3.5](https:\/\/github.com\/morhetz\/gruvbox\/tree\/v1.3.5) (2014-03-19)$/;"	s
[vimagit][50]	.vim/plugged/vim-airline/README.md	/^#### [vimagit][50]$/;"	t
[vimtex][53]	.vim/plugged/vim-airline/README.md	/^#### [vimtex][53]$/;"	t
[virtualenv][31]	.vim/plugged/vim-airline/README.md	/^#### [virtualenv][31]$/;"	t
[xkb-switch][48]/[xkb-layout][49]	.vim/plugged/vim-airline/README.md	/^#### [xkb-switch][48]\/[xkb-layout][49]$/;"	t
\x16\aS	.vim/sessions/foo.vim	/^imap S <Plug>ISurround$/;"	m
\x16\as	.vim/sessions/foo.vim	/^imap s <Plug>Isurround$/;"	m
\x16\r	.vim/sessions/foo.vim	/^imap $/;"	m
\x16\x13	.vim/sessions/foo.vim	/^imap  <Plug>Isurround$/;"	m
\x21	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> !$/;"	m
]M	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'','n')<CR>$/;"	m
]M	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'','v')<CR>$/;"	m
][	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass']/;"	m
][	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass']/;"	m
]]	.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
]]	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['ru/;"	m
]]	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['ru/;"	m
]]	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
]c	.config/nvim/configs/plugins.vim	/^nmap <silent> ]c <Plug>(coc-diagnostic-next)$/;"	m
]m	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  nnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'','n')<CR>$/;"	m
]m	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  xnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'','v')<CR>$/;"	m
^.+\\\\.tsx?$	.config/nvim/plugged/coc.nvim/package.json	/^      "^.+\\\\.tsx?$": "ts-jest"$/;"	s	object:jest.transform
^.+\\\\.tsx?$	.vim/plugged/coc.nvim/package.json	/^      "^.+\\\\.tsx?$": "ts-jest"$/;"	s	object:jest.transform
^[_a-zA-Z]+$	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "^[_a-zA-Z]+$": {$/;"	o	object:properties.languageserver.patternProperties
^[_a-zA-Z]+$	.vim/plugged/coc.nvim/data/schema.json	/^        "^[_a-zA-Z]+$": {$/;"	o	object:properties.languageserver.patternProperties
_	.config/nvim/plugged/vim-operator-user/t/ex-command.vim	/^    map <buffer> _  <Plug>(operator-substitute)$/;"	m
_	.config/nvim/plugged/vim-operator-user/t/register-designations.vim	/^map _  <Plug>(operator-echo)$/;"	m
_$	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	_$ = window.$;$/;"	v
_10	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const _10 = new Placeholder(10)$/;"	C
_2	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const _2 = new Placeholder(2)$/;"	C
_AddFuncBase	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^class _AddFuncBase(_VimTest):$/;"	c
_AnonBase	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^class _AnonBase(_VimTest):$/;"	c
_Base	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/base.py	/^from denite.base.filter import Base as _Base$/;"	x
_Base	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/base.py	/^from denite.base.kind import Base as _Base$/;"	x
_Base	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/base.py	/^from denite.base.source import Base as _Base$/;"	x
_Base	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class _Base(object):$/;"	c
_Base	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/base.py	/^from denite.base.filter import Base as _Base$/;"	x
_Base	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/base.py	/^from denite.base.kind import Base as _Base$/;"	x
_Base	.vim/plugged/denite.nvim/rplugin/python3/denite/source/base.py	/^from denite.base.source import Base as _Base$/;"	x
_BaseGuessing	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class _BaseGuessing(object):$/;"	c
_CONDITIONAL	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^_CONDITIONAL = re.compile(r"\\(\\?(\\d+):", re.DOTALL)$/;"	v
_CleverReplace	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^class _CleverReplace(object):$/;"	c
_DOLLAR	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^_DOLLAR = re.compile(r"\\$(\\d+)", re.DOTALL)$/;"	v
_ES_Base	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^class _ES_Base(_VimTest):$/;"	c
_ExpandTabs	.config/nvim/plugged/ultisnips/test/test_Format.py	/^class _ExpandTabs(_VimTest):$/;"	c
_FormatoptionsBase	.config/nvim/plugged/ultisnips/test/test_Format.py	/^class _FormatoptionsBase(_VimTest):$/;"	c
_INDENT	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    _INDENT = re.compile(r"^[ \\t]*")$/;"	v	class:SnippetDefinition
_LONG_CASEFOLDINGS	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^_LONG_CASEFOLDINGS = re.compile(r"\\\\([UL].*?)\\\\E", re.DOTALL)$/;"	v
_ListAllSnippets	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^class _ListAllSnippets(_VimTest):$/;"	c
_MPBase	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^class _MPBase(object):$/;"	c
_MultiLineDefault	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class _MultiLineDefault(_VimTest):$/;"	c
_MultiWord_SnippetOptions_ExpandWordSnippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class _MultiWord_SnippetOptions_ExpandWordSnippets(_VimTest):$/;"	c
_MultipleMatches	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^class _MultipleMatches(_VimTest):$/;"	c
_No_Tab_Expand	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class _No_Tab_Expand(_VimTest):$/;"	c
_ONE_CHAR_CASE_SWITCH	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^_ONE_CHAR_CASE_SWITCH = re.compile(r"\\\\([ul].)", re.DOTALL)$/;"	v
_OS_Base	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^class _OS_Base(_VimTest):$/;"	c
_Parent	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^class _Parent(object):$/;"	c
_Parent	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^class _Parent(object):$/;"	c
_ParseSnippets_MultiWord	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class _ParseSnippets_MultiWord(_VimTest):$/;"	c
_ParseSnippets_MultiWord_RE	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^class _ParseSnippets_MultiWord_RE(_VimTest):$/;"	c
_Placeholder	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^_Placeholder = namedtuple('_FrozenPlaceholder', ['current_text', 'start', 'end'])$/;"	v
_REPLACE_NON_WS	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_visual.py	/^_REPLACE_NON_WS = re.compile(r"[^ \\t]")$/;"	v
_Regex_Self	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class _Regex_Self(_VimTest):$/;"	c
_SelectModeMappings	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^class _SelectModeMappings(_VimTest):$/;"	c
_SimpleExpands	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^class _SimpleExpands(_VimTest):$/;"	c
_SnippetOptions_ExpandWordSnippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class _SnippetOptions_ExpandWordSnippets(_VimTest):$/;"	c
_SnippetUtilCursor	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^class _SnippetUtilCursor(object):$/;"	c
_TABS	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    _TABS = re.compile(r"^\\t*")$/;"	v	class:SnippetDefinition
_TOKEN_TO_TEXTOBJECT	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/snipmate.py	/^_TOKEN_TO_TEXTOBJECT = {$/;"	v
_TOKEN_TO_TEXTOBJECT	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/ulti_snips.py	/^_TOKEN_TO_TEXTOBJECT = {$/;"	v
_TabExpand_RealWorld	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^class _TabExpand_RealWorld(object):$/;"	c
_Tabs	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^class _Tabs(object):$/;"	c
_TextIterator	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^class _TextIterator(object):$/;"	c
_UNESCAPE	.config/nvim/plugged/ultisnips/utils/get_tm_snippets.py	/^_UNESCAPE = re.compile(ur'&\\w+?;', re.UNICODE)$/;"	v
_UmlautsBase	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^class _UmlautsBase(_VimTest):$/;"	c
_VimCursor	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_snippet_instance.py	/^class _VimCursor(NoneditableTextObject):$/;"	c
_VimTest	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Autocommands.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Completion.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Format.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Plugin.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VimTest	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x
_VisualContent	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^_VisualContent = namedtuple('_VisualContent', ['mode', 'text'])$/;"	v
__ALLOWED_TOKENS	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/snipmate.py	/^__ALLOWED_TOKENS = [$/;"	v
__ALLOWED_TOKENS	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/ulti_snips.py	/^__ALLOWED_TOKENS = [$/;"	v
__ALLOWED_TOKENS_IN_TABSTOPS	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/snipmate.py	/^__ALLOWED_TOKENS_IN_TABSTOPS = [$/;"	v
__TEST__	.config/nvim/plugged/coc.nvim/package.json	/^      "__TEST__": true$/;"	b	object:jest.globals
__TEST__	.vim/plugged/coc.nvim/package.json	/^      "__TEST__": true$/;"	b	object:jest.globals
__WHITESPACE_SPLIT	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^__WHITESPACE_SPLIT = re.compile(r"\\s")$/;"	v
__add__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __add__(self, pos):$/;"	m	class:Position
__add__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def __add__(self, value):$/;"	m	class:SnippetUtil
__all__	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^__all__ = [name for name, fxn in locals().items()$/;"	v
__call__	.vim/plugged/ghost-text.vim/python3/test/test_websocket_handler.py	/^    async def __call__(self, message):$/;"	m	class:GhostTextWebsocketConnectionHandler
__call__	.vim/plugged/ghost-text.vim/python3/test/test_websocket_handler.py	/^    async def __call__(self, message):$/;"	m	class:GhostTextWebsocketHandler
__delitem__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def __delitem__(self, key):$/;"	m	class:VimBufferProxy
__dirname	.vim/plugged/coc.nvim/webpack.config.js	/^    __dirname: false$/;"	p	class:module.exports.node
__eq__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __eq__(self, other):$/;"	m	class:Position
__filename	.vim/plugged/coc.nvim/webpack.config.js	/^    __filename: false,$/;"	p	class:module.exports.node
__fsel	.vim/plugged/fzf/shell/key-bindings.zsh	/^__fsel() {$/;"	f
__fzf_cd__	.vim/plugged/fzf/shell/key-bindings.bash	/^__fzf_cd__() {$/;"	f
__fzf_generic_path_completion	.vim/plugged/fzf/shell/completion.bash	/^__fzf_generic_path_completion() {$/;"	f
__fzf_generic_path_completion	.vim/plugged/fzf/shell/completion.zsh	/^__fzf_generic_path_completion() {$/;"	f
__fzf_history__	.vim/plugged/fzf/shell/key-bindings.bash	/^__fzf_history__() ($/;"	f
__fzf_orig_completion_filter	.vim/plugged/fzf/shell/completion.bash	/^__fzf_orig_completion_filter() {$/;"	f
__fzf_select__	.vim/plugged/fzf/shell/key-bindings.bash	/^__fzf_select__() {$/;"	f
__fzf_select_tmux__	.vim/plugged/fzf/shell/key-bindings.bash	/^__fzf_select_tmux__() {$/;"	f
__fzf_use_tmux__	.vim/plugged/fzf/shell/key-bindings.bash	/^__fzf_use_tmux__() {$/;"	f
__fzf_use_tmux__	.vim/plugged/fzf/shell/key-bindings.zsh	/^__fzf_use_tmux__() {$/;"	f
__fzfcmd	.vim/plugged/fzf/shell/key-bindings.bash	/^__fzfcmd() {$/;"	f
__fzfcmd	.vim/plugged/fzf/shell/key-bindings.zsh	/^__fzfcmd() {$/;"	f
__fzfcmd_complete	.vim/plugged/fzf/shell/completion.bash	/^__fzfcmd_complete() {$/;"	f
__fzfcmd_complete	.vim/plugged/fzf/shell/completion.zsh	/^__fzfcmd_complete() {$/;"	f
__getattr__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def __getattr__(self, name):$/;"	m	class:FuncNamespace
__getattr__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def __getattr__(self, name):$/;"	m	class:Proxy
__getattr__	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def __getattr__(self, name):$/;"	m	class:FuncNamespace
__getattr__	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def __getattr__(self, name):$/;"	m	class:Proxy
__getitem__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def __getitem__(self, key):$/;"	m	class:ContainerProxy
__getitem__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^    def __getitem__(self, idx):$/;"	m	class:VimBuffer
__getitem__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def __getitem__(self, key):$/;"	m	class:VimBufferProxy
__getitem__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __getitem__(self, index):$/;"	m	class:Position
__getitem__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def __getitem__(self, index):$/;"	m	class:_SnippetUtilCursor
__getitem__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def __getitem__(self, no):$/;"	m	class:_Tabs
__getitem__	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def __getitem__(self, key):$/;"	m	class:ContainerProxy
__getslice__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^    def __getslice__(self, i, j):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
__getslice__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def __getslice__(self, i, j):$/;"	m	class:VimBufferProxy
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/__init__.py	/^        def __init__(self, vim: vim.Nvim) -> None:$/;"	m	class:DefxHandlers
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/column.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Base
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Base
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/source.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Base
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/clipboard.py	/^    def __init__(self,$/;"	m	class:Clipboard
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/filename.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Column
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/icon.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Column
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/indent.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Column
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/mark.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Column
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/size.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Column
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/time.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Column
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/type.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Column
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/defx.py	/^    def __init__(self, vim: Nvim, context: Context,$/;"	m	class:Defx
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Kind
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/rplugin.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Rplugin
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/source/file.py	/^    def __init__(self, vim: Nvim) -> None:$/;"	m	class:Source
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def __init__(self, vim: Nvim, index: int) -> None:$/;"	m	class:View
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/denite/source/defx/history.py	/^    def __init__(self, vim: Nvim):$/;"	m	class:Source
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/denite/source/defx/session.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.config/nvim/plugged/defx.nvim/rplugin/python3/denite/source/defx/session.py	/^    def __init__(self, vim: Nvim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/autoload/denite/_main.py	/^    def __init__(self, handler):$/;"	m	class:RedirectStream
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^        def __init__(self, vim):$/;"	m	class:DeniteHandlers
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/aprocess.py	/^    def __init__(self, plugin):$/;"	m	class:Process
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/filter.py	/^    def __init__(self, vim):$/;"	m	class:Base
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def __init__(self, vim):$/;"	m	class:Base
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def __init__(self, vim):$/;"	m	class:Base
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def __init__(self, vim):$/;"	m	class:Child
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/context.py	/^    def __init__(self, vim):$/;"	m	class:Context
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/base.py	/^    def __init__(self, vim):$/;"	m	class:Base
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/abbr_word.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/relative_abbr.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/relative_word.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/cpsm.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/fuzzy.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/hide_hidden_files.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/ignore_current_buffer.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/ignore_globs.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/project_files.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/regexp.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/substring.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/rank.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/reverse.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/word.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/base.py	/^    def __init__(self, vim):$/;"	m	class:Base
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/command.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/directory.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/source.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/word.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def __init__(self, vim):$/;"	m	class:_Parent
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/process.py	/^    def __init__(self, commands, context, cwd):$/;"	m	class:Process
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^    def __init__(self, vim):$/;"	m	class:Rplugin
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def __init__(self, host, port, commands, context, timeout):$/;"	m	class:Socket
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/base.py	/^    def __init__(self, vim):$/;"	m	class:Base
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/directory_rec.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/__init__.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/point.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/filetype.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/help.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^    def __init__(self,  vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/menu.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/outline.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/output.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/register.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/source.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/spell.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def __init__(self, vim):$/;"	m	class:Default
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def __init__(self, component):$/;"	m	class:Proxy
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def __init__(self, vim):$/;"	m	class:FuncNamespace
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def __init__(self, vim):$/;"	m	class:Neovim
__init__	.config/nvim/plugged/denite.nvim/rplugin/python3/deoplete/source/denite.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def __init__(self, snippets_stack, vstate):$/;"	m	class:VimBufferProxy
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/indent_util.py	/^    def __init__(self):$/;"	m	class:IndentUtil
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __init__(self, line, col):$/;"	m	class:Position
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def __init__(self, cursor):$/;"	m	class:_SnippetUtilCursor
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def __init__(self, priority, trigger, value, description,$/;"	m	class:SnippetDefinition
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/snipmate.py	/^    def __init__(self, trigger, value, description, location):$/;"	m	class:SnipMateSnippetDefinition
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def __init__(self, gen, indent):$/;"	m	class:Token
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def __init__(self, text, offset):$/;"	m	class:_TextIterator
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_base.py	/^    def __init__(self):$/;"	m	class:SnippetSource
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_snippet_dictionary.py	/^    def __init__(self):$/;"	m	class:SnippetDictionary
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/_base.py	/^    def __init__(self):$/;"	m	class:SnippetFileSource
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/_base.py	/^    def __init__(self, filename, line_index, msg):$/;"	m	class:SnippetSyntaxError
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def __init__(self, expand_trigger, forward_trigger, backward_trigger):$/;"	m	class:SnippetManager
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text.py	/^    def __init__(self, text):$/;"	m	class:LineIterator
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:EditableTextObject
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def __init__(self, parent, token_or_start, end=None,$/;"	m	class:TextObject
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_mirror.py	/^    def __init__(self, parent, tabstop, token):$/;"	m	class:Mirror
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:SnippetUtilForAction
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def __init__(self, initial_indent, vmode, vtext, context, parent):$/;"	m	class:SnippetUtil
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def __init__(self, parent, token):$/;"	m	class:PythonCode
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def __init__(self, to):$/;"	m	class:_Tabs
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_shell_code.py	/^    def __init__(self, parent, token):$/;"	m	class:ShellCode
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_snippet_instance.py	/^    def __init__(self, parent):$/;"	m	class:_VimCursor
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_snippet_instance.py	/^    def __init__(self, snippet, parent, initial_text,$/;"	m	class:SnippetInstance
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_tabstop.py	/^    def __init__(self, parent, token, start=None, end=None):$/;"	m	class:TabStop
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^    def __init__(self, expression):$/;"	m	class:_CleverReplace
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^    def __init__(self, parent, ts, token):$/;"	m	class:Transformation
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^    def __init__(self, token):$/;"	m	class:TextObjectTransformation
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_viml_code.py	/^    def __init__(self, parent, token):$/;"	m	class:VimLCode
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_visual.py	/^    def __init__(self, parent, token):$/;"	m	class:Visual
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def __init__(self):$/;"	m	class:VimPosition
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def __init__(self):$/;"	m	class:VimState
__init__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def __init__(self):$/;"	m	class:VisualContentPreserver
__init__	.config/nvim/plugged/ultisnips/rplugin/python3/deoplete/sources/ultisnips.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def __init__(self):$/;"	m	class:VimInterfaceWindows
__init__	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def __init__(self, name=''):$/;"	m	class:TempFileManager
__init__	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def __init__(self, vim_executable, name):$/;"	m	class:VimInterface
__init__	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def __init__(self, vim_executable, session):$/;"	m	class:VimInterfaceTmux
__init__	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def __init__(self, vim_executable, session):$/;"	m	class:VimInterfaceTmuxNeovim
__init__	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:VimTestCase
__init__	.vim/plugged/denite.nvim/autoload/denite/_main.py	/^    def __init__(self, handler):$/;"	m	class:RedirectStream
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^        def __init__(self, vim):$/;"	m	class:DeniteHandlers
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/aprocess.py	/^    def __init__(self, plugin):$/;"	m	class:Process
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/base/filter.py	/^    def __init__(self, vim):$/;"	m	class:Base
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def __init__(self, vim):$/;"	m	class:Base
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def __init__(self, vim):$/;"	m	class:Base
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def __init__(self, vim):$/;"	m	class:Child
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/context.py	/^    def __init__(self, vim):$/;"	m	class:Context
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/base.py	/^    def __init__(self, vim):$/;"	m	class:Base
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/abbr_word.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/relative_abbr.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/relative_word.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/cpsm.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/fuzzy.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/hide_hidden_files.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/ignore_current_buffer.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/ignore_globs.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/project_files.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/regexp.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/substring.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/rank.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/reverse.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/word.py	/^    def __init__(self, vim):$/;"	m	class:Filter
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/base.py	/^    def __init__(self, vim):$/;"	m	class:Base
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/command.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/directory.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/source.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/word.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def __init__(self, vim):$/;"	m	class:_Parent
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/process.py	/^    def __init__(self, commands, context, cwd):$/;"	m	class:Process
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^    def __init__(self, vim):$/;"	m	class:Rplugin
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def __init__(self, host, port, commands, context, timeout):$/;"	m	class:Socket
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/base.py	/^    def __init__(self, vim):$/;"	m	class:Base
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/directory_rec.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/__init__.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/point.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/filetype.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/help.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^    def __init__(self,  vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/menu.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/outline.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/output.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/register.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/source.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/spell.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def __init__(self, vim):$/;"	m	class:Default
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def __init__(self, component):$/;"	m	class:Proxy
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def __init__(self, vim):$/;"	m	class:FuncNamespace
__init__	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def __init__(self, vim):$/;"	m	class:Neovim
__init__	.vim/plugged/denite.nvim/rplugin/python3/deoplete/source/denite.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/ghost-text.vim/python3/exchanger.py	/^    def __init__(self):$/;"	m	class:Exchanger
__init__	.vim/plugged/ghost-text.vim/python3/http_handler.py	/^    def __init__(self, websocket_port):$/;"	m	class:GhostTextHttpHandlerFactory
__init__	.vim/plugged/ghost-text.vim/python3/server_thread.py	/^    def __init__(self):$/;"	m	class:ServerThread
__init__	.vim/plugged/ghost-text.vim/python3/tcp_server.py	/^    def __init__(self, loop, handler_factory):$/;"	m	class:TcpServer
__init__	.vim/plugged/ghost-text.vim/python3/test/test_websocket_handler.py	/^    def __init__(self):$/;"	m	class:GhostTextWebsocketConnectionHandler
__init__	.vim/plugged/ghost-text.vim/python3/test/test_websocket_handler.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:GhostTextWebsocketHandler
__init__	.vim/plugged/ghost-text.vim/python3/vim_channel_handler.py	/^    def __init__(self, channel_rx_coro):$/;"	m	class:Channel
__init__	.vim/plugged/ghost-text.vim/python3/vim_websocket_handler.py	/^    def __init__(self, rx_coro):$/;"	m	class:Manager
__init__	.vim/plugged/ghost-text.vim/python3/websocket_server.py	/^    def __init__(self, loop, ws_manager):$/;"	m	class:WebsocketServer
__init__	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^    def __init__($/;"	m	class:UtilCtx
__init__	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^    def __init__(self):$/;"	m	class:BaseCtx
__init__	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^    def __init__(self, vim):$/;"	m	class:VimUtilCtx
__init__	.vim/plugged/omnisharp-vim/rplugin/python3/deoplete/sources/deoplete_OmniSharp.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def __init__(self, sock):$/;"	m	class:SocketToStream
__iter__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def __iter__(self):$/;"	m	class:_TextIterator
__iter__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text.py	/^    def __iter__(self):$/;"	m	class:LineIterator
__le__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __le__(self, other):$/;"	m	class:Position
__le__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def __le__(self, other):$/;"	m	class:TextObject
__len__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^    def __len__(self):$/;"	m	class:VimBuffer
__len__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def __len__(self):$/;"	m	class:VimBufferProxy
__len__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def __len__(self):$/;"	m	class:_SnippetUtilCursor
__len__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_snippet_dictionary.py	/^    def __len__(self):$/;"	m	class:SnippetDictionary
__lshift__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def __lshift__(self, other):$/;"	m	class:SnippetUtil
__lt__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __lt__(self, other):$/;"	m	class:Position
__lt__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def __lt__(self, other):$/;"	m	class:TextObject
__ne__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __ne__(self, other):$/;"	m	class:Position
__next__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def __next__(self):$/;"	m	class:_TextIterator
__next__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text.py	/^    def __next__(self):$/;"	m	class:LineIterator
__non_webpack_require__	.vim/plugged/coc.nvim/src/util/factory.ts	/^const requireFunc = typeof __webpack_require__ === "function" ? __non_webpack_require__ : requir/;"	C
__non_webpack_require__	.vim/plugged/coc.nvim/src/util/factory.ts	/^declare var __non_webpack_require__: any$/;"	v
__non_webpack_require__	.vim/plugged/coc.nvim/src/workspace.ts	/^const requireFunc = typeof __webpack_require__ === "function" ? __non_webpack_require__ : requir/;"	C
__non_webpack_require__	.vim/plugged/coc.nvim/src/workspace.ts	/^declare var __non_webpack_require__: any$/;"	v
__repr__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __repr__(self):$/;"	m	class:Position
__repr__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def __repr__(self):$/;"	m	class:SnippetDefinition
__repr__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def __repr__(self):$/;"	m	class:EndOfTextToken
__repr__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def __repr__(self):$/;"	m	class:EscapeCharToken
__repr__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def __repr__(self):$/;"	m	class:MirrorToken
__repr__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def __repr__(self):$/;"	m	class:PythonCodeToken
__repr__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def __repr__(self):$/;"	m	class:ShellCodeToken
__repr__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def __repr__(self):$/;"	m	class:TabStopToken
__repr__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def __repr__(self):$/;"	m	class:TransformationToken
__repr__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def __repr__(self):$/;"	m	class:VimLCodeToken
__repr__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def __repr__(self):$/;"	m	class:VisualToken
__repr__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def __repr__(self):$/;"	m	class:TextObject
__repr__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_tabstop.py	/^    def __repr__(self):$/;"	m	class:TabStop
__rshift__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def __rshift__(self, other):$/;"	m	class:SnippetUtil
__setitem__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def __setitem__(self, key, value):$/;"	m	class:ContainerProxy
__setitem__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^    def __setitem__(self, idx, text):$/;"	m	class:VimBuffer
__setitem__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def __setitem__(self, key, value):$/;"	m	class:VimBufferProxy
__setitem__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def __setitem__(self, index, value):$/;"	m	class:_SnippetUtilCursor
__setitem__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def __setitem__(self, no, value):$/;"	m	class:_Tabs
__setitem__	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def __setitem__(self, key, value):$/;"	m	class:ContainerProxy
__setslice__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^    def __setslice__(self, i, j, text):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
__setslice__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def __setslice__(self, i, j, text):$/;"	m	class:VimBufferProxy
__slots__	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    __slots__ = ['vim']$/;"	v	class:FuncNamespace	file:
__slots__	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    __slots__ = ['vim']$/;"	v	class:FuncNamespace	file:
__str__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def __str__(self):$/;"	m	class:_SnippetUtilCursor
__sub__	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __sub__(self, pos):$/;"	m	class:Position
__webpack_require__	.config/nvim/plugged/coc.nvim/build/index.js	/^\/******\/ 	function __webpack_require__(moduleId) {$/;"	f
__webpack_require__	.vim/plugged/coc.nvim/build/index.js	/^\/******\/ 	function __webpack_require__(moduleId) {$/;"	f
__webpack_require__	.vim/plugged/coc.nvim/src/configuration/util.ts	/^declare var __webpack_require__: any$/;"	v
__webpack_require__	.vim/plugged/coc.nvim/src/util/factory.ts	/^declare var __webpack_require__: any$/;"	v
__webpack_require__	.vim/plugged/coc.nvim/src/util/processes.ts	/^declare var __webpack_require__: any$/;"	v
__webpack_require__	.vim/plugged/coc.nvim/src/workspace.ts	/^declare var __webpack_require__: any$/;"	v
_action_context	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _action_context(self):$/;"	m	class:SnippetManager
_action_switch	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def _action_switch(self, context, fallback):$/;"	m	class:Kind
_action_switch	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def _action_switch(self, context, fallback):$/;"	m	class:Kind
_action_table	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^_action_table: typing.Dict[str, ActionTable] = {}$/;"	v
_action_table	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^_action_table: typing.Dict[str, ActionTable] = {}$/;"	v
_add_child	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def _add_child(self, child):$/;"	m	class:EditableTextObject
_add_previewed_buffer	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _add_previewed_buffer(self, bufnr):$/;"	m	class:Kind
_add_previewed_buffer	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _add_previewed_buffer(self, bufnr):$/;"	m	class:Kind
_add_session	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _add_session(view: View, defx: Defx, context: Context) -> None:$/;"	f
_appendOutput	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _appendOutput(type: string, message: string, data?: any): void {$/;"	m	class:BaseLanguageClient
_apply_change	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def _apply_change(self, change):$/;"	m	class:VimBufferProxy
_ask_snippets	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^def _ask_snippets(snippets):$/;"	f
_ask_user	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^def _ask_user(a, formatted):$/;"	f
_async_gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^    def _async_gather_candidates(self, context, timeout):$/;"	m	class:Source
_async_gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def _async_gather_candidates(self, context, timeout):$/;"	m	class:Source
_async_gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^    def _async_gather_candidates(self, context, timeout):$/;"	m	class:Source
_async_gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def _async_gather_candidates(self, context, timeout):$/;"	m	class:Source
_auto_action	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _auto_action(denite, params):$/;"	f
_auto_action	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _auto_action(denite, params):$/;"	f
_before_test	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    def _before_test(self):$/;"	m	class:NonUnicodeDataInUnnamedRegister
_before_test	.config/nvim/plugged/ultisnips/test/test_Plugin.py	/^    def _before_test(self):$/;"	m	class:Plugin_SuperTab_SimpleTest
_before_test	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    def _before_test(self):$/;"	m	class:TestLangmapWithUtf8_ExpectCorrectResult
_before_test	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    def _before_test(self):$/;"	m	class:TestNonEmptyLangmapWithSemi_ExpectCorrectResult
_before_test	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    def _before_test(self):$/;"	m	class:_AddFuncBase
_before_test	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    def _before_test(self):$/;"	m	class:VimTestCase
_break_code_lines	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _break_code_lines(s):$/;"	f
_break_paragraph_lines	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _break_paragraph_lines(s):$/;"	f
_buf_idx	.vim/plugged/ghost-text.vim/python3/vim_websocket_handler.py	/^_buf_idx = 0$/;"	v
_bufnr	.vim/plugged/coc.nvim/src/list/ui.ts	/^  private _bufnr = 0$/;"	p	class:ListUI
_cache	.vim/plugged/coc.nvim/src/util/factory.ts	/^  _cache: { [file: string]: any }$/;"	p	interface:IModule
_cache	.vim/plugged/fzf/src/pattern.go	/^	_cache        ChunkCache$/;"	v	package:fzf	typeref:typename:ChunkCache
_calc_end	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^def _calc_end(text, start):$/;"	f
_call	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _call(view: View, defx: Defx, context: Context) -> None:$/;"	f
_call_matchers	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _call_matchers(self, ctx, matchers):$/;"	m	class:Child
_call_matchers	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _call_matchers(self, ctx, matchers):$/;"	m	class:Child
_candidate	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^def _candidate(result, path):$/;"	f
_candidate	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^def _candidate(result, path):$/;"	f
_capabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _capabilities: ServerCapabilities &$/;"	p	class:BaseLanguageClient
_cd	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _cd(view: View, defx: Defx, context: Context) -> None:$/;"	f
_changeData	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _changeData: Map<string, DidChangeTextDocumentData> = new Map<string, DidChangeTextDoc/;"	p	class:DidChangeTextDocumentFeature
_change_path	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _change_path(denite, params):$/;"	f
_change_path	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _change_path(denite, params):$/;"	f
_change_sorters	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _change_sorters(denite, params):$/;"	f
_change_sorters	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _change_sorters(denite, params):$/;"	f
_change_vim_cwd	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _change_vim_cwd(view: View, defx: Defx, context: Context) -> None:$/;"	f
_channel_id_new	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^def _channel_id_new():$/;"	f
_check_do_option	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _check_do_option(self):$/;"	m	class:Default
_check_do_option	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _check_do_option(self):$/;"	m	class:Default
_check_if_still_inside_snippet	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _check_if_still_inside_snippet(self):$/;"	m	class:SnippetManager
_check_move_option	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _check_move_option(self):$/;"	m	class:Default
_check_move_option	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _check_move_option(self):$/;"	m	class:Default
_check_redraw	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _check_redraw(view: View, defx: Defx, context: Context) -> None:$/;"	f
_check_result	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _check_result(submission_id):$/;"	f
_check_session	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _check_session(self, index: int, path: str) -> None:$/;"	m	class:View
_check_version	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def _check_version(self):$/;"	m	class:VimInterfaceTmux
_checkhost	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/point.py	/^def _checkhost(path):$/;"	f
_checkhost	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/point.py	/^def _checkhost(path):$/;"	f
_child_has_moved	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def _child_has_moved(self, idx, pivot, diff):$/;"	m	class:EditableTextObject
_children	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  protected _children: Marker[] = []$/;"	p	class:Marker
_chomp	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_shell_code.py	/^def _chomp(string):$/;"	f
_choose_action	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _choose_action(denite, params):$/;"	f
_choose_action	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _choose_action(denite, params):$/;"	f
_cleanup	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _cleanup(self):$/;"	m	class:Default
_cleanup	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _cleanup(self):$/;"	m	class:Default
_clear_select_all	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _clear_select_all(view: View, defx: Defx, context: Context) -> None:$/;"	f
_client	.vim/plugged/coc.nvim/src/language-client/configuration.ts	/^  constructor(private _client: BaseLanguageClient) { }$/;"	p	class:ConfigurationFeature
_client	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  constructor(private _client: LanguageClient, private _setting: string) {$/;"	p	class:SettingMonitor
_clientOptions	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _clientOptions: ResolvedClientOptions$/;"	p	class:BaseLanguageClient
_close_current_window	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _close_current_window(self):$/;"	m	class:Default
_close_current_window	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _close_current_window(self):$/;"	m	class:Default
_close_tree	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _close_tree(view: View, defx: Defx, context: Context) -> None:$/;"	f
_colorToAttribute	.vim/plugged/fzf/src/tui/tcell.go	/^	_colorToAttribute = []tcell.Color{$/;"	v	package:tui
_commands	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _commands: Map<string, Disposable[]> = new Map<string, Disposable[]>()$/;"	p	class:ExecuteCommandFeature
_compile	.vim/plugged/coc.nvim/src/util/factory.ts	/^  _compile: () => void$/;"	p	interface:IModule
_configuration	.vim/plugged/coc.nvim/src/configuration/index.ts	/^  private _configuration: Configuration$/;"	p	class:Configurations
_connect_stdin	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def _connect_stdin(self, stdin):$/;"	m	class:ASyncParent
_connect_stdin	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def _connect_stdin(self, stdin):$/;"	m	class:ASyncParent
_connectionPromise	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _connectionPromise: Thenable<IConnection> | undefined$/;"	p	class:BaseLanguageClient
_consolidateConfiguration	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^  private _consolidateConfiguration: ConfigurationModel$/;"	p	class:Configuration
_content	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^  private _content = ''$/;"	p	class:BufferChannel
_contents	.vim/plugged/coc.nvim/src/configuration/model.ts	/^  constructor(private _contents: any = {}) { }$/;"	p	class:ConfigurationModel
_context_match	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def _context_match(self, visual_content):$/;"	m	class:SnippetDefinition
_convert	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^    def _convert(self, buffer_attr, rjust, ljustnm, rjustft):$/;"	m	class:Source
_convert	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def _convert(self, history, size):$/;"	m	class:Source
_convert	.vim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^    def _convert(self, buffer_attr, rjust, ljustnm, rjustft):$/;"	m	class:Source
_convert	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def _convert(self, history, size):$/;"	m	class:Source
_copy	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _copy(view: View, defx: Defx, context: Context) -> None:$/;"	f
_create_file	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    def _create_file(self, file_path, content):$/;"	m	class:VimTestCase
_create_transformations	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/ulti_snips.py	/^def _create_transformations(all_tokens, seen_ts):$/;"	f
_currId	.vim/plugged/coc.nvim/src/snippets/session.ts	/^  private _currId = 0$/;"	p	class:SnippetSession
_current_snippet	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _current_snippet(self):$/;"	m	class:SnippetManager
_current_snippet_is_done	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _current_snippet_is_done(self):$/;"	m	class:SnippetManager
_cursor_moved	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _cursor_moved(self):$/;"	m	class:SnippetManager
_cursor_pos	.vim/plugged/ghost-text.vim/python3/exchanger.py	/^def _cursor_pos(text, offset):$/;"	f
_defaultConfiguration	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^    private _defaultConfiguration: ConfigurationModel,$/;"	p	class:Configuration
_defx_async_action	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/__init__.py	/^    def _defx_async_action(args: typing.List[typing.Any]) -> None:$/;"	f
_defx_do_action	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/__init__.py	/^    def _defx_do_action(args: typing.List[typing.Any]) -> None:$/;"	f
_defx_get_candidate	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/__init__.py	/^    def _defx_get_candidate(args: typing.List[$/;"	f
_defx_init	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/__init__.py	/^    def _defx_init() -> None:$/;"	f
_defx_start	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/__init__.py	/^    def _defx_start(args: typing.List[typing.Any]) -> None:$/;"	f
_del_child	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def _del_child(self, child):$/;"	m	class:EditableTextObject
_delete_session	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _delete_session(view: View, defx: Defx, context: Context) -> None:$/;"	f
_denite_do_action	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    def _denite_do_action(args):$/;"	f
_denite_do_action	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    def _denite_do_action(args):$/;"	f
_denite_do_async_map	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    def _denite_do_async_map(args):$/;"	f
_denite_do_async_map	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    def _denite_do_async_map(args):$/;"	f
_denite_do_map	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    def _denite_do_map(args):$/;"	f
_denite_do_map	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    def _denite_do_map(args):$/;"	f
_denite_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    def _denite_init():$/;"	f
_denite_init	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    def _denite_init():$/;"	f
_denite_start	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    def _denite_start(args):$/;"	f
_denite_start	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    def _denite_start(args):$/;"	f
_diagnostics	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _diagnostics: DiagnosticCollection | undefined$/;"	p	class:BaseLanguageClient
_disable_edits	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def _disable_edits(self):$/;"	m	class:VimBufferProxy
_disabled	.vim/plugged/coc.nvim/src/model/source.ts	/^  private _disabled = false$/;"	p	class:Source
_disposeOutputChannel	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _disposeOutputChannel: boolean$/;"	p	class:BaseLanguageClient
_disposed	.vim/plugged/coc.nvim/src/watchman.ts	/^  private _disposed = false$/;"	p	class:Watchman
_do_action	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _do_action(denite, params):$/;"	f
_do_action	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _do_action(denite, params):$/;"	f
_do_command	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _do_command(self, command):$/;"	m	class:Default
_do_command	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _do_command(self, command):$/;"	m	class:Default
_do_edit	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def _do_edit(self, cmd, ctab=None):$/;"	m	class:EditableTextObject
_do_gather	.vim/plugged/omnisharp-vim/rplugin/python3/deoplete/sources/deoplete_OmniSharp.py	/^    def _do_gather(self, context):$/;"	m	class:Source
_do_immediately	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _do_immediately(self):$/;"	m	class:Default
_do_immediately	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _do_immediately(self):$/;"	m	class:Default
_do_parse	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_base.py	/^    def _do_parse(parent, text, allowed_tokens):$/;"	f	function:tokenize_snippet_text	file:
_do_previous_action	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _do_previous_action(denite, params):$/;"	f
_do_previous_action	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _do_previous_action(denite, params):$/;"	f
_do_print	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/debug.py	/^    def _do_print(text_object, indent=''):$/;"	f	function:echo_to_hierarchy	file:
_do_snippet	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _do_snippet(self, snippet, before):$/;"	m	class:SnippetManager
_drop	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _drop(view: View, defx: Defx, context: Context) -> None:$/;"	f
_echoerr	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _echoerr(s):$/;"	f
_editable_children	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def _editable_children(self):$/;"	m	class:EditableTextObject
_enable_edits	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def _enable_edits(self):$/;"	m	class:VimBufferProxy
_enabled	.vim/plugged/coc.nvim/src/handler/colors.ts	/^  private _enabled = true$/;"	p	class:Colors
_errorItems	.vim/plugged/coc.nvim/src/configuration/index.ts	/^  private _errorItems: ErrorItem[] = []$/;"	p	class:Configurations
_eval_code	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def _eval_code(self, code, additional_locals={}):$/;"	m	class:SnippetDefinition
_ex	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^def _ex(vim, word):$/;"	f
_ex	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^def _ex(vim, word):$/;"	f
_execute	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/command.py	/^    def _execute(self, context, command, is_pause):$/;"	m	class:Kind
_execute	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/command.py	/^    def _execute(self, context, command, is_pause):$/;"	m	class:Kind
_execute_action	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def _execute_action($/;"	m	class:SnippetDefinition
_execute_command	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _execute_command(view: View, defx: Defx, context: Context) -> None:$/;"	f
_execute_commands	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _execute_commands(self, commands: typing.List[str]) -> None:$/;"	m	class:View
_execute_system	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _execute_system(view: View, defx: Defx, context: Context) -> None:$/;"	f
_extension	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/sort.py	/^def _extension($/;"	f
_extensions	.vim/plugged/coc.nvim/src/util/factory.ts	/^  _extensions: {}$/;"	p	interface:IModule
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_AnonBase
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Autocommands.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:Autocommands
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:SimpleExpandNewLineAndBackspae_ExpectCorrectResult
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:ShiftWidthZero
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:VirtualEdit
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:FoldingEnabled_SnippetWithFold_ExpectNoFolding
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PerlSyntaxFold
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:ProperIndenting_AutoIndentAndNewline_ECR
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_ExpandTabs
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_FormatoptionsBase
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PythonCode_IndentEtSw
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PythonCode_IndentEtSwOffset
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PythonCode_IndentNoetSwTs
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PythonCode_OptExists
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:CursorMovement_BS_InEditMode
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Plugin.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:Plugin_SuperTab_SimpleTest
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_ES_Base
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_OS_Base
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_SelectModeMappings
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:snipMate_Disabled
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_ET
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_ET_Leading_Spaces
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_ET_SW
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_ET_SW_TS
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_No_TS
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_RealWorld
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:AddNewSnippetSource
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:TestNonEmptyLangmap_ExpectCorrectResult
_extra_vim_config	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:Visual_SelectOneWordExclusive
_extra_vim_config	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:VimTestCase
_fileEventDelayer	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _fileEventDelayer: Delayer<void>$/;"	p	class:BaseLanguageClient
_fileEvents	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _fileEvents: FileEvent[]$/;"	p	class:BaseLanguageClient
_file_to_edit	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _file_to_edit(self, requested_ft, bang):$/;"	m	class:SnippetManager
_filename	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/sort.py	/^def _filename($/;"	f
_filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _filter(denite, params):$/;"	f
_filter	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _filter(denite, params):$/;"	f
_filter_async	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _filter_async(denite, params):$/;"	f
_filter_async	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _filter_async(denite, params):$/;"	f
_filter_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _filter_candidates(self, context):$/;"	m	class:Child
_filter_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def _filter_candidates(self, histories):$/;"	m	class:Source
_filter_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _filter_candidates(self, context):$/;"	m	class:Child
_filter_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def _filter_candidates(self, histories):$/;"	m	class:Source
_filter_source_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _filter_source_candidates(self, ctx, source):$/;"	m	class:Child
_filter_source_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _filter_source_candidates(self, ctx, source):$/;"	m	class:Child
_find_all_snippet_directories	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^def _find_all_snippet_directories():$/;"	f
_find_closing_brace	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^def _find_closing_brace(string, start_pos):$/;"	f
_find_recursive	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_snippet_instance.py	/^        def _find_recursive(obj):$/;"	f	member:SnippetInstance.update_textobjects	file:
_fixParent	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      ; (function _fixParent(children: Marker[], parent: Marker): void {$/;"	f
_folderConfigurations	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let { _folderConfigurations } = this$/;"	v
_forceDebug	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  private _forceDebug: boolean$/;"	p	class:LanguageClient
_fzf_compgen_dir	.vim/plugged/fzf/shell/completion.bash	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_dir	.vim/plugged/fzf/shell/completion.zsh	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_path	.vim/plugged/fzf/shell/completion.bash	/^  _fzf_compgen_path() {$/;"	f
_fzf_compgen_path	.vim/plugged/fzf/shell/completion.zsh	/^  _fzf_compgen_path() {$/;"	f
_fzf_complete	.vim/plugged/fzf/shell/completion.bash	/^_fzf_complete() {$/;"	f
_fzf_complete	.vim/plugged/fzf/shell/completion.zsh	/^_fzf_complete() {$/;"	f
_fzf_complete_export	.vim/plugged/fzf/shell/completion.bash	/^_fzf_complete_export() {$/;"	f
_fzf_complete_export	.vim/plugged/fzf/shell/completion.zsh	/^_fzf_complete_export() {$/;"	f
_fzf_complete_kill	.vim/plugged/fzf/shell/completion.bash	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_ssh	.vim/plugged/fzf/shell/completion.bash	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_ssh	.vim/plugged/fzf/shell/completion.zsh	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_telnet	.vim/plugged/fzf/shell/completion.bash	/^_fzf_complete_telnet() {$/;"	f
_fzf_complete_telnet	.vim/plugged/fzf/shell/completion.zsh	/^_fzf_complete_telnet() {$/;"	f
_fzf_complete_unalias	.vim/plugged/fzf/shell/completion.bash	/^_fzf_complete_unalias() {$/;"	f
_fzf_complete_unalias	.vim/plugged/fzf/shell/completion.zsh	/^_fzf_complete_unalias() {$/;"	f
_fzf_complete_unset	.vim/plugged/fzf/shell/completion.bash	/^_fzf_complete_unset() {$/;"	f
_fzf_complete_unset	.vim/plugged/fzf/shell/completion.zsh	/^_fzf_complete_unset() {$/;"	f
_fzf_defc	.vim/plugged/fzf/shell/completion.bash	/^_fzf_defc() {$/;"	f
_fzf_dir_completion	.vim/plugged/fzf/shell/completion.bash	/^_fzf_dir_completion() {$/;"	f
_fzf_dir_completion	.vim/plugged/fzf/shell/completion.zsh	/^_fzf_dir_completion() {$/;"	f
_fzf_feed_fifo	.vim/plugged/fzf/shell/completion.zsh	/^_fzf_feed_fifo() ($/;"	f
_fzf_file_completion	.vim/plugged/fzf/shell/completion.bash	/^_fzf_file_completion() {$/;"	f
_fzf_handle_dynamic_completion	.vim/plugged/fzf/shell/completion.bash	/^_fzf_handle_dynamic_completion() {$/;"	f
_fzf_opts_completion	.vim/plugged/fzf/shell/completion.bash	/^_fzf_opts_completion() {$/;"	f
_fzf_path_completion	.vim/plugged/fzf/shell/completion.bash	/^_fzf_path_completion() {$/;"	f
_fzf_path_completion	.vim/plugged/fzf/shell/completion.zsh	/^_fzf_path_completion() {$/;"	f
_fzf_statusline	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^  augroup _fzf_statusline$/;"	a
_gather_candidates	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/defx.py	/^    def _gather_candidates($/;"	m	class:Defx
_gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _gather_candidates(self):$/;"	m	class:Default
_gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _gather_candidates(self):$/;"	m	class:Default
_gather_source_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _gather_source_candidates(self, context, source):$/;"	m	class:Child
_gather_source_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _gather_source_candidates(self, context, source):$/;"	m	class:Child
_get	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def _get(self, name, args, is_async=False):$/;"	m	class:SyncParent
_get	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def _get(self, queue_id, is_async=False):$/;"	m	class:ASyncParent
_get	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def _get(self, name, args, is_async=False):$/;"	m	class:SyncParent
_get	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def _get(self, queue_id, is_async=False):$/;"	m	class:ASyncParent
_getServerWorkingDir	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  private _getServerWorkingDir(options?: { cwd?: string }): Promise<string | undefined> {$/;"	m	class:LanguageClient
_get_action_target	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _get_action_target(self, context, action_name, target):$/;"	m	class:Child
_get_action_target	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _get_action_target(self, context, action_name, target):$/;"	m	class:Child
_get_action_targets	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _get_action_targets(self, context, action_name, targets):$/;"	m	class:Child
_get_action_targets	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _get_action_targets(self, context, action_name, targets):$/;"	m	class:Child
_get_all_snippet_files_for	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/_base.py	/^    def _get_all_snippet_files_for(self, ft):$/;"	m	class:SnippetFileSource
_get_all_snippet_files_for	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^    def _get_all_snippet_files_for(self, ft):$/;"	m	class:SnipMateFileSource
_get_all_snippet_files_for	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^    def _get_all_snippet_files_for(self, ft):$/;"	m	class:UltiSnipsFileSource
_get_attributes	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^    def _get_attributes(self, context, buf):$/;"	m	class:Source
_get_attributes	.vim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^    def _get_attributes(self, context, buf):$/;"	m	class:Source
_get_candidate	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^    def _get_candidate(self, filename, line):$/;"	m	class:Source
_get_candidate	.vim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^    def _get_candidate(self, filename, line):$/;"	m	class:Source
_get_candidate_display_text	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _get_candidate_display_text(self, index):$/;"	m	class:Default
_get_candidate_display_text	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _get_candidate_display_text(self, index):$/;"	m	class:Default
_get_category_problems	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _get_category_problems(category):$/;"	f
_get_columns_text	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _get_columns_text(self, context: Context,$/;"	m	class:View
_get_cpsm_result	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/cpsm.py	/^    def _get_cpsm_result(self, ispath, candidates, pattern, bufname):$/;"	m	class:Filter
_get_cpsm_result	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/cpsm.py	/^    def _get_cpsm_result(self, ispath, candidates, pattern):$/;"	m	class:Filter
_get_cursor_candidate	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _get_cursor_candidate(self):$/;"	m	class:Default
_get_cursor_candidate	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _get_cursor_candidate(self):$/;"	m	class:Default
_get_custom_actions	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _get_custom_actions(self, kind_name):$/;"	m	class:Child
_get_custom_actions	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _get_custom_actions(self, kind_name):$/;"	m	class:Child
_get_diff	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def _get_diff(self, start, end, new_value):$/;"	m	class:VimBufferProxy
_get_direction	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _get_direction(self):$/;"	m	class:Default
_get_direction	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _get_direction(self):$/;"	m	class:Default
_get_display_source_name	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _get_display_source_name(self, context, is_multi, name):$/;"	m	class:Child
_get_display_source_name	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _get_display_source_name(self, name):$/;"	m	class:Default
_get_display_source_name	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _get_display_source_name(self, context, is_multi, name):$/;"	m	class:Child
_get_display_source_name	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _get_display_source_name(self, name):$/;"	m	class:Default
_get_existing_deep_extends	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_base.py	/^    def _get_existing_deep_extends(self, base_filetypes):$/;"	m	class:SnippetSource
_get_file_to_edit	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _get_file_to_edit(self, snippet_dir, requested_ft, bang,$/;"	m	class:SnippetManager
_get_histories	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def _get_histories(self):$/;"	m	class:Source
_get_histories	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def _get_histories(self):$/;"	m	class:Source
_get_jumplist	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^    def _get_jumplist(self, context):$/;"	m	class:Source
_get_jumplist	.vim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^    def _get_jumplist(self, context):$/;"	m	class:Source
_get_kind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _get_kind(self, context, target):$/;"	m	class:Child
_get_kind	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _get_kind(self, context, target):$/;"	m	class:Child
_get_line_diff	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def _get_line_diff(self, line_number, before, after):$/;"	m	class:VimBufferProxy
_get_marks	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^    def _get_marks(self, context):$/;"	m	class:Source
_get_marks	.vim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^    def _get_marks(self, context):$/;"	m	class:Source
_get_max_height	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _get_max_height(self):$/;"	m	class:Default
_get_next_tab	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def _get_next_tab(self, number):$/;"	m	class:EditableTextObject
_get_pos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def _get_pos(name):$/;"	f
_get_prev_tab	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def _get_prev_tab(self, number):$/;"	m	class:EditableTextObject
_get_preview_window	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^    def _get_preview_window(self):$/;"	m	class:Kind
_get_preview_window	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _get_preview_window(self):$/;"	m	class:Kind
_get_preview_window	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^    def _get_preview_window(self):$/;"	m	class:Kind
_get_preview_window	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _get_preview_window(self):$/;"	m	class:Kind
_get_selected_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _get_selected_candidates(self):$/;"	m	class:Default
_get_selected_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _get_selected_candidates(self):$/;"	m	class:Default
_get_size	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/size.py	/^    def _get_size(self, size: float) -> typing.Tuple[str, str]:$/;"	m	class:Column
_get_source_status	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _get_source_status(self, context, source, entire, partial):$/;"	m	class:Child
_get_source_status	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _get_source_status(self, context, source, entire, partial):$/;"	m	class:Child
_get_tabstop	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def _get_tabstop(self, requester, number):$/;"	m	class:EditableTextObject
_get_tabstop	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_snippet_instance.py	/^    def _get_tabstop(self, requester, no):$/;"	m	class:SnippetInstance
_get_tagfiles	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^    def _get_tagfiles(self, context):$/;"	m	class:Source
_get_tagfiles	.vim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^    def _get_tagfiles(self, context):$/;"	m	class:Source
_get_text	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_mirror.py	/^    def _get_text(self):$/;"	m	class:Mirror
_get_text	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^    def _get_text(self):$/;"	m	class:Transformation
_get_tmp	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_shell_code.py	/^def _get_tmp():$/;"	f
_get_wininfo	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _get_wininfo(self) -> typing.List[str]:$/;"	m	class:View
_get_wininfo	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _get_wininfo(self):$/;"	m	class:Default
_get_wininfo	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _get_wininfo(self):$/;"	m	class:Default
_globals	.vim/plugged/coc.nvim/src/util/platform.ts	/^const _globals =$/;"	C
_group1	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _group1(match, default):$/;"	f
_handle_failure	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _handle_failure(self, trigger):$/;"	m	class:SnippetManager
_handle_snippet_or_global	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^def _handle_snippet_or_global($/;"	f
_hasOwnProperty	.vim/plugged/coc.nvim/src/util/object.ts	/^const _hasOwnProperty = Object.prototype.hasOwnProperty$/;"	C
_has_vim	.vim/plugged/omnisharp-vim/python/omnisharp/vimcmd.py	/^    _has_vim = False$/;"	v
_has_vim	.vim/plugged/omnisharp-vim/python/omnisharp/vimcmd.py	/^    _has_vim = True$/;"	v
_highlight	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _highlight(self, context, line):$/;"	m	class:Kind
_highlight	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _highlight(self, context, line):$/;"	m	class:Kind
_id	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _id: string$/;"	p	class:BaseLanguageClient
_in_task	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _in_task():$/;"	f
_includeText	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _includeText: boolean$/;"	p	class:DidSaveTextDocumentFeature
_init_all_columns	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _init_all_columns(self) -> None:$/;"	m	class:View
_init_arguments	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def _init_arguments(self, context, args):$/;"	m	class:Source
_init_arguments	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def _init_arguments(self, context, args):$/;"	m	class:Source
_init_buffer	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _init_buffer(self):$/;"	m	class:Default
_init_buffer	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _init_buffer(self):$/;"	m	class:Default
_init_candidates	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _init_candidates(self) -> None:$/;"	m	class:View
_init_column_length	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _init_column_length(self) -> None:$/;"	m	class:View
_init_column_syntax	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _init_column_syntax(self) -> None:$/;"	m	class:View
_init_columns	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _init_columns(self, columns: typing.List[str]) -> None:$/;"	m	class:View
_init_commands	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command.py	/^    def _init_commands(self):$/;"	m	class:Source
_init_commands	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command.py	/^    def _init_commands(self):$/;"	m	class:Source
_init_context	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _init_context($/;"	m	class:View
_init_cursor	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _init_cursor(self, defx: Defx) -> None:$/;"	m	class:View
_init_cursor	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _init_cursor(self):$/;"	m	class:Default
_init_cursor	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _init_cursor(self):$/;"	m	class:Default
_init_defx	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _init_defx(self,$/;"	m	class:View
_init_denite	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _init_denite(self):$/;"	m	class:Default
_init_denite	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _init_denite(self):$/;"	m	class:Default
_init_paths	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def _init_paths(self, context, args):$/;"	m	class:Source
_init_paths	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def _init_paths(self, context, args):$/;"	m	class:Source
_init_patterns	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def _init_patterns(self, context, args):$/;"	m	class:Source
_init_patterns	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def _init_patterns(self, context, args):$/;"	m	class:Source
_init_source	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/defx.py	/^    def _init_source(self) -> None:$/;"	m	class:Defx
_init_syntax	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _init_syntax(self):$/;"	m	class:Default
_init_syntax	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _init_syntax(self):$/;"	m	class:Default
_initializeResult	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _initializeResult: InitializeResult | undefined$/;"	p	class:BaseLanguageClient
_input	.vim/plugged/coc.nvim/src/list/prompt.ts	/^  private _input = ''$/;"	p	class:Prompt
_internal_options	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/context.py	/^    def _internal_options(self):$/;"	m	class:Context
_internal_options	.vim/plugged/denite.nvim/rplugin/python3/denite/context.py	/^    def _internal_options(self):$/;"	m	class:Context
_isActive	.vim/plugged/coc.nvim/src/snippets/session.ts	/^  private _isActive = false$/;"	p	class:SnippetSession
_isDetached	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  private _isDetached: boolean | undefined$/;"	p	class:LanguageClient
_isLinux	.vim/plugged/coc.nvim/src/util/platform.ts	/^let _isLinux = false$/;"	v
_isMacintosh	.vim/plugged/coc.nvim/src/util/platform.ts	/^let _isMacintosh = false$/;"	v
_isNative	.vim/plugged/coc.nvim/src/util/platform.ts	/^let _isNative = false$/;"	v
_isWeb	.vim/plugged/coc.nvim/src/util/platform.ts	/^let _isWeb = false$/;"	v
_isWindows	.vim/plugged/coc.nvim/src/util/platform.ts	/^let _isWindows = false$/;"	v
_is_current_buffer_empty	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def _is_current_buffer_empty(self):$/;"	m	class:Kind
_is_current_buffer_empty	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def _is_current_buffer_empty(self):$/;"	m	class:Kind
_is_excluded	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^    def _is_excluded(self, context, buffer_attr):$/;"	m	class:Source
_is_excluded	.vim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^    def _is_excluded(self, context, buffer_attr):$/;"	m	class:Source
_is_ignore_command	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def _is_ignore_command(self, command):$/;"	m	class:Source
_is_ignore_command	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def _is_ignore_command(self, command):$/;"	m	class:Source
_is_pos_zero	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def _is_pos_zero(pos):$/;"	f
_is_updating_from_remote	.vim/plugged/ghost-text.vim/python3/vim_ghost_text.py	/^_is_updating_from_remote = False$/;"	v
_jQuery	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var _jQuery = window.jQuery,$/;"	v
_jump	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def _jump(self, context, target):$/;"	m	class:Kind
_jump	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _jump(self, backwards=False):$/;"	m	class:SnippetManager
_jump	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _jump(self, context, target):$/;"	m	class:Kind
_leaving_buffer	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _leaving_buffer(self):$/;"	m	class:SnippetManager
_leaving_insert_mode	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _leaving_insert_mode(self):$/;"	m	class:SnippetManager
_level_to_name	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _level_to_name(level):$/;"	f
_link_file	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    def _link_file(self, source, relative_destination):$/;"	m	class:VimTestCase
_listener	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _listener: Disposable | undefined$/;"	p	class:DidChangeTextDocumentFeature
_listener	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _listener: Disposable | undefined$/;"	p	class:DocumentNotifiactions
_listener	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _listener: Disposable | undefined$/;"	p	class:WillSaveWaitUntilFeature
_listeners	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _listeners: Disposable[] | undefined$/;"	p	class:BaseLanguageClient
_listeners	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _listeners: Map<string, Disposable> = new Map<string, Disposable>()$/;"	p	class:ConfigurationFeature
_listeners	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  private _listeners: Disposable[]$/;"	p	class:SettingMonitor
_listeners	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^  private _listeners: Map<string, Disposable> = new Map<string, Disposable>()$/;"	p	class:WorkspaceFoldersFeature
_load_custom_columns	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _load_custom_columns(self) -> typing.List[Path]:$/;"	m	class:View
_load_filters	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _load_filters(self, context):$/;"	m	class:Child
_load_filters	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _load_filters(self, context):$/;"	m	class:Child
_load_kinds	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _load_kinds(self, context):$/;"	m	class:Child
_load_kinds	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _load_kinds(self, context):$/;"	m	class:Child
_load_session	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _load_session(view: View, defx: Defx, context: Context) -> None:$/;"	f
_load_snippets_for	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/_base.py	/^    def _load_snippets_for(self, ft):$/;"	m	class:SnippetFileSource
_load_sources	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _load_sources(self, context):$/;"	m	class:Child
_load_sources	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _load_sources(self, context):$/;"	m	class:Child
_lock	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    _lock = threading.Lock()$/;"	v	class:VimHandler
_log_file	.vim/plugged/omnisharp-vim/python/bootstrap.py	/^_log_file = ''$/;"	v
_make_debug_exception	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def _make_debug_exception(self, e, code=''):$/;"	m	class:SnippetDefinition
_make_headers	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _make_headers():$/;"	f
_markerBrand	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public readonly _markerBrand: any$/;"	p	class:Marker
_match_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _match_candidates(self, context, matchers):$/;"	m	class:Child
_match_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _match_candidates(self, context, matchers):$/;"	m	class:Child
_matcher	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let { cusorIndex, interactive, input, _matcher } = this$/;"	v
_matcher	.vim/plugged/coc.nvim/src/list/prompt.ts	/^  private _matcher: Matcher | ''$/;"	p	class:Prompt
_memoryConfiguration	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^    const { _workspaceConfiguration, _memoryConfiguration } = this$/;"	C
_memoryConfiguration	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^    private _memoryConfiguration: ConfigurationModel = new ConfigurationModel(),$/;"	p	class:Configuration
_mode	.vim/plugged/coc.nvim/src/list/prompt.ts	/^  private _mode: ListMode = 'insert'$/;"	p	class:Prompt
_move	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _move(view: View, defx: Defx, context: Context) -> None:$/;"	f
_move	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def _move(self, pivot, diff):$/;"	m	class:EditableTextObject
_move	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def _move(self, pivot, diff):$/;"	m	class:TextObject
_move_to_first_line	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _move_to_first_line(self):$/;"	m	class:Default
_move_to_first_line	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _move_to_first_line(self):$/;"	m	class:Default
_move_to_last_line	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _move_to_last_line(self):$/;"	m	class:Default
_move_to_last_line	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _move_to_last_line(self):$/;"	m	class:Default
_move_to_next_line	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _move_to_next_line(self):$/;"	m	class:Default
_move_to_next_line	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _move_to_next_line(self):$/;"	m	class:Default
_move_to_pos	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _move_to_pos(self, pos):$/;"	m	class:Default
_move_to_pos	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _move_to_pos(self, pos):$/;"	m	class:Default
_move_to_prev_line	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _move_to_prev_line(self):$/;"	m	class:Default
_move_to_prev_line	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _move_to_prev_line(self):$/;"	m	class:Default
_move_up_path	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _move_up_path(denite, params):$/;"	f
_move_up_path	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _move_up_path(denite, params):$/;"	f
_multi	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _multi(view: View, defx: Defx, context: Context) -> None:$/;"	f
_multi_char_case_change	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^        def _multi_char_case_change(match):$/;"	f	member:_CleverReplace.replace	file:
_name	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _name: string$/;"	p	class:BaseLanguageClient
_name	.vim/plugged/coc.nvim/src/model/terminal.ts	/^    private _name?: string) {$/;"	p	class:TerminalModel
_needs_update	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/_base.py	/^    def _needs_update(self, ft):$/;"	m	class:SnippetFileSource
_new_directory	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _new_directory(view: View, defx: Defx, context: Context) -> None:$/;"	f
_new_file	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _new_file(view: View, defx: Defx, context: Context) -> None:$/;"	f
_new_multiple_files	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _new_multiple_files(view: View, defx: Defx, context: Context) -> None:$/;"	f
_nodeModulePaths	.vim/plugged/coc.nvim/src/util/factory.ts	/^  _nodeModulePaths: (filename: string) => string[]$/;"	p	interface:IModule
_nop	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _nop(view: View, defx: Defx, context: Context) -> None:$/;"	f
_nop	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _nop(denite, params):$/;"	f
_nop	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _nop(denite, params):$/;"	f
_onCancelEvent	.vim/plugged/coc.nvim/src/snippets/session.ts	/^  private _onCancelEvent = new Emitter<void>()$/;"	p	class:SnippetSession
_onData	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let _onData = () => {$/;"	v
_onDidChangeInput	.vim/plugged/coc.nvim/src/list/prompt.ts	/^  private _onDidChangeInput = new Emitter<string>()$/;"	p	class:Prompt
_onDidCreate	.vim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^  private _onDidCreate = new Emitter<URI>()$/;"	p	class:FileSystemWatcher
_onReady	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _onReady: Promise<void>$/;"	p	class:BaseLanguageClient
_onReadyCallbacks	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _onReadyCallbacks: OnReady$/;"	p	class:BaseLanguageClient
_onStop	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _onStop: Thenable<void> | undefined$/;"	p	class:BaseLanguageClient
_one_char_case_change	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^        def _one_char_case_change(match):$/;"	f	member:_CleverReplace.replace	file:
_open	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _open(view: View, defx: Defx, context: Context) -> None:$/;"	f
_open	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _open(self, context, command):$/;"	m	class:Kind
_open	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _open(self, context, command):$/;"	m	class:Kind
_open_directory	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _open_directory(view: View, defx: Defx, context: Context) -> None:$/;"	f
_open_filter_buffer	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _open_filter_buffer(denite, params):$/;"	f
_open_filter_buffer	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _open_filter_buffer(denite, params):$/;"	f
_open_or_close_tree	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _open_or_close_tree(view: View, defx: Defx, context: Context) -> None:$/;"	f
_open_tree	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _open_tree(view: View, defx: Defx, context: Context) -> None:$/;"	f
_open_tree_recursive	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _open_tree_recursive(view: View, defx: Defx, context: Context) -> None:$/;"	f
_outputChannel	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _outputChannel: OutputChannel | undefined$/;"	p	class:BaseLanguageClient
_p	.vim/plugged/ghost-text.vim/python3/ghost_log.py	/^def _p(level, *args):$/;"	f
_parse	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^    def _parse(self, context):$/;"	m	class:Source
_parse	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^    def _parse(self, context):$/;"	m	class:Source
_parse	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:EscapeCharToken
_parse	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:MirrorToken
_parse	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:PythonCodeToken
_parse	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:ShellCodeToken
_parse	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:TabStopToken
_parse	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:Token
_parse	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:TransformationToken
_parse	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:VimLCodeToken
_parse	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:VisualToken
_parse	.vim/plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^    def _parse(self, context):$/;"	m	class:Source
_parse	.vim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^    def _parse(self, context):$/;"	m	class:Source
_parse_comments	.config/nvim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def _parse_comments(s):$/;"	f
_parse_comments	.vim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def _parse_comments(s):$/;"	f
_parse_number	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^def _parse_number(stream):$/;"	f
_parse_snippet	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^def _parse_snippet(line, lines, filename):$/;"	f
_parse_snippet_file	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/_base.py	/^    def _parse_snippet_file(self, filedata, filename):$/;"	m	class:SnippetFileSource
_parse_snippet_file	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^    def _parse_snippet_file(self, filedata, filename):$/;"	m	class:SnipMateFileSource
_parse_snippet_file	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^def _parse_snippet_file(content, full_filename):$/;"	f
_parse_snippet_file	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^    def _parse_snippet_file(self, filedata, filename):$/;"	m	class:UltiSnipsFileSource
_parse_snippets	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/_base.py	/^    def _parse_snippets(self, ft, filename):$/;"	m	class:SnippetFileSource
_parse_snippets_file	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^def _parse_snippets_file(data, filename):$/;"	f
_parse_snippets_file	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^def _parse_snippets_file(data, filename):$/;"	f
_parse_till_closing_brace	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^def _parse_till_closing_brace(stream):$/;"	f
_parse_till_unescaped_char	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^def _parse_till_unescaped_char(stream, chars):$/;"	f
_parser	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^  private _parser: Snippets.SnippetParser = new Snippets.SnippetParser()$/;"	p	class:CocSnippet
_paste	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _paste(view: View, defx: Defx, context: Context) -> None:$/;"	f
_paste	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^def _paste(vim, word, command, regtype):$/;"	f
_paste	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^def _paste(vim, word, command, regtype):$/;"	f
_patternCache	.vim/plugged/fzf/src/pattern.go	/^	_patternCache map[string]*Pattern$/;"	v	package:fzf	typeref:typename:map[string]*Pattern
_place_initial_text	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_snippet_instance.py	/^        def _place_initial_text(obj):$/;"	f	member:SnippetInstance.replace_initial_text	file:
_platform	.vim/plugged/coc.nvim/src/util/platform.ts	/^let _platform: Platform = Platform.Web$/;"	v
_print	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _print(view: View, defx: Defx, context: Context) -> None:$/;"	f
_print_messages	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _print_messages(denite, params):$/;"	f
_print_messages	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _print_messages(denite, params):$/;"	f
_process_request	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^def _process_request(channel, method, args):$/;"	f
_provideDocumentLinks	.vim/plugged/coc.nvim/src/provider/documentLinkManager.ts	/^  private async _provideDocumentLinks(item: ProviderItem<DocumentLinkProvider>, document: TextDo/;"	m	class:DocumentLinkManager
_providers	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _providers: Disposable[] | undefined$/;"	p	class:BaseLanguageClient
_providers	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected _providers: Map<string, Disposable> = new Map<string, Disposable>()$/;"	p	class:TextDocumentFeature
_providers	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected _providers: Map<string, Disposable> = new Map<string, Disposable>()$/;"	p	class:WorkspaceFeature
_put	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def _put(self, name, args):$/;"	m	class:ASyncParent
_put	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def _put(self, name, args):$/;"	m	class:SyncParent
_put	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def _put(self, name, args):$/;"	m	class:ASyncParent
_put	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def _put(self, name, args):$/;"	m	class:SyncParent
_qfloc	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _qfloc(self, context, listtype):$/;"	m	class:Kind
_qfloc	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _qfloc(self, context, listtype):$/;"	m	class:Kind
_quick_move	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _quick_move(denite, params):$/;"	f
_quick_move	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _quick_move(denite, params):$/;"	f
_quit	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _quit(view: View, defx: Defx, context: Context) -> None:$/;"	f
_quit	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _quit(denite, params):$/;"	f
_quit	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _quit(denite, params):$/;"	f
_quit_buffer	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _quit_buffer(self):$/;"	m	class:Default
_quit_buffer	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _quit_buffer(self):$/;"	m	class:Default
_re_match	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def _re_match(self, trigger):$/;"	m	class:SnippetDefinition
_ready	.vim/plugged/coc.nvim/src/plugin.ts	/^  private _ready = false$/;"	p	class:Plugin
_redraw	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _redraw(view: View, defx: Defx, context: Context) -> None:$/;"	f
_redraw	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _redraw(denite, params):$/;"	f
_redraw	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _redraw(denite, params):$/;"	f
_redraw_other_defxs	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/rplugin.py	/^    def _redraw_other_defxs(self, view: View) -> None:$/;"	m	class:Rplugin
_refresh_snippets	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _refresh_snippets(self):$/;"	m	class:SnippetManager
_reinit	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _reinit(self):$/;"	m	class:SnippetManager
_reject	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(private _resolve: () => void, private _reject: (error: any) => void) {$/;"	p	class:OnReady
_remove	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _remove(view: View, defx: Defx, context: Context) -> None:$/;"	f
_remove_description	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _remove_description(code):$/;"	f
_remove_duplicate_entry	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def _remove_duplicate_entry(self, seq):$/;"	m	class:Source
_remove_duplicate_entry	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def _remove_duplicate_entry(self, seq):$/;"	m	class:Source
_remove_previewed_buffer	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _remove_previewed_buffer(self, bufnr):$/;"	m	class:Kind
_remove_previewed_buffer	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _remove_previewed_buffer(self, bufnr):$/;"	m	class:Kind
_remove_trash	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _remove_trash(view: View, defx: Defx, context: Context) -> None:$/;"	f
_rename	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def _rename(view: View, defx: Defx, context: Context) -> None:$/;"	f
_repeat	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _repeat(view: View, defx: Defx, context: Context) -> None:$/;"	f
_replace	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _replace(groups: string[]): string {$/;"	m	class:Transform
_replace_conditional	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^def _replace_conditional(match, string):$/;"	f
_replace_text	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^def _replace_text(buf, start, end, text):$/;"	f
_reset	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def _reset(self, cur):$/;"	m	class:SnippetUtil
_resize_buffer	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _resize_buffer(self):$/;"	m	class:Default
_resize_buffer	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _resize_buffer(self):$/;"	m	class:Default
_resize_window	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _resize_window(self) -> None:$/;"	m	class:View
_resolve	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(private _resolve: () => void, private _reject: (error: any) => void) {$/;"	p	class:OnReady
_resolveFilename	.vim/plugged/coc.nvim/src/util/factory.ts	/^  _resolveFilename: (file: string, context: any) => string$/;"	p	interface:IModule
_resolvedConnection	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _resolvedConnection: IConnection | undefined$/;"	p	class:BaseLanguageClient
_restart	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _restart(self):$/;"	m	class:Default
_restart	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _restart(denite, params):$/;"	f
_restart	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _restart(self):$/;"	m	class:Default
_restart	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _restart(denite, params):$/;"	f
_restore_sources	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _restore_sources(denite, params):$/;"	f
_restore_sources	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _restore_sources(denite, params):$/;"	f
_run_shell_command	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_shell_code.py	/^def _run_shell_command(cmd, tmpdir):$/;"	f
_runeWidths	.vim/plugged/fzf/src/util/util.go	/^var _runeWidths = make(map[rune]int)$/;"	v	package:util
_rv_changed	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def _rv_changed(self):$/;"	m	class:SnippetUtil
_save_last_visual_selection	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _save_last_visual_selection(self):$/;"	m	class:SnippetManager
_save_session	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _save_session(view: View, defx: Defx, context: Context) -> None:$/;"	f
_scanner	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _scanner = new Scanner()$/;"	p	class:SnippetParser
_screen	.vim/plugged/fzf/src/tui/tcell.go	/^	_screen tcell.Screen$/;"	v	package:tui	typeref:typename:tcell.Screen
_search	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _search(view: View, defx: Defx, context: Context) -> None:$/;"	f
_selectors	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _selectors: Map<string, DocumentSelector> = new Map<string, DocumentSelector>()$/;"	p	class:WillSaveWaitUntilFeature
_selectors	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected _selectors: Map<string, DocumentSelector> = new Map()$/;"	p	class:DocumentNotifiactions
_send	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def _send(self, s):$/;"	m	class:VimInterfaceTmux
_serverOptions	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  private _serverOptions: ServerOptions$/;"	p	class:LanguageClient
_serverProcess	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  private _serverProcess: ChildProcess | undefined$/;"	p	class:LanguageClient
_set_custom_attribute	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _set_custom_attribute(self, kind, obj, attr):$/;"	m	class:Child
_set_pos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def _set_pos(name, pos):$/;"	f
_set_return_error	.vim/plugged/omnisharp-vim/python/omnisharp/vimcmd.py	/^def _set_return_error(err):$/;"	f
_set_source_attribute	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def _set_source_attribute(self, source, attr):$/;"	m	class:Child
_setting	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  constructor(private _client: LanguageClient, private _setting: string) {$/;"	p	class:SettingMonitor
_setup_inner_state	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _setup_inner_state(self):$/;"	m	class:SnippetManager
_setup_logging	.vim/plugged/omnisharp-vim/python/ale_lint.py	/^def _setup_logging(level):$/;"	f
_setup_logging	.vim/plugged/omnisharp-vim/python/bootstrap.py	/^def _setup_logging():$/;"	f
_setup_logging	.vim/plugged/omnisharp-vim/rplugin/python3/deoplete/sources/deoplete_OmniSharp.py	/^    def _setup_logging(self):$/;"	m	class:Source
_setup_logging	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^def _setup_logging(name):$/;"	f
_size	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/sort.py	/^def _size($/;"	f
_snip_quote	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^def _snip_quote(qt):$/;"	f
_snipmate_files_for	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^def _snipmate_files_for(ft):$/;"	f
_snippet	.vim/plugged/coc.nvim/src/snippets/session.ts	/^  private _snippet: CocSnippet = null$/;"	p	class:SnippetSession
_snips	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _snips(self, before, partial, autotrigger_only=False):$/;"	m	class:SnippetManager
_sock	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    _sock = None$/;"	v	class:VimHandler
_sort_method	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/sort.py	/^def _sort_method($/;"	f
_spinner	.vim/plugged/fzf/src/terminal.go	/^var _spinner = []string{`-`, `\\`, `|`, `\/`, `-`, `\\`, `|`, `\/`}$/;"	v	package:fzf
_split	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _split(s):$/;"	f
_splitRegex	.vim/plugged/fzf/src/pattern.go	/^	_splitRegex   *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
_split_conditional	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^def _split_conditional(string):$/;"	f
_splitall	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^def _splitall(path):$/;"	f
_start	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _start(self, sources, context):$/;"	m	class:Default
_start	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _start(self, sources, context):$/;"	m	class:Default
_start_process	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def _start_process(self):$/;"	m	class:ASyncParent
_start_process	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def _start_process(self):$/;"	m	class:SyncParent
_start_process	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def _start_process(self):$/;"	m	class:ASyncParent
_start_process	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def _start_process(self):$/;"	m	class:SyncParent
_start_sources_queue	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _start_sources_queue(self, context):$/;"	m	class:Default
_start_sources_queue	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _start_sources_queue(self, context):$/;"	m	class:Default
_state	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected _state: ClientState$/;"	p	class:BaseLanguageClient
_stateChangeEmitter	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _stateChangeEmitter: Emitter<StateChangeEvent>$/;"	p	class:BaseLanguageClient
_state_to_flag	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _state_to_flag(state):$/;"	f
_status_to_name	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _status_to_name(status):$/;"	f
_strwidth	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/filename.py	/^    def _strwidth(self, word: str) -> int:$/;"	m	class:Column
_switch_buffer	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _switch_buffer(self) -> bool:$/;"	m	class:View
_switch_buffer	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _switch_buffer(self):$/;"	m	class:Default
_switch_buffer	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _switch_buffer(self):$/;"	m	class:Default
_switch_prev_buffer	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _switch_prev_buffer(self):$/;"	m	class:Default
_switch_prev_buffer	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _switch_prev_buffer(self):$/;"	m	class:Default
_syncedDocuments	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    private _syncedDocuments: Map<string, TextDocument>$/;"	p	class:DidCloseTextDocumentFeature
_syncedDocuments	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient, private _syncedDocuments: Map<string, TextDocument>) {$/;"	p	class:DidOpenTextDocumentFeature
_syncedDocuments	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _syncedDocuments: Map<string, TextDocument>$/;"	p	class:BaseLanguageClient
_table	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  private static _table: { [ch: number]: TokenType } = {$/;"	p	class:Scanner
_teardown_inner_state	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _teardown_inner_state(self):$/;"	m	class:SnippetManager
_text	.vim/plugged/coc.nvim/src/model/status.ts	/^  private _text = ''$/;"	C
_thread_main	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _thread_main():$/;"	f
_threaded_function	.vim/plugged/ghost-text.vim/python3/server_thread.py	/^    def _threaded_function(self):$/;"	m	class:ServerThread
_time	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/sort.py	/^def _time($/;"	f
_toPascalCase	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  private _toPascalCase(value: string): string {$/;"	m	class:FormatString
_toggle_columns	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _toggle_columns(view: View, defx: Defx, context: Context) -> None:$/;"	f
_toggle_ignored_files	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _toggle_ignored_files(view: View, defx: Defx, context: Context) -> None:$/;"	f
_toggle_matchers	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _toggle_matchers(denite, params):$/;"	f
_toggle_matchers	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _toggle_matchers(denite, params):$/;"	f
_toggle_select	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _toggle_select(view: View, defx: Defx, context: Context) -> None:$/;"	f
_toggle_select	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _toggle_select(denite, params):$/;"	f
_toggle_select	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _toggle_select(denite, params):$/;"	f
_toggle_select_all	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _toggle_select_all(view: View, defx: Defx, context: Context) -> None:$/;"	f
_toggle_select_all	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _toggle_select_all(denite, params):$/;"	f
_toggle_select_all	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _toggle_select_all(denite, params):$/;"	f
_toggle_select_candidate	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _toggle_select_candidate(denite, index):$/;"	f
_toggle_select_candidate	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _toggle_select_candidate(denite, index):$/;"	f
_toggle_select_visual	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _toggle_select_visual(view: View, defx: Defx, context: Context) -> None:$/;"	f
_toggle_sort	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _toggle_sort(view: View, defx: Defx, context: Context) -> None:$/;"	f
_trace	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _trace: Trace$/;"	p	class:BaseLanguageClient
_traceFormat	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _traceFormat: TraceFormat$/;"	p	class:BaseLanguageClient
_tracer	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _tracer: Tracer$/;"	p	class:BaseLanguageClient
_track	.config/nvim/plugged/oceanic-next/test/test.js	/^    this._track = {$/;"	c	class:SoundCloudAudio.preload
_track_change	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _track_change(self):$/;"	m	class:SnippetManager
_transform	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^    def _transform(self, text):$/;"	m	class:TextObjectTransformation
_truncate	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/filename.py	/^    def _truncate(self, word: str) -> str:$/;"	m	class:Column
_try_expand	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _try_expand(self, autotrigger_only=False):$/;"	m	class:SnippetManager
_unescape	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def _unescape(s):$/;"	f
_unmap_select_mode_mapping	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def _unmap_select_mode_mapping():$/;"	f
_update	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def _update(self, done, buf):$/;"	m	class:EditableTextObject
_update	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def _update(self, done, buf):$/;"	m	class:NoneditableTextObject
_update	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def _update(self, done, buf):$/;"	m	class:TextObject
_update	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_mirror.py	/^    def _update(self, done, buf):$/;"	m	class:Mirror
_update	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def _update(self, done, buf):$/;"	m	class:PythonCode
_update	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_shell_code.py	/^    def _update(self, done, buf):$/;"	m	class:ShellCode
_update	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_viml_code.py	/^    def _update(self, done, buf):$/;"	m	class:VimLCode
_update	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_visual.py	/^    def _update(self, done, buf):$/;"	m	class:Visual
_update_buffer	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _update_buffer(self):$/;"	m	class:Default
_update_buffer	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _update_buffer(denite, params):$/;"	f
_update_buffer	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _update_buffer(self):$/;"	m	class:Default
_update_buffer	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _update_buffer(denite, params):$/;"	f
_update_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _update_candidates(self):$/;"	m	class:Default
_update_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _update_candidates(denite, params):$/;"	f
_update_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _update_candidates(self):$/;"	m	class:Default
_update_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def _update_candidates(denite, params):$/;"	f
_update_defx	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _update_defx(self, paths: typing.List[str]) -> None:$/;"	m	class:View
_update_displayed_texts	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _update_displayed_texts(self):$/;"	m	class:Default
_update_displayed_texts	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _update_displayed_texts(self):$/;"	m	class:Default
_update_paths	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def _update_paths(self, index: int, path: str) -> None:$/;"	m	class:View
_update_status	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _update_status(self):$/;"	m	class:Default
_update_status	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def _update_status(self):$/;"	m	class:Default
_used	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _used: boolean$/;"	p	class:OnReady
_userConfiguration	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^    private _userConfiguration: ConfigurationModel,$/;"	p	class:Configuration
_variableToValue	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^  private _variableToValue: { [key: string]: string } = {}$/;"	p	class:SnippetVariableResolver
_vim_dec	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/compatibility.py	/^    def _vim_dec(string):$/;"	f
_vim_enc	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/compatibility.py	/^    def _vim_enc(bytearray):$/;"	f
_vim_enc	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/compatibility.py	/^    def _vim_enc(string):$/;"	f
_vim_line_with_eol	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^        _vim_line_with_eol = lambda ln: _vim.buf[ln] + '\\n'$/;"	f	member:VisualContentPreserver.conserve	file:
_walk_side_effect	.config/nvim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def _walk_side_effect(top, topdown=True, onerror=None, followlinks=False):$/;"	f
_walk_side_effect	.vim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def _walk_side_effect(top, topdown=True, onerror=None, followlinks=False):$/;"	f
_watchers	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private _watchers: Map<string, Disposable[]> = new Map<string, Disposable[]>()$/;"	p	class:FileSystemWatcherFeature
_winid	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^    def _winid(self, target):$/;"	m	class:Kind
_winid	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _winid(self, target):$/;"	m	class:Kind
_winid	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^    def _winid(self, target):$/;"	m	class:Kind
_winid	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def _winid(self, target):$/;"	m	class:Kind
_words_for_line	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^def _words_for_line(trigger, before, num_words=None):$/;"	f
_workspaceConfiguration	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^    const { _workspaceConfiguration, _memoryConfiguration } = this$/;"	C
_workspaceConfiguration	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^    private _workspaceConfiguration: ConfigurationModel,$/;"	p	class:Configuration
_workspaceFolders	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { _workspaceFolders } = this$/;"	v
_yank	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^def _yank(vim, word):$/;"	f
_yank	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^def _yank(vim, word):$/;"	f
_yank_path	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def _yank_path(view: View, defx: Defx, context: Context) -> None:$/;"	f
`--filter` will not block when sort is disabled	.vim/plugged/fzf/CHANGELOG.md	/^#### `--filter` will not block when sort is disabled$/;"	t
`:FZF[!]`	.vim/plugged/fzf/README-VIM.md	/^`:FZF[!]`$/;"	s
`default`	.vim/plugged/vim-airline/README.md	/^#### `default`$/;"	t
`fzf#run`	.vim/plugged/fzf/README-VIM.md	/^`fzf#run`$/;"	s
`fzf#wrap`	.vim/plugged/fzf/README-VIM.md	/^`fzf#wrap`$/;"	s
`fzf-tmux` script	.vim/plugged/fzf/README.md	/^`fzf-tmux` script$/;"	s
`g:tagalong_additional_filetypes`	.config/nvim/plugged/tagalong.vim/README.md	/^### `g:tagalong_additional_filetypes`$/;"	S
`g:tagalong_filetypes`	.config/nvim/plugged/tagalong.vim/README.md	/^### `g:tagalong_filetypes`$/;"	S
`g:tagalong_mappings`	.config/nvim/plugged/tagalong.vim/README.md	/^### `g:tagalong_mappings`$/;"	S
`g:tagalong_verbose`	.config/nvim/plugged/tagalong.vim/README.md	/^### `g:tagalong_verbose`$/;"	S
`git ls-tree` for fast traversal	.vim/plugged/fzf/README.md	/^#### `git ls-tree` for fast traversal$/;"	t
`jsformatter`	.vim/plugged/vim-airline/README.md	/^#### `jsformatter`$/;"	t
`unique_tail_improved`	.vim/plugged/vim-airline/README.md	/^#### `unique_tail_improved`$/;"	t
`unique_tail`	.vim/plugged/vim-airline/README.md	/^#### `unique_tail`$/;"	t
a	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^a{$/;"	s
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = 'First Line\\nSecond Line'$/;"	v	class:TestWithNewline
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = 'Vorne hallo Hinten'$/;"	v	class:TestCheapDelete
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = 'Vorne hallo Hinten'$/;"	v	class:TestRealLife1
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = 'hallo Blah mitte=sdfdsfsd\\nhallo kjsdhfjksdhfkjhsdfkh mittekjshdkfhkhsdfdsf'$/;"	v	class:TestCrash
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = 'hallo End Beginning'$/;"	v	class:TestRealLife
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = 'hi first line\\nsecond line first line\\nsecond line world'$/;"	v	class:MultiLine
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = 'stdin.h'$/;"	v	class:MatchIsTooCheap
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = 'this is it this is it this is it'$/;"	v	class:TestUltiSnipsProblem
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = '', ''$/;"	v	class:TestEmptyString
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = 'Hello', 'Hello\\nWorld\\nWorld\\nWorld'$/;"	v	class:TestLotsaNewlines
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = 'abc', 'def'$/;"	v	class:TestNoSubstring
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = 'abcdef', 'abcdef'$/;"	v	class:TestAllMatch
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = 'hasomelongertextbl', 'hol'$/;"	v	class:TestCommonCharacters
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ['Hello  World'], ['Hello   World']$/;"	v	class:TestGuessing_InsertOneChar
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ['Hello  World'], ['Hello   World']$/;"	v	class:TestGuessing_InsertOneChar1
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ['Hello  World'], ['Hello World']$/;"	v	class:TestGuessing_BackspaceOneChar
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ['Hello  World'], ['Hello World']$/;"	v	class:TestGuessing_DeleteOneChar
a	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = [], []$/;"	v	class:TestGuessing_Noop0
a	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap a <Nop>$/;"	m
a	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let a = score("amuser", "app\/models\/user.rb")$/;"	v
a	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  a = 97,$/;"	e	enum:CharCode
a	.vim/plugged/coc.nvim/src/util/string.ts	/^  const len1 = a ? a.length : 0$/;"	C	function:equalsIgnoreCase
a	.vim/plugged/fzf/src/terminal.go	/^	a string$/;"	m	struct:fzf.action	typeref:typename:string
a:hover	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^a:hover {$/;"	s
a:link	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^a:link {$/;"	s
a:visited	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^a:visited {$/;"	s
aI	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^onoremap <silent>aI :<C-u>cal <Sid>HandleTextObjectMapping(0, 1, 0, [line("."), line("."), col("/;"	m
aI	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^vnoremap <silent>aI :<C-u>cal <Sid>HandleTextObjectMapping(0, 1, 1, [line("'<"), line("'>"), col/;"	m
aM	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> aM :<C-U>call <SID>wrap_a('[[','][')<CR>$/;"	m
aM	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    xnoremap <silent> <buffer> aM :<C-U>call <SID>wrap_a('[[','][')<CR>$/;"	m
abbr	.vim/plugged/coc.nvim/src/languages.ts	/^      abbr: label,$/;"	v
abbr	.vim/plugged/coc.nvim/src/types.ts	/^  abbr?: string$/;"	p	interface:VimCompleteItem
about: Create a report to help us improve	.config/nvim/plugged/vista.vim/.github/ISSUE_TEMPLATE/bug_report.md	/^about: Create a report to help us improve$/;"	s
about: Create a report to help us improve	.vim/plugged/coc.nvim/.github/ISSUE_TEMPLATE/bug_report.md	/^about: Create a report to help us improve$/;"	s
about: Suggest an idea for this project	.config/nvim/plugged/vista.vim/.github/ISSUE_TEMPLATE/feature_request.md	/^about: Suggest an idea for this project$/;"	s
abspath	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def abspath(vim: Nvim, path):$/;"	f
abspath	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def abspath(vim: Nvim, path):$/;"	f
abstract_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role = {}$/;"	v
abstract_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['composite'] = abstract_role['widget'] + ['aria-activedescendant']$/;"	v
abstract_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['input'] = abstract_role['widget']$/;"	v
abstract_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['landmark'] = role_attributes['region']$/;"	v
abstract_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['range'] = abstract_role['input'] + ['aria-valuemax', 'aria-valuemin', 'aria-v/;"	v
abstract_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['roletype'] = ['aria-atomic', 'aria-busy', 'aria-controls', 'aria-describedby'/;"	v
abstract_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['section'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
abstract_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['sectionhead'] = abstract_role['structure'] + ['aria-expanded']$/;"	v
abstract_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['select'] = abstract_role['composite'] + role_attributes['group'] + abstract_r/;"	v
abstract_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['structure'] = abstract_role['roletype']$/;"	v
abstract_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['widget'] = abstract_role['roletype']$/;"	v
abstract_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let abstract_role['window'] = abstract_role['roletype'] + ['aria-expanded']$/;"	v
abutton_dec	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let abutton_dec = 'details\\\\|embed\\\\|iframe\\\\|keygen\\\\|label\\\\|menu\\\\|select\\\\|tex/;"	v
acceptSuggestionOnCommitCharacter	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let acceptSuggestionOnCommitCharacter = workspace.env.pumevent && getConfig<boolean>('accept/;"	v
acceptSuggestionOnCommitCharacter	.vim/plugged/coc.nvim/src/types.ts	/^  acceptSuggestionOnCommitCharacter: boolean$/;"	p	interface:CompleteConfig
access	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^function access<T, K extends keyof T>(target: T | undefined, key: K): T[K] | undefined {$/;"	f
actAbort	.vim/plugged/fzf/src/terminal.go	/^	actAbort$/;"	c	package:fzf
actAccept	.vim/plugged/fzf/src/terminal.go	/^	actAccept$/;"	c	package:fzf
actAcceptNonEmpty	.vim/plugged/fzf/src/terminal.go	/^	actAcceptNonEmpty$/;"	c	package:fzf
actBackwardChar	.vim/plugged/fzf/src/terminal.go	/^	actBackwardChar$/;"	c	package:fzf
actBackwardDeleteChar	.vim/plugged/fzf/src/terminal.go	/^	actBackwardDeleteChar$/;"	c	package:fzf
actBackwardKillWord	.vim/plugged/fzf/src/terminal.go	/^	actBackwardKillWord$/;"	c	package:fzf
actBackwardWord	.vim/plugged/fzf/src/terminal.go	/^	actBackwardWord$/;"	c	package:fzf
actBeginningOfLine	.vim/plugged/fzf/src/terminal.go	/^	actBeginningOfLine$/;"	c	package:fzf
actCancel	.vim/plugged/fzf/src/terminal.go	/^	actCancel$/;"	c	package:fzf
actClearScreen	.vim/plugged/fzf/src/terminal.go	/^	actClearScreen$/;"	c	package:fzf
actDeleteChar	.vim/plugged/fzf/src/terminal.go	/^	actDeleteChar$/;"	c	package:fzf
actDeleteCharEOF	.vim/plugged/fzf/src/terminal.go	/^	actDeleteCharEOF$/;"	c	package:fzf
actDeselectAll	.vim/plugged/fzf/src/terminal.go	/^	actDeselectAll$/;"	c	package:fzf
actDown	.vim/plugged/fzf/src/terminal.go	/^	actDown$/;"	c	package:fzf
actEndOfLine	.vim/plugged/fzf/src/terminal.go	/^	actEndOfLine$/;"	c	package:fzf
actExecute	.vim/plugged/fzf/src/terminal.go	/^	actExecute$/;"	c	package:fzf
actExecuteMulti	.vim/plugged/fzf/src/terminal.go	/^	actExecuteMulti \/\/ Deprecated$/;"	c	package:fzf
actExecuteSilent	.vim/plugged/fzf/src/terminal.go	/^	actExecuteSilent$/;"	c	package:fzf
actForwardChar	.vim/plugged/fzf/src/terminal.go	/^	actForwardChar$/;"	c	package:fzf
actForwardWord	.vim/plugged/fzf/src/terminal.go	/^	actForwardWord$/;"	c	package:fzf
actHalfPageDown	.vim/plugged/fzf/src/terminal.go	/^	actHalfPageDown$/;"	c	package:fzf
actHalfPageUp	.vim/plugged/fzf/src/terminal.go	/^	actHalfPageUp$/;"	c	package:fzf
actIgnore	.vim/plugged/fzf/src/terminal.go	/^	actIgnore actionType = iota$/;"	c	package:fzf	typeref:type:actionType
actInvalid	.vim/plugged/fzf/src/terminal.go	/^	actInvalid$/;"	c	package:fzf
actJump	.vim/plugged/fzf/src/terminal.go	/^	actJump$/;"	c	package:fzf
actJumpAccept	.vim/plugged/fzf/src/terminal.go	/^	actJumpAccept$/;"	c	package:fzf
actKillLine	.vim/plugged/fzf/src/terminal.go	/^	actKillLine$/;"	c	package:fzf
actKillWord	.vim/plugged/fzf/src/terminal.go	/^	actKillWord$/;"	c	package:fzf
actMouse	.vim/plugged/fzf/src/terminal.go	/^	actMouse$/;"	c	package:fzf
actNextHistory	.vim/plugged/fzf/src/terminal.go	/^	actNextHistory$/;"	c	package:fzf
actPageDown	.vim/plugged/fzf/src/terminal.go	/^	actPageDown$/;"	c	package:fzf
actPageUp	.vim/plugged/fzf/src/terminal.go	/^	actPageUp$/;"	c	package:fzf
actPreviewDown	.vim/plugged/fzf/src/terminal.go	/^	actPreviewDown$/;"	c	package:fzf
actPreviewPageDown	.vim/plugged/fzf/src/terminal.go	/^	actPreviewPageDown$/;"	c	package:fzf
actPreviewPageUp	.vim/plugged/fzf/src/terminal.go	/^	actPreviewPageUp$/;"	c	package:fzf
actPreviewUp	.vim/plugged/fzf/src/terminal.go	/^	actPreviewUp$/;"	c	package:fzf
actPreviousHistory	.vim/plugged/fzf/src/terminal.go	/^	actPreviousHistory$/;"	c	package:fzf
actPrintQuery	.vim/plugged/fzf/src/terminal.go	/^	actPrintQuery$/;"	c	package:fzf
actReplaceQuery	.vim/plugged/fzf/src/terminal.go	/^	actReplaceQuery$/;"	c	package:fzf
actRune	.vim/plugged/fzf/src/terminal.go	/^	actRune$/;"	c	package:fzf
actSelectAll	.vim/plugged/fzf/src/terminal.go	/^	actSelectAll$/;"	c	package:fzf
actSigStop	.vim/plugged/fzf/src/terminal.go	/^	actSigStop$/;"	c	package:fzf
actToggle	.vim/plugged/fzf/src/terminal.go	/^	actToggle$/;"	c	package:fzf
actToggleAll	.vim/plugged/fzf/src/terminal.go	/^	actToggleAll$/;"	c	package:fzf
actToggleDown	.vim/plugged/fzf/src/terminal.go	/^	actToggleDown$/;"	c	package:fzf
actToggleIn	.vim/plugged/fzf/src/terminal.go	/^	actToggleIn$/;"	c	package:fzf
actToggleOut	.vim/plugged/fzf/src/terminal.go	/^	actToggleOut$/;"	c	package:fzf
actTogglePreview	.vim/plugged/fzf/src/terminal.go	/^	actTogglePreview$/;"	c	package:fzf
actTogglePreviewWrap	.vim/plugged/fzf/src/terminal.go	/^	actTogglePreviewWrap$/;"	c	package:fzf
actToggleSort	.vim/plugged/fzf/src/terminal.go	/^	actToggleSort$/;"	c	package:fzf
actToggleUp	.vim/plugged/fzf/src/terminal.go	/^	actToggleUp$/;"	c	package:fzf
actTop	.vim/plugged/fzf/src/terminal.go	/^	actTop$/;"	c	package:fzf
actUnixLineDiscard	.vim/plugged/fzf/src/terminal.go	/^	actUnixLineDiscard$/;"	c	package:fzf
actUnixWordRubout	.vim/plugged/fzf/src/terminal.go	/^	actUnixWordRubout$/;"	c	package:fzf
actUp	.vim/plugged/fzf/src/terminal.go	/^	actUp$/;"	c	package:fzf
actYank	.vim/plugged/fzf/src/terminal.go	/^	actYank$/;"	c	package:fzf
action	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^def action(name: str, attr: ActionAttr = ActionAttr.NONE$/;"	f
action	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def action(name: str, attr: ActionAttr = ActionAttr.NONE$/;"	f
action	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^        import defx.action as action$/;"	I	member:View.do_action	file:
action	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let action = codeActions.find(o => o.title == only || (o.command && o.command.title == onl/;"	v
action	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let action = codeActions[idx]$/;"	v
action	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let action = CloseAction.DoNotRestart$/;"	v
action	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let action = this._clientOptions.errorHandler!.error(error, message, count)$/;"	v
action	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let action = currList.actions.find( o => o.name == name )$/;"	C
action	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    let [key, action] = expr.split(':', 2)$/;"	v
action	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^      let action = item.data.action as CodeAction$/;"	v
action	.vim/plugged/fzf/src/terminal.go	/^type action struct {$/;"	s	package:fzf
actionContext	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^    let actionContext: CodeActionContext = { diagnostics }$/;"	v
actionType	.vim/plugged/fzf/src/terminal.go	/^type actionType int$/;"	t	package:fzf	typeref:typename:int
action_append	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def action_append(self, context):$/;"	m	class:Base
action_append	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def action_append(self, context):$/;"	m	class:Base
action_cd	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/directory.py	/^    def action_cd(self, context):$/;"	m	class:Kind
action_cd	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/directory.py	/^    def action_cd(self, context):$/;"	m	class:Kind
action_delete	.config/nvim/plugged/defx.nvim/rplugin/python3/denite/source/defx/session.py	/^    def action_delete(self, context):$/;"	m	class:Kind
action_delete	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^    def action_delete(self, context):$/;"	m	class:Kind
action_delete	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def action_delete(self, context):$/;"	m	class:Kind
action_delete	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^    def action_delete(self, context):$/;"	m	class:Kind
action_delete	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^    def action_delete(self, context):$/;"	m	class:Kind
action_delete	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^    def action_delete(self, context):$/;"	m	class:Kind
action_delete	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def action_delete(self, context):$/;"	m	class:Kind
action_delete	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^    def action_delete(self, context):$/;"	m	class:Kind
action_delete	.vim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^    def action_delete(self, context):$/;"	m	class:Kind
action_drop	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def action_drop(self, context):$/;"	m	class:Kind
action_drop	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def action_drop(self, context):$/;"	m	class:Kind
action_echo	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def action_echo(self, context):$/;"	m	class:Base
action_echo	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def action_echo(self, context):$/;"	m	class:Base
action_edit	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/command.py	/^    def action_edit(self, context):$/;"	m	class:Kind
action_edit	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def action_edit(self, context):$/;"	m	class:Kind
action_edit	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/command.py	/^    def action_edit(self, context):$/;"	m	class:Kind
action_edit	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def action_edit(self, context):$/;"	m	class:Kind
action_ex	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def action_ex(self, context):$/;"	m	class:Base
action_ex	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def action_ex(self, context):$/;"	m	class:Base
action_execute	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/command.py	/^    def action_execute(self, context):$/;"	m	class:Kind
action_execute	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/command.py	/^    def action_execute(self, context):$/;"	m	class:Kind
action_highlight	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def action_highlight(self, context):$/;"	m	class:Kind
action_highlight	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def action_highlight(self, context):$/;"	m	class:Kind
action_location	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def action_location(self, context):$/;"	m	class:Kind
action_location	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def action_location(self, context):$/;"	m	class:Kind
action_narrow	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/directory.py	/^    def action_narrow(self, context):$/;"	m	class:Kind
action_narrow	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/directory.py	/^    def action_narrow(self, context):$/;"	m	class:Kind
action_new	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def action_new(self, context):$/;"	m	class:Kind
action_new	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def action_new(self, context):$/;"	m	class:Kind
action_open	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^    def action_open(self, context):$/;"	m	class:Kind
action_open	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/directory.py	/^    def action_open(self, context):$/;"	m	class:Kind
action_open	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def action_open(self, context):$/;"	m	class:Kind
action_open	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_open(self, context):$/;"	m	class:Kind
action_open	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^    def action_open(self, context):$/;"	m	class:Kind
action_open	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/directory.py	/^    def action_open(self, context):$/;"	m	class:Kind
action_open	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def action_open(self, context):$/;"	m	class:Kind
action_open	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_open(self, context):$/;"	m	class:Kind
action_preview	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def action_preview(self, context):$/;"	m	class:Base
action_preview	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^    def action_preview(self, context):$/;"	m	class:Kind
action_preview	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def action_preview(self, context):$/;"	m	class:Kind
action_preview	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^    def action_preview(self, context):$/;"	m	class:Kind
action_preview	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def action_preview(self, context):$/;"	m	class:Base
action_preview	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/buffer.py	/^    def action_preview(self, context):$/;"	m	class:Kind
action_preview	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def action_preview(self, context):$/;"	m	class:Kind
action_preview	.vim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^    def action_preview(self, context):$/;"	m	class:Kind
action_quickfix	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def action_quickfix(self, context):$/;"	m	class:Kind
action_quickfix	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/file.py	/^    def action_quickfix(self, context):$/;"	m	class:Kind
action_replace	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def action_replace(self, context):$/;"	m	class:Base
action_replace	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def action_replace(self, context):$/;"	m	class:Base
action_split	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_split(self, context):$/;"	m	class:Kind
action_split	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_split(self, context):$/;"	m	class:Kind
action_splitswitch	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_splitswitch(self, context):$/;"	m	class:Kind
action_splitswitch	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_splitswitch(self, context):$/;"	m	class:Kind
action_start	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/source.py	/^    def action_start(self, context):$/;"	m	class:Kind
action_start	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/source.py	/^    def action_start(self, context):$/;"	m	class:Kind
action_switch	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_switch(self, context):$/;"	m	class:Kind
action_switch	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_switch(self, context):$/;"	m	class:Kind
action_tabopen	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_tabopen(self, context):$/;"	m	class:Kind
action_tabopen	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_tabopen(self, context):$/;"	m	class:Kind
action_tabswitch	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_tabswitch(self, context):$/;"	m	class:Kind
action_tabswitch	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_tabswitch(self, context):$/;"	m	class:Kind
action_vsplit	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_vsplit(self, context):$/;"	m	class:Kind
action_vsplit	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_vsplit(self, context):$/;"	m	class:Kind
action_vsplitswitch	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_vsplitswitch(self, context):$/;"	m	class:Kind
action_vsplitswitch	.vim/plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^    def action_vsplitswitch(self, context):$/;"	m	class:Kind
action_yank	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def action_yank(self, context):$/;"	m	class:Base
action_yank	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def action_yank(self, context):$/;"	m	class:Base
actions	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let actions = await this.getCodeActions(bufnr, range, [CodeActionKind.SourceOrganizeImport/;"	v
actions	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let actions = codeActionsMap.get(clientId)$/;"	v
actions	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let actions = await this.getCurrentCodeActions(null, [CodeActionKind.QuickFix])$/;"	v
actions	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { actions, defaultAction } = currList$/;"	C
actions	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^      let actions = codeActionsMap.get(clientId)$/;"	v
actions	.vim/plugged/coc.nvim/src/types.ts	/^  actions: ListAction[]$/;"	p	interface:IList
activate	.vim/plugged/coc.nvim/src/sources.ts	/^        activate: async () => {$/;"	v
activate	.vim/plugged/coc.nvim/src/types.ts	/^  activate(): Promise<T>$/;"	m	interface:Extension
activate	.vim/plugged/coc.nvim/src/util/factory.ts	/^  activate: (context: ExtensionContext) => any$/;"	p	interface:ExtensionExport
activate	.vim/plugged/coc.nvim/src/util/factory.ts	/^  const activate = (defaultImport && defaultImport.activate) || defaultImport$/;"	C	function:createExtension
activated	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { ui, currList, activated, nvim } = this$/;"	v
activated	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private activated = false$/;"	C
activationEvents	.vim/plugged/coc.nvim/src/extensions.ts	/^    let { activationEvents } = packageJSON$/;"	v
active	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let active = await snippetManager.insertSnippet('${1:foo}')$/;"	v
active	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let active = await snippetManager.insertSnippet('${1:x} $1')$/;"	v
active	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let active = await snippetManager.insertSnippet('${2:bar}')$/;"	v
active	.vim/plugged/coc.nvim/src/extensions.ts	/^              active()$/;"	v
active	.vim/plugged/coc.nvim/src/extensions.ts	/^            return active()$/;"	v
active	.vim/plugged/coc.nvim/src/extensions.ts	/^          active()$/;"	v
active	.vim/plugged/coc.nvim/src/extensions.ts	/^      active = () => { } \/\/ tslint:disable-line$/;"	v
active	.vim/plugged/coc.nvim/src/extensions.ts	/^    let active = () => {$/;"	v
active	.vim/plugged/coc.nvim/src/handler/index.ts	/^            let active = signature.parameters[activeParameter]$/;"	v
active	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let [active] = signatures.splice(activeSignature, 1)$/;"	v
active	.vim/plugged/coc.nvim/src/types.ts	/^  active?: [number, number]$/;"	p	interface:Documentation
activeParameter	.vim/plugged/coc.nvim/src/handler/index.ts	/^            let active = signature.parameters[activeParameter]$/;"	v
activeParameter	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let { activeParameter, activeSignature, signatures } = signatureHelp$/;"	v
activeSignature	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let { activeParameter, activeSignature, signatures } = signatureHelp$/;"	v
activted	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { activted } = this$/;"	v
activted	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { document, complete, activted } = this$/;"	v
activted	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { option, activted } = this$/;"	v
activted	.vim/plugged/coc.nvim/src/completion/index.ts	/^  private activted = false$/;"	p	class:Completion
actual	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^      const actual = snippet.toTextmateString()$/;"	C	function:assertTextsnippetString
actual	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const actual = SnippetParser.escape(value)$/;"	C	function:assertEscaped
actual	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const actual = new SnippetParser().text('Foo \\\\\\\\${abc}bar')$/;"	C
actual	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const actual = p.text(value)$/;"	C	function:assertText
actual	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let actual = new SnippetParser().text('${TM_SELECTED_TEXT:foo:bar}')$/;"	v
actual behavior	.vim/plugged/vim-airline/ISSUE_TEMPLATE.md	/^#### actual behavior$/;"	t
add	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	add: function(elem, types, handler, data) {$/;"	m	class:jQuery.event
add	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	function add(l, t) {$/;"	f
add	.vim/plugged/coc.nvim/src/model/mru.ts	/^  public async add(item: string): Promise<void> {$/;"	m	class:Mru
addCommand	.vim/plugged/coc.nvim/src/plugin.ts	/^  public addCommand(cmd: { id: string, cmd: string, title?: string }): void {$/;"	m	class:Plugin
addDoucmentSymbol	.vim/plugged/coc.nvim/src/handler/index.ts	/^function addDoucmentSymbol(res: SymbolInfo[], sym: DocumentSymbol, level: number): void {$/;"	f
addMethod	.vim/plugged/coc.nvim/src/plugin.ts	/^  private addMethod(name: string, fn: Function): any {$/;"	m	class:Plugin
addPosition	.vim/plugged/coc.nvim/src/__tests__/modules/position.test.ts	/^function addPosition(position: Position, line: number, character: number): Position {$/;"	f
addToValueTree	.vim/plugged/coc.nvim/src/configuration/util.ts	/^export function addToValueTree($/;"	f
add_buffer_filetypes	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def add_buffer_filetypes(self, ft):$/;"	m	class:SnippetManager
add_snippet	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_snippet_dictionary.py	/^    def add_snippet(self, snippet):$/;"	m	class:SnippetDictionary
add_snippet	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/added.py	/^    def add_snippet(self, ft, snippet):$/;"	m	class:AddedSnippetsSource
add_snippet	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def add_snippet(self, trigger, value, description,$/;"	m	class:SnippetManager
added	.vim/plugged/coc.nvim/src/configuration/util.ts	/^  const added = toKeys.filter(key => fromKeys.indexOf(key) === -1)$/;"	C	function:getChangedKeys
added	.vim/plugged/coc.nvim/src/types.ts	/^  added: string$/;"	p	interface:ChangeItem
added	.vim/plugged/coc.nvim/src/workspace.ts	/^    let added: WorkspaceFolder = {$/;"	v
additionalKeywords	.vim/plugged/coc.nvim/src/types.ts	/^  additionalKeywords: string[]$/;"	p	interface:BufferOption
additionalProperties	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "additionalProperties": false$/;"	b	object:properties.suggest.completionItemKindLabels
additionalProperties	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "additionalProperties": false,$/;"	b	object:definitions.languageServerCommand
additionalProperties	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "additionalProperties": false,$/;"	b	object:definitions.languageServerModule
additionalProperties	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "additionalProperties": false,$/;"	b	object:definitions.languageServerSocket
additionalProperties	.config/nvim/plugged/coc.nvim/data/schema.json	/^  "additionalProperties": false,$/;"	b
additionalProperties	.vim/plugged/coc.nvim/data/schema.json	/^      "additionalProperties": false$/;"	b	object:properties.suggest.completionItemKindLabels
additionalProperties	.vim/plugged/coc.nvim/data/schema.json	/^      "additionalProperties": false,$/;"	b	object:definitions.languageServerCommand
additionalProperties	.vim/plugged/coc.nvim/data/schema.json	/^      "additionalProperties": false,$/;"	b	object:definitions.languageServerModule
additionalProperties	.vim/plugged/coc.nvim/data/schema.json	/^      "additionalProperties": false,$/;"	b	object:definitions.languageServerSocket
additionalProperties	.vim/plugged/coc.nvim/data/schema.json	/^  "additionalProperties": false,$/;"	b
additionalSchemes	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "additionalSchemes": {$/;"	o	object:definitions.languageServerBase.properties
additionalSchemes	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "additionalSchemes": {},$/;"	o	object:definitions.languageServerCommand.properties
additionalSchemes	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "additionalSchemes": {},$/;"	o	object:definitions.languageServerModule.properties
additionalSchemes	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "additionalSchemes": {},$/;"	o	object:definitions.languageServerSocket.properties
additionalSchemes	.vim/plugged/coc.nvim/data/schema.json	/^        "additionalSchemes": {$/;"	o	object:definitions.languageServerBase.properties
additionalSchemes	.vim/plugged/coc.nvim/data/schema.json	/^        "additionalSchemes": {},$/;"	o	object:definitions.languageServerCommand.properties
additionalSchemes	.vim/plugged/coc.nvim/data/schema.json	/^        "additionalSchemes": {},$/;"	o	object:definitions.languageServerModule.properties
additionalSchemes	.vim/plugged/coc.nvim/data/schema.json	/^        "additionalSchemes": {},$/;"	o	object:definitions.languageServerSocket.properties
additionalSchemes	.vim/plugged/coc.nvim/src/types.ts	/^  additionalSchemes: string[]$/;"	p	interface:LanguageServerConfig
additionalTextEdits	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let { textEdit, additionalTextEdits, label } = presentation$/;"	v
additionalTextEdits	.vim/plugged/coc.nvim/src/languages.ts	/^        let { additionalTextEdits } = item$/;"	v
adjust_format_for_istar	.config/nvim/plugged/vim-textobj-rubyblock/t/examples.rb	/^def adjust_format_for_istar$/;"	f
adjust_format_for_istar	.config/nvim/plugged/vim-textobj-rubyblock/t/samples/oneline-conditionals.rb	/^def adjust_format_for_istar$/;"	f
adjusted	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let adjusted = snippet.adjustTextEdit(edit)$/;"	v
af	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^  omap af <Plug>(coc-funcobj-a)$/;"	m
af	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^  xmap af <Plug>(coc-funcobj-a)$/;"	m
af	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^  omap af <Plug>DsfTextObjectA$/;"	m
af	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^  xmap af <Plug>DsfTextObjectA$/;"	m
af	.vim/plugged/coc.nvim/plugin/coc.vim	/^  omap af <Plug>(coc-funcobj-a)$/;"	m
af	.vim/plugged/coc.nvim/plugin/coc.vim	/^  xmap af <Plug>(coc-funcobj-a)$/;"	m
affects	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^      let affects = e.affectsConfiguration('coc')$/;"	v
affectsConfiguration	.vim/plugged/coc.nvim/src/types.ts	/^  affectsConfiguration(section: string, resource?: string): boolean$/;"	m	interface:ConfigurationChangeEvent
after	.vim/plugged/coc.nvim/src/handler/index.ts	/^          let after = label.slice(nameIndex)$/;"	v
after	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^          let after = line[characterIndex(line, highlight.colEnd) - 1]$/;"	v
after	VSCode/settings.json	/^            "after": [$/;"	a	object:vim.insertModeKeyBindings.0
after_object#disable	.config/nvim/plugged/vim-after-object/autoload/after_object.vim	/^function! after_object#disable(...)$/;"	f
after_object#enable	.config/nvim/plugged/vim-after-object/autoload/after_object.vim	/^function! after_object#enable(...)$/;"	f
afterobj_undo_empty_change	.config/nvim/plugged/vim-after-object/autoload/after_object.vim	/^    augroup afterobj_undo_empty_change$/;"	a
ai	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^onoremap <silent>ai :<C-u>cal <Sid>HandleTextObjectMapping(0, 0, 0, [line("."), line("."), col("/;"	m
ai	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^vnoremap <silent>ai :<C-u>cal <Sid>HandleTextObjectMapping(0, 0, 1, [line("'<"), line("'>"), col/;"	m
airline	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^augroup airline#extensions#cursormode$/;"	a
airline	.vim/plugged/vim-airline/plugin/airline.vim	/^    augroup airline$/;"	a
airline#add_inactive_statusline_func	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#add_inactive_statusline_func(name)$/;"	f
airline#add_statusline_func	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#add_statusline_func(name)$/;"	f
airline#add_statusline_funcref	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#add_statusline_funcref(function)$/;"	f
airline#async#get_mq_async	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#get_mq_async(cmd, file)$/;"	f
airline#async#get_msgfmt_stat	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#get_msgfmt_stat(cmd, file)$/;"	f
airline#async#mq_output	.vim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#mq_output(buf, file)$/;"	f
airline#async#nvim_get_mq_async	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_get_mq_async(cmd, file)$/;"	f
airline#async#nvim_get_msgfmt_stat	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_get_msgfmt_stat(cmd, file)$/;"	f
airline#async#nvim_vcs_clean	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#nvim_vcs_untracked	.vim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#nvim_vcs_untracked(cfg, file, vcs)$/;"	f
airline#async#vcs_clean	.vim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vcs_untracked	.vim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vcs_untracked(config, file, vcs)$/;"	f
airline#async#vim7_vcs_clean	.vim/plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vim7_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vim_vcs_clean	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#vim_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vim_vcs_untracked	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#vim_vcs_untracked(config, file)$/;"	f
airline#builder#get_next_group	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#get_next_group(sections, i)$/;"	f
airline#builder#get_prev_group	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#get_prev_group(sections, i)$/;"	f
airline#builder#new	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#new(context)$/;"	f
airline#builder#should_change_group	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#should_change_group(group1, group2)$/;"	f
airline#check_mode	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#check_mode(winnr)$/;"	f
airline#cmdwinenter	.vim/plugged/vim-airline/plugin/airline.vim	/^function! airline#cmdwinenter(...)$/;"	f
airline#debug#profile1	.vim/plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile1()$/;"	f
airline#debug#profile2	.vim/plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile2()$/;"	f
airline#debug#profile3	.vim/plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile3()$/;"	f
airline#extensions#ale#get	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get(type)$/;"	f
airline#extensions#ale#get_error	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get_error()$/;"	f
airline#extensions#ale#get_warning	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get_warning()$/;"	f
airline#extensions#ale#init	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#init(ext)$/;"	f
airline#extensions#append_to_section	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#append_to_section(name, value)$/;"	f
airline#extensions#apply	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#apply(...)$/;"	f
airline#extensions#apply_left_override	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#apply_left_override(section1, section2)$/;"	f
airline#extensions#bookmark#currentbookmark	.vim/plugged/vim-airline/autoload/airline/extensions/bookmark.vim	/^function! airline#extensions#bookmark#currentbookmark()$/;"	f
airline#extensions#bookmark#init	.vim/plugged/vim-airline/autoload/airline/extensions/bookmark.vim	/^function! airline#extensions#bookmark#init(ext)$/;"	f
airline#extensions#branch#get_head	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#get_head()$/;"	f
airline#extensions#branch#head	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#head()$/;"	f
airline#extensions#branch#init	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#init(ext)$/;"	f
airline#extensions#branch#update_untracked_config	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#update_untracked_config(file, vcs)$/;"	f
airline#extensions#bufferline#init	.vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^function! airline#extensions#bufferline#init(ext)$/;"	f
airline#extensions#capslock#init	.vim/plugged/vim-airline/autoload/airline/extensions/capslock.vim	/^function! airline#extensions#capslock#init(ext)$/;"	f
airline#extensions#capslock#status	.vim/plugged/vim-airline/autoload/airline/extensions/capslock.vim	/^function! airline#extensions#capslock#status()$/;"	f
airline#extensions#coc#get	.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get(type)$/;"	f
airline#extensions#coc#get_error	.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_error()$/;"	f
airline#extensions#coc#get_warning	.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_warning()$/;"	f
airline#extensions#coc#init	.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#init(ext)$/;"	f
airline#extensions#commandt#apply	.vim/plugged/vim-airline/autoload/airline/extensions/commandt.vim	/^function! airline#extensions#commandt#apply(...)$/;"	f
airline#extensions#commandt#init	.vim/plugged/vim-airline/autoload/airline/extensions/commandt.vim	/^function! airline#extensions#commandt#init(ext)$/;"	f
airline#extensions#csv#apply	.vim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#apply(...)$/;"	f
airline#extensions#csv#get_column	.vim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#get_column()$/;"	f
airline#extensions#csv#init	.vim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#init(ext)$/;"	f
airline#extensions#ctrlp#apply	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#apply(...)$/;"	f
airline#extensions#ctrlp#ctrlp_airline	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#ctrlp_airline(...)$/;"	f
airline#extensions#ctrlp#ctrlp_airline_status	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#ctrlp_airline_status(...)$/;"	f
airline#extensions#ctrlp#generate_color_map	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#generate_color_map(dark, light, white)$/;"	f
airline#extensions#ctrlp#init	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#init(ext)$/;"	f
airline#extensions#ctrlp#load_theme	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#load_theme(palette)$/;"	f
airline#extensions#ctrlspace#init	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^function! airline#extensions#ctrlspace#init(ext)$/;"	f
airline#extensions#ctrlspace#statusline	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^function! airline#extensions#ctrlspace#statusline(...)$/;"	f
airline#extensions#cursormode#activate	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#activate()$/;"	f
airline#extensions#cursormode#apply	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#apply(...)$/;"	f
airline#extensions#cursormode#init	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#init(ext)$/;"	f
airline#extensions#cursormode#set	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#set(...)$/;"	f
airline#extensions#cursormode#tmux_escape	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#tmux_escape(escape)$/;"	f
airline#extensions#default#apply	.vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! airline#extensions#default#apply(builder, context)$/;"	f
airline#extensions#denite#apply	.vim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#apply(...)$/;"	f
airline#extensions#denite#check_denite_mode	.vim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#check_denite_mode(bufnr)$/;"	f
airline#extensions#denite#init	.vim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#init(ext)$/;"	f
airline#extensions#eclim#creat_line	.vim/plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#creat_line(...)$/;"	f
airline#extensions#eclim#get_warnings	.vim/plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#get_warnings()$/;"	f
airline#extensions#eclim#init	.vim/plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#init(ext)$/;"	f
airline#extensions#example#apply	.vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#apply(...)$/;"	f
airline#extensions#example#get_cats	.vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#get_cats()$/;"	f
airline#extensions#example#init	.vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#init(ext)$/;"	f
airline#extensions#fugitiveline#bufname	.vim/plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! airline#extensions#fugitiveline#bufname()$/;"	f
airline#extensions#fugitiveline#init	.vim/plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! airline#extensions#fugitiveline#init(ext)$/;"	f
airline#extensions#get_loaded_extensions	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#get_loaded_extensions()$/;"	f
airline#extensions#grepper#init	.vim/plugged/vim-airline/autoload/airline/extensions/grepper.vim	/^function! airline#extensions#grepper#init(ext)$/;"	f
airline#extensions#grepper#status	.vim/plugged/vim-airline/autoload/airline/extensions/grepper.vim	/^function! airline#extensions#grepper#status()$/;"	f
airline#extensions#gutentags#init	.vim/plugged/vim-airline/autoload/airline/extensions/gutentags.vim	/^function! airline#extensions#gutentags#init(ext)$/;"	f
airline#extensions#gutentags#status	.vim/plugged/vim-airline/autoload/airline/extensions/gutentags.vim	/^function! airline#extensions#gutentags#status()$/;"	f
airline#extensions#hunks#get_hunks	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#get_hunks()$/;"	f
airline#extensions#hunks#get_raw_hunks	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#get_raw_hunks()$/;"	f
airline#extensions#hunks#init	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#init(ext)$/;"	f
airline#extensions#keymap#init	.vim/plugged/vim-airline/autoload/airline/extensions/keymap.vim	/^function! airline#extensions#keymap#init(ext)$/;"	f
airline#extensions#keymap#status	.vim/plugged/vim-airline/autoload/airline/extensions/keymap.vim	/^function! airline#extensions#keymap#status()$/;"	f
airline#extensions#languageclient#get	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get(type)$/;"	f
airline#extensions#languageclient#get_error	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get_error()$/;"	f
airline#extensions#languageclient#get_warning	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get_warning()$/;"	f
airline#extensions#languageclient#init	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#init(ext)$/;"	f
airline#extensions#load	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#load()$/;"	f
airline#extensions#load_theme	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#load_theme()$/;"	f
airline#extensions#localsearch#apply	.vim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#apply(...)$/;"	f
airline#extensions#localsearch#init	.vim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#init(ext)$/;"	f
airline#extensions#localsearch#load_theme	.vim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#load_theme(palette)$/;"	f
airline#extensions#neomake#get_errors	.vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#get_errors()$/;"	f
airline#extensions#neomake#get_warnings	.vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#get_warnings()$/;"	f
airline#extensions#neomake#init	.vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#init(ext)$/;"	f
airline#extensions#netrw#apply	.vim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#apply(...)$/;"	f
airline#extensions#netrw#init	.vim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#init(ext)$/;"	f
airline#extensions#netrw#sortstring	.vim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#sortstring()$/;"	f
airline#extensions#nrrwrgn#apply	.vim/plugged/vim-airline/autoload/airline/extensions/nrrwrgn.vim	/^function! airline#extensions#nrrwrgn#apply(...)$/;"	f
airline#extensions#nrrwrgn#init	.vim/plugged/vim-airline/autoload/airline/extensions/nrrwrgn.vim	/^function! airline#extensions#nrrwrgn#init(ext)$/;"	f
airline#extensions#obsession#get_status	.vim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^function! airline#extensions#obsession#get_status()$/;"	f
airline#extensions#obsession#init	.vim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^function! airline#extensions#obsession#init(ext)$/;"	f
airline#extensions#po#apply	.vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#apply(...)$/;"	f
airline#extensions#po#init	.vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#init(ext)$/;"	f
airline#extensions#po#on_winenter	.vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#on_winenter()$/;"	f
airline#extensions#po#shorten	.vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#shorten()$/;"	f
airline#extensions#po#stats	.vim/plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#stats()$/;"	f
airline#extensions#prepend_to_section	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#prepend_to_section(name, value)$/;"	f
airline#extensions#promptline#init	.vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^function! airline#extensions#promptline#init(ext)$/;"	f
airline#extensions#promptline#set_prompt_colors	.vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^function! airline#extensions#promptline#set_prompt_colors(palette)$/;"	f
airline#extensions#quickfix#apply	.vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#apply(...)$/;"	f
airline#extensions#quickfix#get_type	.vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#get_type()$/;"	f
airline#extensions#quickfix#inactive_qf_window	.vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#inactive_qf_window(...)$/;"	f
airline#extensions#quickfix#init	.vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#init(ext)$/;"	f
airline#extensions#syntastic#get	.vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get(type)$/;"	f
airline#extensions#syntastic#get_error	.vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get_error()$/;"	f
airline#extensions#syntastic#get_warning	.vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get_warning()$/;"	f
airline#extensions#syntastic#init	.vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#init(ext)$/;"	f
airline#extensions#tabline#add_label	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#add_label(dict, type, right)$/;"	f
airline#extensions#tabline#add_tab_label	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#add_tab_label(dict)$/;"	f
airline#extensions#tabline#autoshow#off	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! airline#extensions#tabline#autoshow#off()$/;"	f
airline#extensions#tabline#autoshow#on	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! airline#extensions#tabline#autoshow#on()$/;"	f
airline#extensions#tabline#buffers#clickbuf	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#clickbuf(minwid, clicks, button, modifiers) abort$/;"	f
airline#extensions#tabline#buffers#get	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#get()$/;"	f
airline#extensions#tabline#buffers#invalidate	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#invalidate()$/;"	f
airline#extensions#tabline#buffers#off	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#off()$/;"	f
airline#extensions#tabline#buffers#on	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#on()$/;"	f
airline#extensions#tabline#buflist#clean	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#clean()$/;"	f
airline#extensions#tabline#buflist#invalidate	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#invalidate()$/;"	f
airline#extensions#tabline#buflist#list	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#list()$/;"	f
airline#extensions#tabline#builder#new	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! airline#extensions#tabline#builder#new(context)$/;"	f
airline#extensions#tabline#ctrlspace#add_buffer_section	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#add_buffer_section(builder, cur_tab, cur_buf, pul/;"	f
airline#extensions#tabline#ctrlspace#add_tab_section	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#add_tab_section(builder, pull_right)$/;"	f
airline#extensions#tabline#ctrlspace#get	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#get()$/;"	f
airline#extensions#tabline#ctrlspace#invalidate	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#invalidate()$/;"	f
airline#extensions#tabline#ctrlspace#off	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#off()$/;"	f
airline#extensions#tabline#ctrlspace#on	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#on()$/;"	f
airline#extensions#tabline#enable	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#enable()$/;"	f
airline#extensions#tabline#formatters#default#format	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^function! airline#extensions#tabline#formatters#default#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#default#wrap_name	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^function! airline#extensions#tabline#formatters#default#wrap_name(bufnr, buffer_name)$/;"	f
airline#extensions#tabline#formatters#jsformatter#format	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/jsformatter.vim	/^function! airline#extensions#tabline#formatters#jsformatter#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#short_path#format	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/short_path.vim	/^function! airline#extensions#tabline#formatters#short_path#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#tabnr#format	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/tabnr.vim	/^function! airline#extensions#tabline#formatters#tabnr#format(tab_nr_type, nr)$/;"	f
airline#extensions#tabline#formatters#unique_tail#format	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail.vim	/^function! airline#extensions#tabline#formatters#unique_tail#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#unique_tail_improved#format	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail_improved.vim	/^function! airline#extensions#tabline#formatters#unique_tail_improved#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#get	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#get()$/;"	f
airline#extensions#tabline#get_buffer_name	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#get_buffer_name(nr, ...)$/;"	f
airline#extensions#tabline#group_of_bufnr	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#group_of_bufnr(tab_bufs, bufnr)$/;"	f
airline#extensions#tabline#init	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#init(ext)$/;"	f
airline#extensions#tabline#load_theme	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#load_theme(palette)$/;"	f
airline#extensions#tabline#new_builder	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#new_builder()$/;"	f
airline#extensions#tabline#redraw	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#redraw()$/;"	f
airline#extensions#tabline#tabs#get	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#get()$/;"	f
airline#extensions#tabline#tabs#invalidate	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#invalidate()$/;"	f
airline#extensions#tabline#tabs#map_keys	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#map_keys()$/;"	f
airline#extensions#tabline#tabs#off	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#off()$/;"	f
airline#extensions#tabline#tabs#on	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#on()$/;"	f
airline#extensions#tabline#tabs#tabnr_formatter	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#tabnr_formatter(nr, i) abort$/;"	f
airline#extensions#tabline#title	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#title(n)$/;"	f
airline#extensions#tabline#xtabline#filter_buffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#filter_buffers()$/;"	f
airline#extensions#tabline#xtabline#init	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#init()$/;"	f
airline#extensions#tabline#xtabline#maps	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#maps()$/;"	f
airline#extensions#tabline#xtabline#next_buffer	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#next_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#prev_buffer	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#prev_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#reopen_last_tab	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#reopen_last_tab()$/;"	f
airline#extensions#tabline#xtabline#select_buffer	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#select_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#toggle_buffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#toggle_buffers()$/;"	f
airline#extensions#tabline#xtabline#toggle_tabs	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#toggle_tabs()$/;"	f
airline#extensions#tabline#xtabline#update_obsession	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#update_obsession()$/;"	f
airline#extensions#tagbar#currenttag	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#currenttag()$/;"	f
airline#extensions#tagbar#get_status	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#get_status(...)$/;"	f
airline#extensions#tagbar#inactive_apply	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#inactive_apply(...)$/;"	f
airline#extensions#tagbar#init	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#init(ext)$/;"	f
airline#extensions#term#apply	.vim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#apply(...)$/;"	f
airline#extensions#term#inactive_apply	.vim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#inactive_apply(...)$/;"	f
airline#extensions#term#init	.vim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#init(ext)$/;"	f
airline#extensions#tmuxline#init	.vim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^function! airline#extensions#tmuxline#init(ext)$/;"	f
airline#extensions#tmuxline#set_tmux_colors	.vim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^function! airline#extensions#tmuxline#set_tmux_colors(palette)$/;"	f
airline#extensions#undotree#apply	.vim/plugged/vim-airline/autoload/airline/extensions/undotree.vim	/^function! airline#extensions#undotree#apply(...)$/;"	f
airline#extensions#undotree#init	.vim/plugged/vim-airline/autoload/airline/extensions/undotree.vim	/^function! airline#extensions#undotree#init(ext)$/;"	f
airline#extensions#unicode#apply	.vim/plugged/vim-airline/autoload/airline/extensions/unicode.vim	/^function! airline#extensions#unicode#apply(...)$/;"	f
airline#extensions#unicode#init	.vim/plugged/vim-airline/autoload/airline/extensions/unicode.vim	/^function! airline#extensions#unicode#init(ext)$/;"	f
airline#extensions#unite#apply	.vim/plugged/vim-airline/autoload/airline/extensions/unite.vim	/^function! airline#extensions#unite#apply(...)$/;"	f
airline#extensions#unite#init	.vim/plugged/vim-airline/autoload/airline/extensions/unite.vim	/^function! airline#extensions#unite#init(ext)$/;"	f
airline#extensions#vimagit#apply	.vim/plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#apply(...)$/;"	f
airline#extensions#vimagit#get_mode	.vim/plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#get_mode()$/;"	f
airline#extensions#vimagit#init	.vim/plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#init(ext)$/;"	f
airline#extensions#vimtex#apply	.vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#apply(...)$/;"	f
airline#extensions#vimtex#get_scope	.vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#get_scope()$/;"	f
airline#extensions#vimtex#init	.vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#init(ext)$/;"	f
airline#extensions#virtualenv#apply	.vim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#apply(...)$/;"	f
airline#extensions#virtualenv#init	.vim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#init(ext)$/;"	f
airline#extensions#virtualenv#update	.vim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#update()$/;"	f
airline#extensions#whitespace#check	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#check()$/;"	f
airline#extensions#whitespace#disable	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#disable()$/;"	f
airline#extensions#whitespace#init	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#init(...)$/;"	f
airline#extensions#whitespace#toggle	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#toggle()$/;"	f
airline#extensions#windowswap#get_status	.vim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^function! airline#extensions#windowswap#get_status()$/;"	f
airline#extensions#windowswap#init	.vim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^function! airline#extensions#windowswap#init(ext)$/;"	f
airline#extensions#wordcount#apply	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! airline#extensions#wordcount#apply(...)$/;"	f
airline#extensions#wordcount#formatters#default#to_string	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! airline#extensions#wordcount#formatters#default#to_string(wordcount)$/;"	f
airline#extensions#wordcount#formatters#default#update_fmt	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! airline#extensions#wordcount#formatters#default#update_fmt(...)$/;"	f
airline#extensions#wordcount#get	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function airline#extensions#wordcount#get()$/;"	f
airline#extensions#wordcount#init	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! airline#extensions#wordcount#init(ext)$/;"	f
airline#extensions#xkblayout#init	.vim/plugged/vim-airline/autoload/airline/extensions/xkblayout.vim	/^function! airline#extensions#xkblayout#init(ext)$/;"	f
airline#extensions#xkblayout#status	.vim/plugged/vim-airline/autoload/airline/extensions/xkblayout.vim	/^function! airline#extensions#xkblayout#status()$/;"	f
airline#extensions#ycm#get_error_count	.vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#get_error_count()$/;"	f
airline#extensions#ycm#get_warning_count	.vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#get_warning_count()$/;"	f
airline#extensions#ycm#init	.vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#init(ext)$/;"	f
airline#highlighter#add_accent	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#add_accent(accent)$/;"	f
airline#highlighter#add_separator	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#add_separator(from, to, inverse)$/;"	f
airline#highlighter#exec	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#exec(group, colors)$/;"	f
airline#highlighter#get_highlight	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#get_highlight(group, ...)$/;"	f
airline#highlighter#get_highlight2	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#get_highlight2(fg, bg, ...)$/;"	f
airline#highlighter#highlight	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#highlight(modes, ...)$/;"	f
airline#highlighter#highlight_modified_inactive	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#highlight_modified_inactive(bufnr)$/;"	f
airline#highlighter#load_theme	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#load_theme()$/;"	f
airline#highlighter#reset_hlcache	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! airline#highlighter#reset_hlcache()$/;"	f
airline#init#bootstrap	.vim/plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#bootstrap()$/;"	f
airline#init#gui_mode	.vim/plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#gui_mode()$/;"	f
airline#init#sections	.vim/plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#sections()$/;"	f
airline#load_theme	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#load_theme()$/;"	f
airline#mode_changed	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#mode_changed()$/;"	f
airline#msdos#round_msdos_colors	.vim/plugged/vim-airline/autoload/airline/msdos.vim	/^function! airline#msdos#round_msdos_colors(rgblist)$/;"	f
airline#parts#crypt	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#crypt()$/;"	f
airline#parts#define	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define(key, config)$/;"	f
airline#parts#define_accent	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_accent(key, accent)$/;"	f
airline#parts#define_condition	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_condition(key, predicate)$/;"	f
airline#parts#define_empty	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_empty(keys)$/;"	f
airline#parts#define_function	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_function(key, name)$/;"	f
airline#parts#define_minwidth	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_minwidth(key, width)$/;"	f
airline#parts#define_raw	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_raw(key, raw)$/;"	f
airline#parts#define_text	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_text(key, text)$/;"	f
airline#parts#ffenc	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#ffenc()$/;"	f
airline#parts#filetype	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#filetype()$/;"	f
airline#parts#get	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#get(key)$/;"	f
airline#parts#iminsert	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#iminsert()$/;"	f
airline#parts#mode	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#mode()$/;"	f
airline#parts#paste	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#paste()$/;"	f
airline#parts#readonly	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#readonly()$/;"	f
airline#parts#spell	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#spell()$/;"	f
airline#remove_statusline_func	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#remove_statusline_func(name)$/;"	f
airline#section#create	.vim/plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create(parts)$/;"	f
airline#section#create_left	.vim/plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create_left(parts)$/;"	f
airline#section#create_right	.vim/plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create_right(parts)$/;"	f
airline#statusline	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#statusline(winnr)$/;"	f
airline#switch_matching_theme	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#switch_matching_theme()$/;"	f
airline#switch_theme	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#switch_theme(name, ...)$/;"	f
airline#themes#generate_color_map	.vim/plugged/vim-airline/autoload/airline/themes.vim	/^function! airline#themes#generate_color_map(sect1, sect2, sect3, ...)$/;"	f
airline#themes#get_highlight	.vim/plugged/vim-airline/autoload/airline/themes.vim	/^function! airline#themes#get_highlight(group, ...)$/;"	f
airline#themes#get_highlight2	.vim/plugged/vim-airline/autoload/airline/themes.vim	/^function! airline#themes#get_highlight2(fg, bg, ...)$/;"	f
airline#themes#gruvbox#refresh	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^function! airline#themes#gruvbox#refresh()$/;"	f
airline#themes#patch	.vim/plugged/vim-airline/autoload/airline/themes.vim	/^function! airline#themes#patch(palette)$/;"	f
airline#update_statusline	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline()$/;"	f
airline#update_statusline_focuslost	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline_focuslost()$/;"	f
airline#update_statusline_inactive	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline_inactive(range)$/;"	f
airline#update_tabline	.vim/plugged/vim-airline/autoload/airline.vim	/^function! airline#update_tabline()$/;"	f
airline#util#append	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#append(text, minwidth)$/;"	f
airline#util#doautocmd	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#doautocmd(event)$/;"	f
airline#util#exec_funcrefs	.vim/plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#exec_funcrefs(list, ...)$/;"	f
airline#util#getwinvar	.vim/plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#getwinvar(winnr, key, def)$/;"	f
airline#util#has_custom_scm	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_custom_scm()$/;"	f
airline#util#has_fugitive	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_fugitive()$/;"	f
airline#util#has_lawrencium	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_lawrencium()$/;"	f
airline#util#has_vcscommand	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_vcscommand()$/;"	f
airline#util#ignore_buf	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#ignore_buf(name)$/;"	f
airline#util#prepend	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#prepend(text, minwidth)$/;"	f
airline#util#shorten	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#shorten(text, winwidth, minwidth, ...)$/;"	f
airline#util#strchars	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#strchars(str)$/;"	f
airline#util#themes	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#themes(match)$/;"	f
airline#util#warning	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#warning(msg)$/;"	f
airline#util#winwidth	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#winwidth(...)$/;"	f
airline#util#wrap	.vim/plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#wrap(text, minwidth)$/;"	f
airline_ale	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^  augroup airline_ale$/;"	a
airline_languageclient	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^  augroup airline_languageclient$/;"	a
airline_tabline_autoshow	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^  augroup airline_tabline_autoshow$/;"	a
airline_tabline_buffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  augroup airline_tabline_buffers$/;"	a
airline_tabline_ctrlspace	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^  augroup airline_tabline_ctrlspace$/;"	a
airline_tabline_tabs	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  augroup airline_tabline_tabs$/;"	a
airline_whitespace	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^    augroup airline_whitespace$/;"	a
airline_whitespace	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^  augroup airline_whitespace$/;"	a
akey	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    akey = "'te{}stâ'".format('"')$/;"	v	class:VerifyVimDict2
akey	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    akey = '"te{}stâ"'.format("'")$/;"	v	class:VerifyVimDict3
ale#sources#OmniSharp#ProcessResults	.vim/plugged/omnisharp-vim/autoload/ale/sources/OmniSharp.vim	/^function! ale#sources#OmniSharp#ProcessResults(opts, locations) abort$/;"	f
ale#sources#OmniSharp#WantResults	.vim/plugged/omnisharp-vim/autoload/ale/sources/OmniSharp.vim	/^function! ale#sources#OmniSharp#WantResults(buffer) abort$/;"	f
aleItems	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^          let aleItems = diagnostics.map(o => {$/;"	v
ale_linters#cs#omnisharp#GetCommand	.vim/plugged/omnisharp-vim/ale_linters/cs/omnisharp.vim	/^function! ale_linters#cs#omnisharp#GetCommand(bufnum) abort$/;"	f
ale_linters#cs#omnisharp#ProcessOutput	.vim/plugged/omnisharp-vim/ale_linters/cs/omnisharp.vim	/^function! ale_linters#cs#omnisharp#ProcessOutput(buffer, lines) abort$/;"	f
algo	.vim/plugged/fzf/src/algo/algo.go	/^package algo$/;"	p
algo	.vim/plugged/fzf/src/algo/algo_test.go	/^package algo$/;"	p
algo	.vim/plugged/fzf/src/algo/normalize.go	/^package algo$/;"	p
alignTop	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      let { nvim, alignTop } = this$/;"	v
alignTop	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let alignTop = false$/;"	v
all	.config/nvim/plugged/emmet-vim/Makefile	/^all : emmet-vim.zip$/;"	t
all	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var val, ret, namespace, all, handlers;$/;"	v
all	.config/nvim/plugged/html5.vim/Makefile	/^all: install-deps install$/;"	t
all	.config/nvim/plugged/targets.vim/test/Makefile	/^all: | test check$/;"	t
all	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      let all: Placeholder[] = []$/;"	v
all	.vim/plugged/fzf/Makefile	/^all: target\/$(BINARY)$/;"	t
allDiagnostics	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        let allDiagnostics: Map<string, any[]> = new Map()$/;"	v
allOf	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	a	object:definitions.languageServerCommand
allOf	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	a	object:definitions.languageServerModule
allOf	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	a	object:definitions.languageServerSocket
allOf	.vim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	a	object:definitions.languageServerCommand
allOf	.vim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	a	object:definitions.languageServerModule
allOf	.vim/plugged/coc.nvim/data/schema.json	/^      "allOf": [{"$ref": "#\/definitions\/languageServerBase"}],$/;"	a	object:definitions.languageServerSocket
alloc16	.vim/plugged/fzf/src/algo/algo.go	/^func alloc16(offset int, slab *util.Slab, size int) (int, []int16) {$/;"	f	package:algo	typeref:typename:(int, []int16)
alloc32	.vim/plugged/fzf/src/algo/algo.go	/^func alloc32(offset int, slab *util.Slab, size int) (int, []int32) {$/;"	f	package:algo	typeref:typename:(int, []int32)
allowJs	tsconfig.json	/^    "allowJs": true,$/;"	b	object:compilerOptions
allowUnreachableCode	.vim/plugged/coc.nvim/tsconfig.json	/^    "allowUnreachableCode": false,$/;"	b	object:compilerOptions
am	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> am :<C-U>call <SID>wrap_a('[m',']M')<CR>$/;"	m
am	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    xnoremap <silent> <buffer> am :<C-U>call <SID>wrap_a('[m',']M')<CR>$/;"	m
animate	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^animate,$/;"	s
animateMotion	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^animateMotion,$/;"	s
animateTransform	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^animateTransform,$/;"	s
ansi	.vim/plugged/fzf/src/terminal.go	/^	ansi       bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
ansiHighlights	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let { ansiHighlights } = items[i]$/;"	v
ansiHighlights	.vim/plugged/coc.nvim/src/types.ts	/^  ansiHighlights?: AnsiHighlight[]$/;"	p	interface:ListItem
ansiItems	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let ansiItems = ansiparse(label)$/;"	v
ansiOffset	.vim/plugged/fzf/src/ansi.go	/^type ansiOffset struct {$/;"	s	package:fzf
ansiRegex	.vim/plugged/fzf/src/ansi.go	/^var ansiRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
ansiState	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^  let ansiState = []$/;"	C
ansiState	.vim/plugged/fzf/src/ansi.go	/^type ansiState struct {$/;"	s	package:fzf
ansiparse	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^export function ansiparse(str: string): AnsiItem[] {$/;"	C
any	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let val = await nvim.getVar('coc#_context') as any$/;"	v
any	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let { matchIds } = buf as any$/;"	v
any	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let res = extensions.getExtensionApi('test') as any$/;"	v
any	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let val = await nvim.eval('g:coc#_context') as any$/;"	v
any	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let { codeLenes, version } = this.codeLensMap.get(bufnr) || {} as any$/;"	v
any	.vim/plugged/coc.nvim/src/model/document.ts	/^    let o = (await nvim.call('coc#util#get_content', id)) as any$/;"	v
any_include?	.vim/plugged/fzf/test/test_go.rb	/^          def any_include?(val)$/;"	f	method:until
append	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def append(self, line, line_number=-1):$/;"	m	class:VimBufferProxy
append	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let append = items.slice(0, max)$/;"	v
append	.vim/plugged/coc.nvim/src/types.ts	/^  append(value: string): void$/;"	m	interface:OutputChannel
append	.vim/plugged/coc.nvim/src/types.ts	/^  append?: boolean$/;"	p	interface:ListItemsEvent
append	.vim/plugged/fzf/src/history.go	/^func (h *History) append(line string) error {$/;"	f	struct:fzf.History	typeref:typename:error
appendLine	.vim/plugged/coc.nvim/src/types.ts	/^  appendLine(value: string): void$/;"	m	interface:OutputChannel
appendOutput	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  private appendOutput(data: any, encoding: string): void {$/;"	m	class:LanguageClient
appendOutput	.vim/plugged/coc.nvim/src/watchman.ts	/^  private appendOutput(message: string, type = "Info"): void {$/;"	m	class:Watchman
append_line	.vim/plugged/fzf/install	/^append_line() {$/;"	f
applyEdit	.vim/plugged/coc.nvim/src/types.ts	/^  applyEdit(edit: WorkspaceEdit): Promise<boolean>$/;"	m	interface:IWorkspace
applyEdits	.vim/plugged/coc.nvim/src/__tests__/modules/diff.test.ts	/^  function applyEdits(oldStr: string, newStr: string): void {$/;"	f
arg	.vim/plugged/coc.nvim/src/list/basic.ts	/^      let arg = args[i]$/;"	v
arglist	.vim/plugged/coc.nvim/src/types.ts	/^  arglist?: string[]$/;"	p	interface:Autocmd
args	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "args": {$/;"	o	object:definitions.languageServerCommand.properties
args	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "args": {$/;"	o	object:definitions.languageServerModule.properties
args	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    args: typing.List[str] = []$/;"	v	class:Context
args	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = '"simple $1 expand $1 $0"'$/;"	v	class:Anon_NoTrigger_Multi
args	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = '"simple $1 expand $1 $0", "abc"'$/;"	v	class:Anon_Trigger_Multi
args	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = '"simple expand"'$/;"	v	class:Anon_NoTrigger_AfterSpace
args	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = '"simple expand"'$/;"	v	class:Anon_NoTrigger_Simple
args	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = '"simple expand", ".*abc", "desc", "r"'$/;"	v	class:Anon_Trigger_Opts
args	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = '"simple expand", "abc"'$/;"	v	class:Anon_Trigger_Simple
args	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = '"simple expand", "abc"'$/;"	v	class:Anon_Trigger_Twice
args	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = ''$/;"	v	class:_AnonBase
args	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = r"':latex:\\`$1\\`$0'"$/;"	v	class:Anon_NoTrigger_BeginningOfLine
args	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = r"':latex:\\`$1\\`$0'"$/;"	v	class:Anon_NoTrigger_FirstCharOfLine
args	.config/nvim/plugged/ultisnips/test/test_Autocommands.py	/^    args = ''$/;"	v	class:Autocommands
args	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    args = '".*test", "simple expand", "desc", "r", "all", 0'$/;"	v	class:AddFunc_Opt
args	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    args = '"test", "simple expand", "desc", "", "all", 0'$/;"	v	class:AddFunc_Simple
args	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    args = ''$/;"	v	class:_AddFuncBase
args	.vim/plugged/coc.nvim/data/schema.json	/^        "args": {$/;"	o	object:definitions.languageServerCommand.properties
args	.vim/plugged/coc.nvim/data/schema.json	/^        "args": {$/;"	o	object:definitions.languageServerModule.properties
args	.vim/plugged/coc.nvim/src/commands.ts	/^    let args = [command.command]$/;"	v
args	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  args?: string[]$/;"	p	interface:Executable
args	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  args?: string[]$/;"	p	interface:NodeModule
args	.vim/plugged/coc.nvim/src/list/manager.ts	/^      args: this.args.join( ' ' ),$/;"	v
args	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private args: string[] = []$/;"	C
args	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^    let args = this.parseArguments(context.args)$/;"	v
args	.vim/plugged/coc.nvim/src/model/terminal.ts	/^    private args: string[],$/;"	p	class:TerminalModel
args	.vim/plugged/coc.nvim/src/types.ts	/^  args: string[]$/;"	p	interface:ListContext
args	.vim/plugged/coc.nvim/src/types.ts	/^  args?: string[]$/;"	p	interface:LanguageServerConfig
args	.vim/plugged/coc.nvim/src/types.ts	/^  args?: string[]$/;"	p	interface:TaskOptions
args	.vim/plugged/coc.nvim/src/util/factory.ts	/^    const args = [this.exports, require, this, filename, dirname]$/;"	C	function:compileInSandbox
args	.vim/plugged/coc.nvim/src/util/throttle.ts	/^  let args$/;"	v
args	.vim/plugged/coc.nvim/src/workspace.ts	/^      let args = autocmd.arglist && autocmd.arglist.length ? ', ' + autocmd.arglist.join(', ') :/;"	v
args	.vim/plugged/coc.nvim/src/workspace.ts	/^    let args = opts.shellArgs$/;"	v
args=	.vim/plugged/fzf/bin/fzf-tmux	/^args=()$/;"	f
arguments	.vim/plugged/coc.nvim/src/handler/index.ts	/^          arguments: command.arguments$/;"	v
arguments	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^            arguments: command.arguments$/;"	v
aria_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, drag_and_drop_attributes)$/;"	v
aria_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, live_region_attributes)$/;"	v
aria_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, relationship_attributes)$/;"	v
aria_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = extend(aria_attributes, widget_attributes)$/;"	v
aria_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes = global_states_and_properties$/;"	v
aria_attributes_value	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let aria_attributes_value = {$/;"	v
arr	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^    let arr: string[] = []$/;"	v
arr	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let arr = positions("amuser", "app\/models\/user.rb")$/;"	v
arr	.vim/plugged/coc.nvim/src/commands.ts	/^    let arr = command.arguments$/;"	v
arr	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let arr = results.filter(res => res.isIncomplete == true)$/;"	v
arr	.vim/plugged/coc.nvim/src/completion/index.ts	/^      arr = sources.getCompleteSources(option)$/;"	v
arr	.vim/plugged/coc.nvim/src/completion/index.ts	/^      if (s) arr.push(s)$/;"	v
arr	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let arr: ISource[] = []$/;"	v
arr	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^    let arr = this.diagnosticsMap.get(uri)$/;"	v
arr	.vim/plugged/coc.nvim/src/events.ts	/^      let arr = this.handlers.get(event) || []$/;"	v
arr	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let arr = [bufnr, cursor[0], cursor[1]]$/;"	v
arr	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let arr = await this.nvim.call('getcurpos') as number[]$/;"	v
arr	.vim/plugged/coc.nvim/src/handler/index.ts	/^      this.hoverPosition = [workspace.bufnr, arr[1], arr[2]]$/;"	v
arr	.vim/plugged/coc.nvim/src/list/basic.ts	/^      let arr: Range[] = []$/;"	v
arr	.vim/plugged/coc.nvim/src/list/history.ts	/^    let arr = await db.fetch(`${name}.${encodeURIComponent(workspace.cwd)}`)$/;"	v
arr	.vim/plugged/coc.nvim/src/model/document.ts	/^    let arr: number[][] = []$/;"	v
arr	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^      for (let arr of group(positions, 8)) {$/;"	v
arr	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^      let arr = await Promise.all(fragments.map(f => {$/;"	v
arr	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^      let arr = content.split(\/\\r?\\n\/)$/;"	v
arr	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    for (let arr of group(this.positions || [], 8)) {$/;"	v
arr	.vim/plugged/coc.nvim/src/provider/documentLinkManager.ts	/^    const arr = await Promise.all(items.map(item => {$/;"	C	method:DocumentLinkManager.provideDocumentLinks
arr	.vim/plugged/coc.nvim/src/sources.ts	/^      let arr = await util.promisify(fs.readdir)(folder)$/;"	v
array	.vim/plugged/coc.nvim/src/util/is.ts	/^export function array(array: any): array is any[] {$/;"	f
arrays of chars	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "arrays of chars" do$/;"	d
article	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^article {$/;"	s
as	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let val = await nvim.getVar('coc#_context') as any$/;"	v
as	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let winid = await nvim.call('bufwinid', buf.bufnr) as number$/;"	v
as	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let { matchIds } = buf as any$/;"	v
as	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let bufnr = await nvim.call('nvim_win_get_buf', winid) as number$/;"	v
as	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let res = extensions.getExtensionApi('test') as any$/;"	v
as	.vim/plugged/coc.nvim/src/__tests__/modules/plugin.test.ts	/^    let res = await nvim.call('execute', `helptags ${dir}`) as string$/;"	v
as	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let name = await nvim.eval('bufname("%")') as string$/;"	v
as	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let val = await nvim.eval('g:coc#_context') as any$/;"	v
as	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let winid = await this.nvim.call('bufwinid', this.bufnr) as number$/;"	v
as	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      winid = await nvim.call('bufwinid', bufnr) as number$/;"	v
as	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        let echoLine = await this.nvim.call('coc#util#echo_line') as string$/;"	v
as	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        let winid = await nvim.call('win_getid') as number$/;"	v
as	.vim/plugged/coc.nvim/src/extensions.ts	/^        return exports as API$/;"	v
as	.vim/plugged/coc.nvim/src/extensions.ts	/^    let runtimepath = await workspace.nvim.eval('&runtimepath') as string$/;"	v
as	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let link = definition[0] as LocationLink$/;"	v
as	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let { name, kind, location, containerName } = sym as SymbolInformation$/;"	v
as	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let [pos, line] = await nvim.eval('[coc#util#cursor(), getline(".")]') as [[number, number/;"	v
as	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let arr = await this.nvim.call('getcurpos') as number[]$/;"	v
as	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let count = await this.nvim.getVvar('count') as number$/;"	v
as	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let lnum = await this.nvim.getVvar('lnum') as number$/;"	v
as	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let location = definition[0] as Location$/;"	v
as	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let [bufnr, mode] = await nvim.eval(`[bufnr('%'), mode()]`) as [number, string]$/;"	v
as	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let bufnr = await this.nvim.call('bufnr', '%') as number$/;"	v
as	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let locations: Location[] = Array.isArray(definition) ? definition as Location[] : [definiti/;"	v
as	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      const responseError = data as ResponseError<any>$/;"	C	method:BaseLanguageClient.data2String
as	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^    const implCapabilities = capabilities.colorProvider as TextDocumentRegistrationOptions &$/;"	C	method:ColorProviderFeature.initialize
as	.vim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^    const implCapabilities = capabilities.foldingRangeProvider as TextDocumentRegistrationOption/;"	C	method:FoldingRangeFeature.initialize
as	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^    const implCapabilities = capabilities.selectionRangeProvider as TextDocumentRegistrationOpti/;"	C	method:SelectionRangeFeature.initialize
as	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let n = await nvim.call( 'confirm', ['Choose action:', choices.join( '\\n' )] ) as number$/;"	C
as	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let text = await this.nvim.eval('@*') as string$/;"	v
as	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^      let action = item.data.action as CodeAction$/;"	v
as	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let [start, end] = await nvim.eval('[line("w0"),line("w$")]') as number[]$/;"	v
as	.vim/plugged/coc.nvim/src/list/worker.ts	/^        for (let item of filtered as ExtendedItem[]) {$/;"	v
as	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let task = this.task = items as ListTask$/;"	v
as	.vim/plugged/coc.nvim/src/model/document.ts	/^    let change = await this.nvim.call('coc#util#get_changeinfo', []) as ChangeInfo$/;"	v
as	.vim/plugged/coc.nvim/src/model/document.ts	/^    let o = (await nvim.call('coc#util#get_content', id)) as any$/;"	v
as	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let filetype = await this.nvim.eval('&filetype') as string$/;"	v
as	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let [mode, line, col] = await this.nvim.eval('[mode(),line("."),col(".")]') as [string, numb/;"	v
as	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let [row, col] = await nvim.call('coc#util#win_position') as [number, number]$/;"	v
as	.vim/plugged/coc.nvim/src/services.ts	/^    let client = service.client as LanguageClient$/;"	v
as	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let [ve, selection, pumvisible, mode] = await nvim.eval('[&virtualedit, &selection, pumvisib/;"	v
as	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^    let lnum = await nvim.call('line', '.') as number$/;"	v
as	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^    let selected = await this.nvim.getVar('coc_selected_text') as string$/;"	v
as	.vim/plugged/coc.nvim/src/sources.ts	/^      let fns = await nvim.call('coc#util#remote_fns', name) as string[]$/;"	v
as	.vim/plugged/coc.nvim/src/util/factory.ts	/^  }) as ISandbox$/;"	C	function:createSandbox
as	.vim/plugged/coc.nvim/src/workspace.ts	/^            let { textDocument, edits } = change as TextDocumentEdit$/;"	v
as	.vim/plugged/coc.nvim/src/workspace.ts	/^        let { edits, textDocument } = change as TextDocumentEdit$/;"	v
as	.vim/plugged/coc.nvim/src/workspace.ts	/^        let { textDocument } = change as TextDocumentEdit$/;"	v
as	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [, el, ec] = await nvim.call('getpos', isVisual ? `'>` : `']`) as [number, number, numbe/;"	v
as	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [, sl, sc] = await nvim.call('getpos', isVisual ? `'<` : `'[`) as [number, number, numbe/;"	v
as	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [bufnr, ve, selection, mode] = await nvim.eval(`[bufnr('%'), &virtualedit, &selection, m/;"	v
as	.vim/plugged/coc.nvim/src/workspace.ts	/^    let bufnr = await nvim.eval('bufnr("%")') as number$/;"	v
as	.vim/plugged/coc.nvim/src/workspace.ts	/^    let encoding = await this.nvim.getOption('fileencoding') as string$/;"	v
as	.vim/plugged/coc.nvim/src/workspace.ts	/^    let filepath = await this.nvim.call('expand', '%:p') as string$/;"	v
as	.vim/plugged/coc.nvim/src/workspace.ts	/^    let res = new Set() as Set<string>$/;"	v
as	.vim/plugged/coc.nvim/src/workspace.ts	/^    let tabSize = await this.getDocumentOption('shiftwidth', doc) as number$/;"	v
asAbsolutePath	.vim/plugged/coc.nvim/src/extensions.ts	/^          asAbsolutePath: relativePath => {$/;"	v
asAbsolutePath	.vim/plugged/coc.nvim/src/types.ts	/^  asAbsolutePath(relativePath: string): string$/;"	m	interface:ExtensionContext
asChangeTextDocumentParams	.vim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asChangeTextDocumentParams(document: TextDocument): DidChangeTextDocumentParams /;"	f
asCloseTextDocumentParams	.vim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asCloseTextDocumentParams(document: TextDocument): DidCloseTextDocumentParams {$/;"	f
asCodeLensParams	.vim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asCodeLensParams(textDocument: TextDocument): CodeLensParams {$/;"	f
asCompletionParams	.vim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asCompletionParams(textDocument: TextDocument, position: Position, context: Comp/;"	f
asDocumentSymbolParams	.vim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asDocumentSymbolParams(textDocument: TextDocument): DocumentSymbolParams {$/;"	f
asLanguageIds	.vim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asLanguageIds(documentSelector: DocumentSelector): string[] {$/;"	f
asReferenceParams	.vim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asReferenceParams(textDocument: TextDocument, position: Position, options: { inc/;"	f
asSaveTextDocumentParams	.vim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asSaveTextDocumentParams(document: TextDocument, includeText: boolean): DidSaveT/;"	f
asTextDocumentIdentifier	.vim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asTextDocumentIdentifier(textDocument: TextDocument): TextDocumentIdentifier {$/;"	f
asTextDocumentPositionParams	.vim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asTextDocumentPositionParams(textDocument: TextDocument, position: Position): Te/;"	f
asUri	.vim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asUri(resource: URI): string {$/;"	f
asVersionedTextDocumentIdentifier	.vim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asVersionedTextDocumentIdentifier(textDocument: TextDocument): VersionedTextDocu/;"	f
asWillSaveTextDocumentParams	.vim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function asWillSaveTextDocumentParams(event: TextDocumentWillSaveEvent): WillSaveTextDocu/;"	f
as_unicode	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/compatibility.py	/^    def as_unicode(string):$/;"	f
as_vimencoding	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/compatibility.py	/^    def as_vimencoding(string):$/;"	f
asciiFuzzyIndex	.vim/plugged/fzf/src/algo/algo.go	/^func asciiFuzzyIndex(input *util.Chars, pattern []rune, caseSensitive bool) int {$/;"	f	package:algo	typeref:typename:int
asciicast-4568	.config/nvim/plugged/emmet-vim/docs/index.html	/^				<script type="text\/javascript" src="https:\/\/asciinema.org\/a\/4568.js" id="asciicast-4568/;"	I
ask	.vim/plugged/fzf/install	/^ask() {$/;"	f
ask	.vim/plugged/fzf/uninstall	/^ask() {$/;"	f
assert	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^          assert.equal(diagnostics.length, 0)$/;"	v
assert	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^          assert.ok(Array.isArray(diagnostics))$/;"	v
assert	.vim/plugged/coc.nvim/src/__tests__/client/server/testInitializeResult.js	/^const assert = tslib_1.__importStar(require("assert"));$/;"	C
assert	.vim/plugged/fzf/src/merger_test.go	/^func assert(t *testing.T, cond bool, msg ...string) {$/;"	f	package:fzf
assertEscaped	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^  function assertEscaped(value: string, expected: string) {$/;"	f
assertIdent	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    function assertIdent(input: string): void {$/;"	f
assertLen	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    function assertLen(template: string, ...lengths: number[]): void {$/;"	f
assertMarker	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^  function assertMarker(input: TextmateSnippet | Marker[] | string, ...ctors: Function[]) {$/;"	f
assertMatch	.vim/plugged/fzf/src/algo/algo_test.go	/^func assertMatch(t *testing.T, fun Algo, caseSensitive, forward bool, input, pattern string, sid/;"	f	package:algo
assertMatch2	.vim/plugged/fzf/src/algo/algo_test.go	/^func assertMatch2(t *testing.T, fun Algo, caseSensitive, normalize, forward bool, input, pattern/;"	f	package:algo
assertParent	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    function assertParent(marker: Marker) {$/;"	f
assertText	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^  function assertText(value: string, expected: string) {$/;"	f
assertTextAndMarker	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^  function assertTextAndMarker(value: string, escaped: string, ...ctors: Function[]) {$/;"	f
assertTextsnippetString	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    function assertTextsnippetString(input: string, expected: string): void {$/;"	f
assert_correct_highlighting	.config/nvim/plugged/vim-ruby/spec/spec_helper.rb	/^  def assert_correct_highlighting(extension='rb', string, patterns, group)$/;"	f
assert_correct_indenting	.config/nvim/plugged/vim-ruby/spec/spec_helper.rb	/^  def assert_correct_indenting(extension='rb', string)$/;"	f
assert_file_contents	.config/nvim/plugged/dsf.vim/spec/support/vim.rb	/^    def assert_file_contents(string)$/;"	f	module:Support.Vim
assert_file_contents	.config/nvim/plugged/sideways.vim/spec/support/vim.rb	/^    def assert_file_contents(string)$/;"	f	module:Support.Vim
assert_file_contents	.config/nvim/plugged/switch.vim/spec/support/vim.rb	/^    def assert_file_contents(string)$/;"	f	module:Support.Vim
assert_file_contents	.config/nvim/plugged/tagalong.vim/spec/support/vim.rb	/^    def assert_file_contents(string)$/;"	f	module:Support.Vim
assignments	.config/nvim/plugged/vim-ruby/spec/indent/continuations_spec.rb	/^  describe "assignments" do$/;"	d
async	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async cancel( close = true ): Promise<void> {$/;"	C
async	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async chooseAction(): Promise<void> {$/;"	C
async	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async doAction( name?: string ): Promise<void> {$/;"	C
async	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async next(): Promise<void> {$/;"	C
async	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async previous(): Promise<void> {$/;"	C
async	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async resume(): Promise<void> {$/;"	C
async	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async start( args: string[] ): Promise<void> {$/;"	C
async	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async switchMatcher(): Promise<void> {$/;"	C
async	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async togglePreview(): Promise<void> {$/;"	C
async	.vim/plugged/coc.nvim/src/model/status.ts	/^  private async setStatusText(): Promise<void> {$/;"	C
async_action	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/__init__.py	/^        def async_action(self, args: typing.List[typing.Any]) -> None:$/;"	m	class:DefxHandlers
asyncomplete#sources#OmniSharp#completor	.vim/plugged/omnisharp-vim/autoload/asyncomplete/sources/OmniSharp.vim	/^function! asyncomplete#sources#OmniSharp#completor(opt, ctx) abort$/;"	f
at	.vim/plugged/fzf/src/terminal.go	/^	at   time.Time$/;"	m	struct:fzf.selectedItem	typeref:typename:time.Time
atof	.vim/plugged/fzf/src/options.go	/^func atof(str string) float64 {$/;"	f	package:fzf	typeref:typename:float64
atoi	.vim/plugged/fzf/src/options.go	/^func atoi(str string) int {$/;"	f	package:fzf	typeref:typename:int
atoi	.vim/plugged/fzf/src/tui/light.go	/^func atoi(s string, defaultValue int) int {$/;"	f	package:tui	typeref:typename:int
attach_vim	.config/nvim/plugged/denite.nvim/autoload/denite/_main.py	/^def attach_vim(serveraddr):$/;"	f
attach_vim	.vim/plugged/denite.nvim/autoload/denite/_main.py	/^def attach_vim(serveraddr):$/;"	f
attached	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let attached = buf.isAttached$/;"	v
attached	.vim/plugged/coc.nvim/src/model/document.ts	/^      let attached = await this.attach()$/;"	v
attached	.vim/plugged/coc.nvim/src/model/document.ts	/^      let attached = await this.buffer.attach(false)$/;"	v
attached	.vim/plugged/coc.nvim/src/model/document.ts	/^  private attached = false$/;"	p	class:Document
attr	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/action.py	/^    attr: ActionAttr = ActionAttr.NONE$/;"	v	class:ActionTable
attr	.vim/plugged/fzf/src/ansi.go	/^	attr tui.Attr$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Attr
attr	.vim/plugged/fzf/src/result.go	/^	attr   tui.Attr$/;"	m	struct:fzf.colorOffset	typeref:typename:tui.Attr
attrCodes	.vim/plugged/fzf/src/tui/light.go	/^func attrCodes(attr Attr) []string {$/;"	f	package:tui	typeref:typename:[]string
attrFor	.vim/plugged/fzf/src/tui/tui.go	/^func attrFor(color ColorPair, attr Attr) Attr {$/;"	f	package:tui	typeref:typename:Attr
attributes_value	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, event_attributes_value)$/;"	v
attributes_value	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, microdata_attributes_value)$/;"	v
attributes_value	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let attributes_value = extend(attributes_value, rdfa_attributes_value)$/;"	v
attributes_value	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let attributes_value = {$/;"	v
au	.config/nvim/plugged/vim-operator-user/t/register-designations.vim	/^onoremap au  :<C-u>normal! v$<Return>$/;"	m
au	.vim/plugged/coc.nvim/src/list/worker.ts	/^              let au = getItemUri(a)$/;"	v
author	.config/nvim/plugged/coc.nvim/package.json	/^  "author": "Qiming Zhao <chemzqm@gmail.com>",$/;"	s
author	.config/nvim/plugged/emmet-vim/docs/index.html	/^			<article id="author">$/;"	I
author	.config/nvim/plugged/gruvbox/package.json	/^  "author": "Pavel Pertsev <morhetz@gmail.com>",$/;"	s
author	.config/nvim/plugged/vim-snippets/addon-info.json	/^  "author" : "community",$/;"	s
author	.vim/plugged/coc.nvim/package.json	/^  "author": "Qiming Zhao <chemzqm@gmail.com>",$/;"	s
author	.vim/plugged/vim-snippets/addon-info.json	/^  "author" : "community",$/;"	s
autoPreview	.vim/plugged/coc.nvim/src/list/manager.ts	/^        autoPreview = true$/;"	C
autoPreview	.vim/plugged/coc.nvim/src/list/manager.ts	/^        autoPreview,$/;"	C
autoPreview	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let autoPreview = false$/;"	C
autoPreview	.vim/plugged/coc.nvim/src/types.ts	/^  autoPreview: boolean$/;"	p	interface:ListOptions
autoTrigger	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let autoTrigger = completion.config.autoTrigger$/;"	v
autoTrigger	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let autoTrigger = getConfig<string>('autoTrigger', 'always')$/;"	v
autoTrigger	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let autoTrigger = this.config.autoTrigger$/;"	v
autoTrigger	.vim/plugged/coc.nvim/src/types.ts	/^  autoTrigger: string$/;"	p	interface:CompleteConfig
auto_cd	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    auto_cd: bool = False$/;"	v	class:Context
auto_recursive_level	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    auto_recursive_level: int = 0$/;"	v	class:Context
autocmd	.vim/plugged/coc.nvim/src/workspace.ts	/^      let event = Array.isArray(autocmd.event) ? autocmd.event.join(' ') : autocmd.event$/;"	v
autocmd	.vim/plugged/coc.nvim/src/workspace.ts	/^    for (let [id, autocmd] of this.autocmds.entries()) {$/;"	v
autofill_tokens	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let autofill_tokens = ['on', 'off', 'name', 'honorific-prefix', 'given-name', 'additional-name',/;"	v
awkBlack	.vim/plugged/fzf/src/tokenizer.go	/^	awkBlack$/;"	c	package:fzf
awkNil	.vim/plugged/fzf/src/tokenizer.go	/^	awkNil = iota$/;"	c	package:fzf
awkTokenizer	.vim/plugged/fzf/src/tokenizer.go	/^func awkTokenizer(input string) ([]string, int) {$/;"	f	package:fzf	typeref:typename:([]string, int)
awkWhite	.vim/plugged/fzf/src/tokenizer.go	/^	awkWhite$/;"	c	package:fzf
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = '', ''$/;"	v	class:TestEmptyString
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = 'Hello', 'Hello\\nWorld\\nWorld\\nWorld'$/;"	v	class:TestLotsaNewlines
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = 'abc', 'def'$/;"	v	class:TestNoSubstring
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = 'abcdef', 'abcdef'$/;"	v	class:TestAllMatch
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = 'hasomelongertextbl', 'hol'$/;"	v	class:TestCommonCharacters
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ['Hello  World'], ['Hello   World']$/;"	v	class:TestGuessing_InsertOneChar
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ['Hello  World'], ['Hello   World']$/;"	v	class:TestGuessing_InsertOneChar1
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ['Hello  World'], ['Hello World']$/;"	v	class:TestGuessing_BackspaceOneChar
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ['Hello  World'], ['Hello World']$/;"	v	class:TestGuessing_DeleteOneChar
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = [], []$/;"	v	class:TestGuessing_Noop0
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = 'Vorne Hinten'$/;"	v	class:TestCheapDelete
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = 'Vorne hallo  Hinten'$/;"	v	class:TestRealLife1
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = 'hallo Blah mitte=sdfdsfsd\\nhallo b mittekjshdkfhkhsdfdsf'$/;"	v	class:TestCrash
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = 'hallo End t'$/;"	v	class:TestRealLife
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = 'hi first line\\nsecond line k world'$/;"	v	class:MultiLine
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = 'n'$/;"	v	class:TestWithNewline
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = 's'$/;"	v	class:MatchIsTooCheap
b	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = 'this is it a this is it'$/;"	v	class:TestUltiSnipsProblem
b	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map b <Plug>(easymotion-b)$/;"	m
b	.config/nvim/plugged/vim-easymotion/t/operator_pending_spec.vim	/^        omap b <Plug>(easymotion-b)$/;"	m
b	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let b = score("amuser", "app\/models\/customer.rb")$/;"	v
b	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  b = 98,$/;"	e	enum:CharCode
b	.vim/plugged/coc.nvim/src/util/string.ts	/^  const len2 = b ? b.length : 0$/;"	C	function:equalsIgnoreCase
b.get_group	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  function! b.get_group(i) dict$/;"	f
b.get_group	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  function! b.get_group(i) dict$/;"	f
b.get_posttitle	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    function! b.get_posttitle(i) dict$/;"	f
b.get_pretitle	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    function! b.get_pretitle(i) dict$/;"	f
b.get_title	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  function! b.get_title(i) dict$/;"	f
b.get_title	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  function! b.get_title(i) dict$/;"	f
b:OmniSharp_ftplugin_loaded	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^let b:OmniSharp_ftplugin_loaded = 1$/;"	v
b:browsefilter	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let b:browsefilter="eRuby Files (*.erb, *.rhtml)\\t*.erb;*.rhtml\\n" . s:browsefilter$/;"	v
b:browsefilter	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:browsefilter = "Ruby Source Files (*.rb)\\t*.rb\\n" .$/;"	v
b:current_syntax	.config/nvim/plugged/ultisnips/syntax/snippets.vim	/^let b:current_syntax = "snippets"$/;"	v
b:current_syntax	.config/nvim/plugged/ultisnips/syntax/snippets_snipmate.vim	/^let b:current_syntax = "snippets"$/;"	v
b:current_syntax	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^let b:current_syntax = matchstr(&syntax, '^.*\\<eruby\\>')$/;"	v
b:current_syntax	.config/nvim/plugged/vim-ruby/syntax/ruby.vim	/^let b:current_syntax = "ruby"$/;"	v
b:current_syntax	.config/nvim/plugged/vista.vim/syntax/vista.vim	/^let b:current_syntax = 'vista'$/;"	v
b:current_syntax	.config/nvim/plugged/vista.vim/syntax/vista_kind.vim	/^let b:current_syntax = 'vista_kind'$/;"	v
b:current_syntax	.config/nvim/plugged/vista.vim/syntax/vista_markdown.vim	/^let b:current_syntax = 'vista_markdown'$/;"	v
b:did_after_plugin_ultisnips_after	.config/nvim/plugged/ultisnips/after/plugin/UltiSnips_after.vim	/^let b:did_after_plugin_ultisnips_after = 1$/;"	v
b:did_autoload_ultisnips	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^let b:did_autoload_ultisnips = 1$/;"	v
b:did_autoload_ultisnips_map_keys	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^let b:did_autoload_ultisnips_map_keys = 1$/;"	v
b:did_ftplugin	.config/nvim/plugged/ultisnips/ftplugin/snippets.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.config/nvim/plugged/vim-rails/ftplugin/railslog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	.config/nvim/plugged/html5.vim/indent/html.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.config/nvim/plugged/vim-ruby/indent/eruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	.vim/plugged/omnisharp-vim/indent/cs.vim	/^let b:did_indent = 1$/;"	v
b:done_vimsnippets	.config/nvim/plugged/vim-snippets/plugin/vimsnippets.vim	/^let b:done_vimsnippets = 1$/;"	v
b:done_vimsnippets	.vim/plugged/vim-snippets/plugin/vimsnippets.vim	/^let b:done_vimsnippets = 1$/;"	v
b:eruby_nest_level	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_nest_level = strlen(substitute(substitute(&filetype,'\\C\\<eruby\\>','@','g'),'[/;"	v
b:eruby_nest_level	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'/;"	v
b:eruby_nest_level	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let b:eruby_nest_level = 1$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubi/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubi/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^.\\{-\\}\\ze\\.eruby\\>')$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype_indentexpr	.config/nvim/plugged/vim-ruby/indent/eruby.vim	/^let b:eruby_subtype_indentexpr = &l:indentexpr$/;"	v
b:hi_indent	.config/nvim/plugged/html5.vim/indent/html.vim	/^let b:hi_indent = {"lnum": -1}$/;"	v
b:hi_lasttick	.config/nvim/plugged/html5.vim/indent/html.vim	/^let b:hi_lasttick = 0$/;"	v
b:hi_newstate	.config/nvim/plugged/html5.vim/indent/html.vim	/^let b:hi_newstate = {}$/;"	v
b:html_indent_usestate	.config/nvim/plugged/vim-ruby/indent/eruby.vim	/^let b:html_indent_usestate = 0$/;"	v
b:match_ignorecase	.config/nvim/plugged/ultisnips/ftplugin/snippets.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_skip	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:match_skip =$/;"	v
b:match_words	.config/nvim/plugged/ultisnips/ftplugin/snippets.vim	/^  let b:match_words = '^snippet\\>:^endsnippet\\>,^global\\>:^endglobal\\>,\\${:}'$/;"	v
b:match_words	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:match_words =$/;"	v
b:rails_path	.config/nvim/plugged/vim-rails/after/syntax/ruby/rails.vim	/^let b:rails_path = s:path$/;"	v
b:ruby_no_expensive	.config/nvim/plugged/vim-ruby/syntax/ruby.vim	/^  let b:ruby_no_expensive = 1$/;"	v
b:ruby_version	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    let b:ruby_version = get(readfile(s:version_file, '', 1), '')$/;"	v
b:switch_definitions	.config/nvim/plugged/switch.vim/examples/example_underscores.vim	/^let b:switch_definitions = [$/;"	v
b:ultisnips_override_snipmate	.config/nvim/plugged/ultisnips/syntax/snippets_snipmate.vim	/^let b:ultisnips_override_snipmate = 1$/;"	v
b:undo_ftplugin	.config/nvim/plugged/ultisnips/ftplugin/snippets.vim	/^let b:undo_ftplugin = "$/;"	v
b:undo_ftplugin	.config/nvim/plugged/vim-rails/ftplugin/railslog.vim	/^  let b:undo_ftplugin .= ' concealcursor< conceallevel<'$/;"	v
b:undo_ftplugin	.config/nvim/plugged/vim-rails/ftplugin/railslog.vim	/^let b:undo_ftplugin .= ' noreadonly modifiable'$/;"	v
b:undo_ftplugin	.config/nvim/plugged/vim-rails/ftplugin/railslog.vim	/^let b:undo_ftplugin .= '|set swapfile< autoread<'$/;"	v
b:undo_ftplugin	.config/nvim/plugged/vim-rails/ftplugin/railslog.vim	/^let b:undo_ftplugin .= '|sil! nunmap <buffer> R|sil! nunmap <buffer> G|sil! nunmap <buffer> q'$/;"	v
b:undo_ftplugin	.config/nvim/plugged/vim-rails/ftplugin/railslog.vim	/^let b:undo_ftplugin = get(b:, 'undo_ftplugin', 'exe')$/;"	v
b:undo_ftplugin	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let b:undo_ftplugin = "setl cms< "$/;"	v
b:undo_ftplugin	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:undo_ftplugin .= "| setl bexpr="$/;"	v
b:undo_ftplugin	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:undo_ftplugin .= ' | setl sw< sts< et<'$/;"	v
b:undo_ftplugin	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let b:undo_ftplugin .= "| sil! cunmap <buffer> <Plug><ctag>| sil! cunmap <buffer> <Plug><cfile>"$/;"	v
b:undo_ftplugin	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let b:undo_ftplugin = "setl inc= sua= path= tags= fo< com< cms< kp="$/;"	v
b:undo_ftplugin	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^  let b:undo_ftplugin .= ' | '$/;"	v
b:undo_ftplugin	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^  let b:undo_ftplugin = ''$/;"	v
b:undo_ftplugin	.vim/plugged/omnisharp-vim/ftplugin/cs/OmniSharp.vim	/^let b:undo_ftplugin .= '$/;"	v
b:undo_indent	.config/nvim/plugged/html5.vim/indent/html.vim	/^let b:undo_indent = "setlocal inde< indk<"$/;"	v
background	.vim/plugged/coc.nvim/src/list/ui.ts	/^          let background = key[0].toUpperCase() + key.slice(1)$/;"	v
background	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let { foreground, background } = item$/;"	v
background	.vim/plugged/coc.nvim/src/types.ts	/^  background?: string$/;"	p	interface:AnsiItem
background	.vim/plugged/coc.nvim/src/util/highlight.ts	/^  readonly background: string$/;"	p	interface:Env
backgroundColor	.vim/plugged/coc.nvim/src/list/ui.ts	/^          let backgroundColor = map[key]$/;"	v
backgroundColors	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^const backgroundColors = {$/;"	C
bar	.config/nvim/plugged/vim-ruby/spec/indent/continuations_spec.rb	/^      def bar($/;"	f
bar.foo	.vim/plugged/coc.nvim/src/__tests__/modules/settings.json	/^  "bar.foo": 2,$/;"	n
base	.vim/plugged/coc.nvim/src/services.ts	/^    let base = 'languageserver'$/;"	v
basename	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def basename(self):  # pylint:disable=no-self-use$/;"	m	class:SnippetUtil
basepython	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^basepython=python2.7$/;"	k	section:testenv:lint2
basepython	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^basepython=python3.7$/;"	k	section:testenv:coverage
basepython	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^basepython=python3.7$/;"	k	section:testenv:lint
basepython	.vim/plugged/omnisharp-vim/python/tox.ini	/^basepython=python2.7$/;"	k	section:testenv:lint2
basepython	.vim/plugged/omnisharp-vim/python/tox.ini	/^basepython=python3.7$/;"	k	section:testenv:coverage
basepython	.vim/plugged/omnisharp-vim/python/tox.ini	/^basepython=python3.7$/;"	k	section:testenv:lint
bash	.vim/plugged/fzf/test/test_go.rb	/^    def bash$/;"	S	class:Shell
basic	.config/nvim/plugged/sideways.vim/spec/plugin/handlebars_spec.rb	/^  describe "basic" do$/;"	d
basic	.config/nvim/plugged/sideways.vim/spec/plugin/ruby_spec.rb	/^    describe "basic" do$/;"	d
basicMatch	.vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) basicMatch(item *Item, withPos bool, slab *util.Slab) (Offset, int, *[]int) {$/;"	f	struct:fzf.Pattern	typeref:typename:(Offset, int, *[]int)
before	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^          let before = line[characterIndex(line, highlight.colStart)]$/;"	v
before	VSCode/settings.json	/^            "before": [ "ctrl+h" ],$/;"	a	object:vim.normalModeKeyBindingsNonRecursive.0
before	VSCode/settings.json	/^            "before": [ "ctrl+j" ],$/;"	a	object:vim.normalModeKeyBindingsNonRecursive.3
before	VSCode/settings.json	/^            "before": [ "ctrl+k" ],$/;"	a	object:vim.normalModeKeyBindingsNonRecursive.2
before	VSCode/settings.json	/^            "before": [ "ctrl+l" ],$/;"	a	object:vim.normalModeKeyBindingsNonRecursive.1
before	VSCode/settings.json	/^            "before": ["ctrl", "w"],$/;"	a	object:vim.normalModeKeyBindingsNonRecursive.4
before	VSCode/settings.json	/^            "before": [$/;"	a	object:vim.insertModeKeyBindings.0
begin	.vim/plugged/fzf/src/tokenizer.go	/^	begin int$/;"	m	struct:fzf.Range	typeref:typename:int
bestResult	.vim/plugged/coc.nvim/src/util/score.ts	/^function bestResult(results: MatchResult[]): MatchResult {$/;"	f
bg	.vim/plugged/fzf/src/ansi.go	/^	bg   tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
bg	.vim/plugged/fzf/src/tui/light.go	/^	bg       Color$/;"	m	struct:tui.LightWindow	typeref:typename:Color
bg	.vim/plugged/fzf/src/tui/tui.go	/^	bg Color$/;"	m	struct:tui.ColorPair	typeref:typename:Color
bin	.config/nvim/plugged/coc.nvim/package.json	/^  "bin": ".\/bin\/server.js",$/;"	s
bin	.vim/plugged/coc.nvim/package.json	/^  "bin": ".\/bin\/server.js",$/;"	s
bin/fzf	.vim/plugged/fzf/Makefile	/^bin\/fzf: target\/$(BINARY) | bin$/;"	t
bind	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def bind(attr):$/;"	f	function:build_proxy	file:
bind	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def bind(attr):$/;"	f	function:build_proxy	file:
bindReady	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^function bindReady(){$/;"	f
bindeval	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def bindeval(text):$/;"	f
blacklist	.vim/plugged/coc.nvim/src/types.ts	/^  readonly blacklist: string[]$/;"	p	interface:CompleteOption
blue	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    let { red, green, blue } = toHexColor(color)$/;"	v
blue	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^  let { red, green, blue } = color$/;"	v
body	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^body {$/;"	s
body	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var doc = document.documentElement, body = document.body;$/;"	v
body	.vim/plugged/coc.nvim/src/types.ts	/^  body: string$/;"	p	interface:Snippet
body_attributes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let body_attributes = {'onafterprint': [], 'onbeforeprint': [], 'onbeforeunload': [], 'onblu/;"	v
body_attributes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let body_attributes = {}$/;"	v
bold	.vim/plugged/coc.nvim/src/types.ts	/^  bold?: boolean$/;"	p	interface:AnsiItem
bonusAt	.vim/plugged/fzf/src/algo/algo.go	/^func bonusAt(input *util.Chars, idx int) int16 {$/;"	f	package:algo	typeref:typename:int16
bonusBoundary	.vim/plugged/fzf/src/algo/algo.go	/^	bonusBoundary = scoreMatch \/ 2$/;"	c	package:algo
bonusCamel123	.vim/plugged/fzf/src/algo/algo.go	/^	bonusCamel123 = bonusBoundary + scoreGapExtention$/;"	c	package:algo
bonusConsecutive	.vim/plugged/fzf/src/algo/algo.go	/^	bonusConsecutive = -(scoreGapStart + scoreGapExtention)$/;"	c	package:algo
bonusFirstCharMultiplier	.vim/plugged/fzf/src/algo/algo.go	/^	bonusFirstCharMultiplier = 2$/;"	c	package:algo
bonusFor	.vim/plugged/fzf/src/algo/algo.go	/^func bonusFor(prevClass charClass, class charClass) int16 {$/;"	f	package:algo	typeref:typename:int16
bonusNonWord	.vim/plugged/fzf/src/algo/algo.go	/^	bonusNonWord = scoreMatch \/ 2$/;"	c	package:algo
boolean	.vim/plugged/coc.nvim/src/util/is.ts	/^export function boolean(value: any): value is boolean {$/;"	f
border	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	function border(elem) {$/;"	f
border	.vim/plugged/coc.nvim/src/types.ts	/^  border?: [number, number, number, number]$/;"	p	interface:PopupOptions
border	.vim/plugged/fzf/src/terminal.go	/^	border     tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
border	.vim/plugged/fzf/src/tui/light.go	/^	border   BorderStyle$/;"	m	struct:tui.LightWindow	typeref:typename:BorderStyle
borderStyle	.vim/plugged/fzf/src/tui/tcell.go	/^	borderStyle BorderStyle$/;"	m	struct:tui.TcellWindow	typeref:typename:BorderStyle
borderchars	.vim/plugged/coc.nvim/src/types.ts	/^  borderchars?: string[]$/;"	p	interface:PopupOptions
bordered	.vim/plugged/fzf/src/terminal.go	/^	bordered   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
borderhighlight	.vim/plugged/coc.nvim/src/types.ts	/^  borderhighlight?: [string, string, string, string]$/;"	p	interface:PopupOptions
bottomLeft	.vim/plugged/fzf/src/tui/tui.go	/^	bottomLeft  rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
bottomRight	.vim/plugged/fzf/src/tui/tui.go	/^	bottomRight rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
bounding	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let bounding: PumBounding = { col, row, height, width, scrollbar }$/;"	v
box	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var box = elem.getBoundingClientRect();$/;"	v
bracket operators	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^  context "bracket operators" do$/;"	c
bracketEnterImprove	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let { bracketEnterImprove } = this.preferences$/;"	v
bracketEnterImprove	.vim/plugged/coc.nvim/src/handler/index.ts	/^  bracketEnterImprove: boolean$/;"	p	interface:Preferences
break	.vim/plugged/coc.nvim/src/extensions.ts	/^              break$/;"	v
break	.vim/plugged/coc.nvim/src/handler/index.ts	/^          break$/;"	v
break	.vim/plugged/coc.nvim/src/list/manager.ts	/^          break$/;"	C
break	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        break$/;"	C
browser	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.browser = {$/;"	c	class:jQuery
browser	.eslintrc.json	/^ "browser": true$/;"	b	object:env
bser	.config/nvim/plugged/coc.nvim/package.json	/^    "bser": "^2.0.0",$/;"	s	object:dependencies
bser	.vim/plugged/coc.nvim/package.json	/^    "bser": "^2.0.0",$/;"	s	object:dependencies
bu	.vim/plugged/coc.nvim/src/list/worker.ts	/^              let bu = getItemUri(b)$/;"	v
buf	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^buf = VimBuffer()  # pylint:disable=invalid-name$/;"	v
buf	.vim/plugged/coc.nvim/src/__tests__/completion/float.test.ts	/^    let buf = await floatWin.buffer$/;"	v
buf	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let buf = nvim.createBuffer(bufnr)$/;"	v
buf	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let buf = await createDiagnosticBuffer()$/;"	v
buf	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let buf = nvim.createBuffer(bufnr)$/;"	v
buf	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let buf = doc.buffer$/;"	v
buf	.vim/plugged/coc.nvim/src/__tests__/modules/floatBuffer.test.ts	/^    let buf = await create()$/;"	v
buf	.vim/plugged/coc.nvim/src/__tests__/modules/outputChannel.test.ts	/^    let buf = await nvim.buffer$/;"	v
buf	.vim/plugged/coc.nvim/src/__tests__/modules/terminal.test.ts	/^    let buf = nvim.createBuffer(terminal.bufnr)$/;"	v
buf	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let buf = await helper.edit('foo')$/;"	v
buf	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let buf = await helper.edit()$/;"	v
buf	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let buf = await nvim.buffer$/;"	v
buf	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let buf = await helper.edit()$/;"	v
buf	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let buf = await helper.edit()$/;"	v
buf	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let buf = new DiagnosticBuffer(doc, this.config)$/;"	v
buf	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let buf = this.buffers.find(buf => buf.bufnr == bufnr)$/;"	v
buf	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let buf = this.buffers[idx]$/;"	v
buf	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let buf = await this.nvim.buffer$/;"	v
buf	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let buf = this.buffers.find(buf => buf.uri == uri)$/;"	v
buf	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^      let buf = this.nvim.createBuffer(bufnr)$/;"	v
buf	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let buf = await nvim.buffer$/;"	v
buf	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let buf = nvim.createBuffer( ui.bufnr )$/;"	v
buf	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^    let buf = await context.window.buffer$/;"	v
buf	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let buf = nvim.createBuffer(bufnr)$/;"	v
buf	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      let buf = await this.nvim.createNewBuffer(false, true)$/;"	v
buf	.vim/plugged/coc.nvim/src/util/highlight.ts	/^      let buf = await nvim.buffer$/;"	v
buf	.vim/plugged/coc.nvim/src/workspace.ts	/^    let buf = await this.nvim.buffer$/;"	v
buffer	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def buffer(self):$/;"	m	class:SnippetUtil
buffer	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^      let buffer = await nvim.buffer$/;"	v
buffer	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let buffer = await nvim.buffer$/;"	v
buffer	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let { buffer } = doc$/;"	v
buffer	.vim/plugged/coc.nvim/src/__tests__/modules/sources.test.ts	/^    let buffer = await nvim.buffer$/;"	v
buffer	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let { buffer } = await helper.createDocument()$/;"	v
buffer	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  private get buffer(): Buffer {$/;"	m	class:Floating
buffer	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        buffer.clearHighlight({ srcId: this.config.srcId })$/;"	v
buffer	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        buffer.clearNamespace(this.config.srcId)$/;"	v
buffer	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let buffer = nvim.createBuffer(bufnr)$/;"	v
buffer	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let buffer = this.nvim.createBuffer(this.bufnr)$/;"	v
buffer	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let buffer = this.nvim.createBuffer(bufnr)$/;"	v
buffer	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let buffer = this.nvim.createBuffer(this.bufnr)$/;"	v
buffer	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { buffer } = document$/;"	v
buffer	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let buffer = await this.nvim.buffer$/;"	v
buffer	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let buffer = this.buffers.find(o => o.bufnr == buf.id)$/;"	v
buffer	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let buffer = await this.nvim.buffer$/;"	v
buffer	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { buffer } = this$/;"	v
buffer	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { nvim, buffer } = this$/;"	v
buffer	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^        buffer.addHighlight({$/;"	v
buffer	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let { buffer, lines, nvim, highlights } = this$/;"	v
buffer	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      let buffer = this.nvim.createBuffer(this.popup.bufferId)$/;"	v
buffer	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^      if (!loaded) buffer = null$/;"	v
buffer	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^    let { buffer } = this$/;"	v
buffer	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^    let { nvim, buffer } = this$/;"	v
buffer	.vim/plugged/coc.nvim/src/workspace.ts	/^    let buffer = typeof buf === 'number' ? this.nvim.createBuffer(buf) : buf$/;"	v
buffer	.vim/plugged/fzf/src/tui/light.go	/^	buffer        []byte$/;"	m	struct:tui.LightRenderer	typeref:typename:[]byte
buffer	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^    def buffer(self):$/;"	m	class:VimUtilCtx
bufferId	.vim/plugged/coc.nvim/src/model/popup.ts	/^  public bufferId: number$/;"	p	class:Popup
buffer_line_count	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def buffer_line_count(buffer):$/;"	f
buffer_maps	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    buffer_maps = ('', '')$/;"	v	class:_SelectModeMappings
buffer_maps	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    buffer_maps = ('H', 'blah')$/;"	v	class:SelectModeMappings_BufferLocalMappings_ECR
buffer_name	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    buffer_name: str = 'default'$/;"	v	class:Context
buffer_name	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^    def buffer_name(self):$/;"	m	class:VimUtilCtx
buffer_set_lines	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^buffer_set_lines = nvim_buf_set_lines$/;"	v
buffers	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public readonly buffers: DiagnosticBuffer[] = []$/;"	p	class:DiagnosticManager
buffers	.vim/plugged/coc.nvim/src/workspace.ts	/^    let buffers = await this.nvim.buffers$/;"	v
bufname	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let bufname = await nvim.eval('expand("%:p")')$/;"	v
bufname	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let { bufname, filetype, sketch, lines, lnum } = options$/;"	v
bufname	.vim/plugged/coc.nvim/src/types.ts	/^  bufname: string$/;"	p	interface:BufferOption
bufname	.vim/plugged/coc.nvim/src/types.ts	/^  bufname: string$/;"	p	interface:PreiewOptions
bufname	.vim/plugged/coc.nvim/src/workspace.ts	/^      let bufname = uri.startsWith('file:') ? path.normalize(URI.parse(uri).fsPath) : uri$/;"	v
bufnr	.vim/plugged/coc.nvim/src/__tests__/list/location.test.ts	/^    let bufnr = await nvim.eval('bufnr("%")')$/;"	v
bufnr	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let bufnr = await nvim.call('winbufnr', previewWinnr)$/;"	v
bufnr	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let bufnr = await nvim.call('nvim_win_get_buf', winid) as number$/;"	v
bufnr	.vim/plugged/coc.nvim/src/__tests__/modules/outputChannel.test.ts	/^    let bufnr = (await nvim.buffer).id$/;"	v
bufnr	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let bufnr = await nvim.call('bufnr', '%')$/;"	v
bufnr	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let bufnr = buf.id$/;"	v
bufnr	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let { nvim, bufnr } = this$/;"	v
bufnr	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { bufnr, nvim } = this$/;"	v
bufnr	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { bufnr, nvim, matchIds } = this$/;"	v
bufnr	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { nvim, bufnr } = this$/;"	v
bufnr	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { nvim, bufnr, signIds } = this$/;"	v
bufnr	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { nvim, signIds, bufnr } = this$/;"	v
bufnr	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^      let { bufnr } = workspace$/;"	v
bufnr	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let bufnr = await nvim.call('bufnr', '%')$/;"	v
bufnr	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let { bufnr } = workspace$/;"	v
bufnr	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let { uri, version, bufnr } = doc$/;"	v
bufnr	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let bufnr = await this.nvim.call('bufnr', '%')$/;"	v
bufnr	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let { bufnr } = workspace$/;"	v
bufnr	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^    let { bufnr } = document$/;"	v
bufnr	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let [bufnr, mode] = await nvim.eval(`[bufnr('%'), mode()]`) as [number, string]$/;"	v
bufnr	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let bufnr = await nvim.call('bufnr', '%')$/;"	v
bufnr	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let bufnr = await this.nvim.call('bufnr', '%') as number$/;"	v
bufnr	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let bufnr = await this.nvim.call('bufnr', '%')$/;"	v
bufnr	.vim/plugged/coc.nvim/src/languages.ts	/^        let { triggerCharacter, bufnr } = opt$/;"	v
bufnr	.vim/plugged/coc.nvim/src/languages.ts	/^    let { line, bufnr, linenr } = option$/;"	v
bufnr	.vim/plugged/coc.nvim/src/list/basic.ts	/^      let bufnr = parseInt(u.path, 10)$/;"	v
bufnr	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let [bufnr, winid] = await workspace.callAsync('coc#list#create', [position, height, name]/;"	v
bufnr	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { bufnr, config, nvim } = this$/;"	v
bufnr	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { nvim, bufnr, window, config } = this$/;"	v
bufnr	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { nvim, signOffset, bufnr, length } = this$/;"	v
bufnr	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { selected, nvim, signOffset, bufnr } = this$/;"	v
bufnr	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { window, bufnr, items } = this$/;"	v
bufnr	.vim/plugged/coc.nvim/src/model/terminal.ts	/^  public bufnr: number$/;"	p	class:TerminalModel
bufnr	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    let bufnr = await nvim.call('bufnr', '%')$/;"	v
bufnr	.vim/plugged/coc.nvim/src/types.ts	/^  bufnr: number$/;"	p	interface:LocationListItem
bufnr	.vim/plugged/coc.nvim/src/types.ts	/^  bufnr: number$/;"	p	interface:TerminalResult
bufnr	.vim/plugged/coc.nvim/src/types.ts	/^  bufnr?: number$/;"	p	interface:QuickfixItem
bufnr	.vim/plugged/coc.nvim/src/types.ts	/^  readonly bufnr: number$/;"	p	interface:CompleteOption
bufnr	.vim/plugged/coc.nvim/src/workspace.ts	/^    for (let bufnr of this.buffers.keys()) {$/;"	v
bufnr	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [bufnr, ve, selection, mode] = await nvim.eval(`[bufnr('%'), &virtualedit, &selection, m/;"	v
bufnr	.vim/plugged/coc.nvim/src/workspace.ts	/^    let bufnr = await nvim.call('bufnr', '%')$/;"	v
bufnr	.vim/plugged/coc.nvim/src/workspace.ts	/^    let bufnr = await nvim.eval('bufnr("%")') as number$/;"	v
bufnr	.vim/plugged/coc.nvim/src/workspace.ts	/^    let bufnr = buffer.id$/;"	v
bufnr	.vim/plugged/coc.nvim/src/workspace.ts	/^    let bufnr = doc ? doc.bufnr : -1$/;"	v
bufnr	.vim/plugged/coc.nvim/src/workspace.ts	/^    let bufnr = this.bufnr = await this.nvim.call('bufnr', '%')$/;"	v
bufnr	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { bufnr } = this$/;"	v
bufnum	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  bufnum: number$/;"	p	interface:CursorPosition
buftype	.vim/plugged/coc.nvim/src/model/document.ts	/^    let buftype = this.buftype = opts.buftype$/;"	v
buftype	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { buftype } = this$/;"	v
buftype	.vim/plugged/coc.nvim/src/model/document.ts	/^  public buftype: string$/;"	p	class:Document
buftype	.vim/plugged/coc.nvim/src/types.ts	/^  buftype: string$/;"	p	interface:BufferOption
bugs	.config/nvim/plugged/coc.nvim/package.json	/^  "bugs": {$/;"	o
bugs	.vim/plugged/coc.nvim/package.json	/^  "bugs": {$/;"	o
build	.config/nvim/plugged/coc.nvim/package.json	/^    "build": "tsc -p tsconfig.json",$/;"	s	object:scripts
build	.vim/plugged/coc.nvim/package.json	/^    "build": "tsc -p tsconfig.json",$/;"	s	object:scripts
buildCacheKey	.vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) buildCacheKey() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
buildLists	.vim/plugged/fzf/src/merger_test.go	/^func buildLists(partiallySorted bool) ([][]Result, []Result) {$/;"	f	package:fzf	typeref:typename:([][]Result, []Result)
buildPlusList	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) buildPlusList(template string, forcePlus bool) (bool, []*Item) {$/;"	f	struct:fzf.Terminal	typeref:typename:(bool, []*Item)
buildResult	.vim/plugged/fzf/src/result.go	/^func buildResult(item *Item, offsets []Offset, score int) Result {$/;"	f	package:fzf	typeref:typename:Result
build_proxy	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^def build_proxy(child, parent):$/;"	f
build_proxy	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^def build_proxy(child, parent):$/;"	f
bundle	.config/nvim/plugged/html5.vim/Makefile	/^bundle: bundle-deps$/;"	t
bundle	.config/nvim/plugged/ultisnips/utils/get_tm_snippets.py	/^    bundle = sys.argv[1]$/;"	v
bundle-deps	.config/nvim/plugged/html5.vim/Makefile	/^bundle-deps:$/;"	t
bundler	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^augroup bundler$/;"	a
bundler#buffer	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! bundler#buffer(...) abort$/;"	f
bundler#complete	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! bundler#complete(A, L, P, ...) abort$/;"	f
bundler#project	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! bundler#project(...) abort$/;"	f
bundler.vim	.config/nvim/plugged/vim-bundler/README.markdown	/^# bundler.vim$/;"	c
bundler_command	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^augroup bundler_command$/;"	a
bundler_path	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^augroup bundler_path$/;"	a
bundler_syntax	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^augroup bundler_syntax$/;"	a
bundler_utility	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^augroup bundler_utility$/;"	a
byBegin	.vim/plugged/fzf/src/options.go	/^	byBegin$/;"	c	package:fzf
byEnd	.vim/plugged/fzf/src/options.go	/^	byEnd$/;"	c	package:fzf
byLength	.vim/plugged/fzf/src/options.go	/^	byLength$/;"	c	package:fzf
byScore	.vim/plugged/fzf/src/options.go	/^	byScore criterion = iota$/;"	c	package:fzf	typeref:type:criterion
byTimeOrder	.vim/plugged/fzf/src/terminal.go	/^type byTimeOrder []selectedItem$/;"	t	package:fzf	typeref:typename:[]selectedItem
byte2col	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/compatibility.py	/^    def byte2col(line, nbyte):$/;"	f
byteIndex	.vim/plugged/coc.nvim/src/util/string.ts	/^export function byteIndex(content: string, index: number): number {$/;"	f
byteLength	.vim/plugged/coc.nvim/src/list/worker.ts	/^        let span: [number, number] = [byteLength(old), byteLength(newLabel)]$/;"	v
byteLength	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let col = line ? byteLength(line.slice(0, start.character)) : 0$/;"	v
byteLength	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let endCol = endLine ? byteLength(endLine.slice(0, end.character)) : 0$/;"	v
byteLength	.vim/plugged/coc.nvim/src/util/string.ts	/^export function byteLength(str: string): number {$/;"	f
byteLength	.vim/plugged/coc.nvim/src/workspace.ts	/^    let col = line ? byteLength(line.slice(0, start.character)) : 0$/;"	v
byteLength	.vim/plugged/coc.nvim/src/workspace.ts	/^    let endCol = endLine ? byteLength(endLine.slice(0, end.character)) : 0$/;"	v
byteSlice	.vim/plugged/coc.nvim/src/util/string.ts	/^export function byteSlice(content: string, start: number, end?: number): string {$/;"	f
c	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> c$/;"	m
c	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def c(self):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
c	.config/nvim/plugged/vim-textobj-user/t/script-local.vim	/^    let c = s:counter$/;"	v
c	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let c = conf.getConfiguration('languageserver')$/;"	v
c	.vim/plugged/coc.nvim/src/__tests__/modules/outputChannel.test.ts	/^    let c = new OutputChannel('0', nvim)$/;"	v
c	.vim/plugged/coc.nvim/src/__tests__/modules/outputChannel.test.ts	/^    let c = new OutputChannel('1', nvim)$/;"	v
c	.vim/plugged/coc.nvim/src/__tests__/modules/outputChannel.test.ts	/^    let c = new OutputChannel('2', nvim)$/;"	v
c	.vim/plugged/coc.nvim/src/__tests__/modules/outputChannel.test.ts	/^    let c = new OutputChannel('3', nvim)$/;"	v
c	.vim/plugged/coc.nvim/src/__tests__/modules/outputChannel.test.ts	/^    let c = new OutputChannel('4', nvim)$/;"	v
c	.vim/plugged/coc.nvim/src/__tests__/modules/settings.json	/^    "c": {$/;"	o	object:servers
c	.vim/plugged/coc.nvim/src/model/document.ts	/^      let c = start[i]$/;"	v
c	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  c = 99,$/;"	e	enum:CharCode
c	.vim/plugged/vim-airline/t/airline.vim	/^    let c = len(g:airline_statusline_funcrefs)$/;"	v
cS	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^  nmap cS  <Plug>CSurround$/;"	m
cS	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap cS  <Plug>CSurround$/;"	m
cS	.vim/sessions/foo.vim	/^nmap cS <Plug>CSurround$/;"	m
cache	.vim/plugged/coc.nvim/src/util/highlight.ts	/^const cache: { [hash: string]: Highlight[] } = {}$/;"	C
cache	.vim/plugged/fzf/src/cache.go	/^	cache map[*Chunk]*queryCache$/;"	m	struct:fzf.ChunkCache	typeref:typename:map[*Chunk]*queryCache
cacheKey	.vim/plugged/fzf/src/pattern.go	/^	cacheKey      string$/;"	m	struct:fzf.Pattern	typeref:typename:string
cacheable	.vim/plugged/fzf/src/merger.go	/^func (mg *Merger) cacheable() bool {$/;"	f	struct:fzf.Merger	typeref:typename:bool
cacheable	.vim/plugged/fzf/src/pattern.go	/^	cacheable     bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
calculateBounding	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  private async calculateBounding(docs: Documentation[], bounding: PumBounding): Promise<Boundin/;"	m	class:Floating
calculateScore	.vim/plugged/fzf/src/algo/algo.go	/^func calculateScore(caseSensitive bool, normalize bool, text *util.Chars, pattern []rune, sidx i/;"	f	package:algo	typeref:typename:(int, *[]int)
calculateSize	.vim/plugged/fzf/src/terminal.go	/^func calculateSize(base int, size sizeSpec, margin int, minSize int) int {$/;"	f	package:fzf	typeref:typename:int
call	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def call(self, name, *args):$/;"	m	class:Neovim
call	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^    let call = fn.mock.calls[0][0]$/;"	v
call	.vim/plugged/coc.nvim/src/util/throttle.ts	/^  function call(): any {$/;"	f
call	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^    def call(self, name, *args):$/;"	m	class:Neovim
callOptinalFunc	.vim/plugged/coc.nvim/src/model/source-vim.ts	/^  private async callOptinalFunc(fname: string, args: any[]): Promise<any> {$/;"	m	class:VimSource
callback	.vim/plugged/coc.nvim/src/types.ts	/^  callback: Function$/;"	p	interface:Autocmd
callback	.vim/plugged/coc.nvim/src/types.ts	/^  callback?: string$/;"	p	interface:PopupOptions
callback	.vim/plugged/coc.nvim/src/util/highlight.ts	/^      const callback = (method, args) => {$/;"	C	function:getHiglights
callbacks	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^    let { callbacks } = this$/;"	v
callbacks	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^    let { callbacks, workspace } = this$/;"	v
callbacks	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^    return callbacks.length > 0$/;"	v
callbacks	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^  private callbacks: PromiseCallback[] = []$/;"	p	class:WillSaveUntilHandler
called	.vim/plugged/coc.nvim/src/__tests__/modules/task.test.ts	/^    let called = false$/;"	v
called	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^      called = true$/;"	v
called	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let called = false$/;"	v
called	.vim/plugged/coc.nvim/src/completion/complete.ts	/^          called = true$/;"	v
called	.vim/plugged/coc.nvim/src/completion/complete.ts	/^        let called = false$/;"	v
cancel	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  cancel(): void {$/;"	m	class:Delayer
cancel	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async cancel( close = true ): Promise<void> {$/;"	C
cancel	.vim/plugged/coc.nvim/src/types.ts	/^  cancel(): void$/;"	m	interface:SnippetManager
cancel	.vim/plugged/coc.nvim/src/types.ts	/^  cancel: boolean$/;"	p	interface:KeymapOption
cancel	.vim/plugged/coc.nvim/src/util/callSequence.ts	/^          let cancel = await Promise.resolve(fn())$/;"	v
cancelPreview	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) cancelPreview() {$/;"	f	struct:fzf.Terminal
cancelTimeout	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  private cancelTimeout(): void {$/;"	m	class:Delayer
cancelled	.vim/plugged/coc.nvim/src/completion/complete.ts	/^        let cancelled = false$/;"	v
candidate	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        return candidate$/;"	v
candidate	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      candidate = candidate.parent$/;"	v
candidate	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let candidate: Marker = this$/;"	v
cap	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    const cap = ensure(ensure(capabilites, 'textDocument')!, 'codeAction')!$/;"	C	method:CodeActionFeature.fillClientCapabilities
capabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      capabilities: this.computeClientCapabilities(),$/;"	v
capture	.vim/plugged/fzf/test/test_go.rb	/^  def capture(pane = 0)$/;"	f
case	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        case DiagnosticSeverity.Hint:$/;"	v
case	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        case DiagnosticSeverity.Information:$/;"	v
case	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        case DiagnosticSeverity.Warning:$/;"	v
caseSensitive	.vim/plugged/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
caseSensitive	.vim/plugged/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.term	typeref:typename:bool
catch	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    } catch (e) {$/;"	v
catch	.vim/plugged/coc.nvim/src/extensions.ts	/^          } catch (e) {$/;"	v
catch	.vim/plugged/coc.nvim/src/extensions.ts	/^        } catch (e) {$/;"	v
catch	.vim/plugged/coc.nvim/src/list/manager.ts	/^    } catch ( e ) {$/;"	C
catch	.vim/plugged/coc.nvim/src/util/index.ts	/^    } catch (err) {$/;"	C	function:mkdirp
cd	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> cd$/;"	m
cd	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/defx.py	/^    def cd(self, path: str) -> None:$/;"	m	class:Defx
cd	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/util.py	/^def cd(vim: Nvim, path: str) -> None:$/;"	f
cd	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def cd(self, defx: Defx, path: str, cursor: int) -> None:$/;"	m	class:View
cells	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                let [, line, col, cells] = def$/;"	C	function:getHiglights
cgc	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^    nmap cgc <Plug>ChangeCommentary$/;"	m
ch	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let ch = await nvim.call('screenchar', [79, 1])$/;"	v
ch	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let ch = i == 0 ? null : pre[i - 1]$/;"	v
ch	.vim/plugged/coc.nvim/src/completion/match.ts	/^    const ch = codes[i]$/;"	C	function:nextWordIndex
ch	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^    let ch = line[position.character]$/;"	v
ch	.vim/plugged/coc.nvim/src/model/document.ts	/^      for (let ch of extraChars) {$/;"	v
ch	.vim/plugged/coc.nvim/src/model/document.ts	/^      let ch = content[i]$/;"	v
ch	.vim/plugged/coc.nvim/src/model/document.ts	/^      let ch = line[start - 1]$/;"	v
ch	.vim/plugged/coc.nvim/src/model/document.ts	/^    for (let ch of this._additionalKeywords) {$/;"	v
ch	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let ch = this.value.charCodeAt(pos)$/;"	v
ch	.vim/plugged/coc.nvim/src/workspace.ts	/^    for (let ch of this.outputChannels.values()) {$/;"	v
chanId	.vim/plugged/coc.nvim/src/model/terminal.ts	/^  private chanId: number$/;"	p	class:TerminalModel
change	.vim/plugged/coc.nvim/src/__tests__/modules/diff.test.ts	/^    let change = getChange('', '')$/;"	v
change	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let change = TextDocumentEdit.create(versioned, [edit])$/;"	v
change	.vim/plugged/coc.nvim/src/model/document.ts	/^        rangeLength: change.end - change.start,$/;"	v
change	.vim/plugged/coc.nvim/src/model/document.ts	/^      let change = getChange(this.content, content)$/;"	v
change	.vim/plugged/coc.nvim/src/model/document.ts	/^    let change = await this.nvim.call('coc#util#get_changeinfo', []) as ChangeInfo$/;"	v
change	.vim/plugged/coc.nvim/src/workspace.ts	/^        for (let change of documentChanges) {$/;"	v
change	.vim/plugged/coc.nvim/src/workspace.ts	/^    for (let change of documentChanges) {$/;"	v
changeData	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    for (const changeData of this._changeData.values()) {$/;"	C
changeType	.vim/plugged/coc.nvim/src/extensions.ts	/^      for (let [changeType, value] of result) {$/;"	v
changeType	.vim/plugged/coc.nvim/src/sources.ts	/^      for (let [changeType, value] of result) {$/;"	v
changed	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let changed = getChangedKeys(this._configuration.getValue(), configuration.getValue())$/;"	v
changed	.vim/plugged/coc.nvim/src/languages.ts	/^    let changed = null$/;"	v
changed	.vim/plugged/coc.nvim/src/workspace.ts	/^    let changed = null$/;"	v
changedtick	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let { version, changedtick } = document$/;"	v
changedtick	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let { changedtick, dirty } = doc$/;"	v
changedtick	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { content, changedtick } = o$/;"	v
changedtick	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { lnum, line, changedtick } = change$/;"	v
changedtick	.vim/plugged/coc.nvim/src/types.ts	/^  changedtick: number$/;"	p	interface:BufferOption
changedtick	.vim/plugged/coc.nvim/src/types.ts	/^  changedtick: number$/;"	p	interface:ChangeInfo
changes	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^    let changes: FileChangeItem[] = [createFileChange('\/tmp\/a')]$/;"	v
changes	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let changes = {$/;"	v
changes	.vim/plugged/coc.nvim/src/model/document.ts	/^      let changes = [{$/;"	v
changes	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { documentChanges, changes } = edit$/;"	v
channel	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let channel = workspace.createOutputChannel('channel')$/;"	v
channel	.vim/plugged/coc.nvim/src/watchman.ts	/^  constructor(binaryPath: string, private channel?: OutputChannel) {$/;"	p	class:Watchman
channel	.vim/plugged/coc.nvim/src/workspace.ts	/^        let channel = this.outputChannels.get(uri.path.slice(1))$/;"	v
channel	.vim/plugged/coc.nvim/src/workspace.ts	/^        return channel.content$/;"	v
channel	.vim/plugged/coc.nvim/src/workspace.ts	/^    let channel = new BufferChannel(name, this.nvim)$/;"	v
channel	.vim/plugged/coc.nvim/src/workspace.ts	/^    let channel = this.outputChannels.get(name)$/;"	v
channel	.vim/plugged/coc.nvim/src/workspace.ts	/^    let channel: OutputChannel = watchmanPath ? this.createOutputChannel('watchman') : null$/;"	v
channel	.vim/plugged/ghost-text.vim/python3/exchanger.py	/^    def channel(self):$/;"	m	class:Exchanger
channel	.vim/plugged/ghost-text.vim/python3/exchanger.py	/^    def channel(self, c):$/;"	m	class:Exchanger
channel	.vim/plugged/ghost-text.vim/python3/single_server.py	/^channel = None$/;"	v
channel	.vim/plugged/ghost-text.vim/python3/test/test_channel_server.py	/^channel = None$/;"	v
channel	.vim/plugged/ghost-text.vim/python3/test/test_channel_server.py	/^channel = vim_channel_handler.Channel(rx_coro)$/;"	v
channelNames	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let { nvim, workspaceFolders, channelNames, rootPath, cwd, documents, initialized, textDocum/;"	v
channelNames	.vim/plugged/coc.nvim/src/types.ts	/^  readonly channelNames: string[]$/;"	p	interface:IWorkspace
channel_handler	.vim/plugged/ghost-text.vim/python3/vim_channel_handler.py	/^        async def channel_handler(reader, writer):$/;"	f	member:Channel.handler	file:
channel_rx_coro	.vim/plugged/ghost-text.vim/python3/exchanger.py	/^    def channel_rx_coro(self):$/;"	m	class:Exchanger
channel_sockets	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    channel_sockets = {}$/;"	v	class:NvimHandler
charClass	.vim/plugged/fzf/src/algo/algo.go	/^type charClass int$/;"	t	package:algo	typeref:typename:int
charClassOf	.vim/plugged/fzf/src/algo/algo.go	/^func charClassOf(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charClassOfAscii	.vim/plugged/fzf/src/algo/algo.go	/^func charClassOfAscii(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charClassOfNonAscii	.vim/plugged/fzf/src/algo/algo.go	/^func charClassOfNonAscii(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charLetter	.vim/plugged/fzf/src/algo/algo.go	/^	charLetter$/;"	c	package:algo
charLower	.vim/plugged/fzf/src/algo/algo.go	/^	charLower$/;"	c	package:algo
charMap	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private charMap: Map<string, string>$/;"	C
charNonWord	.vim/plugged/fzf/src/algo/algo.go	/^	charNonWord charClass = iota$/;"	c	package:algo	typeref:type:charClass
charNumber	.vim/plugged/fzf/src/algo/algo.go	/^	charNumber$/;"	c	package:algo
charUpper	.vim/plugged/fzf/src/algo/algo.go	/^	charUpper$/;"	c	package:algo
character	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return character == '.'$/;"	v
character	.vim/plugged/coc.nvim/src/completion/index.ts	/^  character: string$/;"	C
character	.vim/plugged/coc.nvim/src/handler/index.ts	/^          let character = position.character + (newLine.length - origLine.length)$/;"	v
character	.vim/plugged/coc.nvim/src/languages.ts	/^      let character = newLines[newLines.length - 1].length - end.length$/;"	v
character	.vim/plugged/coc.nvim/src/list/basic.ts	/^      let character = location.text ? line.indexOf(location.text) : 0$/;"	v
character	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { character } = position$/;"	v
character	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^        character: position.line == 0 ? character + position.character : position.character$/;"	C
character	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let { line, character } = this.position$/;"	v
character	.vim/plugged/coc.nvim/src/sources.ts	/^    let character = pre.length ? pre[pre.length - 1] : ''$/;"	v
character	.vim/plugged/coc.nvim/src/util/complete.ts	/^    character: part.length$/;"	C
character	.vim/plugged/coc.nvim/src/util/position.ts	/^  let character = pre + pos.character + lastLine.length - removed$/;"	v
character	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [line, character] = await this.nvim.call('coc#util#cursor')$/;"	v
character	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { line, character } = position || { line: 0, character: 0 }$/;"	v
character	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { line, character } = range.start$/;"	v
characterIndex	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^          let after = line[characterIndex(line, highlight.colEnd) - 1]$/;"	v
characterIndex	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^          let before = line[characterIndex(line, highlight.colStart)]$/;"	v
characterIndex	.vim/plugged/coc.nvim/src/util/string.ts	/^export function characterIndex(content: string, byteIndex: number): number {$/;"	f
chars	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^}var chars = jQuery.browser.safari && parseInt(jQuery.browser.version) < 417 ?$/;"	v
chars	.vim/plugged/coc.nvim/src/__tests__/modules/chars.test.ts	/^    let chars = new Chars('48-57')$/;"	v
chars	.vim/plugged/coc.nvim/src/__tests__/modules/chars.test.ts	/^    let chars = new Chars('58')$/;"	v
chars	.vim/plugged/coc.nvim/src/__tests__/modules/chars.test.ts	/^    let chars = new Chars('@')$/;"	v
chars	.vim/plugged/coc.nvim/src/__tests__/modules/chars.test.ts	/^    let chars = new Chars('@-@')$/;"	v
chars	.vim/plugged/coc.nvim/src/__tests__/modules/chars.test.ts	/^    let chars = new Chars('_')$/;"	v
chars	.vim/plugged/coc.nvim/src/__tests__/modules/chars.test.ts	/^    let chars = new Chars('a-z')$/;"	v
chars	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let chars = await this.nvim.call( 'coc#list#get_chars' )$/;"	v
chars	.vim/plugged/coc.nvim/src/model/document.ts	/^    let chars = (this.chars = new Chars(iskeyword))$/;"	v
chars	.vim/plugged/coc.nvim/src/model/document.ts	/^    let chars = this.chars.clone()$/;"	v
chars	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { chars } = this$/;"	v
chars	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { words, chars } = this$/;"	v
chars	.vim/plugged/coc.nvim/src/model/document.ts	/^  public chars: Chars$/;"	p	class:Document
charset	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let charset = [$/;"	v
check	.config/nvim/plugged/targets.vim/test/Makefile	/^check:$/;"	t
check	.vim/plugged/coc.nvim/src/extensions.ts	/^        check()$/;"	v
check	.vim/plugged/coc.nvim/src/extensions.ts	/^        let check = () => {$/;"	v
check	.vim/plugged/coc.nvim/src/languages.ts	/^export function check<R extends (...args: any[]) => Promise<R>>(_target: any, key: string, descr/;"	f
check-require	.config/nvim/plugged/html5.vim/Makefile	/^check-require:$/;"	t
checkAliveStatus	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def checkAliveStatus():$/;"	f
checkAscii	.vim/plugged/fzf/src/util/chars.go	/^func checkAscii(bytes []byte) (bool, int) {$/;"	f	package:util	typeref:typename:(bool, int)
checkBuffer	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  private async checkBuffer(): Promise<void> {$/;"	m	class:Floating
checkCapability	.vim/plugged/coc.nvim/src/watchman.ts	/^  public checkCapability(): Promise<boolean> {$/;"	m	class:Watchman
checkCurrentLine	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^  checkCurrentLine: false,$/;"	C
checkCurrentLine	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let { checkCurrentLine } = this.config$/;"	v
checkCurrentLine	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  checkCurrentLine: boolean$/;"	p	interface:DiagnosticConfig
checkJs	tsconfig.json	/^    "checkJs": true,$/;"	b	object:compilerOptions
checkProcessDied	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  private checkProcessDied(childProcess: ChildProcess | undefined): void {$/;"	m	class:LanguageClient
check_binary	.vim/plugged/fzf/install	/^check_binary() {$/;"	f
check_overwrite	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^def check_overwrite(view: View, dest: Path, src: Path) -> Path:$/;"	f
check_required_vim_version	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^def check_required_vim_version(test):$/;"	f
check_required_vim_version	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^def check_required_vim_version(test):$/;"	f
child	.vim/plugged/coc.nvim/src/__tests__/client/processes.test.ts	/^    let child = spawn('sleep', ['10'], { cwd, detached: true })$/;"	v
child	.vim/plugged/coc.nvim/src/extensions.ts	/^    const child = spawn(yarncmd, ['upgrade', ...outdated, '--latest', '--ignore-engines'], {$/;"	C
child	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^              for (let child of marker.children) {$/;"	v
child	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        for (const child of children) {$/;"	C	function:_fixParent
child	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        for (const child of placeholderDefaultValues.get(placeholder.index)) {$/;"	C
child	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        let child = p.children[0]$/;"	v
children	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def children(self):$/;"	m	class:EditableTextObject
children	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let { children } = (<Placeholder>placeholder)$/;"	v
children	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let { children } = new SnippetParser().parse('${1:name} : ${2:type}${3\/\\\\s:=(.*)\/${1:+ :/;"	v
children	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let { children } = parent$/;"	v
choice	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      const choice = new Choice()$/;"	C
choice	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public get choice(): Choice | undefined {$/;"	m	class:Placeholder
choice	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^  choice?: string[]$/;"	p	interface:CocSnippetPlaceholder
choices	.vim/plugged/coc.nvim/src/list/manager.ts	/^          choices.push( `${name.slice( 0, i )}&${name.slice( i )}` )$/;"	C
choices	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let choices: string[] = []$/;"	C
chooseAction	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async chooseAction(): Promise<void> {$/;"	C
chunkSize	.vim/plugged/fzf/src/constants.go	/^	chunkSize int = 100$/;"	c	package:fzf	typeref:typename:int
chunks	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^      let chunks = commands.map(c => [c.title + ' ', 'CocCodeLens'] as [string, string])$/;"	v
chunks	.vim/plugged/fzf/src/chunklist.go	/^	chunks []*Chunk$/;"	m	struct:fzf.ChunkList	typeref:typename:[]*Chunk
chunks	.vim/plugged/fzf/src/matcher.go	/^	chunks  []*Chunk$/;"	m	struct:fzf.MatchRequest	typeref:typename:[]*Chunk
chunks	.vim/plugged/fzf/src/merger.go	/^	chunks  *[]*Chunk$/;"	m	struct:fzf.Merger	typeref:typename:*[]*Chunk
circle	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^circle,$/;"	s
class	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "class": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
class	.vim/plugged/coc.nvim/data/schema.json	/^        "class": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
class	.vim/plugged/coc.nvim/src/list/configuration.ts	/^export default class ListConfiguration {$/;"	C
class	.vim/plugged/coc.nvim/src/list/manager.ts	/^export class ListManager implements Disposable {$/;"	C
class	.vim/plugged/coc.nvim/src/model/status.ts	/^export default class StatusLine implements Disposable {$/;"	C
clean	.config/nvim/plugged/coc.nvim/package.json	/^    "clean": "rimraf lib build",$/;"	s	object:scripts
clean	.config/nvim/plugged/html5.vim/Makefile	/^clean: clean-bundle-deps$/;"	t
clean	.config/nvim/plugged/targets.vim/test/Makefile	/^clean:$/;"	t
clean	.vim/plugged/coc.nvim/package.json	/^    "clean": "rimraf lib build",$/;"	s	object:scripts
clean	.vim/plugged/coc.nvim/src/model/mru.ts	/^  public async clean(): Promise<void> {$/;"	m	class:Mru
clean	.vim/plugged/fzf/Makefile	/^clean:$/;"	t
clean-bundle-deps	.config/nvim/plugged/html5.vim/Makefile	/^clean-bundle-deps:$/;"	t
cleanExit	.vim/plugged/fzf/src/terminal.go	/^	cleanExit  bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
cleanse	.vim/plugged/fzf/src/tui/light.go	/^func cleanse(str string) string {$/;"	f	package:tui	typeref:typename:string
cleanup	.vim/plugged/fzf/bin/fzf-tmux	/^cleanup() {$/;"	f
clear	.vim/plugged/coc.nvim/src/model/db.ts	/^  public async clear(): Promise<void> {$/;"	m	class:DB
clear	.vim/plugged/coc.nvim/src/types.ts	/^  clear(): void$/;"	m	interface:DiagnosticCollection
clear	.vim/plugged/coc.nvim/src/types.ts	/^  clear(): void$/;"	m	interface:OutputChannel
clearChunkCache	.vim/plugged/fzf/src/pattern.go	/^func clearChunkCache() {$/;"	f	package:fzf
clearInterval	.vim/plugged/coc.nvim/src/model/status.ts	/^    clearInterval(this.interval)$/;"	C
clearMocks	.config/nvim/plugged/coc.nvim/package.json	/^    "clearMocks": true,$/;"	b	object:jest
clearMocks	.vim/plugged/coc.nvim/package.json	/^    "clearMocks": true,$/;"	b	object:jest
clearOnExit	.vim/plugged/fzf/src/tui/light.go	/^	clearOnExit   bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
clearPatternCache	.vim/plugged/fzf/src/pattern.go	/^func clearPatternCache() {$/;"	f	package:fzf
clearTimeout	.vim/plugged/coc.nvim/src/completion/complete.ts	/^          clearTimeout(ft)$/;"	v
clearTimeout	.vim/plugged/coc.nvim/src/completion/complete.ts	/^          clearTimeout(timer)$/;"	v
clearTimeout	.vim/plugged/coc.nvim/src/util/highlight.ts	/^      if (timer) clearTimeout(timer)$/;"	C	function:getHiglights
clear_cmdline	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def clear_cmdline(vim: Nvim):$/;"	f
clear_cmdline	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def clear_cmdline(vim: Nvim):$/;"	f
clear_snippets	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_snippet_dictionary.py	/^    def clear_snippets(self, priority, triggers):$/;"	m	class:SnippetDictionary
clear_temp	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def clear_temp(self):$/;"	m	class:TempFileManager
cleared	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    let cleared = false$/;"	v
clearmatch	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def clearmatch(vim: Nvim):$/;"	f
clearmatch	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def clearmatch(vim: Nvim):$/;"	f
click GhostText in a browser	.vim/plugged/ghost-text.vim/README.md	/^## click GhostText in a browser$/;"	s
clickY	.vim/plugged/fzf/src/tui/light.go	/^	clickY        []int$/;"	m	struct:tui.LightRenderer	typeref:typename:[]int
clickY	.vim/plugged/fzf/src/tui/tui.go	/^	clickY       []int$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:[]int
client	.vim/plugged/coc.nvim/src/__tests__/client/changedFiles.test.ts	/^    let client = new lsclient.LanguageClient('css', 'Test Language Server', serverOptions, clien/;"	v
client	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^    let client = new lsclient.LanguageClient('css', 'Test Language Server', serverOptions, clien/;"	v
client	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^    let client = await Watchman.createClient(null, '\/')$/;"	v
client	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^    let client = await Watchman.createClient(null, '\/tmp')$/;"	v
client	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^    let client = new Watchman(null)$/;"	v
client	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^    let client = new Watchman(null, new BufferChannel('watchman', nvim))$/;"	v
client	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^let client: net.Socket$/;"	v
client	.vim/plugged/coc.nvim/src/extensions.ts	/^          let client = await Watchman.createClient(watchmanPath, directory)$/;"	v
client	.vim/plugged/coc.nvim/src/handler/index.ts	/^          let { client } = service$/;"	v
client	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let client = this._client$/;"	v
client	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^    let client = this._client$/;"	v
client	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^            let { client } = service$/;"	v
client	.vim/plugged/coc.nvim/src/services.ts	/^        client.restart()$/;"	v
client	.vim/plugged/coc.nvim/src/services.ts	/^      let client = new LanguageClient(id, key, opts[1], opts[0])$/;"	v
client	.vim/plugged/coc.nvim/src/services.ts	/^    let client = service.client as LanguageClient$/;"	v
client	.vim/plugged/coc.nvim/src/types.ts	/^  client?: LanguageClient$/;"	p	interface:IServiceProvider
client	.vim/plugged/coc.nvim/src/watchman.ts	/^  private client: Client$/;"	p	class:Watchman
clientId	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let clientId = (action as any).clientId$/;"	v
clientId	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^          let clientId = (action as any).clientId$/;"	v
clientId	.vim/plugged/coc.nvim/src/types.ts	/^  clientId?: string$/;"	p	interface:CodeAction
clientOptions	.vim/plugged/coc.nvim/src/__tests__/client/changedFiles.test.ts	/^    let clientOptions: lsclient.LanguageClientOptions = {$/;"	v
clientOptions	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^    let clientOptions: lsclient.LanguageClientOptions = {$/;"	v
clientOptions	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public get clientOptions(): LanguageClientOptions {$/;"	m	class:BaseLanguageClient
clientReady	.vim/plugged/coc.nvim/src/attach.ts	/^  let clientReady = false$/;"	v
clientsMap	.vim/plugged/coc.nvim/src/watchman.ts	/^const clientsMap: Map<string, Promise<Watchman>> = new Map()$/;"	C
clipPath	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^clipPath,$/;"	s
clipboard	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^    let clipboard = await this.nvim.call('getreg', '+')$/;"	v
clojure definitions	.config/nvim/plugged/switch.vim/spec/plugin/clojure_spec.rb	/^describe "clojure definitions" do$/;"	d
clone	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var clone = ret.find("*").andSelf().each(function(){$/;"	v
clone	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const clone = transform.clone()$/;"	C
clone	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let [, , clone] = snippet.children$/;"	v
clone	.vim/plugged/coc.nvim/src/model/chars.ts	/^  public clone(): Chars {$/;"	m	class:Range
clone	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        const clone = new Placeholder(placeholder.index)$/;"	C
clone	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public clone(): FormatString {$/;"	m	class:FormatString
clone	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public clone(): Placeholder {$/;"	m	class:Placeholder
clone	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public clone(): Text {$/;"	m	class:Text
clone	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public clone(): Transform {$/;"	m	class:Transform
clone	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public clone(): Variable {$/;"	m	class:Variable
clone_plugin	.config/nvim/plugged/ultisnips/test_all.py	/^def clone_plugin(plugin):$/;"	f
close	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  public close(): void {$/;"	m	class:Floating
close	.vim/plugged/ghost-text.vim/python3/tcp_server.py	/^    def close(self):$/;"	m	class:TcpServer
close	.vim/plugged/ghost-text.vim/python3/websocket_server.py	/^    def close(self):$/;"	m	class:WebsocketServer
closeHandler	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let closeHandler = () => {$/;"	v
close_tree	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def close_tree(self, path: Path, index: int) -> None:$/;"	m	class:View
closed	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  closed(): CloseAction$/;"	m	interface:ErrorHandler
closer	.vim/plugged/vim-closer/plugin/closer.vim	/^augroup closer$/;"	a
closer#close	.vim/plugged/vim-closer/autoload/closer.vim	/^function! closer#close()$/;"	f
closer#enable	.vim/plugged/vim-closer/autoload/closer.vim	/^function! closer#enable()$/;"	f
cmd	.vim/plugged/coc.nvim/src/commands.ts	/^    let cmd = this.commands.get(command)$/;"	v
cmd	.vim/plugged/coc.nvim/src/extensions.ts	/^        for (let cmd of commands) {$/;"	v
cmd	.vim/plugged/coc.nvim/src/extensions.ts	/^      let cmd = global.hasOwnProperty('__TEST__') ? 'CocInstall -sync' : 'CocInstall'$/;"	v
cmd	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let cmd = `${startLine + 1}, ${endLine + 1}fold`$/;"	v
cmd	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let cmd = cmds.join('|')$/;"	v
cmd	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let cmd = this.hlGroupMap.get(hlGroup)$/;"	v
cmd	.vim/plugged/coc.nvim/src/model/terminal.ts	/^  constructor(private cmd: string,$/;"	p	class:TerminalModel
cmd	.vim/plugged/coc.nvim/src/types.ts	/^  cmd: string$/;"	p	interface:TaskOptions
cmd	.vim/plugged/coc.nvim/src/workspace.ts	/^    let cmd = opts.shellPath$/;"	v
cmdHeight	.vim/plugged/coc.nvim/src/workspace.ts	/^    let cmdHeight = this.env.cmdheight$/;"	v
cmdheight	.vim/plugged/coc.nvim/src/types.ts	/^  readonly cmdheight: number$/;"	p	interface:Env
cmds	.vim/plugged/coc.nvim/src/list/prompt.ts	/^          cmds.push(`echohl Cursor | echon ' ' | echohl None`)$/;"	v
cmds	.vim/plugged/coc.nvim/src/list/prompt.ts	/^        cmds.push(`echohl Cursor | echon '${input[cusorIndex].replace(\/'\/, "''")}' | echohl No/;"	v
cmds	.vim/plugged/coc.nvim/src/list/prompt.ts	/^        cmds.push(`echohl MoreMsg | echon '${_matcher.toUpperCase()} ' | echohl None`)$/;"	v
cmds	.vim/plugged/coc.nvim/src/list/prompt.ts	/^        cmds.push(`echohl MoreMsg | echon 'INTERACTIVE ' | echohl None`)$/;"	v
cmds	.vim/plugged/coc.nvim/src/list/prompt.ts	/^        cmds.push(`echon '${input.replace(\/'\/g, "''")}'`)$/;"	v
cmds	.vim/plugged/coc.nvim/src/list/prompt.ts	/^        cmds.push(`echon '${post.replace(\/'\/g, "''")}'`)$/;"	v
cmds	.vim/plugged/coc.nvim/src/list/prompt.ts	/^        if (pre) cmds.push(`echon '${pre.replace(\/'\/g, "''")}'`)$/;"	v
cmds	.vim/plugged/coc.nvim/src/list/prompt.ts	/^      cmds.push(`echohl MoreMsg | echo "" | echohl None`)$/;"	v
cmds	.vim/plugged/coc.nvim/src/list/prompt.ts	/^      cmds.push(`echohl Special | echon '${indicator} ' | echohl None`)$/;"	v
cmds	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let cmds = workspace.isVim ? ['echo ""'] : ['redraw']$/;"	v
cmds	.vim/plugged/coc.nvim/src/workspace.ts	/^      cmds.push(`autocmd BufReadCmd,FileReadCmd,SourceCmd ${scheme}:\/\/* call coc#rpc#request('/;"	v
cmds	.vim/plugged/coc.nvim/src/workspace.ts	/^    let cmds: string[] = []$/;"	v
coc	.vim/plugged/coc.nvim/src/__tests__/extensions/coc-json/package.json	/^    "coc": "^0.0.46"$/;"	s	object:engines
coc	.vim/plugged/coc.nvim/src/__tests__/extensions/global/package.json	/^    "coc": "^0.0.46"$/;"	s	object:engines
coc	.vim/plugged/coc.nvim/src/__tests__/extensions/local/package.json	/^    "coc": "^0.0.46"$/;"	s	object:engines
coc	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^    "coc": "^0.0.46"$/;"	s	object:engines
coc#_cancel	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_cancel()$/;"	f
coc#_cancel	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_cancel()$/;"	f
coc#_complete	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_complete() abort$/;"	f
coc#_complete	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_complete() abort$/;"	f
coc#_do_complete	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_do_complete(start, items)$/;"	f
coc#_do_complete	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_do_complete(start, items)$/;"	f
coc#_hide	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_hide() abort$/;"	f
coc#_hide	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_hide() abort$/;"	f
coc#_init	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_init()$/;"	f
coc#_init	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_init()$/;"	f
coc#_insert_key	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_insert_key(method, key, ...) abort$/;"	f
coc#_insert_key	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_insert_key(method, key, ...) abort$/;"	f
coc#_map	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_map()$/;"	f
coc#_map	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_map()$/;"	f
coc#_reload	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_reload()$/;"	f
coc#_reload	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_reload()$/;"	f
coc#_select	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_select() abort$/;"	f
coc#_select	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_select() abort$/;"	f
coc#_select_confirm	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_select_confirm()$/;"	f
coc#_select_confirm	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_select_confirm()$/;"	f
coc#_selected	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_selected()$/;"	f
coc#_selected	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_selected()$/;"	f
coc#_unmap	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_unmap()$/;"	f
coc#_unmap	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_unmap()$/;"	f
coc#_unwatch	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_unwatch(key)$/;"	f
coc#_unwatch	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_unwatch(key)$/;"	f
coc#_watch	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_watch(key)$/;"	f
coc#_watch	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#_watch(key)$/;"	f
coc#add_command	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#add_command(id, cmd, ...)$/;"	f
coc#add_command	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#add_command(id, cmd, ...)$/;"	f
coc#add_extension	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#add_extension(...)$/;"	f
coc#add_extension	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#add_extension(...)$/;"	f
coc#api#call	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#call(method, args) abort$/;"	f
coc#api#call	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#call(method, args) abort$/;"	f
coc#api#func_names	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#func_names() abort$/;"	f
coc#api#func_names	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#func_names() abort$/;"	f
coc#api#notify	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#notify(method, args) abort$/;"	f
coc#api#notify	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#notify(method, args) abort$/;"	f
coc#client#create	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#create(name, command)$/;"	f
coc#client#create	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#create(name, command)$/;"	f
coc#client#is_running	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#is_running(name) abort$/;"	f
coc#client#is_running	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#is_running(name) abort$/;"	f
coc#client#notify	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#notify(name, method, args)$/;"	f
coc#client#notify	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#notify(name, method, args)$/;"	f
coc#client#on_response	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#on_response(name, id, resp, isErr)$/;"	f
coc#client#on_response	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#on_response(name, id, resp, isErr)$/;"	f
coc#client#open_log	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#open_log()$/;"	f
coc#client#open_log	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#open_log()$/;"	f
coc#client#request	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#request(name, method, args)$/;"	f
coc#client#request	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#request(name, method, args)$/;"	f
coc#client#request_async	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#request_async(name, method, args, cb)$/;"	f
coc#client#request_async	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#request_async(name, method, args, cb)$/;"	f
coc#client#restart	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#restart(name) abort$/;"	f
coc#client#restart	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#restart(name) abort$/;"	f
coc#client#restart_all	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#restart_all()$/;"	f
coc#client#restart_all	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#restart_all()$/;"	f
coc#client#stop	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#stop(name) abort$/;"	f
coc#client#stop	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#stop(name) abort$/;"	f
coc#config	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#config(section, value)$/;"	f
coc#config	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#config(section, value)$/;"	f
coc#do_notify	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#do_notify(id, method, result)$/;"	f
coc#do_notify	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#do_notify(id, method, result)$/;"	f
coc#expandable	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#expandable() abort$/;"	f
coc#expandable	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#expandable() abort$/;"	f
coc#expandableOrJumpable	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#expandableOrJumpable() abort$/;"	f
coc#expandableOrJumpable	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#expandableOrJumpable() abort$/;"	f
coc#jumpable	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#jumpable() abort$/;"	f
coc#jumpable	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#jumpable() abort$/;"	f
coc#list#create	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#create(position, height, name)$/;"	f
coc#list#create	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#create(position, height, name)$/;"	f
coc#list#get_chars	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#get_chars()$/;"	f
coc#list#get_chars	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#get_chars()$/;"	f
coc#list#get_colors	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#get_colors()$/;"	f
coc#list#get_colors	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#get_colors()$/;"	f
coc#list#getc	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#getc() abort$/;"	f
coc#list#getc	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#getc() abort$/;"	f
coc#list#getchar	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#getchar() abort$/;"	f
coc#list#getchar	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#getchar() abort$/;"	f
coc#list#has_preview	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#has_preview()$/;"	f
coc#list#has_preview	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#has_preview()$/;"	f
coc#list#options	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#options(...)$/;"	f
coc#list#options	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#options(...)$/;"	f
coc#list#prompt_start	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#prompt_start() abort$/;"	f
coc#list#prompt_start	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#prompt_start() abort$/;"	f
coc#list#restore	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#restore(winid, height)$/;"	f
coc#list#restore	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#restore(winid, height)$/;"	f
coc#list#setlines	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#setlines(lines, append)$/;"	f
coc#list#setlines	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#setlines(lines, append)$/;"	f
coc#list#setup	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#setup(source)$/;"	f
coc#list#setup	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#setup(source)$/;"	f
coc#list#start_prompt	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#start_prompt()$/;"	f
coc#list#start_prompt	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#start_prompt()$/;"	f
coc#list#status	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#status(name)$/;"	f
coc#list#status	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#status(name)$/;"	f
coc#list#stop_prompt	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#stop_prompt()$/;"	f
coc#list#stop_prompt	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#stop_prompt()$/;"	f
coc#on_enter	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#on_enter()$/;"	f
coc#on_enter	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#on_enter()$/;"	f
coc#on_notify	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#on_notify(id, method, Cb)$/;"	f
coc#on_notify	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#on_notify(id, method, Cb)$/;"	f
coc#refresh	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#refresh() abort$/;"	f
coc#refresh	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#refresh() abort$/;"	f
coc#rpc#async_request	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#async_request(id, method, args)$/;"	f
coc#rpc#async_request	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#async_request(id, method, args)$/;"	f
coc#rpc#async_response	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#async_response(id, resp, isErr) abort$/;"	f
coc#rpc#async_response	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#async_response(id, resp, isErr) abort$/;"	f
coc#rpc#get_errors	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#get_errors()$/;"	f
coc#rpc#get_errors	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#get_errors()$/;"	f
coc#rpc#kill	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#kill()$/;"	f
coc#rpc#kill	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#kill()$/;"	f
coc#rpc#notify	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#notify(method, args) abort$/;"	f
coc#rpc#notify	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#notify(method, args) abort$/;"	f
coc#rpc#ready	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#ready()$/;"	f
coc#rpc#ready	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#ready()$/;"	f
coc#rpc#request	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#request(method, args) abort$/;"	f
coc#rpc#request	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#request(method, args) abort$/;"	f
coc#rpc#request_async	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#request_async(method, args, cb) abort$/;"	f
coc#rpc#request_async	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#request_async(method, args, cb) abort$/;"	f
coc#rpc#restart	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#restart()$/;"	f
coc#rpc#restart	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#restart()$/;"	f
coc#rpc#start_server	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#start_server()$/;"	f
coc#rpc#start_server	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#start_server()$/;"	f
coc#rpc#stop	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#stop()$/;"	f
coc#rpc#stop	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#stop()$/;"	f
coc#snippet#_select_mappings	.config/nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#_select_mappings()$/;"	f
coc#snippet#_select_mappings	.vim/plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#_select_mappings()$/;"	f
coc#snippet#disable	.config/nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#disable()$/;"	f
coc#snippet#disable	.vim/plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#disable()$/;"	f
coc#snippet#enable	.config/nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#enable()$/;"	f
coc#snippet#enable	.vim/plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#enable()$/;"	f
coc#snippet#show_choices	.config/nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#show_choices(lnum, col, len, values) abort$/;"	f
coc#snippet#show_choices	.vim/plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#show_choices(lnum, col, len, values) abort$/;"	f
coc#source#OmniSharp#complete	.vim/plugged/omnisharp-vim/autoload/coc/source/OmniSharp.vim	/^function! coc#source#OmniSharp#complete(options, callback) abort$/;"	f
coc#source#OmniSharp#init	.vim/plugged/omnisharp-vim/autoload/coc/source/OmniSharp.vim	/^function! coc#source#OmniSharp#init() abort$/;"	f
coc#start	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#start(...)$/;"	f
coc#start	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#start(...)$/;"	f
coc#status	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#status()$/;"	f
coc#status	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! coc#status()$/;"	f
coc#task#running	.config/nvim/plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#running(id)$/;"	f
coc#task#running	.vim/plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#running(id)$/;"	f
coc#task#start	.config/nvim/plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#start(id, opts)$/;"	f
coc#task#start	.vim/plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#start(id, opts)$/;"	f
coc#task#stop	.config/nvim/plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#stop(id)$/;"	f
coc#task#stop	.vim/plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#stop(id)$/;"	f
coc#util#add_matchids	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#add_matchids(ids)$/;"	f
coc#util#add_matchids	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#add_matchids(ids)$/;"	f
coc#util#build	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#build()$/;"	f
coc#util#build	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#build()$/;"	f
coc#util#clear_signs	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#clear_signs()$/;"	f
coc#util#clear_signs	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#clear_signs()$/;"	f
coc#util#clearmatches	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#clearmatches(ids)$/;"	f
coc#util#clearmatches	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#clearmatches(ids)$/;"	f
coc#util#close_popup	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#close_popup()$/;"	f
coc#util#close_popup	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#close_popup()$/;"	f
coc#util#close_win	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#close_win(id)$/;"	f
coc#util#close_win	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#close_win(id)$/;"	f
coc#util#cursor	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#cursor()$/;"	f
coc#util#cursor	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#cursor()$/;"	f
coc#util#diff_content	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#diff_content(lines) abort$/;"	f
coc#util#diff_content	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#diff_content(lines) abort$/;"	f
coc#util#do_complete	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#do_complete(name, opt, cb) abort$/;"	f
coc#util#do_complete	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#do_complete(name, opt, cb) abort$/;"	f
coc#util#echo_hover	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_hover(msg)$/;"	f
coc#util#echo_hover	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_hover(msg)$/;"	f
coc#util#echo_line	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_line()$/;"	f
coc#util#echo_line	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_line()$/;"	f
coc#util#echo_lines	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_lines(lines)$/;"	f
coc#util#echo_lines	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_lines(lines)$/;"	f
coc#util#echo_messages	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_messages(hl, msgs)$/;"	f
coc#util#echo_messages	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_messages(hl, msgs)$/;"	f
coc#util#echo_signatures	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_signatures(signatures) abort$/;"	f
coc#util#echo_signatures	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#echo_signatures(signatures) abort$/;"	f
coc#util#execute	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#execute(cmd)$/;"	f
coc#util#execute	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#execute(cmd)$/;"	f
coc#util#extension_root	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#extension_root() abort$/;"	f
coc#util#extension_root	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#extension_root() abort$/;"	f
coc#util#float_hide	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_hide()$/;"	f
coc#util#float_hide	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_hide()$/;"	f
coc#util#float_jump	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_jump()$/;"	f
coc#util#float_jump	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_jump()$/;"	f
coc#util#float_scroll	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_scroll(forward)$/;"	f
coc#util#float_scroll	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_scroll(forward)$/;"	f
coc#util#float_scrollable	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_scrollable()$/;"	f
coc#util#float_scrollable	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#float_scrollable()$/;"	f
coc#util#get_bufoptions	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_bufoptions(bufnr) abort$/;"	f
coc#util#get_bufoptions	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_bufoptions(bufnr) abort$/;"	f
coc#util#get_changeinfo	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_changeinfo()$/;"	f
coc#util#get_changeinfo	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_changeinfo()$/;"	f
coc#util#get_complete_option	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_complete_option()$/;"	f
coc#util#get_complete_option	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_complete_option()$/;"	f
coc#util#get_config_home	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_config_home()$/;"	f
coc#util#get_config_home	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_config_home()$/;"	f
coc#util#get_content	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_content(bufnr)$/;"	f
coc#util#get_content	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_content(bufnr)$/;"	f
coc#util#get_float	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_float()$/;"	f
coc#util#get_float	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_float()$/;"	f
coc#util#get_input	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_input()$/;"	f
coc#util#get_input	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_input()$/;"	f
coc#util#get_syntax_name	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_syntax_name(lnum, col)$/;"	f
coc#util#get_syntax_name	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_syntax_name(lnum, col)$/;"	f
coc#util#has_float	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#has_float()$/;"	f
coc#util#has_float	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#has_float()$/;"	f
coc#util#has_preview	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#has_preview()$/;"	f
coc#util#has_preview	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#has_preview()$/;"	f
coc#util#highlight_options	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#highlight_options()$/;"	f
coc#util#highlight_options	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#highlight_options()$/;"	f
coc#util#init_extension_root	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#init_extension_root(root) abort$/;"	f
coc#util#init_extension_root	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#init_extension_root(root) abort$/;"	f
coc#util#init_virtual_hl	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#init_virtual_hl()$/;"	f
coc#util#init_virtual_hl	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#init_virtual_hl()$/;"	f
coc#util#install	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#install(...) abort$/;"	f
coc#util#install	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#install(...) abort$/;"	f
coc#util#install_extension	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#install_extension(args) abort$/;"	f
coc#util#install_extension	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#install_extension(args) abort$/;"	f
coc#util#is_preview	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#is_preview(bufnr)$/;"	f
coc#util#is_preview	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#is_preview(bufnr)$/;"	f
coc#util#iterm_open	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#iterm_open(dir)$/;"	f
coc#util#iterm_open	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#iterm_open(dir)$/;"	f
coc#util#job_command	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#job_command()$/;"	f
coc#util#job_command	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#job_command()$/;"	f
coc#util#jump	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#jump(cmd, filepath, ...) abort$/;"	f
coc#util#jump	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#jump(cmd, filepath, ...) abort$/;"	f
coc#util#jumpTo	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#jumpTo(line, character) abort$/;"	f
coc#util#jumpTo	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#jumpTo(line, character) abort$/;"	f
coc#util#move_cursor	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#move_cursor(delta)$/;"	f
coc#util#move_cursor	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#move_cursor(delta)$/;"	f
coc#util#on_error	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#on_error(msg) abort$/;"	f
coc#util#on_error	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#on_error(msg) abort$/;"	f
coc#util#open_file	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_file(cmd, file)$/;"	f
coc#util#open_file	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_file(cmd, file)$/;"	f
coc#util#open_terminal	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_terminal(opts) abort$/;"	f
coc#util#open_terminal	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_terminal(opts) abort$/;"	f
coc#util#open_url	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_url(url)$/;"	f
coc#util#open_url	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_url(url)$/;"	f
coc#util#pclose	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#pclose()$/;"	f
coc#util#pclose	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#pclose()$/;"	f
coc#util#pick_color	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#pick_color(default_color)$/;"	f
coc#util#pick_color	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#pick_color(default_color)$/;"	f
coc#util#platform	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#platform()$/;"	f
coc#util#platform	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#platform()$/;"	f
coc#util#preview_info	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#preview_info(info, ...) abort$/;"	f
coc#util#preview_info	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#preview_info(info, ...) abort$/;"	f
coc#util#prompt_confirm	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#prompt_confirm(title)$/;"	f
coc#util#prompt_confirm	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#prompt_confirm(title)$/;"	f
coc#util#rebuild	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#rebuild()$/;"	f
coc#util#rebuild	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#rebuild()$/;"	f
coc#util#remote_fns	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#remote_fns(name)$/;"	f
coc#util#remote_fns	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#remote_fns(name)$/;"	f
coc#util#root_patterns	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#root_patterns()$/;"	f
coc#util#root_patterns	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#root_patterns()$/;"	f
coc#util#run_terminal	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#run_terminal(opts, cb)$/;"	f
coc#util#run_terminal	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#run_terminal(opts, cb)$/;"	f
coc#util#setline	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#setline(lnum, line)$/;"	f
coc#util#setline	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#setline(lnum, line)$/;"	f
coc#util#timer	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#timer(method, args)$/;"	f
coc#util#timer	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#timer(method, args)$/;"	f
coc#util#unplace_signs	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#unplace_signs(bufnr, sign_ids)$/;"	f
coc#util#unplace_signs	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#unplace_signs(bufnr, sign_ids)$/;"	f
coc#util#update	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#update()$/;"	f
coc#util#update	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#update()$/;"	f
coc#util#update_extensions	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#update_extensions(...) abort$/;"	f
coc#util#update_extensions	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#update_extensions(...) abort$/;"	f
coc#util#valid_state	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#valid_state()$/;"	f
coc#util#valid_state	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#valid_state()$/;"	f
coc#util#version	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#version()$/;"	f
coc#util#version	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#version()$/;"	f
coc#util#vim_info	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#vim_info()$/;"	f
coc#util#vim_info	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#vim_info()$/;"	f
coc#util#win_position	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#win_position()$/;"	f
coc#util#win_position	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#win_position()$/;"	f
coc#util#with_callback	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#with_callback(method, args, cb)$/;"	f
coc#util#with_callback	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#with_callback(method, args, cb)$/;"	f
coc#util#yarn_cmd	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#yarn_cmd()$/;"	f
coc#util#yarn_cmd	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#yarn_cmd()$/;"	f
coc-json	.vim/plugged/coc.nvim/src/__tests__/extensions/package.json	/^    "coc-json": "^1.0.0",$/;"	s	object:dependencies
coc-tsserver	.vim/plugged/coc.nvim/src/__tests__/extensions/package.json	/^    "coc-tsserver": "https:\/\/github.com\/neoclide\/coc-tsserver"$/;"	s	object:dependencies
coc.preferences.bracketEnterImprove	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.bracketEnterImprove": {$/;"	o	object:properties
coc.preferences.bracketEnterImprove	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.bracketEnterImprove": {$/;"	o	object:properties
coc.preferences.colorSupport	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.colorSupport": {$/;"	o	object:properties
coc.preferences.colorSupport	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.colorSupport": {$/;"	o	object:properties
coc.preferences.currentFunctionSymbolAutoUpdate	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.currentFunctionSymbolAutoUpdate": {$/;"	o	object:properties
coc.preferences.currentFunctionSymbolAutoUpdate	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.currentFunctionSymbolAutoUpdate": {$/;"	o	object:properties
coc.preferences.enableFloatHighlight	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.enableFloatHighlight": {$/;"	o	object:properties
coc.preferences.enableFloatHighlight	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.enableFloatHighlight": {$/;"	o	object:properties
coc.preferences.extensionUpdateCheck	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.extensionUpdateCheck": {$/;"	o	object:properties
coc.preferences.extensionUpdateCheck	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.extensionUpdateCheck": {$/;"	o	object:properties
coc.preferences.formatOnSaveFiletypes	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.formatOnSaveFiletypes": {$/;"	o	object:properties
coc.preferences.formatOnSaveFiletypes	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.formatOnSaveFiletypes": {$/;"	o	object:properties
coc.preferences.formatOnType	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.formatOnType": {$/;"	o	object:properties
coc.preferences.formatOnType	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.formatOnType": {$/;"	o	object:properties
coc.preferences.hoverTarget	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.hoverTarget": {$/;"	o	object:properties
coc.preferences.hoverTarget	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.hoverTarget": {$/;"	o	object:properties
coc.preferences.jumpCommand	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.jumpCommand": {$/;"	o	object:properties
coc.preferences.jumpCommand	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.jumpCommand": {$/;"	o	object:properties
coc.preferences.messageLevel	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.messageLevel": {$/;"	o	object:properties
coc.preferences.messageLevel	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.messageLevel": {$/;"	o	object:properties
coc.preferences.previewAutoClose	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.previewAutoClose": {$/;"	o	object:properties
coc.preferences.previewAutoClose	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.previewAutoClose": {$/;"	o	object:properties
coc.preferences.rootPath	.vim/plugged/coc.nvim/src/__tests__/sample/.vim/coc-settings.json	/^  "coc.preferences.rootPath": ".\/src"$/;"	s
coc.preferences.rootPatterns	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.rootPatterns": {$/;"	o	object:properties
coc.preferences.rootPatterns	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.rootPatterns": {$/;"	o	object:properties
coc.preferences.snippetStatusText	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.snippetStatusText": {$/;"	o	object:properties
coc.preferences.snippetStatusText	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.snippetStatusText": {$/;"	o	object:properties
coc.preferences.snippets.enable	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.snippets.enable": {$/;"	o	object:properties
coc.preferences.snippets.enable	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.snippets.enable": {$/;"	o	object:properties
coc.preferences.useQuickfixForLocations	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.useQuickfixForLocations": {$/;"	o	object:properties
coc.preferences.useQuickfixForLocations	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.useQuickfixForLocations": {$/;"	o	object:properties
coc.preferences.watchmanPath	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.watchmanPath": {$/;"	o	object:properties
coc.preferences.watchmanPath	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.preferences.watchmanPath": {$/;"	o	object:properties
coc.source.around.disableSyntaxes	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.around.disableSyntaxes": {$/;"	o	object:properties
coc.source.around.disableSyntaxes	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.around.disableSyntaxes": {$/;"	o	object:properties
coc.source.around.enable	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.around.enable": {$/;"	o	object:properties
coc.source.around.enable	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.around.enable": {$/;"	o	object:properties
coc.source.around.firstMatch	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.around.firstMatch": {$/;"	o	object:properties
coc.source.around.firstMatch	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.around.firstMatch": {$/;"	o	object:properties
coc.source.around.priority	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.around.priority": {$/;"	o	object:properties
coc.source.around.priority	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.around.priority": {$/;"	o	object:properties
coc.source.around.shortcut	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.around.shortcut": {$/;"	o	object:properties
coc.source.around.shortcut	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.around.shortcut": {$/;"	o	object:properties
coc.source.buffer.disableSyntaxes	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.disableSyntaxes": {$/;"	o	object:properties
coc.source.buffer.disableSyntaxes	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.disableSyntaxes": {$/;"	o	object:properties
coc.source.buffer.enable	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.enable": {$/;"	o	object:properties
coc.source.buffer.enable	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.enable": {$/;"	o	object:properties
coc.source.buffer.firstMatch	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.firstMatch": {$/;"	o	object:properties
coc.source.buffer.firstMatch	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.firstMatch": {$/;"	o	object:properties
coc.source.buffer.ignoreGitignore	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.ignoreGitignore": {$/;"	o	object:properties
coc.source.buffer.ignoreGitignore	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.ignoreGitignore": {$/;"	o	object:properties
coc.source.buffer.priority	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.priority": {$/;"	o	object:properties
coc.source.buffer.priority	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.priority": {$/;"	o	object:properties
coc.source.buffer.shortcut	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.shortcut": {$/;"	o	object:properties
coc.source.buffer.shortcut	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.buffer.shortcut": {$/;"	o	object:properties
coc.source.file.disableSyntaxes	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.disableSyntaxes": {$/;"	o	object:properties
coc.source.file.disableSyntaxes	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.disableSyntaxes": {$/;"	o	object:properties
coc.source.file.enable	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.enable": {$/;"	o	object:properties
coc.source.file.enable	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.enable": {$/;"	o	object:properties
coc.source.file.ignoreHidden	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.ignoreHidden": {$/;"	o	object:properties
coc.source.file.ignoreHidden	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.ignoreHidden": {$/;"	o	object:properties
coc.source.file.ignorePatterns	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.ignorePatterns": {$/;"	o	object:properties
coc.source.file.ignorePatterns	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.ignorePatterns": {$/;"	o	object:properties
coc.source.file.priority	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.priority": {$/;"	o	object:properties
coc.source.file.priority	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.priority": {$/;"	o	object:properties
coc.source.file.shortcut	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.shortcut": {$/;"	o	object:properties
coc.source.file.shortcut	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.shortcut": {$/;"	o	object:properties
coc.source.file.triggerCharacters	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.triggerCharacters": {$/;"	o	object:properties
coc.source.file.triggerCharacters	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.triggerCharacters": {$/;"	o	object:properties
coc.source.file.trimSameExts	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.trimSameExts": {$/;"	o	object:properties
coc.source.file.trimSameExts	.vim/plugged/coc.nvim/data/schema.json	/^    "coc.source.file.trimSameExts": {$/;"	o	object:properties
cocAction	.vim/plugged/coc.nvim/src/plugin.ts	/^  public async cocAction(...args: any[]): Promise<any> {$/;"	m	class:Plugin
coc_nvim	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^  augroup coc_nvim$/;"	a
coc_nvim	.vim/plugged/coc.nvim/plugin/coc.vim	/^  augroup coc_nvim$/;"	a
code	.vim/plugged/coc.nvim/src/list/manager.ts	/^      let code = s.codePointAt( 0 )$/;"	v
code	.vim/plugged/omnisharp-vim/python/omnisharp/exceptions.py	/^    code = "BAD_RESPONSE"$/;"	v	class:BadResponseError
code	.vim/plugged/omnisharp-vim/python/omnisharp/exceptions.py	/^    code = "CONNECTION"$/;"	v	class:ServerConnectionError
codeA	.vim/plugged/coc.nvim/src/util/string.ts	/^    const codeA = a.charCodeAt(i)$/;"	C	function:doEqualsIgnoreCase
codeActionParameters	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def codeActionParameters(mode):$/;"	f
codeActions	.vim/plugged/coc.nvim/src/handler/index.ts	/^        codeActions.push({ clientId, ...action })$/;"	v
codeActions	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let codeActions = await this.getCodeActions(bufnr, range, Array.isArray(only) ? only : null)$/;"	v
codeActions	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let codeActions: CodeAction[] = []$/;"	v
codeActions	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^        codeActions.push({ clientId, ...action })$/;"	v
codeActions	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^    let codeActions: CodeAction[] = []$/;"	v
codeActionsMap	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let codeActionsMap = await languages.getCodeActions(document.textDocument, range, context)$/;"	v
codeActionsMap	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^    let codeActionsMap = await languages.getCodeActions(doc.textDocument, range, actionContext)$/;"	v
codeB	.vim/plugged/coc.nvim/src/util/string.ts	/^    const codeB = b.charCodeAt(i)$/;"	C	function:doEqualsIgnoreCase
codeCheck	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def codeCheck():$/;"	f
codeFormat	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def codeFormat():$/;"	f
codeLenes	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^      let codeLenes = await languages.getCodeLens(document.textDocument)$/;"	v
codeLenes	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let { codeLenes } = this.codeLensMap.get(bufnr)$/;"	v
codeLenes	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let { codeLenes, version } = this.codeLensMap.get(bufnr) || {} as any$/;"	v
codeLenes	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^  codeLenes: CodeLens[]$/;"	p	interface:CodeLensInfo
codeLens	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    for (let codeLens of codeLenes) {$/;"	v
codeLens.enable	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "codeLens.enable": {$/;"	o	object:properties
codeLens.enable	.vim/plugged/coc.nvim/data/schema.json	/^    "codeLens.enable": {$/;"	o	object:properties
codeLens.separator	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "codeLens.separator": {$/;"	o	object:properties
codeLens.separator	.vim/plugged/coc.nvim/data/schema.json	/^    "codeLens.separator": {$/;"	o	object:properties
codes	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let codes = getCharCodes(needle)$/;"	v
codes	.vim/plugged/coc.nvim/src/list/history.ts	/^      let codes = getCharCodes(input)$/;"	v
coffee	.config/nvim/plugged/sideways.vim/spec/plugin/regression_spec.rb	/^  describe "coffee" do$/;"	d
coffee	.config/nvim/plugged/switch.vim/spec/plugin/coffee_spec.rb	/^describe "coffee" do$/;"	d
col	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  col: number$/;"	p	interface:CursorPosition
col	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^  col: 1,$/;"	C
col	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^  col: 2,$/;"	C
col	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^  col: 1,$/;"	C
col	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^  col: 2,$/;"	C
col	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let [, lnum, col] = await nvim.call('getcurpos')$/;"	v
col	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let col = await nvim.call('col', '.')$/;"	v
col	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let col = await nvim.call('col', '.')$/;"	v
col	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let col = await nvim.call('col', '.')$/;"	v
col	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let { col } = this.option$/;"	v
col	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  col: number$/;"	p	interface:Bounding
col	.vim/plugged/coc.nvim/src/completion/index.ts	/^        let { linenr, col, line, colnr } = this.option$/;"	v
col	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let [, lnum, col] = await this.nvim.call('getcurpos')$/;"	v
col	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let col = await this.nvim.call('col', '.')$/;"	v
col	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { completed_item, col, row, height, width, scrollbar } = ev$/;"	v
col	.vim/plugged/coc.nvim/src/handler/index.ts	/^  col: number$/;"	p	interface:SymbolInfo
col	.vim/plugged/coc.nvim/src/list/ui.ts	/^  col: number$/;"	p	interface:MousePosition
col	.vim/plugged/coc.nvim/src/model/document.ts	/^    let col = byteLength(start)$/;"	v
col	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let [mode, line, col] = await this.nvim.eval('[mode(),line("."),col(".")]') as [string, numb/;"	v
col	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let [row, col] = await nvim.call('coc#util#win_position') as [number, number]$/;"	v
col	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^  col: number$/;"	p	interface:WindowConfig
col	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    const col = byteLength(document.getline(start.line).slice(0, start.character)) + 1$/;"	C
col	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let col = line ? byteLength(line.slice(0, start.character)) : 0$/;"	v
col	.vim/plugged/coc.nvim/src/types.ts	/^  col: number$/;"	p	interface:CompleteOption
col	.vim/plugged/coc.nvim/src/types.ts	/^  col: number$/;"	p	interface:DiagnosticItem
col	.vim/plugged/coc.nvim/src/types.ts	/^  col: number$/;"	p	interface:LocationListItem
col	.vim/plugged/coc.nvim/src/types.ts	/^  col: number$/;"	p	interface:PopupChangeEvent
col	.vim/plugged/coc.nvim/src/types.ts	/^  col: number$/;"	p	interface:PopupProps
col	.vim/plugged/coc.nvim/src/types.ts	/^  col?: number | string$/;"	p	interface:PopupOptions
col	.vim/plugged/coc.nvim/src/types.ts	/^  col?: number$/;"	p	interface:QuickfixItem
col	.vim/plugged/coc.nvim/src/types.ts	/^  readonly col: number$/;"	p	interface:PumBounding
col	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                let [, line, col, cells] = def$/;"	C	function:getHiglights
col	.vim/plugged/coc.nvim/src/workspace.ts	/^    let col = character + 1$/;"	v
col	.vim/plugged/coc.nvim/src/workspace.ts	/^    let col = line ? byteLength(line.slice(0, start.character)) : 0$/;"	v
col2byte	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/compatibility.py	/^    def col2byte(line, col):$/;"	f
colBlack	.vim/plugged/fzf/src/tui/tui.go	/^	colBlack Color = iota$/;"	c	package:tui	typeref:type:Color
colBlue	.vim/plugged/fzf/src/tui/tui.go	/^	colBlue$/;"	c	package:tui
colCyan	.vim/plugged/fzf/src/tui/tui.go	/^	colCyan$/;"	c	package:tui
colDefault	.vim/plugged/fzf/src/tui/tui.go	/^	colDefault         = -1$/;"	c	package:tui
colEnd	.vim/plugged/coc.nvim/src/util/highlight.ts	/^  colEnd: number$/;"	p	interface:Highlight
colGreen	.vim/plugged/fzf/src/tui/tui.go	/^	colGreen$/;"	c	package:tui
colMagenta	.vim/plugged/fzf/src/tui/tui.go	/^	colMagenta$/;"	c	package:tui
colRed	.vim/plugged/fzf/src/tui/tui.go	/^	colRed$/;"	c	package:tui
colStart	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                let colStart = 0$/;"	C	function:getHiglights
colStart	.vim/plugged/coc.nvim/src/util/highlight.ts	/^  colStart: number$/;"	p	interface:Highlight
colUndefined	.vim/plugged/fzf/src/tui/tui.go	/^	colUndefined Color = -2$/;"	c	package:tui	typeref:type:Color
colWhite	.vim/plugged/fzf/src/tui/tui.go	/^	colWhite$/;"	c	package:tui
colYellow	.vim/plugged/fzf/src/tui/tui.go	/^	colYellow$/;"	c	package:tui
collection	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^    let collection = new DiagnosticCollection('test')$/;"	v
collection	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let collection = manager.create('test')$/;"	v
collection	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        for (let collection of this.collections) {$/;"	v
collection	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      collection.forEach((uri, diagnostics) => {$/;"	v
collection	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      for (let collection of this.collections) {$/;"	v
collection	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    for (let collection of collections) {$/;"	v
collection	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    for (let collection of this.collections) {$/;"	v
collection	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let collection = collections.find(o => o.name == 'config')$/;"	v
collection	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let collection = new DiagnosticCollection(name)$/;"	v
collections	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let collections = this.collections$/;"	v
collections	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let collections = this.getCollections(document.uri)$/;"	v
collections	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let collections = this.getCollections(uri)$/;"	v
colnr	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let { colnr, line } = this.option$/;"	v
colnr	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let { input, colnr, linenr } = this.option$/;"	v
colnr	.vim/plugged/coc.nvim/src/completion/index.ts	/^        let { linenr, col, line, colnr } = this.option$/;"	v
colnr	.vim/plugged/coc.nvim/src/types.ts	/^  colnr: number$/;"	p	interface:CompleteOption
colnr	.vim/plugged/coc.nvim/src/util/complete.ts	/^  let { line, linenr, colnr } = opt$/;"	C
color	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "color": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
color	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		function color( elem ) {$/;"	f	function:AnonymousFunctiond47633f82900
color	.vim/plugged/coc.nvim/data/schema.json	/^        "color": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
color	.vim/plugged/coc.nvim/src/__tests__/modules/colors.test.ts	/^    let color = getColor(255, 255, 255)$/;"	v
color	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let { color } = info$/;"	v
color	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^      let { color, range } = info$/;"	v
color	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^  color: Color$/;"	p	interface:ColorRanges
color	.vim/plugged/fzf/src/ansi.go	/^	color  ansiState$/;"	m	struct:fzf.ansiOffset	typeref:typename:ansiState
color	.vim/plugged/fzf/src/result.go	/^	color  tui.ColorPair$/;"	m	struct:fzf.colorOffset	typeref:typename:tui.ColorPair
color	.vim/plugged/fzf/src/tui/tcell.go	/^	color       bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
colorArr	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let colorArr = [(color.red * 256).toFixed(0), (color.green * 256).toFixed(0), (color.blue * /;"	v
colorCodes	.vim/plugged/fzf/src/tui/light.go	/^func colorCodes(fg Color, bg Color) []string {$/;"	f	package:tui	typeref:typename:[]string
colorId	.vim/plugged/coc.nvim/src/model/document.ts	/^  private colorId = 1080$/;"	p	class:Document
colorOffset	.vim/plugged/fzf/src/result.go	/^type colorOffset struct {$/;"	s	package:fzf
colorOffsets	.vim/plugged/fzf/src/result.go	/^func (result *Result) colorOffsets(matchOffsets []Offset, theme *tui.ColorTheme, color tui.Color/;"	f	struct:fzf.Result	typeref:typename:[]colorOffset
colorRanges	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^      let colorRanges = this.getColorRanges(colors)$/;"	v
colored	.vim/plugged/fzf/src/ansi.go	/^func (s *ansiState) colored() bool {$/;"	f	struct:fzf.ansiState	typeref:typename:bool
colored	.vim/plugged/fzf/src/tui/light.go	/^	colored  bool$/;"	m	struct:tui.LightWindow	typeref:typename:bool
colors	.config/nvim/plugged/coc.nvim/package.json	/^    "colors": "^1.3.3",$/;"	s	object:devDependencies
colors	.vim/plugged/coc.nvim/package.json	/^    "colors": "^1.3.3",$/;"	s	object:devDependencies
colors	.vim/plugged/coc.nvim/src/__tests__/modules/colors.test.ts	/^let colors: Colors$/;"	v
colors	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let colors: ColorInformation[]$/;"	v
colors	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    for (let colors of groups) {$/;"	v
colors	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    let { colors } = this$/;"	v
colors	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    return colors.some(o => positionInRange(position, o.range) == 0)$/;"	v
colors	.vim/plugged/coc.nvim/src/handler/index.ts	/^  private colors: Colors$/;"	p	class:Handler
colors	.vim/plugged/fzf/src/item.go	/^	colors      *[]ansiOffset \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]ansiOffset
colors	.vim/plugged/vim-airline/t/themes.vim	/^    let colors = airline#themes#get_highlight('Foo')$/;"	v
colorscheme	.vim/plugged/coc.nvim/src/util/highlight.ts	/^  readonly colorscheme: string$/;"	p	interface:Env
column	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^    def column(self):$/;"	m	class:VimUtilCtx
columns	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    columns: str = ''$/;"	v	class:Context
columns	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { columns } = workspace.env$/;"	v
columns	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let { columns, lines } = this$/;"	v
columns	.vim/plugged/coc.nvim/src/types.ts	/^  readonly columns: number$/;"	p	interface:Env
comfortable-motion.vim	.config/nvim/plugged/comfortable-motion.vim/README.md	/^# comfortable-motion.vim$/;"	c
comfortable_motion#flick	.config/nvim/plugged/comfortable-motion.vim/autoload/comfortable_motion.vim	/^function! comfortable_motion#flick(impulse)$/;"	f
command	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "command": {$/;"	o	object:definitions.languageServerCommand.properties
command	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def command(cmd):$/;"	f
command	.vim/plugged/coc.nvim/data/schema.json	/^        "command": {$/;"	o	object:definitions.languageServerCommand.properties
command	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^        "command": "test.run"$/;"	s	object:contributes.commands.0
command	.vim/plugged/coc.nvim/src/commands.ts	/^    for (const id of Array.isArray(command.id) ? command.id : [command.id]) {$/;"	C
command	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^      let { range, command } = codeLens$/;"	v
command	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let { command, edit } = action$/;"	v
command	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  command: string$/;"	p	interface:Executable
command	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^      let { command, edit } = action$/;"	v
command	.vim/plugged/coc.nvim/src/types.ts	/^  command?: string$/;"	p	interface:LanguageServerConfig
command	.vim/plugged/coc.nvim/src/watchman.ts	/^  private command(args: any[]): Promise<any> {$/;"	m	class:Watchman
command	.vim/plugged/fzf/src/options.go	/^	command  string$/;"	m	struct:fzf.previewOpts	typeref:typename:string
command_exists	.vim/plugged/coc.nvim/install.sh	/^command_exists() {$/;"	f
commands	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^    "commands": [$/;"	a	object:contributes
commands	.vim/plugged/coc.nvim/src/commands.ts	/^  private readonly commands = new Map<string, CommandItem>()$/;"	p	class:CommandManager
commands	.vim/plugged/coc.nvim/src/extensions.ts	/^      let { configuration, rootPatterns, commands } = contributes$/;"	v
commands	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let commands = current.map(o => o.command)$/;"	v
commands	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^        commands.push(`hi BG${hex} guibg=#${hex} guifg=#${isDark(color) ? 'ffffff' : '000000'}`)$/;"	v
commands	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    let commands: string[] = []$/;"	v
commands	.vim/plugged/ghost-text.vim/python3/test/test_channel_server.py	/^commands = {'1': '["call", "GhostTextUpdateText", ["hello","line1\\\\nline2\\\\nline3",[1,2]]]',$/;"	v
commands	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^commands = py.test --verbose --cov=omnisharp --cov-report html tests$/;"	k	section:testenv:coverage
commands	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^commands = py.test --verbose tests$/;"	k	section:testenv
commands	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^commands=$/;"	k	section:testenv:lint
commands	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^commands=$/;"	k	section:testenv:lint2
commands	.vim/plugged/omnisharp-vim/python/tox.ini	/^commands = py.test --verbose --cov=omnisharp --cov-report html tests$/;"	k	section:testenv:coverage
commands	.vim/plugged/omnisharp-vim/python/tox.ini	/^commands = py.test --verbose tests$/;"	k	section:testenv
commands	.vim/plugged/omnisharp-vim/python/tox.ini	/^commands=$/;"	k	section:testenv:lint
commands	.vim/plugged/omnisharp-vim/python/tox.ini	/^commands=$/;"	k	section:testenv:lint2
commands	VSCode/settings.json	/^            "commands": [ "workbench.action.navigateDown" ]$/;"	a	object:vim.normalModeKeyBindingsNonRecursive.3
commands	VSCode/settings.json	/^            "commands": [ "workbench.action.navigateLeft" ]$/;"	a	object:vim.normalModeKeyBindingsNonRecursive.0
commands	VSCode/settings.json	/^            "commands": [ "workbench.action.navigateRight" ]$/;"	a	object:vim.normalModeKeyBindingsNonRecursive.1
commands	VSCode/settings.json	/^            "commands": [ "workbench.action.navigateUp" ]$/;"	a	object:vim.normalModeKeyBindingsNonRecursive.2
commands	VSCode/settings.json	/^            "commands": [$/;"	a	object:vim.normalModeKeyBindingsNonRecursive.4
commentary.vim	.config/nvim/plugged/vim-commentary/README.markdown	/^# commentary.vim$/;"	c
commitCharacters	.vim/plugged/coc.nvim/src/languages.ts	/^        let { commitCharacters } = completeItem$/;"	v
communicate	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/process.py	/^    def communicate(self, timeout):$/;"	m	class:Process
communicate	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def communicate(self, timeout):$/;"	m	class:Socket
communicate	.vim/plugged/denite.nvim/rplugin/python3/denite/process.py	/^    def communicate(self, timeout):$/;"	m	class:Process
communicate	.vim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def communicate(self, timeout):$/;"	m	class:Socket
compare	.vim/plugged/coc.nvim/src/__tests__/modules/array.test.ts	/^    function compare(a: string): string {$/;"	f
compareByIndex	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public static compareByIndex(a: Placeholder, b: Placeholder): number {$/;"	m	class:Placeholder
compareRanks	.vim/plugged/fzf/src/result_others.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf	typeref:typename:bool
compareRanks	.vim/plugged/fzf/src/result_x86.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf	typeref:typename:bool
comparison in a function invocation	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "comparison in a function invocation" do$/;"	d
compileInSandbox	.vim/plugged/coc.nvim/src/util/factory.ts	/^function compileInSandbox(sandbox: ISandbox): Function {$/;"	f
compiledWrapper	.vim/plugged/coc.nvim/src/util/factory.ts	/^    const compiledWrapper = vm.runInContext(wrapper, sandbox, { filename })$/;"	C	function:compileInSandbox
compilerOptions	.vim/plugged/coc.nvim/tsconfig.json	/^  "compilerOptions": {$/;"	o
compilerOptions	tsconfig.json	/^  "compilerOptions": {$/;"	o
complete	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		function complete(){$/;"	f	function:AnonymousFunctiond47633f8a100
complete	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		opt.complete = function(){$/;"	f	function:opt
complete	.config/nvim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def complete(tab, opts):$/;"	f
complete	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let complete = new Complete(option, document, this.recentScores, config, arr, nvim)$/;"	v
complete	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { document, complete, activted } = this$/;"	v
complete	.vim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def complete(tab, opts):$/;"	f
completeConfig	.vim/plugged/coc.nvim/src/languages.ts	/^  private completeConfig: CompleteConfig$/;"	p	class:Languages
completeItem	.vim/plugged/coc.nvim/src/languages.ts	/^        let completeItem = completeItems[item.index]$/;"	v
completeItemKeys	.vim/plugged/coc.nvim/src/completion/index.ts	/^const completeItemKeys = ['abbr', 'menu', 'info', 'kind', 'icase', 'dup', 'empty', 'user_data']$/;"	C
completeItems	.vim/plugged/coc.nvim/src/languages.ts	/^    let completeItems: CompletionItem[] = []$/;"	v
completeOpt	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let { completeOpt } = workspace$/;"	v
completeOpt	.vim/plugged/coc.nvim/src/types.ts	/^  completeOpt: string$/;"	p	interface:Env
completeOpt	.vim/plugged/coc.nvim/src/types.ts	/^  readonly completeOpt: string$/;"	p	interface:IWorkspace
completed_item	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { completed_item, col, row, height, width, scrollbar } = ev$/;"	v
completed_item	.vim/plugged/coc.nvim/src/types.ts	/^  completed_item: VimCompleteItem,$/;"	p	interface:PopupChangeEvent
completionKindString	.vim/plugged/coc.nvim/src/util/complete.ts	/^export function completionKindString(kind: CompletionItemKind, map: Map<CompletionItemKind, stri/;"	f
completionPromise	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  private completionPromise: Thenable<any> | null$/;"	p	class:Delayer
complex	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let complex = false$/;"	v
compute	.vim/plugged/coc.nvim/src/util/fzy.ts	/^function compute(needle, haystack, D, M): void {$/;"	f
cond	.vim/plugged/fzf/src/util/eventbox.go	/^	cond   *sync.Cond$/;"	m	struct:util.EventBox	typeref:typename:*sync.Cond
conf	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let conf = config.getConfiguration('servers.c')$/;"	v
conf	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let conf = new Configurations()$/;"	v
conf	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let conf = new Configurations(tmpFile)$/;"	v
config	.config/nvim/plugged/html5.vim/Makefile	/^config:$/;"	t
config	.vim/plugged/coc.nvim/src/__tests__/completion/float.test.ts	/^    let config = await floatWin.getConfig()$/;"	v
config	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let config = workspace.getConfiguration('suggest')$/;"	v
config	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let config = conf.configuration.user$/;"	v
config	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let config = configurations.getConfiguration('foo')$/;"	v
config	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let config = createConfigurations()$/;"	v
config	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^const config = fs.readFileSync(path.join(__dirname, '.\/settings.json'), 'utf8')$/;"	C
config	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^const config: DiagnosticConfig = {$/;"	C
config	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let config = workspace.getConfiguration('diagnostic')$/;"	v
config	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let config = workspace.getConfiguration('notexists')$/;"	v
config	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let config = workspace.getConfiguration('tsserver')$/;"	v
config	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let config = workspace.getConfiguration('suggest')$/;"	v
config	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  private config: FloatingConfig$/;"	p	class:Floating
config	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let config = workspace.getConfiguration('coc.preferences')$/;"	v
config	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { nvim, config, document } = this$/;"	v
config	.vim/plugged/coc.nvim/src/completion/index.ts	/^  public config: CompleteConfig$/;"	p	class:Completion
config	.vim/plugged/coc.nvim/src/configuration/index.ts	/^        const config = this._configuration.inspect<T>(key)$/;"	C
config	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    const config = Object.freeze(lookUp(configuration.getValue(null), section))$/;"	C
config	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let config = workspace.getConfiguration('diagnostic')$/;"	v
config	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public config: DiagnosticConfig$/;"	p	class:DiagnosticManager
config	.vim/plugged/coc.nvim/src/extensions.ts	/^    let config = workspace.getConfiguration('coc.preferences')$/;"	v
config	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let config = workspace.getConfiguration('coc.preferences.codeLens')$/;"	v
config	.vim/plugged/coc.nvim/src/handler/colors.ts	/^        let config = workspace.getConfiguration('coc.preferences')$/;"	v
config	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let config = workspace.getConfiguration('coc.preferences')$/;"	v
config	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let config = workspace.getConfiguration('coc.preferences')$/;"	v
config	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      let config: any = null$/;"	v
config	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let config = workspace.getConfiguration(key.slice(0, - len))$/;"	v
config	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let config = workspace.getConfiguration(this._id)$/;"	v
config	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let config = workspace.getConfiguration(this.id)$/;"	v
config	.vim/plugged/coc.nvim/src/languages.ts	/^      let config = workspace.getConfiguration('coc.preferences')$/;"	v
config	.vim/plugged/coc.nvim/src/languages.ts	/^    let config = workspace.getConfiguration('coc.preferences')$/;"	v
config	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let config = workspace.getConfiguration( `list.source.${list.name}` )$/;"	v
config	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let config = workspace.getConfiguration( `list.source.${name}` )$/;"	C
config	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public config: ListConfiguration$/;"	C
config	.vim/plugged/coc.nvim/src/list/mappings.ts	/^        let config = workspace.getConfiguration('list')$/;"	v
config	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { bufnr, config, nvim } = this$/;"	v
config	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { config } = this$/;"	v
config	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { nvim, bufnr, window, config } = this$/;"	v
config	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let config = workspace.getConfiguration('coc.preferences')$/;"	v
config	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let config = await this.getBoundings(docs, offsetX)$/;"	v
config	.vim/plugged/coc.nvim/src/services.ts	/^      let config: LanguageServerConfig = lspConfig[key]$/;"	v
config	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^      let config = workspace.getConfiguration('coc.preferences')$/;"	v
config	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let config = workspace.getConfiguration('coc.preferences')$/;"	v
config	.vim/plugged/coc.nvim/src/types.ts	/^  readonly config: any$/;"	p	interface:Env
config	.vim/plugged/coc.nvim/src/workspace.ts	/^      let config = this.getConfiguration('workspace')$/;"	v
config	.vim/plugged/coc.nvim/src/workspace.ts	/^      let config: LanguageServerConfig = lspConfig[key]$/;"	v
config	.vim/plugged/coc.nvim/src/workspace.ts	/^    let config = this.getConfiguration('coc.preferences')$/;"	v
configFile	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let configFile = path.join(__dirname, '.\/settings.json')$/;"	v
configFile	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    for (let [configFile, model] of this.foldConfigurations) {$/;"	v
configFile	VSCode/settings.json	/^  "eslint.options": { "configFile": "\/home\/evakuator\/.eslintrc.json" },$/;"	s	object:eslint.options
configSection	.vim/plugged/coc.nvim/src/types.ts	/^  configSection?: string$/;"	p	interface:LanguageServerConfig
configuration	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^    "configuration": {$/;"	o	object:contributes
configuration	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let configuration = Configurations.parse(data)$/;"	v
configuration	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let configuration: Configuration$/;"	v
configuration	.vim/plugged/coc.nvim/src/extensions.ts	/^      let { configuration } = contributes$/;"	v
configuration	.vim/plugged/coc.nvim/src/extensions.ts	/^      let { configuration, rootPatterns, commands } = contributes$/;"	v
configuration	.vim/plugged/coc.nvim/src/language-client/configuration.ts	/^  configuration?: ConfigurationRequest.MiddlewareSignature$/;"	p	interface:ConfigurationWorkspaceMiddleware
configuration	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  private configuration: WorkspaceConfiguration$/;"	C
configurations	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let { configurations } = workspace$/;"	v
configurations	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let configurations = createConfigurations()$/;"	v
configurations	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let configurations = new Configurations(userConfigFile)$/;"	v
configurations	.vim/plugged/coc.nvim/src/types.ts	/^  readonly configurations: Configurations$/;"	p	interface:IWorkspace
confirm	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/util.py	/^def confirm(vim: Nvim, question: str) -> bool:$/;"	f
connect	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def connect(self, host, port, timeout):$/;"	m	class:Socket
connect	.vim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def connect(self, host, port, timeout):$/;"	m	class:Socket
connection	.vim/plugged/coc.nvim/src/__tests__/client/server/testFileWatcher.js	/^let connection = languageserver.createConnection()$/;"	v
connection	.vim/plugged/coc.nvim/src/__tests__/client/server/testInitializeResult.js	/^let connection = vscode_languageserver_1.createConnection();$/;"	v
connection_made	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/aprocess.py	/^    def connection_made(self, transport):$/;"	m	class:Process
connection_made	.vim/plugged/denite.nvim/rplugin/python3/denite/aprocess.py	/^    def connection_made(self, transport):$/;"	m	class:Process
conserve	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def conserve(self):$/;"	m	class:VisualContentPreserver
conserve_placeholder	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def conserve_placeholder(self, placeholder):$/;"	m	class:VisualContentPreserver
console	.vim/plugged/coc.nvim/src/util/factory.ts	/^  console: { [key in keyof Console]?: Function }$/;"	p	interface:ISandbox
consoleDevice	.vim/plugged/fzf/src/tui/light.go	/^const consoleDevice string = "\/dev\/tty"$/;"	c	package:tui	typeref:typename:string
console_coro	.vim/plugged/ghost-text.vim/python3/test/test_channel_server.py	/^async def console_coro():$/;"	f
consolidateConfigurationModel	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^    const consolidateConfigurationModel = this.getConsolidateConfiguration()$/;"	C
const	.vim/plugged/coc.nvim/src/handler/index.ts	/^      const msg = lines.join('\\n').trim()$/;"	v
const	.vim/plugged/coc.nvim/src/list/manager.ts	/^    const list: Matcher[] = ['fuzzy', 'strict', 'regex']$/;"	C
const	.vim/plugged/coc.nvim/src/util/index.ts	/^        const stat = await nfcall<fs.Stats>(fs.stat, path)$/;"	C	function:mkdirp
constant	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "constant": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
constant	.vim/plugged/coc.nvim/data/schema.json	/^        "constant": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
constrain	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) constrain() {$/;"	f	struct:fzf.Terminal
constructor	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "constructor": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
constructor	.config/nvim/plugged/oceanic-next/test/test.js	/^  constructor(clientId) {$/;"	m	class:SoundCloudAudio
constructor	.vim/plugged/coc.nvim/data/schema.json	/^        "constructor": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
constructor	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  constructor() {$/;"	m	class:Helper
constructor	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  constructor(private nvim: Neovim) {$/;"	m	class:Floating
constructor	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^  constructor($/;"	m	class:Configuration
constructor	.vim/plugged/coc.nvim/src/configuration/model.ts	/^  constructor(private _contents: any = {}) { }$/;"	m	class:ConfigurationModel
constructor	.vim/plugged/coc.nvim/src/configuration/shape.ts	/^  constructor(private workspace: IWorkspace) {$/;"	m	class:ConfigurationProxy
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor($/;"	m	class:DidCloseTextDocumentFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:CodeActionFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:CodeLensFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:CompletionItemFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:DefinitionFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:DidSaveTextDocumentFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:DocumentFormattingFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:DocumentHighlightFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:DocumentLinkFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:DocumentOnTypeFormattingFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:DocumentRangeFormattingFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:DocumentSymbolFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:HoverFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:ReferencesFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:RenameFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:SignatureHelpFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:WillSaveFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:WorkspaceSymbolFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(client: BaseLanguageClient, private _syncedDocuments: Map<string, TextDocument>) {$/;"	m	class:DidOpenTextDocumentFeature
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(private _resolve: () => void, private _reject: (error: any) => void) {$/;"	m	class:OnReady
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(private name: string) {$/;"	m	class:DefaultErrorHandler
constructor	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public constructor($/;"	m	class:BaseLanguageClient
constructor	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:ColorProviderFeature
constructor	.vim/plugged/coc.nvim/src/language-client/configuration.ts	/^  constructor(private _client: BaseLanguageClient) { }$/;"	m	class:ConfigurationFeature
constructor	.vim/plugged/coc.nvim/src/language-client/declaration.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:DeclarationFeature
constructor	.vim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:FoldingRangeFeature
constructor	.vim/plugged/coc.nvim/src/language-client/implementation.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:ImplementationFeature
constructor	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  constructor(private _client: LanguageClient, private _setting: string) {$/;"	m	class:SettingMonitor
constructor	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  public constructor($/;"	m	class:LanguageClient
constructor	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:SelectionRangeFeature
constructor	.vim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^  constructor(client: BaseLanguageClient) {$/;"	m	class:TypeDefinitionFeature
constructor	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  constructor(public defaultDelay: number) {$/;"	m	class:Delayer
constructor	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  constructor() {$/;"	C
constructor	.vim/plugged/coc.nvim/src/list/source/commands.ts	/^  constructor(nvim: Neovim) {$/;"	m	class:CommandsList
constructor	.vim/plugged/coc.nvim/src/list/source/extensions.ts	/^  constructor(nvim: Neovim) {$/;"	m	class:ExtensionList
constructor	.vim/plugged/coc.nvim/src/list/source/folders.ts	/^  constructor(nvim: Neovim) {$/;"	m	class:FoldList
constructor	.vim/plugged/coc.nvim/src/list/source/links.ts	/^  constructor(nvim: Neovim) {$/;"	m	class:LinksList
constructor	.vim/plugged/coc.nvim/src/list/source/location.ts	/^  constructor(nvim: Neovim) {$/;"	m	class:LocationList
constructor	.vim/plugged/coc.nvim/src/list/source/output.ts	/^  constructor(nvim: Neovim) {$/;"	m	class:OutputList
constructor	.vim/plugged/coc.nvim/src/list/source/services.ts	/^  constructor(nvim: Neovim) {$/;"	m	class:ServicesList
constructor	.vim/plugged/coc.nvim/src/list/source/sources.ts	/^  constructor(nvim: Neovim) {$/;"	m	class:SourcesList
constructor	.vim/plugged/coc.nvim/src/model/chars.ts	/^  constructor(start: number, end?: number) {$/;"	m	class:Range
constructor	.vim/plugged/coc.nvim/src/model/db.ts	/^  constructor($/;"	m	class:DB
constructor	.vim/plugged/coc.nvim/src/model/memos.ts	/^  constructor(private filepath: string) {$/;"	m	class:Memos
constructor	.vim/plugged/coc.nvim/src/model/mru.ts	/^  constructor(private name: string, base?: string) {$/;"	m	class:Mru
constructor	.vim/plugged/coc.nvim/src/model/popup.ts	/^  constructor(private nvim: Neovim) {$/;"	m	class:Popup
constructor	.vim/plugged/coc.nvim/src/model/source.ts	/^  constructor(option: Partial<SourceConfig>) {$/;"	m	class:Source
constructor	.vim/plugged/coc.nvim/src/model/status.ts	/^  constructor(private nvim: Neovim) {$/;"	C
constructor	.vim/plugged/coc.nvim/src/model/terminal.ts	/^  constructor(private cmd: string,$/;"	m	class:TerminalModel
constructor	.vim/plugged/coc.nvim/src/plugin.ts	/^  constructor(public nvim: Neovim) {$/;"	m	class:Plugin
constructor	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  constructor($/;"	m	class:FormatString
constructor	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  constructor(public index: number) {$/;"	m	class:Placeholder
constructor	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  constructor(public name: string) {$/;"	m	class:Variable
constructor	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  constructor(public value: string) {$/;"	m	class:Text
constructor	.vim/plugged/coc.nvim/src/source/around.ts	/^  constructor() {$/;"	m	class:Around
constructor	.vim/plugged/coc.nvim/src/source/buffer.ts	/^  constructor() {$/;"	m	class:Buffer
constructor	.vim/plugged/coc.nvim/src/source/file.ts	/^  constructor() {$/;"	m	class:File
constructor	.vim/plugged/coc.nvim/src/watchman.ts	/^  constructor(binaryPath: string, private channel?: OutputChannel) {$/;"	m	class:Watchman
container	.vim/plugged/coc.nvim/src/handler/index.ts	/^            let container = getPreviousContainer(containerName, res)$/;"	v
containerName	.vim/plugged/coc.nvim/src/handler/index.ts	/^          containerName$/;"	v
containerName	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let { name, kind, location, containerName } = sym as SymbolInformation$/;"	v
containerName	.vim/plugged/coc.nvim/src/handler/index.ts	/^  containerName?: string$/;"	p	interface:SymbolInfo
containing whitespace	.config/nvim/plugged/sideways.vim/spec/plugin/html_attributes_spec.rb	/^  describe "containing whitespace" do$/;"	d
contains	.vim/plugged/coc.nvim/src/model/chars.ts	/^  public contains(c: number): boolean {$/;"	m	class:Range
content	.config/nvim/plugged/emmet-vim/docs/index.html	/^	<section id="content">$/;"	I
content	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let content = await nvim.call('execute', [`sign place buffer=${buf.bufnr}`])$/;"	v
content	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let content = doc.getDocumentContent()$/;"	v
content	.vim/plugged/coc.nvim/src/__tests__/modules/outputChannel.test.ts	/^    let content = lines.join('')$/;"	v
content	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let content = await readFile(file, 'utf8')$/;"	v
content	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let content = await workspace.readFile(URI.file(filepath).toString())$/;"	v
content	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let content = doc.getDocumentContent()$/;"	v
content	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let content = fs.readFileSync(file, 'utf8')$/;"	v
content	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let content = await this.getPreviousContent(document)$/;"	v
content	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let content = await this.getPreviousContent(document)$/;"	v
content	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let content = await this.nvim.call('execute', [`sign place buffer=${bufnr}`])$/;"	v
content	.vim/plugged/coc.nvim/src/extensions.ts	/^      let content = await readFile(jsonFile, 'utf8')$/;"	v
content	.vim/plugged/coc.nvim/src/extensions.ts	/^    let content = await readFile(jsonFile, 'utf8')$/;"	v
content	.vim/plugged/coc.nvim/src/handler/index.ts	/^              content = '``` ' + item.language + '\\n' + content + '\\n```'$/;"	v
content	.vim/plugged/coc.nvim/src/handler/index.ts	/^            let content = item.value.trim()$/;"	v
content	.vim/plugged/coc.nvim/src/handler/index.ts	/^          content = '``` ' + contents.language + '\\n' + content + '\\n```'$/;"	v
content	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let content = contents.value.trim()$/;"	v
content	.vim/plugged/coc.nvim/src/model/document.ts	/^      let content = this.getDocumentContent()$/;"	v
content	.vim/plugged/coc.nvim/src/model/document.ts	/^    let content = TextDocument.applyEdits(textDocument, edits)$/;"	v
content	.vim/plugged/coc.nvim/src/model/document.ts	/^    let content = textDocument.getText()$/;"	v
content	.vim/plugged/coc.nvim/src/model/document.ts	/^    let content = this.lines.join('\\n')$/;"	v
content	.vim/plugged/coc.nvim/src/model/document.ts	/^    let content = this.lines.slice(startLine, endLine).join('\\n')$/;"	v
content	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { content, changedtick } = o$/;"	v
content	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^        let content = last + value$/;"	v
content	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    const content = this.tmSnippet.toString()$/;"	v
content	.vim/plugged/coc.nvim/src/types.ts	/^  content: string$/;"	p	interface:Documentation
content	.vim/plugged/coc.nvim/src/types.ts	/^  content?: string$/;"	p	interface:TerminalResult
content	.vim/plugged/coc.nvim/src/types.ts	/^  readonly content: string$/;"	p	interface:OutputChannel
content	.vim/plugged/coc.nvim/src/util/highlight.ts	/^  const content = lines.join('\\n')$/;"	C	function:getHiglights
content	.vim/plugged/coc.nvim/src/workspace.ts	/^    let content = `$/;"	v
content	.vim/plugged/coc.nvim/src/workspace.ts	/^    let content = await Promise.resolve(provider.provideTextDocumentContent(URI.parse(uri), toke/;"	v
contents	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let [, contents] = parseConfiguration(JSON.stringify(o))$/;"	v
contents	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let { contents } = conf.workspace$/;"	v
contents	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let { contents } = configurations.defaults$/;"	v
contents	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let { contents } = getConfigurationModel()$/;"	v
contents	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let { contents } = defaults$/;"	v
contents	.vim/plugged/coc.nvim/src/configuration/model.ts	/^    const contents = deepClone(this.contents)$/;"	C
contents	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let { contents } = hover$/;"	v
contents	.vim/plugged/coc.nvim/src/types.ts	/^  contents: any$/;"	p	interface:IConfigurationModel
contents	.vim/plugged/coc.nvim/src/types.ts	/^  contents: any$/;"	p	interface:IOverrides
context	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def context(self):$/;"	m	class:SnippetDefinition
context	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def context(self):$/;"	m	class:SnippetUtil
context	.vim/plugged/coc.nvim/src/extensions.ts	/^        let context: ExtensionContext = {$/;"	v
context	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let context: CodeActionContext = { diagnostics }$/;"	v
context	.vim/plugged/coc.nvim/src/languages.ts	/^        let context: CompletionContext = { triggerKind, option: opt }$/;"	v
context	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { context, list, listOptions } = this.manager$/;"	v
continue	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        if (!ms) continue$/;"	v
continue	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      if (!items) continue$/;"	v
continue	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        continue$/;"	v
continue	.vim/plugged/coc.nvim/src/list/worker.ts	/^        }$/;"	v
continue	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let old = newLabel$/;"	v
continue	.vim/plugged/coc.nvim/src/provider/manager.ts	/^      if (!def) continue$/;"	v
continue	.vim/plugged/coc.nvim/src/sources.ts	/^      if (!s.enable) continue$/;"	v
continue	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                if (line >= lines.length) continue$/;"	C	function:getHiglights
contributes	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^  "contributes": {$/;"	o
contributes	.vim/plugged/coc.nvim/src/extensions.ts	/^    let { contributes } = packageJSON$/;"	v
controlCode	.vim/plugged/coc.nvim/src/list/worker.ts	/^const controlCode = '\\x1b'$/;"	C
conv	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^    def conv(obj):$/;"	f	function:escape	file:
convert2fuzzy_pattern	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def convert2fuzzy_pattern(text):$/;"	f
convert2fuzzy_pattern	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def convert2fuzzy_pattern(text):$/;"	f
convert2list	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def convert2list(expr):$/;"	f
convert2list	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def convert2list(expr):$/;"	f
convert2regex_pattern	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def convert2regex_pattern(text):$/;"	f
convert2regex_pattern	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def convert2regex_pattern(text):$/;"	f
convertErrors	.vim/plugged/coc.nvim/src/configuration/util.ts	/^export function convertErrors(uri: string, content: string, errors: ParseError[]): ErrorItem[] {$/;"	f
convertToTextDocumentItem	.vim/plugged/coc.nvim/src/language-client/utils/converter.ts	/^export function convertToTextDocumentItem(document: TextDocument): TextDocumentItem {$/;"	f
convert_keys	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def convert_keys(self, keys):$/;"	m	class:VimInterfaceWindows
convert_pattern	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/filter.py	/^    def convert_pattern(self, input_str):$/;"	m	class:Base
convert_pattern	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/cpsm.py	/^    def convert_pattern(self, input_str):$/;"	m	class:Filter
convert_pattern	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/fuzzy.py	/^    def convert_pattern(self, input_str):$/;"	m	class:Filter
convert_pattern	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/regexp.py	/^    def convert_pattern(self, input_str):$/;"	m	class:Filter
convert_pattern	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/substring.py	/^    def convert_pattern(self, input_str):$/;"	m	class:Filter
convert_pattern	.vim/plugged/denite.nvim/rplugin/python3/denite/base/filter.py	/^    def convert_pattern(self, input_str):$/;"	m	class:Base
convert_pattern	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/cpsm.py	/^    def convert_pattern(self, input_str):$/;"	m	class:Filter
convert_pattern	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/fuzzy.py	/^    def convert_pattern(self, input_str):$/;"	m	class:Filter
convert_pattern	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/regexp.py	/^    def convert_pattern(self, input_str):$/;"	m	class:Filter
convert_pattern	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/substring.py	/^    def convert_pattern(self, input_str):$/;"	m	class:Filter
converted	.vim/plugged/coc.nvim/src/workspace.ts	/^    let converted = doc.convertFiletype(filetype)$/;"	v
coordinatorDelayMax	.vim/plugged/fzf/src/constants.go	/^	coordinatorDelayMax  time.Duration = 100 * time.Millisecond$/;"	c	package:fzf	typeref:typename:time.Duration
coordinatorDelayStep	.vim/plugged/fzf/src/constants.go	/^	coordinatorDelayStep time.Duration = 10 * time.Millisecond$/;"	c	package:fzf	typeref:typename:time.Duration
copy	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				var src = target[ name ], copy = options[ name ];$/;"	v
copySlice	.vim/plugged/fzf/src/terminal.go	/^func copySlice(slice []rune) []rune {$/;"	f	package:fzf	typeref:typename:[]rune
core_attributes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let core_attributes = {'accesskey': [], 'class': [], 'contenteditable': ['true', 'false', ''], '/;"	v
coro	.vim/plugged/ghost-text.vim/python3/exchanger.py	/^        async def coro(buf_name, msg_from_browser):$/;"	f	member:Exchanger.websocket_rx_coro	file:
coro	.vim/plugged/ghost-text.vim/python3/exchanger.py	/^        async def coro(json_from_vim):$/;"	f	member:Exchanger.channel_rx_coro	file:
correct cursor position in nested template args	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "correct cursor position in nested template args" do$/;"	d
could_match	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def could_match(self, before):$/;"	m	class:SnippetDefinition
count	.vim/plugged/coc.nvim/src/__tests__/client/delayer.test.ts	/^  let count = 0$/;"	v
count	.vim/plugged/coc.nvim/src/__tests__/modules/floatFactory.test.ts	/^    let count = 0$/;"	v
count	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let count = await this.nvim.getVvar('count') as number$/;"	v
count	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let count = 0$/;"	v
count	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let count = 0$/;"	v
count	.vim/plugged/fzf/src/chunklist.go	/^	count int$/;"	m	struct:fzf.Chunk	typeref:typename:int
count	.vim/plugged/fzf/src/merger.go	/^	count   int$/;"	m	struct:fzf.Merger	typeref:typename:int
count	.vim/plugged/fzf/src/terminal.go	/^	count      int$/;"	m	struct:fzf.Terminal	typeref:typename:int
counts	.vim/plugged/fzf/test/test_go.rb	/^          def counts$/;"	f	method:until
coverageDirectory	.config/nvim/plugged/coc.nvim/package.json	/^    "coverageDirectory": ".\/coverage\/"$/;"	s	object:jest
coverageDirectory	.vim/plugged/coc.nvim/package.json	/^    "coverageDirectory": ".\/coverage\/"$/;"	s	object:jest
cp	.vim/plugged/coc.nvim/webpack.config.js	/^const cp = require('child_process')$/;"	C
cpp	.config/nvim/plugged/switch.vim/spec/plugin/cpp_spec.rb	/^describe "cpp" do$/;"	d
cpp lists	.config/nvim/plugged/sideways.vim/spec/plugin/cpp_spec.rb	/^describe "cpp lists" do$/;"	d
cprint2	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) cprint2(fg Color, bg Color, attr Attr, text string) {$/;"	f	struct:tui.LightWindow
create	.vim/plugged/coc.nvim/src/__tests__/modules/floatBuffer.test.ts	/^async function create(): Promise<FloatBuffer> {$/;"	f
create	.vim/plugged/coc.nvim/src/model/popup.ts	/^  public async create(text: string[] | TextItem[], options: PopupOptions): Promise<void> {$/;"	m	class:Popup
createAll	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  export function createAll(_client: BaseLanguageClient): (StaticFeature | DynamicFeature<any>)[/;"	f	namespace:ProposedFeatures
createClient	.vim/plugged/coc.nvim/src/watchman.ts	/^  public static createClient(binaryPath: string, root: string, channel?: OutputChannel): Promise/;"	m	class:Watchman
createConfigurations	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^function createConfigurations(): Configurations {$/;"	f
createConnection	.vim/plugged/coc.nvim/src/language-client/client.ts	/^function createConnection($/;"	f
createDefaultErrorHandler	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public createDefaultErrorHandler(): ErrorHandler {$/;"	m	class:BaseLanguageClient
createDiagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^      createDiagnostic('bar', r, DiagnosticSeverity.Information)$/;"	v
createDiagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^      createDiagnostic('bar', r, DiagnosticSeverity.Warning),$/;"	v
createDiagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^      createDiagnostic('foo', r, DiagnosticSeverity.Hint),$/;"	v
createDiagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let diagnostics = [createDiagnostic('foo'), createDiagnostic('bar')]$/;"	v
createDiagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^function createDiagnostic(msg: string, range?: Range, severity?: DiagnosticSeverity): Diagnostic/;"	f
createDiagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^      [uri, [createDiagnostic('other')]]$/;"	v
createDiagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^function createDiagnostic(msg: string, range?: Range): Diagnostic {$/;"	f
createDiagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^function createDiagnostic(msg: string, range?: Range, severity?: DiagnosticSeverity): Diagnostic/;"	f
createDiagnosticBuffer	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^async function createDiagnosticBuffer(): Promise<DiagnosticBuffer> {$/;"	C
createDocument	.vim/plugged/coc.nvim/src/__tests__/client/converter.test.ts	/^  function createDocument(): TextDocument {$/;"	f
createDocument	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async createDocument(name?: string): Promise<Document> {$/;"	m	class:Helper
createDocument	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^async function createDocument(): Promise<Document> {$/;"	f
createExtension	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^  function createExtension(event: string): Extension<API> {$/;"	f
createExtension	.vim/plugged/coc.nvim/src/util/factory.ts	/^export function createExtension(id: string, filename: string): ExtensionExport {$/;"	f
createFile	.vim/plugged/coc.nvim/src/types.ts	/^  createFile(filepath: string, opts?: CreateFileOptions): Promise<void>$/;"	m	interface:IWorkspace
createFileChange	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^function createFileChange(file: string, exists = true): FileChangeItem {$/;"	f
createFileSystemWatcher	.vim/plugged/coc.nvim/src/types.ts	/^  createFileSystemWatcher(globPattern: string, ignoreCreate?: boolean, ignoreChange?: boolean, i/;"	m	interface:IWorkspace
createLogger	.vim/plugged/coc.nvim/src/extensions.ts	/^const createLogger = require('.\/util\/logger')$/;"	C
createLogger	.vim/plugged/coc.nvim/src/util/factory.ts	/^const createLogger = require('.\/logger')$/;"	C
createMemento	.vim/plugged/coc.nvim/src/model/memos.ts	/^  public createMemento(id: string): Memento {$/;"	m	class:Memos
createMessageTransports	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  protected async createMessageTransports(encoding: string): Promise<MessageTransports | null> {$/;"	m	class:LanguageClient
createOutputChannel	.vim/plugged/coc.nvim/src/types.ts	/^  createOutputChannel(name: string): OutputChannel$/;"	m	interface:IWorkspace
createPopup	.vim/plugged/coc.nvim/src/model/popup.ts	/^export default async function createPopup(nvim: Neovim, text: string[] | TextItem[], options: Po/;"	f
createSandbox	.vim/plugged/coc.nvim/src/util/factory.ts	/^function createSandbox(filename: string, logger: Logger): ISandbox {$/;"	f
createStatusBarItem	.vim/plugged/coc.nvim/src/model/status.ts	/^  public createStatusBarItem(priority = 0, isProgress = false): StatusBarItem {$/;"	C
createStatusBarItem	.vim/plugged/coc.nvim/src/types.ts	/^  createStatusBarItem(priority?: number): StatusBarItem$/;"	m	interface:IWorkspace
createTmpFile	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^export async function createTmpFile(content: string): Promise<string> {$/;"	f
create_directory	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^def create_directory(dirname):$/;"	f
create_file	.vim/plugged/fzf/install	/^create_file() {$/;"	f
created	.vim/plugged/coc.nvim/src/workspace.ts	/^      let created = await document.init(this.nvim, token)$/;"	v
criterion	.vim/plugged/fzf/src/options.go	/^type criterion int$/;"	t	package:fzf	typeref:typename:int
crossorigin	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let crossorigin = ['anonymous', 'use-credentials']$/;"	v
cs	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^  nmap cs  <Plug>Csurround$/;"	m
cs	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap cs  <Plug>Csurround$/;"	m
cs	.vim/sessions/foo.vim	/^nmap cs <Plug>Csurround$/;"	m
csf	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^  nmap csf <Plug>DsfChange$/;"	m
csi	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) csi(code string) {$/;"	f	unknown:tui.LightRenderer
csi	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) csi(code string) {$/;"	f	struct:tui.LightWindow
csiColor	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) csiColor(fg Color, bg Color, attr Attr) bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
css	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		    css          = jQuery.curCSS,$/;"	v
css	.config/nvim/plugged/sideways.vim/spec/plugin/css_declarations_spec.rb	/^describe "css" do$/;"	d
ctrlp#OmniSharp#findcodeactions#accept	.vim/plugged/omnisharp-vim/autoload/ctrlp/OmniSharp/findcodeactions.vim	/^function! ctrlp#OmniSharp#findcodeactions#accept(mode, str) abort$/;"	f
ctrlp#OmniSharp#findcodeactions#id	.vim/plugged/omnisharp-vim/autoload/ctrlp/OmniSharp/findcodeactions.vim	/^function! ctrlp#OmniSharp#findcodeactions#id() abort$/;"	f
ctrlp#OmniSharp#findcodeactions#init	.vim/plugged/omnisharp-vim/autoload/ctrlp/OmniSharp/findcodeactions.vim	/^function! ctrlp#OmniSharp#findcodeactions#init() abort$/;"	f
ctrlp#OmniSharp#findcodeactions#setactions	.vim/plugged/omnisharp-vim/autoload/ctrlp/OmniSharp/findcodeactions.vim	/^function! ctrlp#OmniSharp#findcodeactions#setactions(mode, actions) abort$/;"	f
ctrlp#OmniSharp#findsymbols#accept	.vim/plugged/omnisharp-vim/autoload/ctrlp/OmniSharp/findsymbols.vim	/^function! ctrlp#OmniSharp#findsymbols#accept(mode, str) abort$/;"	f
ctrlp#OmniSharp#findsymbols#id	.vim/plugged/omnisharp-vim/autoload/ctrlp/OmniSharp/findsymbols.vim	/^function! ctrlp#OmniSharp#findsymbols#id() abort$/;"	f
ctrlp#OmniSharp#findsymbols#init	.vim/plugged/omnisharp-vim/autoload/ctrlp/OmniSharp/findsymbols.vim	/^function! ctrlp#OmniSharp#findsymbols#init() abort$/;"	f
ctrlp#OmniSharp#findsymbols#setsymbols	.vim/plugged/omnisharp-vim/autoload/ctrlp/OmniSharp/findsymbols.vim	/^function! ctrlp#OmniSharp#findsymbols#setsymbols(quickfixes) abort$/;"	f
ctx	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^ctx = VimUtilCtx(vim)$/;"	v
ctx	.vim/plugged/omnisharp-vim/python/tests/test_util.py	/^def ctx():$/;"	f
cur	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	cur: function(force){$/;"	m	class:jQuery.fx
curcol	.vim/plugged/coc.nvim/src/completion/index.ts	/^        let curcol = col + word.length + 2$/;"	v
curly-bracketed lists/dictionaries	.config/nvim/plugged/sideways.vim/spec/plugin/curly_brackets_spec.rb	/^describe "curly-bracketed lists\/dictionaries" do$/;"	d
curname	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let curname: string$/;"	v
curr	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let curr = await nvim.call('line', '.')$/;"	v
curr	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let curr = await nvim.window$/;"	v
curr	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let curr = conf.getConfiguration('foo')$/;"	v
curr	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let curr = await nvim.call('getloclist', [winid, { title: 1 }])$/;"	v
curr	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let curr = await this.nvim.call('getloclist', [winid, { title: 1 }])$/;"	v
curr	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        let curr = await nvim.call('getloclist', [winid, { title: 1 }])$/;"	v
curr	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let curr = doc.getline(line)$/;"	v
curr	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let curr = Date.now()$/;"	v
curr	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let curr = Range.create(positions[0], positions[1])$/;"	v
curr	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let curr = await workspace.getLine(uri, range.start.line)$/;"	v
curr	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let curr = this.items.length$/;"	v
curr	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let curr = this.items[this.index]$/;"	v
curr	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let max = limitLines - curr$/;"	v
curr	.vim/plugged/coc.nvim/src/list/worker.ts	/^          curr = next$/;"	v
curr	.vim/plugged/coc.nvim/src/list/worker.ts	/^        curr = start$/;"	v
curr	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let curr = start$/;"	v
curr	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let curr = fragment.start$/;"	v
curr	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let curr = this.placeholder$/;"	v
currId	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                let currId = 0$/;"	C	function:getHiglights
currIndent	.vim/plugged/coc.nvim/src/handler/index.ts	/^            let currIndent = curr.match(\/^\\s*\/)[0]$/;"	v
currIndex	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { currIndex } = this$/;"	v
currIndex	.vim/plugged/coc.nvim/src/list/ui.ts	/^    return this.items[currIndex + delta]$/;"	v
currIndex	.vim/plugged/coc.nvim/src/list/ui.ts	/^  private currIndex = 0$/;"	p	class:ListUI
currInput	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let currInput = context.input$/;"	v
currItem	.vim/plugged/coc.nvim/src/completion/index.ts	/^  private currItem: VimCompleteItem$/;"	p	class:Completion
currList	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { currList } = this$/;"	C
currList	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { currList } = this$/;"	v
currList	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { name, ui, currList, nvim } = this$/;"	C
currList	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { nvim, currList } = this$/;"	C
currList	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { ui, currList, activated, nvim } = this$/;"	v
currList	.vim/plugged/coc.nvim/src/list/manager.ts	/^    return currList ? currList.name : 'anonymous'$/;"	C
currList	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private currList: IList$/;"	C
currScore	.vim/plugged/coc.nvim/src/provider/manager.ts	/^    let currScore = 0$/;"	v
currUri	.vim/plugged/coc.nvim/src/workspace.ts	/^    let currUri = this.getDocument(bufnr) ? this.getDocument(bufnr).uri : null$/;"	v
current	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        let current = time$/;"	v
current	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let current: CodeLens[] = null$/;"	v
current	.vim/plugged/coc.nvim/src/list/history.ts	/^    let { current, index } = this$/;"	v
current	.vim/plugged/coc.nvim/src/list/ui.ts	/^  current: boolean$/;"	p	interface:MousePosition
current	.vim/plugged/fzf/src/history.go	/^func (h *History) current() string {$/;"	f	struct:fzf.History	typeref:typename:string
current	.vim/plugged/fzf/src/terminal.go	/^	current  bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
currentDate	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^    const currentDate = new Date()$/;"	C
currentFunctionSymbolAutoUpdate	.vim/plugged/coc.nvim/src/handler/index.ts	/^  currentFunctionSymbolAutoUpdate: boolean$/;"	p	interface:Preferences
currentIndent	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    const currentIndent = currentLine.match(\/^\\s*\/)[0]$/;"	C
currentItem	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) currentItem() *Item {$/;"	f	struct:fzf.Terminal	typeref:typename:*Item
currentLine	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    const currentLine = document.getline(position.line)$/;"	C
current_compiler	.config/nvim/plugged/vim-bundler/compiler/bundler.vim	/^let current_compiler = "bundler"$/;"	v
current_compiler	.config/nvim/plugged/vim-rails/compiler/rails.vim	/^let current_compiler = "rails"$/;"	v
current_compiler	.config/nvim/plugged/vim-ruby/compiler/eruby.vim	/^let current_compiler = "eruby"$/;"	v
current_compiler	.config/nvim/plugged/vim-ruby/compiler/rake.vim	/^let current_compiler = "rake"$/;"	v
current_compiler	.config/nvim/plugged/vim-ruby/compiler/rspec.vim	/^let current_compiler = "rspec"$/;"	v
current_compiler	.config/nvim/plugged/vim-ruby/compiler/ruby.vim	/^let current_compiler = "ruby"$/;"	v
current_compiler	.config/nvim/plugged/vim-ruby/compiler/rubyunit.vim	/^let current_compiler = "rubyunit"$/;"	v
current_text	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def current_text(self):$/;"	m	class:TextObject
cursor	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    cursor: int = 0$/;"	v	class:Context
cursor	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^    def cursor(self):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
cursor	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^    def cursor(self, pos):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
cursor	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^cursor,$/;"	s
cursor	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let arr = [bufnr, cursor[0], cursor[1]]$/;"	v
cursor	.vim/plugged/coc.nvim/src/workspace.ts	/^    let cursor = await nvim.call('getcurpos')$/;"	v
cursor	.vim/plugged/fzf/src/history.go	/^	cursor   int$/;"	m	struct:fzf.History	typeref:typename:int
cursorPostion	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^function cursorPostion(n: number): string {$/;"	f
cursors	.vim/plugged/fzf/src/merger.go	/^	cursors []int$/;"	m	struct:fzf.Merger	typeref:typename:[]int
cusorIndex	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let { cusorIndex, input } = this$/;"	v
cusorIndex	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let { cusorIndex, interactive, input, _matcher } = this$/;"	v
cusorIndex	.vim/plugged/coc.nvim/src/list/prompt.ts	/^  private cusorIndex = 0$/;"	p	class:Prompt
custom	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	custom: function(from, to, unit){$/;"	m	class:jQuery.fx
customResults	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^          customResults: {$/;"	v
cv	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      rootUri: rootPath ? cv.asUri(URI.file(rootPath)) : null,$/;"	v
cwd	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "cwd": {$/;"	o	object:definitions.languageServerBase.properties
cwd	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "cwd": {},$/;"	o	object:definitions.languageServerCommand.properties
cwd	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "cwd": {},$/;"	o	object:definitions.languageServerModule.properties
cwd	.vim/plugged/coc.nvim/data/schema.json	/^        "cwd": {$/;"	o	object:definitions.languageServerBase.properties
cwd	.vim/plugged/coc.nvim/data/schema.json	/^        "cwd": {},$/;"	o	object:definitions.languageServerCommand.properties
cwd	.vim/plugged/coc.nvim/data/schema.json	/^        "cwd": {},$/;"	o	object:definitions.languageServerModule.properties
cwd	.vim/plugged/coc.nvim/src/__tests__/client/processes.test.ts	/^    let cwd = process.cwd()$/;"	v
cwd	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let cwd = await nvim.call('getcwd')$/;"	v
cwd	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let { nvim, workspaceFolders, channelNames, rootPath, cwd, documents, initialized, textDocum/;"	v
cwd	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  cwd?: string$/;"	p	interface:ForkOptions
cwd	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  cwd?: string$/;"	p	interface:SpawnOptions
cwd	.vim/plugged/coc.nvim/src/list/manager.ts	/^      cwd: this.cwd,$/;"	v
cwd	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private cwd: string$/;"	C
cwd	.vim/plugged/coc.nvim/src/types.ts	/^  cwd: string$/;"	p	interface:ListContext
cwd	.vim/plugged/coc.nvim/src/types.ts	/^  cwd?: string$/;"	p	interface:LanguageServerConfig
cwd	.vim/plugged/coc.nvim/src/types.ts	/^  cwd?: string$/;"	p	interface:TaskOptions
cwd	.vim/plugged/coc.nvim/src/types.ts	/^  cwd?: string$/;"	p	interface:TerminalOptions
cwd	.vim/plugged/coc.nvim/src/types.ts	/^  readonly cwd: string$/;"	p	interface:IWorkspace
cwd	.vim/plugged/coc.nvim/src/workspace.ts	/^    if (uri.scheme != 'file') return cwd$/;"	v
cwd	.vim/plugged/coc.nvim/src/workspace.ts	/^    let cwd = await nvim.call('getcwd')$/;"	v
cwd	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { cwd } = this$/;"	v
cwd	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^    def cwd(self):$/;"	m	class:VimUtilCtx
cwd_input	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/util.py	/^def cwd_input(vim: Nvim, cwd: str, prompt: str,$/;"	f
cword	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^    let cword = await this.nvim.call('expand', '<cword>')$/;"	v
cx	.vim/plugged/fzf/src/terminal.go	/^	cx         int$/;"	m	struct:fzf.Terminal	typeref:typename:int
cy	.vim/plugged/fzf/src/terminal.go	/^	cy         int$/;"	m	struct:fzf.Terminal	typeref:typename:int
cycle	.vim/plugged/fzf/src/terminal.go	/^	cycle      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
d	.config/nvim/autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	.config/nvim/autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
d	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> d    denite#do_map('do_action', 'delete')$/;"	m
d	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> d$/;"	m
d	.config/nvim/plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.d = function(exports, name, getter) {$/;"	f	function:__webpack_require__
d	.vim/autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	.vim/autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
d	.vim/plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.d = function(exports, name, getter) {$/;"	f	function:__webpack_require__
d	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        let d = comparePosition(a.range.start, b.range.start)$/;"	v
d	.vim/plugged/coc.nvim/src/model/document.ts	/^      let d = diffLines(orig, content)$/;"	v
d	.vim/plugged/coc.nvim/src/model/status.ts	/^    let d = new Date()$/;"	C
d	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    for (let d of this.disposables) {$/;"	v
d	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  d = 100,$/;"	e	enum:CharCode
data	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let data = configurations.configuration.toData()$/;"	v
data	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let data: IConfigurationData = {$/;"	v
data	.vim/plugged/coc.nvim/src/extensions.ts	/^    let data = loadJson(db.filepath) || {}$/;"	v
data	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        const data: RegistrationData<any> = {$/;"	C
data	.vim/plugged/coc.nvim/src/sources.ts	/^    let data = JSON.parse(item.user_data)$/;"	v
data	.vim/plugged/coc.nvim/src/types.ts	/^  data?: any$/;"	p	interface:ListItem
data2String	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private data2String(data: any): string {$/;"	m	class:BaseLanguageClient
day	.vim/plugged/coc.nvim/src/extensions.ts	/^    let day = new Date(now.getFullYear(), now.getMonth(), now.getDate() - (interval == 'daily' ?/;"	v
db	.vim/plugged/coc.nvim/src/__tests__/modules/db.test.ts	/^let db: DB$/;"	v
db	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let db = workspace.createDatabase('test')$/;"	v
db	.vim/plugged/coc.nvim/src/extensions.ts	/^      let db = loadJson(this.db.filepath)$/;"	v
db	.vim/plugged/coc.nvim/src/extensions.ts	/^      let extension = db ? db.extension : null$/;"	v
db	.vim/plugged/coc.nvim/src/extensions.ts	/^    let db = this.db = new DB(filepath)$/;"	v
db	.vim/plugged/coc.nvim/src/extensions.ts	/^    let { db } = this$/;"	v
db	.vim/plugged/coc.nvim/src/list/history.ts	/^    let { db } = this$/;"	v
db	.vim/plugged/coc.nvim/src/list/history.ts	/^    let { loaded, db } = this$/;"	v
db	.vim/plugged/coc.nvim/src/list/history.ts	/^  private db: DB$/;"	p	class:History
dd	.config/nvim/autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
dd	.vim/autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
dd)	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:current(p, li, dt, dd),$/;"	s
deactivate	.vim/plugged/coc.nvim/src/extensions.ts	/^  deactivate: () => void$/;"	p	interface:ExtensionItem
deactivate	.vim/plugged/coc.nvim/src/util/factory.ts	/^  deactivate: () => any | null$/;"	p	interface:ExtensionExport
debounce	.config/nvim/plugged/coc.nvim/package.json	/^    "debounce": "^1.2.0",$/;"	s	object:dependencies
debounce	.vim/plugged/coc.nvim/package.json	/^    "debounce": "^1.2.0",$/;"	s	object:dependencies
debug	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/column.py	/^    def debug(self, expr: typing.Any) -> None:$/;"	m	class:Base
debug	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/source.py	/^    def debug(self, expr: typing.Any) -> None:$/;"	m	class:Base
debug	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/defx.py	/^    def debug(self, expr: typing.Any) -> None:$/;"	m	class:Defx
debug	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def debug(self, expr: typing.Any) -> None:$/;"	m	class:View
debug	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/filter.py	/^    def debug(self, expr):$/;"	m	class:Base
debug	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def debug(self, expr):$/;"	m	class:Base
debug	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def debug(self, expr):$/;"	m	class:Base
debug	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def debug(self, expr):$/;"	m	class:Child
debug	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def debug(vim: Nvim, expr):$/;"	f
debug	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/debug.py	/^def debug(msg):$/;"	f
debug	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^      debug: { module: serverModule, transport: lsclient.TransportKind.ipc, options: { execArgv:/;"	v
debug	.vim/plugged/denite.nvim/rplugin/python3/denite/base/filter.py	/^    def debug(self, expr):$/;"	m	class:Base
debug	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def debug(self, expr):$/;"	m	class:Base
debug	.vim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def debug(self, expr):$/;"	m	class:Base
debug	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def debug(self, expr):$/;"	m	class:Child
debug	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def debug(vim: Nvim, expr):$/;"	f
debugV2	.vim/plugged/fzf/src/algo/algo.go	/^func debugV2(T []rune, pattern []rune, F []int32, lastIdx int, H []int16, C []int16) {$/;"	f	package:algo
declCapabilities	.vim/plugged/coc.nvim/src/language-client/declaration.ts	/^      const declCapabilities = capabilities.declarationProvider$/;"	C	method:DeclarationFeature.initialize
declCapabilities	.vim/plugged/coc.nvim/src/language-client/declaration.ts	/^      const id = Is.string(declCapabilities.id) && declCapabilities.id.length > 0 ? declCapabili/;"	C	method:DeclarationFeature.initialize
declaration	.vim/plugged/coc.nvim/tsconfig.json	/^    "declaration": true,$/;"	b	object:compilerOptions
declarations (multiline)	.config/nvim/plugged/sideways.vim/spec/plugin/css_declarations_spec.rb	/^  describe "declarations (multiline)" do$/;"	d
declarations (single-line)	.config/nvim/plugged/sideways.vim/spec/plugin/css_declarations_spec.rb	/^  describe "declarations (single-line)" do$/;"	d
decode_if_bytes	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^def decode_if_bytes(obj):$/;"	f
decorate	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^def decorate(component):$/;"	f
decorate	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^def decorate(component):$/;"	f
deep	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	var target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, options;$/;"	v
deep	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.scoping-1 \/deep\/ span {$/;"	s
deepClone	.vim/plugged/coc.nvim/src/util/object.ts	/^export function deepClone<T>(obj: T): T {$/;"	f
deepFreeze	.vim/plugged/coc.nvim/src/util/object.ts	/^export function deepFreeze<T>(obj: T): T {$/;"	f
def	.vim/plugged/coc.nvim/src/list/basic.ts	/^      let def = this.optionMap.get(arg)$/;"	v
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": "",$/;"	s	object:definitions.languageServerBase.properties.cwd
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": "",$/;"	s	object:definitions.languageServerCommand.properties.command
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": "",$/;"	s	object:definitions.languageServerModule.properties.module
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": "",$/;"	s	object:definitions.languageServerModule.properties.runtime
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": "127.0.0.1",$/;"	s	object:definitions.languageServerSocket.properties.host
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": "ipc",$/;"	s	object:definitions.languageServerModule.properties.transport
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": "never",$/;"	s	object:definitions.languageServerBase.properties.revealOutputChannelOn
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": "off",$/;"	s	object:definitions.languageServerBase.properties.trace.server
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": "utf8",$/;"	s	object:definitions.languageServerBase.properties.stdioEncoding
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerBase.properties.additionalSchemes
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerBase.properties.filetypes
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerBase.properties.ignoredRootPaths
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerBase.properties.rootPatterns
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerCommand.properties.args
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerModule.properties.args
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerModule.properties.execArgv
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerBase.properties.disableCompletion
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerBase.properties.disableDiagnostics
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerBase.properties.disableWorkspaceFolders
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerBase.properties.requireRootPattern
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerCommand.properties.detached
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerCommand.properties.shell
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": null,$/;"	z	object:definitions.languageServerBase.properties.env
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": true$/;"	b	object:definitions.languageServerBase.properties.enable
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": {},$/;"	o	object:definitions.languageServerBase.properties.initializationOptions
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "default": {},$/;"	o	object:definitions.languageServerBase.properties.settings
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "default": {"type": "string"}$/;"	o	object:properties.suggest.completionItemKindLabels.properties
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": " "$/;"	s	object:properties.diagnostic.virtualTextPrefix
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": " \\\\ "$/;"	s	object:properties.diagnostic.virtualTextLineSeparator
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "",$/;"	s	object:properties.http.proxy
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "*",$/;"	s	object:properties.list.selectedSignText
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "<C-j>",$/;"	s	object:properties.list.nextKeymap
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "<C-k>",$/;"	s	object:properties.list.previousKeymap
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": ">",$/;"	s	object:properties.list.indicator
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": ">>"$/;"	s	object:properties.diagnostic.errorSign
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": ">>"$/;"	s	object:properties.diagnostic.hintSign
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": ">>"$/;"	s	object:properties.diagnostic.infoSign
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "A"$/;"	s	object:properties.coc.source.around.shortcut
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "B"$/;"	s	object:properties.coc.source.buffer.shortcut
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "F"$/;"	s	object:properties.coc.source.file.shortcut
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "SNIP",$/;"	s	object:properties.coc.preferences.snippetStatusText
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "Search",$/;"	s	object:properties.list.previewHighlightGroup
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "always",$/;"	s	object:properties.diagnostic.enableMessage
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "always",$/;"	s	object:properties.suggest.autoTrigger
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "daily",$/;"	s	object:properties.coc.preferences.extensionUpdateCheck
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "edit",$/;"	s	object:properties.coc.preferences.jumpCommand
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "float",$/;"	s	object:properties.diagnostic.messageTarget
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "hint",$/;"	s	object:properties.diagnostic.level
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "menu",$/;"	s	object:properties.suggest.detailField
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "more",$/;"	s	object:properties.coc.preferences.messageLevel
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "~",$/;"	s	object:properties.suggest.snippetIndicator
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "‣"$/;"	s	object:properties.codeLens.separator
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": "⚠"$/;"	s	object:properties.diagnostic.warningSign
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 1$/;"	n	object:properties.coc.source.around.priority
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 1$/;"	n	object:properties.coc.source.buffer.priority
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 1,$/;"	n	object:properties.suggest.minTriggerInputLength
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 10$/;"	n	object:properties.coc.source.file.priority
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 10,$/;"	n	object:properties.list.maxHeight
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 100$/;"	n	object:properties.suggest.detailMaxLength
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 1000$/;"	n	object:properties.diagnostic.highlightOffset
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 1000$/;"	n	object:properties.diagnostic.signOffset
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 1000,$/;"	n	object:properties.signature.floatTimeout
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 12,$/;"	n	object:properties.list.maxPreviewHeight
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 200$/;"	n	object:properties.suggest.labelMaxLength
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 2000,$/;"	n	object:properties.suggest.timeout
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 3$/;"	n	object:properties.diagnostic.virtualTextLines
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 30000,$/;"	n	object:properties.list.limitLines
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 50,$/;"	n	object:properties.signature.triggerSignatureWait
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 50,$/;"	n	object:properties.suggest.maxCompleteItemCount
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 60,$/;"	n	object:properties.suggest.triggerCompletionWait
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 8$/;"	n	object:properties.diagnostic.maxWindowHeight
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 8$/;"	n	object:properties.signature.maxWindowHeight
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 80,$/;"	n	object:properties.suggest.maxPreviewWidth
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 900,$/;"	n	object:properties.list.signOffset
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": 99,$/;"	n	object:properties.suggest.languageSourcePriority
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": [".ts", ".js"],$/;"	a	object:properties.coc.source.file.trimSameExts
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": [".vim", ".git", ".hg", ".projections.json"],$/;"	a	object:properties.coc.preferences.rootPatterns
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": ["\/"],$/;"	a	object:properties.coc.source.file.triggerCharacters
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	a	object:properties.workspace.ignoredFiletypes
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.preferences.formatOnSaveFiletypes
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.source.around.disableSyntaxes
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.source.buffer.disableSyntaxes
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.source.file.disableSyntaxes
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.source.file.ignorePatterns
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.list.source.outline.ctagsFilestypes
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.coc.preferences.currentFunctionSymbolAutoUpdate
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.coc.preferences.formatOnType
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.coc.preferences.useQuickfixForLocations
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.codeLens.enable
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.checkCurrentLine
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.displayByAle
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.joinMessageLines
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.refreshAfterSave
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.refreshOnInsertMode
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.virtualText
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.signature.hideOnTextChange
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.disableKind
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.disableMenu
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.disableMenuShortcut
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.enablePreview
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.keepCompleteopt
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.numberSelect
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.preferCompleteThanJumpPlaceholder
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.triggerAfterInsertEnter
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false,$/;"	b	object:properties.list.previewSplitRight
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false,$/;"	b	object:properties.suggest.acceptSuggestionOnCommitCharacter
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": false,$/;"	b	object:properties.suggest.echodocSupport
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": null$/;"	z	object:properties.coc.preferences.watchmanPath
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.bracketEnterImprove
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.colorSupport
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.enableFloatHighlight
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.previewAutoClose
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.snippets.enable
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.around.enable
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.around.firstMatch
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.buffer.enable
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.buffer.firstMatch
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.file.enable
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.diagnostic.enable
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.diagnostic.locationlist
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.http.proxyStrictSSL
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.signature.enable
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.signature.preferShownAbove
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.suggest.fixInsertedWord
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.suggest.floatEnable
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.suggest.localityBonus
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.suggest.noselect
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.coc.source.buffer.ignoreGitignore
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.coc.source.file.ignoreHidden
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.diagnostic.enableSign
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.list.autoResize
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.list.extendedSearchMode
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": {},$/;"	o	object:properties.languageserver
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": {},$/;"	o	object:properties.list.insertMappings
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": {},$/;"	o	object:properties.list.normalMappings
default	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "default": {},$/;"	o	object:properties.suggest.completionItemKindLabels
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": "",$/;"	s	object:definitions.languageServerBase.properties.cwd
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": "",$/;"	s	object:definitions.languageServerCommand.properties.command
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": "",$/;"	s	object:definitions.languageServerModule.properties.module
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": "",$/;"	s	object:definitions.languageServerModule.properties.runtime
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": "127.0.0.1",$/;"	s	object:definitions.languageServerSocket.properties.host
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": "ipc",$/;"	s	object:definitions.languageServerModule.properties.transport
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": "never",$/;"	s	object:definitions.languageServerBase.properties.revealOutputChannelOn
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": "off",$/;"	s	object:definitions.languageServerBase.properties.trace.server
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": "utf8",$/;"	s	object:definitions.languageServerBase.properties.stdioEncoding
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerBase.properties.additionalSchemes
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerBase.properties.filetypes
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerBase.properties.ignoredRootPaths
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerBase.properties.rootPatterns
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerCommand.properties.args
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerModule.properties.args
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": [],$/;"	a	object:definitions.languageServerModule.properties.execArgv
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerBase.properties.disableCompletion
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerBase.properties.disableDiagnostics
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerBase.properties.disableWorkspaceFolders
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerBase.properties.requireRootPattern
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerCommand.properties.detached
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": false,$/;"	b	object:definitions.languageServerCommand.properties.shell
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": null,$/;"	z	object:definitions.languageServerBase.properties.env
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": true$/;"	b	object:definitions.languageServerBase.properties.enable
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": {},$/;"	o	object:definitions.languageServerBase.properties.initializationOptions
default	.vim/plugged/coc.nvim/data/schema.json	/^          "default": {},$/;"	o	object:definitions.languageServerBase.properties.settings
default	.vim/plugged/coc.nvim/data/schema.json	/^        "default": {"type": "string"}$/;"	o	object:properties.suggest.completionItemKindLabels.properties
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": " "$/;"	s	object:properties.diagnostic.virtualTextPrefix
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": " \\\\ "$/;"	s	object:properties.diagnostic.virtualTextLineSeparator
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "",$/;"	s	object:properties.http.proxy
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "*",$/;"	s	object:properties.list.selectedSignText
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "<C-j>",$/;"	s	object:properties.list.nextKeymap
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "<C-k>",$/;"	s	object:properties.list.previousKeymap
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": ">",$/;"	s	object:properties.list.indicator
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": ">>"$/;"	s	object:properties.diagnostic.errorSign
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": ">>"$/;"	s	object:properties.diagnostic.hintSign
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": ">>"$/;"	s	object:properties.diagnostic.infoSign
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "A"$/;"	s	object:properties.coc.source.around.shortcut
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "B"$/;"	s	object:properties.coc.source.buffer.shortcut
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "F"$/;"	s	object:properties.coc.source.file.shortcut
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "SNIP",$/;"	s	object:properties.coc.preferences.snippetStatusText
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "Search",$/;"	s	object:properties.list.previewHighlightGroup
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "always",$/;"	s	object:properties.diagnostic.enableMessage
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "always",$/;"	s	object:properties.suggest.autoTrigger
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "daily",$/;"	s	object:properties.coc.preferences.extensionUpdateCheck
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "edit",$/;"	s	object:properties.coc.preferences.jumpCommand
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "float",$/;"	s	object:properties.diagnostic.messageTarget
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "hint",$/;"	s	object:properties.diagnostic.level
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "menu",$/;"	s	object:properties.suggest.detailField
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "more",$/;"	s	object:properties.coc.preferences.messageLevel
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "~",$/;"	s	object:properties.suggest.snippetIndicator
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "‣"$/;"	s	object:properties.codeLens.separator
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": "⚠"$/;"	s	object:properties.diagnostic.warningSign
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 1$/;"	n	object:properties.coc.source.around.priority
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 1$/;"	n	object:properties.coc.source.buffer.priority
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 1,$/;"	n	object:properties.suggest.minTriggerInputLength
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 10$/;"	n	object:properties.coc.source.file.priority
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 10,$/;"	n	object:properties.list.maxHeight
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 100$/;"	n	object:properties.suggest.detailMaxLength
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 1000$/;"	n	object:properties.diagnostic.highlightOffset
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 1000$/;"	n	object:properties.diagnostic.signOffset
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 1000,$/;"	n	object:properties.signature.floatTimeout
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 12,$/;"	n	object:properties.list.maxPreviewHeight
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 200$/;"	n	object:properties.suggest.labelMaxLength
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 2000,$/;"	n	object:properties.suggest.timeout
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 3$/;"	n	object:properties.diagnostic.virtualTextLines
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 30000,$/;"	n	object:properties.list.limitLines
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 50,$/;"	n	object:properties.signature.triggerSignatureWait
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 50,$/;"	n	object:properties.suggest.maxCompleteItemCount
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 60,$/;"	n	object:properties.suggest.triggerCompletionWait
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 8$/;"	n	object:properties.diagnostic.maxWindowHeight
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 8$/;"	n	object:properties.signature.maxWindowHeight
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 80,$/;"	n	object:properties.suggest.maxPreviewWidth
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 900,$/;"	n	object:properties.list.signOffset
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": 99,$/;"	n	object:properties.suggest.languageSourcePriority
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": [".ts", ".js"],$/;"	a	object:properties.coc.source.file.trimSameExts
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": [".vim", ".git", ".hg", ".projections.json"],$/;"	a	object:properties.coc.preferences.rootPatterns
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": ["\/"],$/;"	a	object:properties.coc.source.file.triggerCharacters
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": ["markdown", "log", "txt", "help"],$/;"	a	object:properties.workspace.ignoredFiletypes
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.preferences.formatOnSaveFiletypes
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.source.around.disableSyntaxes
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.source.buffer.disableSyntaxes
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.source.file.disableSyntaxes
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.coc.source.file.ignorePatterns
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": [],$/;"	a	object:properties.list.source.outline.ctagsFilestypes
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.coc.preferences.currentFunctionSymbolAutoUpdate
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.coc.preferences.formatOnType
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.coc.preferences.useQuickfixForLocations
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.codeLens.enable
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.checkCurrentLine
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.displayByAle
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.joinMessageLines
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.refreshAfterSave
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.refreshOnInsertMode
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.diagnostic.virtualText
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.signature.hideOnTextChange
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.disableKind
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.disableMenu
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.disableMenuShortcut
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.enablePreview
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.keepCompleteopt
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.numberSelect
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.preferCompleteThanJumpPlaceholder
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false$/;"	b	object:properties.suggest.triggerAfterInsertEnter
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false,$/;"	b	object:properties.list.previewSplitRight
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false,$/;"	b	object:properties.suggest.acceptSuggestionOnCommitCharacter
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": false,$/;"	b	object:properties.suggest.echodocSupport
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": null$/;"	z	object:properties.coc.preferences.watchmanPath
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.bracketEnterImprove
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.colorSupport
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.enableFloatHighlight
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.previewAutoClose
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.preferences.snippets.enable
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.around.enable
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.around.firstMatch
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.buffer.enable
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.buffer.firstMatch
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.coc.source.file.enable
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.diagnostic.enable
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.diagnostic.locationlist
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.http.proxyStrictSSL
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.signature.enable
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.signature.preferShownAbove
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.suggest.fixInsertedWord
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.suggest.floatEnable
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.suggest.localityBonus
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true$/;"	b	object:properties.suggest.noselect
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.coc.source.buffer.ignoreGitignore
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.coc.source.file.ignoreHidden
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.diagnostic.enableSign
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.list.autoResize
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": true,$/;"	b	object:properties.list.extendedSearchMode
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": {},$/;"	o	object:properties.languageserver
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": {},$/;"	o	object:properties.list.insertMappings
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": {},$/;"	o	object:properties.list.normalMappings
default	.vim/plugged/coc.nvim/data/schema.json	/^      "default": {},$/;"	o	object:properties.suggest.completionItemKindLabels
default	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^          "default": true,$/;"	b	object:contributes.configuration.properties.test.enable
default	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^      default: this._defaultConfiguration.freeze().getValue(key),$/;"	C
default	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        default:$/;"	v
default	.vim/plugged/coc.nvim/src/extensions.ts	/^  default: any$/;"	p	interface:PropertyScheme
default	.vim/plugged/coc.nvim/src/list/configuration.ts	/^export default class ListConfiguration {$/;"	C
default	.vim/plugged/coc.nvim/src/model/status.ts	/^export default class StatusLine implements Disposable {$/;"	C
defaultAction	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^      defaultAction: 'open',$/;"	v
defaultAction	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^  defaultAction: 'open',$/;"	C
defaultAction	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { actions, defaultAction } = currList$/;"	C
defaultAction	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { defaultAction } = currList$/;"	v
defaultAction	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^  public defaultAction = 'do'$/;"	p	class:ActionsList
defaultAction	.vim/plugged/coc.nvim/src/list/source/commands.ts	/^  public defaultAction = 'run'$/;"	p	class:CommandsList
defaultAction	.vim/plugged/coc.nvim/src/list/source/diagnostics.ts	/^  public readonly defaultAction = 'open'$/;"	p	class:DiagnosticsList
defaultAction	.vim/plugged/coc.nvim/src/list/source/extensions.ts	/^  public defaultAction = 'toggle'$/;"	p	class:ExtensionList
defaultAction	.vim/plugged/coc.nvim/src/list/source/folders.ts	/^  public defaultAction = 'edit'$/;"	p	class:FoldList
defaultAction	.vim/plugged/coc.nvim/src/list/source/links.ts	/^  public defaultAction = 'open'$/;"	p	class:LinksList
defaultAction	.vim/plugged/coc.nvim/src/list/source/lists.ts	/^  public readonly defaultAction = 'open'$/;"	p	class:LinksList
defaultAction	.vim/plugged/coc.nvim/src/list/source/location.ts	/^  public defaultAction = 'open'$/;"	p	class:LocationList
defaultAction	.vim/plugged/coc.nvim/src/list/source/output.ts	/^  public defaultAction = 'open'$/;"	p	class:OutputList
defaultAction	.vim/plugged/coc.nvim/src/list/source/services.ts	/^  public defaultAction = 'toggle'$/;"	p	class:ServicesList
defaultAction	.vim/plugged/coc.nvim/src/list/source/sources.ts	/^  public readonly defaultAction = 'toggle'$/;"	p	class:SourcesList
defaultAction	.vim/plugged/coc.nvim/src/types.ts	/^  defaultAction: string$/;"	p	interface:IList
defaultCommand	.vim/plugged/fzf/src/constants.go	/^var defaultCommand string$/;"	v	package:fzf	typeref:typename:string
defaultConfiguration	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    const defaultConfiguration = new ConfigurationModel(data.defaults.contents)$/;"	C
defaultDelay	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  constructor(public defaultDelay: number) {$/;"	p	class:Delayer
defaultEscDelay	.vim/plugged/fzf/src/tui/light.go	/^	defaultEscDelay = 100$/;"	c	package:tui
defaultHeight	.vim/plugged/fzf/src/tui/light.go	/^	defaultHeight = 24$/;"	c	package:tui
defaultHistoryMax	.vim/plugged/fzf/src/constants.go	/^	defaultHistoryMax int = 1000$/;"	c	package:fzf	typeref:typename:int
defaultImport	.vim/plugged/coc.nvim/src/util/factory.ts	/^  const defaultImport = sandbox.require(filename)$/;"	C	function:createExtension
defaultJumpLabels	.vim/plugged/fzf/src/constants.go	/^	defaultJumpLabels string = "asdfghjklqwertyuiopzxcvbnm1234567890ASDFGHJKLQWERTYUIOPZXCVBNM`~;:,/;"	c	package:fzf	typeref:typename:string
defaultKeymap	.vim/plugged/fzf/src/terminal.go	/^func defaultKeymap() map[int][]action {$/;"	f	package:fzf	typeref:typename:map[int][]action
defaultKindText	.vim/plugged/coc.nvim/src/languages.ts	/^  defaultKindText: string$/;"	p	interface:CompleteConfig
defaultMargin	.vim/plugged/fzf/src/options.go	/^func defaultMargin() [4]sizeSpec {$/;"	f	package:fzf	typeref:typename:[4]sizeSpec
defaultOptions	.vim/plugged/fzf/src/options.go	/^func defaultOptions() *Options {$/;"	f	package:fzf	typeref:typename:*Options
defaultProps	.config/nvim/plugged/oceanic-next/test/style-components.js	/^Button.defaultProps = {$/;"	c	class:Button
defaultTheme	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f	struct:tui.LightRenderer	typeref:typename:*ColorTheme
defaultTheme	.vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:*ColorTheme
defaultValue	.vim/plugged/coc.nvim/src/types.ts	/^  defaultValue?: T$/;"	p	interface:ConfigurationInspect
defaultView	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	defaultView = document.defaultView || {};$/;"	v
defaultWidth	.vim/plugged/fzf/src/tui/light.go	/^	defaultWidth  = 80$/;"	c	package:tui
default_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let default_role = {$/;"	v
default_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let default_role = {}$/;"	v
defaultlevel	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let defaultlevel = g:OmniSharp_server_stdio ? 'info' : 'warning'$/;"	v
defaults	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      let { defaults, user } = this._configuration$/;"	v
defaults	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let { defaults } = this._configuration$/;"	v
defaults	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let { defaults, user, workspace } = this._configuration$/;"	v
defaults	.vim/plugged/coc.nvim/src/model/source.ts	/^  private defaults: any$/;"	p	class:Source
defaults	.vim/plugged/coc.nvim/src/types.ts	/^  defaults: IConfigurationModel$/;"	p	interface:IConfigurationData
defaults	.vim/plugged/coc.nvim/src/util/lodash.ts	/^export function defaults(obj: any, ...sources: any[]): any {$/;"	f
define_syntax	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def define_syntax(self):$/;"	m	class:Base
define_syntax	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def define_syntax(self):$/;"	m	class:Source
define_syntax	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/output.py	/^    def define_syntax(self):$/;"	m	class:Source
define_syntax	.vim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def define_syntax(self):$/;"	m	class:Base
define_syntax	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def define_syntax(self):$/;"	m	class:Source
define_syntax	.vim/plugged/denite.nvim/rplugin/python3/denite/source/output.py	/^    def define_syntax(self):$/;"	m	class:Source
define_syntax_for_highlight	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/output.py	/^    def define_syntax_for_highlight(self, cmd):$/;"	m	class:Source
define_syntax_for_highlight	.vim/plugged/denite.nvim/rplugin/python3/denite/source/output.py	/^    def define_syntax_for_highlight(self, cmd):$/;"	m	class:Source
definition	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let definition = await languages.getDeclaration(document, position)$/;"	v
definition	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let definition = await languages.getDefinition(document, position)$/;"	v
definition	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let definition = await languages.getImplementation(document, position)$/;"	v
definition	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let definition = await languages.getTypeDefinition(document, position)$/;"	v
definition	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let locations: Location[] = Array.isArray(definition) ? definition as Location[] : [definiti/;"	v
definitions	.config/nvim/plugged/coc.nvim/data/schema.json	/^  "definitions": {$/;"	o
definitions	.vim/plugged/coc.nvim/data/schema.json	/^  "definitions": {$/;"	o
defs	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^defs,$/;"	s
defx	.config/nvim/plugged/defx.nvim/autoload/defx/exrename.vim	/^  augroup defx-exrename$/;"	a
defx	.config/nvim/plugged/defx.nvim/autoload/defx/init.vim	/^  augroup defx$/;"	a
defx#async_action	.config/nvim/plugged/defx.nvim/autoload/defx.vim	/^function! defx#async_action(action, ...) abort$/;"	f
defx#call_action	.config/nvim/plugged/defx.nvim/autoload/defx.vim	/^function! defx#call_action(action, ...) abort$/;"	f
defx#call_async_action	.config/nvim/plugged/defx.nvim/autoload/defx.vim	/^function! defx#call_async_action(action, ...) abort$/;"	f
defx#custom#_get	.config/nvim/plugged/defx.nvim/autoload/defx/custom.vim	/^function! defx#custom#_get() abort$/;"	f
defx#custom#_init	.config/nvim/plugged/defx.nvim/autoload/defx/custom.vim	/^function! defx#custom#_init() abort$/;"	f
defx#custom#column	.config/nvim/plugged/defx.nvim/autoload/defx/custom.vim	/^function! defx#custom#column(column_name, name_or_dict, ...) abort$/;"	f
defx#custom#option	.config/nvim/plugged/defx.nvim/autoload/defx/custom.vim	/^function! defx#custom#option(buffer_name, name_or_dict, ...) abort$/;"	f
defx#custom#source	.config/nvim/plugged/defx.nvim/autoload/defx/custom.vim	/^function! defx#custom#source(source_name, name_or_dict, ...) abort$/;"	f
defx#do_action	.config/nvim/plugged/defx.nvim/autoload/defx.vim	/^function! defx#do_action(action, ...) abort$/;"	f
defx#exrename#create_buffer	.config/nvim/plugged/defx.nvim/autoload/defx/exrename.vim	/^function! defx#exrename#create_buffer(candidates, ...) abort$/;"	f
defx#get_candidate	.config/nvim/plugged/defx.nvim/autoload/defx.vim	/^function! defx#get_candidate() abort$/;"	f
defx#init#_channel	.config/nvim/plugged/defx.nvim/autoload/defx/init.vim	/^function! defx#init#_channel() abort$/;"	f
defx#init#_check_channel	.config/nvim/plugged/defx.nvim/autoload/defx/init.vim	/^function! defx#init#_check_channel() abort$/;"	f
defx#init#_context	.config/nvim/plugged/defx.nvim/autoload/defx/init.vim	/^function! defx#init#_context(user_context) abort$/;"	f
defx#init#_initialize	.config/nvim/plugged/defx.nvim/autoload/defx/init.vim	/^function! defx#init#_initialize() abort$/;"	f
defx#init#_python_version_check	.config/nvim/plugged/defx.nvim/autoload/defx/init.vim	/^function! defx#init#_python_version_check() abort$/;"	f
defx#init#_user_options	.config/nvim/plugged/defx.nvim/autoload/defx/init.vim	/^function! defx#init#_user_options() abort$/;"	f
defx#initialize	.config/nvim/plugged/defx.nvim/autoload/defx.vim	/^function! defx#initialize() abort$/;"	f
defx#is_directory	.config/nvim/plugged/defx.nvim/autoload/defx.vim	/^function! defx#is_directory() abort$/;"	f
defx#is_opened_tree	.config/nvim/plugged/defx.nvim/autoload/defx.vim	/^function! defx#is_opened_tree() abort$/;"	f
defx#start	.config/nvim/plugged/defx.nvim/autoload/defx.vim	/^function! defx#start(paths, user_context) abort$/;"	f
defx#util#_parse_options_args	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#_parse_options_args(cmdline) abort$/;"	f
defx#util#call_defx	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#call_defx(command, args) abort$/;"	f
defx#util#cd	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#cd(path) abort$/;"	f
defx#util#complete	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#complete(arglead, cmdline, cursorpos) abort$/;"	f
defx#util#convert2list	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#convert2list(expr) abort$/;"	f
defx#util#execute_path	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#execute_path(command, path) abort$/;"	f
defx#util#has_yarp	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#has_yarp() abort$/;"	f
defx#util#is_windows	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#is_windows() abort$/;"	f
defx#util#open	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#open(filename) abort$/;"	f
defx#util#print_debug	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#print_debug(string) abort$/;"	f
defx#util#print_error	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#print_error(string) abort$/;"	f
defx#util#print_message	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#print_message(string) abort$/;"	f
defx#util#print_warning	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#print_warning(string) abort$/;"	f
defx#util#rpcrequest	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#rpcrequest(method, args, is_async) abort$/;"	f
defx#util#split	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#split(string) abort$/;"	f
defx#util#string	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#string(expr) abort$/;"	f
defx#util#truncate_skipping	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! defx#util#truncate_skipping(str, max, footer_width, separator) abort$/;"	f
delChar	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) delChar() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
delayer	.vim/plugged/coc.nvim/src/__tests__/client/delayer.test.ts	/^  let delayer = new Delayer(0)$/;"	v
delayer	.vim/plugged/coc.nvim/src/__tests__/client/delayer.test.ts	/^  let delayer = new Delayer(10)$/;"	v
delete	.vim/plugged/coc.nvim/src/model/db.ts	/^  public async delete(key: string): Promise<void> {$/;"	m	class:DB
delete	.vim/plugged/coc.nvim/src/types.ts	/^  delete(uri: string): void$/;"	m	interface:DiagnosticCollection
deleteFile	.vim/plugged/coc.nvim/src/types.ts	/^  deleteFile(filepath: string, opts?: DeleteFileOptions): Promise<void>$/;"	m	interface:IWorkspace
delete_mark	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def delete_mark(name):$/;"	f
delimNil	.vim/plugged/fzf/src/reader.go	/^	delimNil bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
delimiter	.vim/plugged/fzf/src/pattern.go	/^	delimiter     Delimiter$/;"	m	struct:fzf.Pattern	typeref:typename:Delimiter
delimiter	.vim/plugged/fzf/src/terminal.go	/^	delimiter  Delimiter$/;"	m	struct:fzf.Terminal	typeref:typename:Delimiter
delimiterRegexp	.vim/plugged/fzf/src/options.go	/^func delimiterRegexp(str string) Delimiter {$/;"	f	package:fzf	typeref:typename:Delimiter
delta	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def delta(self, pos):$/;"	m	class:Position
delta	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let { edits, delta } = snippet.updatePlaceholder(placeholder, edit)$/;"	v
delta	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let delta = 0$/;"	v
delta	.vim/plugged/coc.nvim/src/util/position.ts	/^  let delta = (end.line - start.line) - newLines.length + 1$/;"	v
delta	.vim/plugged/coc.nvim/src/util/position.ts	/^  let line = pos.line - delta$/;"	v
denite	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^  augroup denite-filter$/;"	a
denite	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^  augroup denite$/;"	a
denite	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^  augroup denite-filter$/;"	a
denite	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^  augroup denite$/;"	a
denite#_call_map	.config/nvim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#_call_map(name, is_async, args) abort$/;"	f
denite#_call_map	.vim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#_call_map(name, is_async, args) abort$/;"	f
denite#call_async_map	.config/nvim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#call_async_map(name, ...) abort$/;"	f
denite#call_async_map	.vim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#call_async_map(name, ...) abort$/;"	f
denite#call_map	.config/nvim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#call_map(name, ...) abort$/;"	f
denite#call_map	.vim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#call_map(name, ...) abort$/;"	f
denite#custom#_call_action	.config/nvim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#_call_action(kind, name, context) abort$/;"	f
denite#custom#_call_action	.vim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#_call_action(kind, name, context) abort$/;"	f
denite#custom#_get	.config/nvim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#_get() abort$/;"	f
denite#custom#_get	.vim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#_get() abort$/;"	f
denite#custom#_init	.config/nvim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#_init() abort$/;"	f
denite#custom#_init	.vim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#_init() abort$/;"	f
denite#custom#action	.config/nvim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#action(kind, name, func, ...) abort$/;"	f
denite#custom#action	.vim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#action(kind, name, func, ...) abort$/;"	f
denite#custom#alias	.config/nvim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#alias(type, name, base) abort$/;"	f
denite#custom#alias	.vim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#alias(type, name, base) abort$/;"	f
denite#custom#filter	.config/nvim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#filter(filter_name, var_name, value) abort$/;"	f
denite#custom#filter	.vim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#filter(filter_name, var_name, value) abort$/;"	f
denite#custom#kind	.config/nvim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#kind(kind_name, option_name, value) abort$/;"	f
denite#custom#map	.config/nvim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#map(mode, key, mapping, ...) abort$/;"	f
denite#custom#map	.vim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#map(mode, key, mapping, ...) abort$/;"	f
denite#custom#option	.config/nvim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#option(buffer_name, name_or_dict, ...) abort$/;"	f
denite#custom#option	.vim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#option(buffer_name, name_or_dict, ...) abort$/;"	f
denite#custom#source	.config/nvim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#source(source_name, option_name, value) abort$/;"	f
denite#custom#source	.vim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#source(source_name, option_name, value) abort$/;"	f
denite#custom#var	.config/nvim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#var(source_name, var_name, value) abort$/;"	f
denite#custom#var	.vim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! denite#custom#var(source_name, var_name, value) abort$/;"	f
denite#do_action	.config/nvim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#do_action(context, action_name, targets) abort$/;"	f
denite#do_action	.vim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#do_action(context, action_name, targets) abort$/;"	f
denite#do_map	.config/nvim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#do_map(name, ...) abort$/;"	f
denite#do_map	.vim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#do_map(name, ...) abort$/;"	f
denite#filter#_move_to_parent	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! denite#filter#_move_to_parent(is_async) abort$/;"	f
denite#filter#_move_to_parent	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! denite#filter#_move_to_parent(is_async) abort$/;"	f
denite#filter#_open	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! denite#filter#_open(context, parent, entire_len, is_async) abort$/;"	f
denite#filter#_open	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! denite#filter#_open(context, parent, entire_len, is_async) abort$/;"	f
denite#get_status	.config/nvim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#get_status(name) abort$/;"	f
denite#get_status	.vim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#get_status(name) abort$/;"	f
denite#helper#_get_available_sources	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#_get_available_sources() abort$/;"	f
denite#helper#_get_available_sources	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#_get_available_sources() abort$/;"	f
denite#helper#_get_oldfiles	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#_get_oldfiles() abort$/;"	f
denite#helper#_get_oldfiles	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#_get_oldfiles() abort$/;"	f
denite#helper#_get_preview_window	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#_get_preview_window() abort$/;"	f
denite#helper#_get_preview_window	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#_get_preview_window() abort$/;"	f
denite#helper#_get_wininfo	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#_get_wininfo() abort$/;"	f
denite#helper#_get_wininfo	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#_get_wininfo() abort$/;"	f
denite#helper#_parse_options_args	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#_parse_options_args(cmdline) abort$/;"	f
denite#helper#_parse_options_args	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#_parse_options_args(cmdline) abort$/;"	f
denite#helper#_set_available_sources	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#_set_available_sources(source_names) abort$/;"	f
denite#helper#_set_available_sources	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#_set_available_sources(source_names) abort$/;"	f
denite#helper#_set_oldfiles	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#_set_oldfiles(oldfiles) abort$/;"	f
denite#helper#_set_oldfiles	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#_set_oldfiles(oldfiles) abort$/;"	f
denite#helper#call_denite	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#call_denite(command, args, line1, line2) abort$/;"	f
denite#helper#call_denite	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#call_denite(command, args, line1, line2) abort$/;"	f
denite#helper#complete	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#complete(arglead, cmdline, cursorpos) abort$/;"	f
denite#helper#complete	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#complete(arglead, cmdline, cursorpos) abort$/;"	f
denite#helper#complete_actions	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#complete_actions(arglead, cmdline, cursorpos) abort$/;"	f
denite#helper#complete_actions	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#complete_actions(arglead, cmdline, cursorpos) abort$/;"	f
denite#helper#has_cmdline	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#has_cmdline() abort$/;"	f
denite#helper#has_cmdline	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#has_cmdline() abort$/;"	f
denite#helper#options	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#options() abort$/;"	f
denite#helper#options	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#options() abort$/;"	f
denite#helper#preview_file	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#preview_file(context, filename) abort$/;"	f
denite#helper#preview_file	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! denite#helper#preview_file(context, filename) abort$/;"	f
denite#init#_check_channel	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^function! denite#init#_check_channel() abort$/;"	f
denite#init#_check_channel	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^function! denite#init#_check_channel() abort$/;"	f
denite#init#_deprecated_options	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^function! denite#init#_deprecated_options() abort$/;"	f
denite#init#_deprecated_options	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^function! denite#init#_deprecated_options() abort$/;"	f
denite#init#_initialize	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^function! denite#init#_initialize() abort$/;"	f
denite#init#_initialize	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^function! denite#init#_initialize() abort$/;"	f
denite#init#_python_version_check	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^function! denite#init#_python_version_check() abort$/;"	f
denite#init#_python_version_check	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^function! denite#init#_python_version_check() abort$/;"	f
denite#init#_user_options	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^function! denite#init#_user_options() abort$/;"	f
denite#init#_user_options	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^function! denite#init#_user_options() abort$/;"	f
denite#initialize	.config/nvim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#initialize() abort$/;"	f
denite#initialize	.vim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#initialize() abort$/;"	f
denite#project#path2project_directory	.config/nvim/plugged/denite.nvim/autoload/denite/project.vim	/^function! denite#project#path2project_directory(path, root_markers) abort$/;"	f
denite#project#path2project_directory	.vim/plugged/denite.nvim/autoload/denite/project.vim	/^function! denite#project#path2project_directory(path, root_markers) abort$/;"	f
denite#start	.config/nvim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#start(sources, ...) abort$/;"	f
denite#start	.vim/plugged/denite.nvim/autoload/denite.vim	/^function! denite#start(sources, ...) abort$/;"	f
denite#util#alternate_buffer	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#alternate_buffer() abort$/;"	f
denite#util#alternate_buffer	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#alternate_buffer() abort$/;"	f
denite#util#cd	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#cd(path) abort$/;"	f
denite#util#cd	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#cd(path) abort$/;"	f
denite#util#convert2list	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#convert2list(expr) abort$/;"	f
denite#util#convert2list	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#convert2list(expr) abort$/;"	f
denite#util#delete_buffer	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#delete_buffer(command, bufnr) abort$/;"	f
denite#util#delete_buffer	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#delete_buffer(command, bufnr) abort$/;"	f
denite#util#echo	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#echo(color, string) abort$/;"	f
denite#util#echo	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#echo(color, string) abort$/;"	f
denite#util#execute_command	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#execute_command(command, is_capture) abort$/;"	f
denite#util#execute_command	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#execute_command(command, is_capture) abort$/;"	f
denite#util#execute_path	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#execute_path(command, path) abort$/;"	f
denite#util#execute_path	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#execute_path(command, path) abort$/;"	f
denite#util#getchar	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#getchar(...) abort$/;"	f
denite#util#getchar	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#getchar(...) abort$/;"	f
denite#util#has_yarp	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#has_yarp() abort$/;"	f
denite#util#has_yarp	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#has_yarp() abort$/;"	f
denite#util#input_yesno	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#input_yesno(message) abort$/;"	f
denite#util#input_yesno	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#input_yesno(message) abort$/;"	f
denite#util#open	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#open(filename) abort$/;"	f
denite#util#open	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#open(filename) abort$/;"	f
denite#util#path2directory	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#path2directory(path) abort$/;"	f
denite#util#path2directory	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#path2directory(path) abort$/;"	f
denite#util#print_error	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#print_error(string) abort$/;"	f
denite#util#print_error	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#print_error(string) abort$/;"	f
denite#util#print_warning	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#print_warning(string) abort$/;"	f
denite#util#print_warning	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#print_warning(string) abort$/;"	f
denite#util#rpcrequest	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#rpcrequest(method, args, is_async) abort$/;"	f
denite#util#rpcrequest	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#rpcrequest(method, args, is_async) abort$/;"	f
denite#util#set_default	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#set_default(var, val, ...)  abort$/;"	f
denite#util#set_default	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#set_default(var, val, ...)  abort$/;"	f
denite#util#split	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#split(string) abort$/;"	f
denite#util#split	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#split(string) abort$/;"	f
denite#util#substitute_path_separator	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#substitute_path_separator(path) abort$/;"	f
denite#util#substitute_path_separator	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! denite#util#substitute_path_separator(path) abort$/;"	f
denite.nvim	.config/nvim/plugged/denite.nvim/README.md	/^denite.nvim$/;"	c
denite.nvim	.vim/plugged/denite.nvim/README.md	/^denite.nvim$/;"	c
dep_from_git	.config/nvim/plugged/html5.vim/Makefile	/^dep_from_git = \\$/;"	m
dep_from_svn	.config/nvim/plugged/html5.vim/Makefile	/^dep_from_svn = \\$/;"	m
dependencies	.config/nvim/plugged/coc.nvim/package.json	/^  "dependencies": {$/;"	o
dependencies	.config/nvim/plugged/vim-snippets/addon-info.json	/^  "dependencies" : {$/;"	o
dependencies	.vim/plugged/coc.nvim/package.json	/^  "dependencies": {$/;"	o
dependencies	.vim/plugged/coc.nvim/src/__tests__/extensions/package.json	/^  "dependencies": {$/;"	o
dependencies	.vim/plugged/vim-snippets/addon-info.json	/^  "dependencies" : {$/;"	o
deps	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^deps =$/;"	k	section:testenv
deps	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^deps =$/;"	k	section:testenv:coverage
deps	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^deps =$/;"	k	section:testenv:lint
deps	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^deps =$/;"	k	section:testenv:lint2
deps	.vim/plugged/omnisharp-vim/python/tox.ini	/^deps =$/;"	k	section:testenv
deps	.vim/plugged/omnisharp-vim/python/tox.ini	/^deps =$/;"	k	section:testenv:coverage
deps	.vim/plugged/omnisharp-vim/python/tox.ini	/^deps =$/;"	k	section:testenv:lint
deps	.vim/plugged/omnisharp-vim/python/tox.ini	/^deps =$/;"	k	section:testenv:lint2
dequeue	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.fn.dequeue = function(type){$/;"	f	function:jQuery.fn
desc	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^desc,$/;"	s
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Absolute path of javascript file, should works in IPC mode"$/;"	s	object:definitions.languageServerModule.properties.module
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Absolute path of node runtime."$/;"	s	object:definitions.languageServerModule.properties.runtime
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Absolute root paths that language server should not use as rootPath, h/;"	s	object:definitions.languageServerBase.properties.ignoredRootPaths
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Additional uri schemes, default schemes including file & untitled.",$/;"	s	object:definitions.languageServerBase.properties.additionalSchemes
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Arguments of command",$/;"	s	object:definitions.languageServerCommand.properties.args
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Argv passed to node when using module, normally used for debugging, ex/;"	s	object:definitions.languageServerModule.properties.execArgv
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Configure message level to show the output channel buffer",$/;"	s	object:definitions.languageServerBase.properties.revealOutputChannelOn
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Detach the languageserver process"$/;"	s	object:definitions.languageServerCommand.properties.detached
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Disable completion feature for this languageserver."$/;"	s	object:definitions.languageServerBase.properties.disableCompletion
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Disable handle diagnostics for this languageserver."$/;"	s	object:definitions.languageServerBase.properties.disableDiagnostics
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Disable workspaceFolders feature for this languageserver."$/;"	s	object:definitions.languageServerBase.properties.disableWorkspaceFolders
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Encoding used for stdio of child process."$/;"	s	object:definitions.languageServerBase.properties.stdioEncoding
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Environment variables for child process."$/;"	s	object:definitions.languageServerBase.properties.env
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Executable in $PATH to start languageserver, should not used with modu/;"	s	object:definitions.languageServerCommand.properties.command
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Extra arguments of module",$/;"	s	object:definitions.languageServerModule.properties.args
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Host of server"$/;"	s	object:definitions.languageServerSocket.properties.host
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "If true, doesn't start server when root pattern not found."$/;"	s	object:definitions.languageServerBase.properties.requireRootPattern
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Port number of socket server"$/;"	s	object:definitions.languageServerSocket.properties.port
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Port number used when transport is 'socket'"$/;"	s	object:definitions.languageServerModule.properties.transportPort
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Root patterns used for reoslve rootPath from current file, default to /;"	s	object:definitions.languageServerBase.properties.rootPatterns
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Settings of languageserver"$/;"	s	object:definitions.languageServerBase.properties.settings
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Supported filetypes, use empty array for all filetypes.",$/;"	s	object:definitions.languageServerBase.properties.filetypes
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Trace level of communication between server and client"$/;"	s	object:definitions.languageServerBase.properties.trace.server
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Transport kind used by server, could be 'ipc', 'stdio', 'socket' and '/;"	s	object:definitions.languageServerModule.properties.transport
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Use shell for process"$/;"	s	object:definitions.languageServerCommand.properties.shell
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "Working directory of languageserver, absolute path or relative to work/;"	s	object:definitions.languageServerBase.properties.cwd
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "description": "initializationOptions passed to languageserver"$/;"	s	object:definitions.languageServerBase.properties.initializationOptions
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Add preview option to completeopt, default: false.",$/;"	s	object:properties.suggest.enablePreview
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Auto close preview window on cursor move.",$/;"	s	object:properties.coc.preferences.previewAutoClose
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Automatically update the value of b:coc_current_function on CursorHold eve/;"	s	object:properties.coc.preferences.currentFunctionSymbolAutoUpdate
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Boost suggestions that appear closer to the cursor position.",$/;"	s	object:properties.suggest.localityBonus
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Command used for location jump, like goto definition, goto references etc./;"	s	object:properties.coc.preferences.jumpCommand
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Confirm completion instead of jump to next placeholder when completion is /;"	s	object:properties.suggest.preferCompleteThanJumpPlaceholder
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Controls whether suggestions should be accepted on commit characters. For /;"	s	object:properties.suggest.acceptSuggestionOnCommitCharacter
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Create location list for error & warning",$/;"	s	object:properties.diagnostic.locationlist
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Custom keymappings on insert mode."$/;"	s	object:properties.list.insertMappings
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Custom keymappings on normal mode."$/;"	s	object:properties.list.normalMappings
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Diagnostic message target.",$/;"	s	object:properties.diagnostic.messageTarget
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Dictionary of languageservers, key is used as id of languageserver.",$/;"	s	object:properties.languageserver
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Disable shortcut of completion source in menu.",$/;"	s	object:properties.suggest.disableMenuShortcut
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable auto resize feature."$/;"	s	object:properties.list.autoResize
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable codeLens feature, require neovim with set virtual text feature.",$/;"	s	object:properties.codeLens.enable
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable color highlight if language server support it.",$/;"	s	object:properties.coc.preferences.colorSupport
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable diagnostic refresh on insert mode, default false.",$/;"	s	object:properties.diagnostic.refreshOnInsertMode
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable extended search mode which allows multiple search patterns delimite/;"	s	object:properties.list.extendedSearchMode
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable floating window for documentation when possible.",$/;"	s	object:properties.suggest.floatEnable
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable highlight for floating window.",$/;"	s	object:properties.coc.preferences.enableFloatHighlight
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable signature help when trigger character typed, require restart servic/;"	s	object:properties.signature.enable
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable signs for diagnostics."$/;"	s	object:properties.diagnostic.enableSign
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Filetypes that should be ignored for resolve workspace folder.",$/;"	s	object:properties.workspace.ignoredFiletypes
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Filetypes that should run format on save.",$/;"	s	object:properties.coc.preferences.formatOnSaveFiletypes
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Filetypes that should use ctags for outline instead of language server.",$/;"	s	object:properties.list.source.outline.ctagsFilestypes
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Filter complete items by first letter strict match.",$/;"	s	object:properties.coc.source.around.firstMatch
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Filter complete items by first letter strict match.",$/;"	s	object:properties.coc.source.buffer.firstMatch
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Hide signature float window when text changed, require restart service on /;"	s	object:properties.signature.hideOnTextChange
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Highlight group used for highlight the range in preview window."$/;"	s	object:properties.list.previewHighlightGroup
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "How should completion be triggered",$/;"	s	object:properties.suggest.autoTrigger
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Ignore completion for hidden files"$/;"	s	object:properties.coc.source.file.ignoreHidden
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Ignore git ignored files for buffer words"$/;"	s	object:properties.coc.source.buffer.ignoreGitignore
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Ignore patterns of matcher",$/;"	s	object:properties.coc.source.file.ignorePatterns
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Improve enter inside bracket `<> {} [] ()` by add new empty line below and/;"	s	object:properties.coc.preferences.bracketEnterImprove
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Input number to select complete item, it could wrong when using <up> and </;"	s	object:properties.suggest.numberSelect
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Interval for check extension update, could be daily, weekly, never",$/;"	s	object:properties.coc.preferences.extensionUpdateCheck
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Join lines messages to reduce lines of floating window.",$/;"	s	object:properties.diagnostic.joinMessageLines
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Key used for select next line on insert mode."$/;"	s	object:properties.list.nextKeymap
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Key used for select previous line on insert mode."$/;"	s	object:properties.list.previousKeymap
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Limit lines for list buffer."$/;"	s	object:properties.list.limitLines
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Make inserted word replace word characters after cursor position.",$/;"	s	object:properties.suggest.fixInsertedWord
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Max height for preview window of list."$/;"	s	object:properties.list.maxPreviewHeight
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Max items count for source priority bigger than or equal to 90."$/;"	s	object:properties.suggest.highPrioritySourceLimit
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Max items count for source priority lower than 90."$/;"	s	object:properties.suggest.lowPrioritySourceLimit
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Max length of abbr that shown as label of complete item.",$/;"	s	object:properties.suggest.labelMaxLength
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Max length of detail that should be shown in popup menu.",$/;"	s	object:properties.suggest.detailMaxLength
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Maximum height of diagnostics floating window.",$/;"	s	object:properties.diagnostic.maxWindowHeight
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Maximum height of floating signature help window.",$/;"	s	object:properties.signature.maxWindowHeight
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Maximum height of list window."$/;"	s	object:properties.list.maxHeight
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Maximum number of complete items shown in vim"$/;"	s	object:properties.suggest.maxCompleteItemCount
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Maximum width of floating preview window."$/;"	s	object:properties.suggest.maxPreviewWidth
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Message level for filter echoed messages, could be 'more', 'warning' and '/;"	s	object:properties.coc.preferences.messageLevel
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Mininal input length for trigger completion, default 1"$/;"	s	object:properties.suggest.minTriggerInputLength
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Not make vim select first item on completion start",$/;"	s	object:properties.suggest.noselect
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Offset number of buffer.addHighlight, neovim only.",$/;"	s	object:properties.diagnostic.highlightOffset
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Offset number of sign",$/;"	s	object:properties.diagnostic.signOffset
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Only refresh diagnostics after save, default false.",$/;"	s	object:properties.diagnostic.refreshAfterSave
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Priority of language sources."$/;"	s	object:properties.suggest.languageSourcePriority
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Remove kind field from vim complete item.",$/;"	s	object:properties.suggest.disableKind
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Remove menu field from vim complete item.",$/;"	s	object:properties.suggest.disableMenu
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Root patterns to resolve workspaceFolder from parent folders of opened fil/;"	s	object:properties.coc.preferences.rootPatterns
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Separator text for codeLens in virtual text",$/;"	s	object:properties.codeLens.separator
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Set custom labels to completion items' kinds.",$/;"	s	object:properties.suggest.completionItemKindLabels
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Set to false to disable diagnostic display",$/;"	s	object:properties.diagnostic.enable
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Set to false to disable snippets support.",$/;"	s	object:properties.coc.preferences.snippets.enable
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Set to true to enable format on type",$/;"	s	object:properties.coc.preferences.formatOnType
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Show signature help float window above cursor when possible, require resta/;"	s	object:properties.signature.preferShownAbove
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Sign offset of list, should be different from other plugins."$/;"	s	object:properties.list.signOffset
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Sign text for selected lines."$/;"	s	object:properties.list.selectedSignText
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Target of signature help, use float when possible by default.",$/;"	s	object:properties.signature.target
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Target to show hover information, default is floating window when possible/;"	s	object:properties.coc.preferences.hoverTarget
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Text of error sign",$/;"	s	object:properties.diagnostic.errorSign
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Text of hint sign",$/;"	s	object:properties.diagnostic.hintSign
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Text of info sign",$/;"	s	object:properties.diagnostic.infoSign
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Text of warning sign",$/;"	s	object:properties.diagnostic.warningSign
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Text shown in statusline to indicate snippet session is activated."$/;"	s	object:properties.coc.preferences.snippetStatusText
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "The characer used as first characer in prompt line"$/;"	s	object:properties.list.indicator
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "The character used in abbr of complete item to indicate the item could be /;"	s	object:properties.suggest.snippetIndicator
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "The number of non empty lines from a diagnostic to display",$/;"	s	object:properties.diagnostic.virtualTextLines
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "The prefix added virtual text diagnostics",$/;"	s	object:properties.diagnostic.virtualTextPrefix
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "The text that will mark a line end from the diagnostic message",$/;"	s	object:properties.diagnostic.virtualTextLineSeparator
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Timeout for completion, in miliseconds."$/;"	s	object:properties.suggest.timeout
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Timeout for hide float window on cursor moved, in miliseconds."$/;"	s	object:properties.signature.floatTimeout
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Timeout for trigger signature help, in miliseconds."$/;"	s	object:properties.signature.triggerSignatureWait
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Trigger completion after InsertEnter, auto trigger should be 'always' to e/;"	s	object:properties.suggest.triggerAfterInsertEnter
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Trim same extension on file completion",$/;"	s	object:properties.coc.source.file.trimSameExts
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Use Ale for display diagnostics in vim, will disable coc for display diagn/;"	s	object:properties.diagnostic.displayByAle
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Use NeoVim virtual text to display diagnostics",$/;"	s	object:properties.diagnostic.virtualText
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Use vim's quickfix list for jump locations,\\n need restart on change.",$/;"	s	object:properties.coc.preferences.useQuickfixForLocations
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Use vsplit for preview window."$/;"	s	object:properties.list.previewSplitRight
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Used for filter diagnostics by diagnostic severity.",$/;"	s	object:properties.diagnostic.level
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Wait time between trigger character type and completion start, for wait se/;"	s	object:properties.suggest.triggerCompletionWait
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "When enabled, add function signature to user_data.signature to support ech/;"	s	object:properties.suggest.echodocSupport
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "When enabled, completeopt is not overriden, auto completion will be disabl/;"	s	object:properties.suggest.keepCompleteopt
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "When enabled, show all diagnostics of current line instead of current posi/;"	s	object:properties.diagnostic.checkCurrentLine
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "When to enable echo messages of diagnostics.",$/;"	s	object:properties.diagnostic.enableMessage
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "Where to add the detail in complete item when it's less than max length.",$/;"	s	object:properties.suggest.detailField
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "executable path for https:\/\/facebook.github.io\/watchman\/, detected fro/;"	s	object:properties.coc.preferences.watchmanPath
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "description": "http proxy uri, used for extensions that send request"$/;"	s	object:properties.http.proxy
description	.config/nvim/plugged/coc.nvim/data/schema.json	/^  "description": "Configuration file for coc.nvim",$/;"	s
description	.config/nvim/plugged/coc.nvim/package.json	/^  "description": "LSP based intellisense engine for neovim & vim8.",$/;"	s
description	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def description(self):$/;"	m	class:SnippetDefinition
description	.config/nvim/plugged/vim-snippets/addon-info.json	/^  "description" : "community driven set of snippets for snipmate"$/;"	s
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Absolute path of javascript file, should works in IPC mode"$/;"	s	object:definitions.languageServerModule.properties.module
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Absolute path of node runtime."$/;"	s	object:definitions.languageServerModule.properties.runtime
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Absolute root paths that language server should not use as rootPath, h/;"	s	object:definitions.languageServerBase.properties.ignoredRootPaths
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Additional uri schemes, default schemes including file & untitled.",$/;"	s	object:definitions.languageServerBase.properties.additionalSchemes
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Arguments of command",$/;"	s	object:definitions.languageServerCommand.properties.args
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Argv passed to node when using module, normally used for debugging, ex/;"	s	object:definitions.languageServerModule.properties.execArgv
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Configure message level to show the output channel buffer",$/;"	s	object:definitions.languageServerBase.properties.revealOutputChannelOn
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Detach the languageserver process"$/;"	s	object:definitions.languageServerCommand.properties.detached
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Disable completion feature for this languageserver."$/;"	s	object:definitions.languageServerBase.properties.disableCompletion
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Disable handle diagnostics for this languageserver."$/;"	s	object:definitions.languageServerBase.properties.disableDiagnostics
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Disable workspaceFolders feature for this languageserver."$/;"	s	object:definitions.languageServerBase.properties.disableWorkspaceFolders
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Encoding used for stdio of child process."$/;"	s	object:definitions.languageServerBase.properties.stdioEncoding
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Environment variables for child process."$/;"	s	object:definitions.languageServerBase.properties.env
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Executable in $PATH to start languageserver, should not used with modu/;"	s	object:definitions.languageServerCommand.properties.command
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Extra arguments of module",$/;"	s	object:definitions.languageServerModule.properties.args
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Host of server"$/;"	s	object:definitions.languageServerSocket.properties.host
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "If true, doesn't start server when root pattern not found."$/;"	s	object:definitions.languageServerBase.properties.requireRootPattern
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Port number of socket server"$/;"	s	object:definitions.languageServerSocket.properties.port
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Port number used when transport is 'socket'"$/;"	s	object:definitions.languageServerModule.properties.transportPort
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Root patterns used for reoslve rootPath from current file, default to /;"	s	object:definitions.languageServerBase.properties.rootPatterns
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Settings of languageserver"$/;"	s	object:definitions.languageServerBase.properties.settings
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Supported filetypes, use empty array for all filetypes.",$/;"	s	object:definitions.languageServerBase.properties.filetypes
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Trace level of communication between server and client"$/;"	s	object:definitions.languageServerBase.properties.trace.server
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Transport kind used by server, could be 'ipc', 'stdio', 'socket' and '/;"	s	object:definitions.languageServerModule.properties.transport
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Use shell for process"$/;"	s	object:definitions.languageServerCommand.properties.shell
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "Working directory of languageserver, absolute path or relative to work/;"	s	object:definitions.languageServerBase.properties.cwd
description	.vim/plugged/coc.nvim/data/schema.json	/^          "description": "initializationOptions passed to languageserver"$/;"	s	object:definitions.languageServerBase.properties.initializationOptions
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Add preview option to completeopt, default: false.",$/;"	s	object:properties.suggest.enablePreview
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Auto close preview window on cursor move.",$/;"	s	object:properties.coc.preferences.previewAutoClose
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Automatically update the value of b:coc_current_function on CursorHold eve/;"	s	object:properties.coc.preferences.currentFunctionSymbolAutoUpdate
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Boost suggestions that appear closer to the cursor position.",$/;"	s	object:properties.suggest.localityBonus
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Command used for location jump, like goto definition, goto references etc./;"	s	object:properties.coc.preferences.jumpCommand
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Confirm completion instead of jump to next placeholder when completion is /;"	s	object:properties.suggest.preferCompleteThanJumpPlaceholder
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Controls whether suggestions should be accepted on commit characters. For /;"	s	object:properties.suggest.acceptSuggestionOnCommitCharacter
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Create location list for error & warning",$/;"	s	object:properties.diagnostic.locationlist
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Custom keymappings on insert mode."$/;"	s	object:properties.list.insertMappings
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Custom keymappings on normal mode."$/;"	s	object:properties.list.normalMappings
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Diagnostic message target.",$/;"	s	object:properties.diagnostic.messageTarget
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Dictionary of languageservers, key is used as id of languageserver.",$/;"	s	object:properties.languageserver
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Disable shortcut of completion source in menu.",$/;"	s	object:properties.suggest.disableMenuShortcut
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable auto resize feature."$/;"	s	object:properties.list.autoResize
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable codeLens feature, require neovim with set virtual text feature.",$/;"	s	object:properties.codeLens.enable
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable color highlight if language server support it.",$/;"	s	object:properties.coc.preferences.colorSupport
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable diagnostic refresh on insert mode, default false.",$/;"	s	object:properties.diagnostic.refreshOnInsertMode
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable extended search mode which allows multiple search patterns delimite/;"	s	object:properties.list.extendedSearchMode
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable floating window for documentation when possible.",$/;"	s	object:properties.suggest.floatEnable
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable highlight for floating window.",$/;"	s	object:properties.coc.preferences.enableFloatHighlight
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable signature help when trigger character typed, require restart servic/;"	s	object:properties.signature.enable
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Enable signs for diagnostics."$/;"	s	object:properties.diagnostic.enableSign
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Filetypes that should be ignored for resolve workspace folder.",$/;"	s	object:properties.workspace.ignoredFiletypes
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Filetypes that should run format on save.",$/;"	s	object:properties.coc.preferences.formatOnSaveFiletypes
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Filetypes that should use ctags for outline instead of language server.",$/;"	s	object:properties.list.source.outline.ctagsFilestypes
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Filter complete items by first letter strict match.",$/;"	s	object:properties.coc.source.around.firstMatch
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Filter complete items by first letter strict match.",$/;"	s	object:properties.coc.source.buffer.firstMatch
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Hide signature float window when text changed, require restart service on /;"	s	object:properties.signature.hideOnTextChange
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Highlight group used for highlight the range in preview window."$/;"	s	object:properties.list.previewHighlightGroup
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "How should completion be triggered",$/;"	s	object:properties.suggest.autoTrigger
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Ignore completion for hidden files"$/;"	s	object:properties.coc.source.file.ignoreHidden
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Ignore git ignored files for buffer words"$/;"	s	object:properties.coc.source.buffer.ignoreGitignore
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Ignore patterns of matcher",$/;"	s	object:properties.coc.source.file.ignorePatterns
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Improve enter inside bracket `<> {} [] ()` by add new empty line below and/;"	s	object:properties.coc.preferences.bracketEnterImprove
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Input number to select complete item, it could wrong when using <up> and </;"	s	object:properties.suggest.numberSelect
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Interval for check extension update, could be daily, weekly, never",$/;"	s	object:properties.coc.preferences.extensionUpdateCheck
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Join lines messages to reduce lines of floating window.",$/;"	s	object:properties.diagnostic.joinMessageLines
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Key used for select next line on insert mode."$/;"	s	object:properties.list.nextKeymap
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Key used for select previous line on insert mode."$/;"	s	object:properties.list.previousKeymap
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Limit lines for list buffer."$/;"	s	object:properties.list.limitLines
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Make inserted word replace word characters after cursor position.",$/;"	s	object:properties.suggest.fixInsertedWord
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Max height for preview window of list."$/;"	s	object:properties.list.maxPreviewHeight
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Max items count for source priority bigger than or equal to 90."$/;"	s	object:properties.suggest.highPrioritySourceLimit
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Max items count for source priority lower than 90."$/;"	s	object:properties.suggest.lowPrioritySourceLimit
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Max length of abbr that shown as label of complete item.",$/;"	s	object:properties.suggest.labelMaxLength
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Max length of detail that should be shown in popup menu.",$/;"	s	object:properties.suggest.detailMaxLength
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Maximum height of diagnostics floating window.",$/;"	s	object:properties.diagnostic.maxWindowHeight
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Maximum height of floating signature help window.",$/;"	s	object:properties.signature.maxWindowHeight
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Maximum height of list window."$/;"	s	object:properties.list.maxHeight
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Maximum number of complete items shown in vim"$/;"	s	object:properties.suggest.maxCompleteItemCount
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Maximum width of floating preview window."$/;"	s	object:properties.suggest.maxPreviewWidth
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Message level for filter echoed messages, could be 'more', 'warning' and '/;"	s	object:properties.coc.preferences.messageLevel
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Mininal input length for trigger completion, default 1"$/;"	s	object:properties.suggest.minTriggerInputLength
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Not make vim select first item on completion start",$/;"	s	object:properties.suggest.noselect
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Offset number of buffer.addHighlight, neovim only.",$/;"	s	object:properties.diagnostic.highlightOffset
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Offset number of sign",$/;"	s	object:properties.diagnostic.signOffset
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Only refresh diagnostics after save, default false.",$/;"	s	object:properties.diagnostic.refreshAfterSave
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Priority of language sources."$/;"	s	object:properties.suggest.languageSourcePriority
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Remove kind field from vim complete item.",$/;"	s	object:properties.suggest.disableKind
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Remove menu field from vim complete item.",$/;"	s	object:properties.suggest.disableMenu
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Root patterns to resolve workspaceFolder from parent folders of opened fil/;"	s	object:properties.coc.preferences.rootPatterns
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Separator text for codeLens in virtual text",$/;"	s	object:properties.codeLens.separator
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Set custom labels to completion items' kinds.",$/;"	s	object:properties.suggest.completionItemKindLabels
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Set to false to disable diagnostic display",$/;"	s	object:properties.diagnostic.enable
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Set to false to disable snippets support.",$/;"	s	object:properties.coc.preferences.snippets.enable
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Set to true to enable format on type",$/;"	s	object:properties.coc.preferences.formatOnType
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Show signature help float window above cursor when possible, require resta/;"	s	object:properties.signature.preferShownAbove
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Sign offset of list, should be different from other plugins."$/;"	s	object:properties.list.signOffset
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Sign text for selected lines."$/;"	s	object:properties.list.selectedSignText
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Target of signature help, use float when possible by default.",$/;"	s	object:properties.signature.target
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Target to show hover information, default is floating window when possible/;"	s	object:properties.coc.preferences.hoverTarget
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Text of error sign",$/;"	s	object:properties.diagnostic.errorSign
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Text of hint sign",$/;"	s	object:properties.diagnostic.hintSign
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Text of info sign",$/;"	s	object:properties.diagnostic.infoSign
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Text of warning sign",$/;"	s	object:properties.diagnostic.warningSign
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Text shown in statusline to indicate snippet session is activated."$/;"	s	object:properties.coc.preferences.snippetStatusText
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "The characer used as first characer in prompt line"$/;"	s	object:properties.list.indicator
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "The character used in abbr of complete item to indicate the item could be /;"	s	object:properties.suggest.snippetIndicator
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "The number of non empty lines from a diagnostic to display",$/;"	s	object:properties.diagnostic.virtualTextLines
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "The prefix added virtual text diagnostics",$/;"	s	object:properties.diagnostic.virtualTextPrefix
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "The text that will mark a line end from the diagnostic message",$/;"	s	object:properties.diagnostic.virtualTextLineSeparator
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Timeout for completion, in miliseconds."$/;"	s	object:properties.suggest.timeout
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Timeout for hide float window on cursor moved, in miliseconds."$/;"	s	object:properties.signature.floatTimeout
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Timeout for trigger signature help, in miliseconds."$/;"	s	object:properties.signature.triggerSignatureWait
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Trigger completion after InsertEnter, auto trigger should be 'always' to e/;"	s	object:properties.suggest.triggerAfterInsertEnter
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Trim same extension on file completion",$/;"	s	object:properties.coc.source.file.trimSameExts
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Use Ale for display diagnostics in vim, will disable coc for display diagn/;"	s	object:properties.diagnostic.displayByAle
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Use NeoVim virtual text to display diagnostics",$/;"	s	object:properties.diagnostic.virtualText
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Use vim's quickfix list for jump locations,\\n need restart on change.",$/;"	s	object:properties.coc.preferences.useQuickfixForLocations
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Use vsplit for preview window."$/;"	s	object:properties.list.previewSplitRight
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Used for filter diagnostics by diagnostic severity.",$/;"	s	object:properties.diagnostic.level
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Wait time between trigger character type and completion start, for wait se/;"	s	object:properties.suggest.triggerCompletionWait
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "When enabled, add function signature to user_data.signature to support ech/;"	s	object:properties.suggest.echodocSupport
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "When enabled, completeopt is not overriden, auto completion will be disabl/;"	s	object:properties.suggest.keepCompleteopt
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "When enabled, show all diagnostics of current line instead of current posi/;"	s	object:properties.diagnostic.checkCurrentLine
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "When to enable echo messages of diagnostics.",$/;"	s	object:properties.diagnostic.enableMessage
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "Where to add the detail in complete item when it's less than max length.",$/;"	s	object:properties.suggest.detailField
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "executable path for https:\/\/facebook.github.io\/watchman\/, detected fro/;"	s	object:properties.coc.preferences.watchmanPath
description	.vim/plugged/coc.nvim/data/schema.json	/^      "description": "http proxy uri, used for extensions that send request"$/;"	s	object:properties.http.proxy
description	.vim/plugged/coc.nvim/data/schema.json	/^  "description": "Configuration file for coc.nvim",$/;"	s
description	.vim/plugged/coc.nvim/package.json	/^  "description": "LSP based intellisense engine for neovim & vim8.",$/;"	s
description	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^          "description": "Enable test"$/;"	s	object:contributes.configuration.properties.test.enable
description	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^    description: 'input'$/;"	v
description	.vim/plugged/coc.nvim/src/extensions.ts	/^  description: string$/;"	p	interface:PropertyScheme
description	.vim/plugged/coc.nvim/src/list/manager.ts	/^        let description = props[name] && props[name].description ? props[name].description : ''$/;"	v
description	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^  public description = 'code actions of selected range.'$/;"	p	class:ActionsList
description	.vim/plugged/coc.nvim/src/list/source/commands.ts	/^  public description = 'registed commands of coc.nvim'$/;"	p	class:CommandsList
description	.vim/plugged/coc.nvim/src/list/source/diagnostics.ts	/^  public readonly description = 'diagnostics of current workspace'$/;"	p	class:DiagnosticsList
description	.vim/plugged/coc.nvim/src/list/source/extensions.ts	/^  public description = 'manage coc extensions'$/;"	p	class:ExtensionList
description	.vim/plugged/coc.nvim/src/list/source/folders.ts	/^  public description = 'list of current workspace folders'$/;"	p	class:FoldList
description	.vim/plugged/coc.nvim/src/list/source/links.ts	/^  public description = 'links of current buffer'$/;"	p	class:LinksList
description	.vim/plugged/coc.nvim/src/list/source/lists.ts	/^  public readonly description = 'registed lists of coc.nvim'$/;"	p	class:LinksList
description	.vim/plugged/coc.nvim/src/list/source/location.ts	/^  public description = 'last jump locations'$/;"	p	class:LocationList
description	.vim/plugged/coc.nvim/src/list/source/outline.ts	/^  public readonly description = 'symbols of current document'$/;"	p	class:Outline
description	.vim/plugged/coc.nvim/src/list/source/output.ts	/^  public description = 'output channels of coc.nvim'$/;"	p	class:OutputList
description	.vim/plugged/coc.nvim/src/list/source/services.ts	/^  public description = 'registed services of coc.nvim'$/;"	p	class:ServicesList
description	.vim/plugged/coc.nvim/src/list/source/sources.ts	/^  public readonly description = 'registed completion sources'$/;"	p	class:SourcesList
description	.vim/plugged/coc.nvim/src/list/source/symbols.ts	/^  public readonly description = 'search workspace symbols'$/;"	p	class:Symbols
description	.vim/plugged/coc.nvim/src/sources.ts	/^                description: 'Enabled filetypes.',$/;"	v
description	.vim/plugged/coc.nvim/src/sources.ts	/^                description: 'Shortcut text shown in complete menu.'$/;"	v
description	.vim/plugged/coc.nvim/src/types.ts	/^  description: string$/;"	p	interface:ExtensionInfo
description	.vim/plugged/coc.nvim/src/types.ts	/^  description: string$/;"	p	interface:ListArgument
description	.vim/plugged/coc.nvim/src/types.ts	/^  description: string$/;"	p	interface:Snippet
description	.vim/plugged/coc.nvim/src/types.ts	/^  description?: string$/;"	p	interface:IList
description	.vim/plugged/vim-snippets/addon-info.json	/^  "description" : "community driven set of snippets for snipmate"$/;"	s
deselectItem	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) deselectItem(item *Item) {$/;"	f	struct:fzf.Terminal
destroy	.vim/plugged/coc.nvim/src/model/db.ts	/^  public async destroy(): Promise<void> {$/;"	m	class:DB
detach	.vim/plugged/coc.nvim/src/types.ts	/^  detach?: boolean$/;"	p	interface:TaskOptions
detached	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "detached": {$/;"	o	object:definitions.languageServerCommand.properties
detached	.vim/plugged/coc.nvim/data/schema.json	/^        "detached": {$/;"	o	object:definitions.languageServerCommand.properties
detached	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  detached?: boolean$/;"	p	interface:MessageTransports
detached	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  detached: boolean$/;"	p	interface:ChildProcessInfo
detached	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  detached?: boolean$/;"	p	interface:SpawnOptions
detached	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  detached?: boolean$/;"	p	interface:StreamInfo
detached	.vim/plugged/coc.nvim/src/types.ts	/^  detached?: boolean$/;"	p	interface:LanguageServerConfig
detail	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^  public detail = 'detail'$/;"	p	class:TestList
detail	.vim/plugged/coc.nvim/src/languages.ts	/^            detail = detail.replace(\/\\n\\s*\/g, ' ')$/;"	v
detail	.vim/plugged/coc.nvim/src/languages.ts	/^          let { documentation, detail } = resolving$/;"	v
detail	.vim/plugged/coc.nvim/src/languages.ts	/^      let detail = item.detail.replace(\/\\n\\s*\/g, ' ')$/;"	v
detail	.vim/plugged/coc.nvim/src/list/source/symbols.ts	/^  public readonly detail = 'Symbols list is provided by server, it works on interactive mode onl/;"	p	class:Symbols
detail	.vim/plugged/coc.nvim/src/types.ts	/^  detail?: string$/;"	p	interface:IList
detailField	.vim/plugged/coc.nvim/src/languages.ts	/^    let { echodocSupport, detailField, detailMaxLength } = this.completeConfig$/;"	v
detailField	.vim/plugged/coc.nvim/src/languages.ts	/^  detailField: string$/;"	p	interface:CompleteConfig
detailMaxLength	.vim/plugged/coc.nvim/src/languages.ts	/^    let { echodocSupport, detailField, detailMaxLength } = this.completeConfig$/;"	v
detailMaxLength	.vim/plugged/coc.nvim/src/languages.ts	/^  detailMaxLength: number$/;"	p	interface:CompleteConfig
detailShown	.vim/plugged/coc.nvim/src/types.ts	/^  detailShown?: number$/;"	p	interface:VimCompleteItem
devDependencies	.config/nvim/plugged/coc.nvim/package.json	/^  "devDependencies": {$/;"	o
devDependencies	.vim/plugged/coc.nvim/package.json	/^  "devDependencies": {$/;"	o
devPrefixes	.vim/plugged/fzf/src/tui/ttyname_unix.go	/^var devPrefixes = [...]string{"\/dev\/pts\/", "\/dev\/"}$/;"	v	package:tui
diagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let diagnostic = createDiagnostic('foo')$/;"	v
diagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^      [other, [diagnostic]],$/;"	v
diagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^      [uri, [diagnostic]],$/;"	v
diagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^    let diagnostic = createDiagnostic('error')$/;"	v
diagnostic	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    for (let diagnostic of diagnostics) {$/;"	v
diagnostic	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    for (let diagnostic of diagnostics) {$/;"	v
diagnostic	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    for (let diagnostic of diagnostics.slice().reverse()) {$/;"	v
diagnostic.checkCurrentLine	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.checkCurrentLine": {$/;"	o	object:properties
diagnostic.checkCurrentLine	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.checkCurrentLine": {$/;"	o	object:properties
diagnostic.displayByAle	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.displayByAle": {$/;"	o	object:properties
diagnostic.displayByAle	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.displayByAle": {$/;"	o	object:properties
diagnostic.enable	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.enable": {$/;"	o	object:properties
diagnostic.enable	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.enable": {$/;"	o	object:properties
diagnostic.enableMessage	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.enableMessage": {$/;"	o	object:properties
diagnostic.enableMessage	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.enableMessage": {$/;"	o	object:properties
diagnostic.enableSign	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.enableSign": {$/;"	o	object:properties
diagnostic.enableSign	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.enableSign": {$/;"	o	object:properties
diagnostic.errorSign	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.errorSign": {$/;"	o	object:properties
diagnostic.errorSign	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.errorSign": {$/;"	o	object:properties
diagnostic.highlightOffset	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.highlightOffset": {$/;"	o	object:properties
diagnostic.highlightOffset	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.highlightOffset": {$/;"	o	object:properties
diagnostic.hintSign	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.hintSign": {$/;"	o	object:properties
diagnostic.hintSign	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.hintSign": {$/;"	o	object:properties
diagnostic.infoSign	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.infoSign": {$/;"	o	object:properties
diagnostic.infoSign	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.infoSign": {$/;"	o	object:properties
diagnostic.joinMessageLines	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.joinMessageLines": {$/;"	o	object:properties
diagnostic.joinMessageLines	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.joinMessageLines": {$/;"	o	object:properties
diagnostic.level	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.level": {$/;"	o	object:properties
diagnostic.level	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.level": {$/;"	o	object:properties
diagnostic.locationlist	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.locationlist": {$/;"	o	object:properties
diagnostic.locationlist	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.locationlist": {$/;"	o	object:properties
diagnostic.maxWindowHeight	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.maxWindowHeight": {$/;"	o	object:properties
diagnostic.maxWindowHeight	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.maxWindowHeight": {$/;"	o	object:properties
diagnostic.messageTarget	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.messageTarget": {$/;"	o	object:properties
diagnostic.messageTarget	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.messageTarget": {$/;"	o	object:properties
diagnostic.refreshAfterSave	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.refreshAfterSave": {$/;"	o	object:properties
diagnostic.refreshAfterSave	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.refreshAfterSave": {$/;"	o	object:properties
diagnostic.refreshOnInsertMode	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.refreshOnInsertMode": {$/;"	o	object:properties
diagnostic.refreshOnInsertMode	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.refreshOnInsertMode": {$/;"	o	object:properties
diagnostic.signOffset	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.signOffset": {$/;"	o	object:properties
diagnostic.signOffset	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.signOffset": {$/;"	o	object:properties
diagnostic.virtualText	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.virtualText": {$/;"	o	object:properties
diagnostic.virtualText	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.virtualText": {$/;"	o	object:properties
diagnostic.virtualTextLineSeparator	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.virtualTextLineSeparator": {$/;"	o	object:properties
diagnostic.virtualTextLineSeparator	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.virtualTextLineSeparator": {$/;"	o	object:properties
diagnostic.virtualTextLines	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.virtualTextLines": {$/;"	o	object:properties
diagnostic.virtualTextLines	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.virtualTextLines": {$/;"	o	object:properties
diagnostic.virtualTextPrefix	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.virtualTextPrefix": {$/;"	o	object:properties
diagnostic.virtualTextPrefix	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.virtualTextPrefix": {$/;"	o	object:properties
diagnostic.warningSign	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.warningSign": {$/;"	o	object:properties
diagnostic.warningSign	.vim/plugged/coc.nvim/data/schema.json	/^    "diagnostic.warningSign": {$/;"	o	object:properties
diagnosticCollectionName	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  diagnosticCollectionName?: string$/;"	p	interface:ResolvedClientOptions
diagnosticFiletypes	.vim/plugged/coc.nvim/src/util/highlight.ts	/^const diagnosticFiletypes = ['Error', 'Warning', 'Info', 'Hint']$/;"	C
diagnosticManager	.vim/plugged/coc.nvim/src/handler/index.ts	/^      diagnosticManager.hideFloat()$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let diagnostics = [$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let diagnostics = [createDiagnostic('foo'), createDiagnostic('bar')]$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let diagnostics = [diagnostic]$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let diagnostics = manager.getDiagnostics(doc.uri)$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let diagnostics: Diagnostic[] = []$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^        let [file, diagnostics] = item$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^      let diagnostics = this.diagnosticsMap.get(uri)$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^          let diagnostics = collection.get(uri)$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        let diagnostics = this.getDiagnostics(uri)$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        let diagnostics: Diagnostic[] = entries.get(uri) || []$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let diagnostics = collection.get(uri)$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let diagnostics = buffer.diagnostics.filter(o => {$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let diagnostics = diagnosticManager.getDiagnosticsInRange(document.textDocument, range)$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let { uri, diagnostics } = params$/;"	v
diagnostics	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public get diagnostics(): DiagnosticCollection | undefined {$/;"	m	class:BaseLanguageClient
diagnostics	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^    let diagnostics = diagnosticManager.getDiagnosticsInRange(doc.textDocument, range)$/;"	v
diagnosticsMap	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^  private diagnosticsMap: Map<string, Diagnostic[]> = new Map()$/;"	p	class:Collection
didChange	.vim/plugged/coc.nvim/src/language-client/client.ts	/^          let didChange: (event: DidChangeTextDocumentParams) => void = event => {$/;"	v
didChangeConfiguration	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let didChangeConfiguration = (sections: string[] | undefined): void => {$/;"	v
didChangeConfiguration	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  didChangeConfiguration(params: DidChangeConfigurationParams): void$/;"	m	interface:IConnection
didChangeTextDocument	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  didChangeTextDocument(params: DidChangeTextDocumentParams): void$/;"	m	interface:IConnection
didChangeWatchedFiles	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  didChangeWatchedFiles(params: DidChangeWatchedFilesParams): void$/;"	m	interface:IConnection
didChangeWorkspaceFolders	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^  didChangeWorkspaceFolders?: NextSignature<WorkspaceFoldersChangeEvent, void>$/;"	p	interface:WorkspaceFolderWorkspaceMiddleware
didCloseTextDocument	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  didCloseTextDocument(params: DidCloseTextDocumentParams): void$/;"	m	interface:IConnection
didOpenTextDocument	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  didOpenTextDocument(params: DidOpenTextDocumentParams): void$/;"	m	interface:IConnection
didSaveTextDocument	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  didSaveTextDocument(params: DidSaveTextDocumentParams): void$/;"	m	interface:IConnection
did_plugin_ultisnips	.config/nvim/plugged/ultisnips/plugin/UltiSnips.vim	/^let did_plugin_ultisnips=1$/;"	v
diff	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_diff.py	/^def diff(a, b, sline=0):$/;"	f
diff	.vim/plugged/coc.nvim/src/util/string.ts	/^      const diff = Math.abs(codeA - codeB)$/;"	C	function:doEqualsIgnoreCase
diffLines	.vim/plugged/coc.nvim/src/util/diff.ts	/^export function diffLines(from: string, to: string): ChangedLines {$/;"	f
diff_in_buffer_length	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def diff_in_buffer_length(self):$/;"	m	class:VimState
dir	.vim/plugged/coc.nvim/src/__tests__/modules/plugin.test.ts	/^    let dir = await nvim.call('fnameescape', path.join(root, 'doc'))$/;"	v
dir	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let dir = path.join(__dirname, 'a\/b\/c')$/;"	v
dir	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        let dir = path.dirname(URI.parse(doc.uri).fsPath)$/;"	v
dir	.vim/plugged/coc.nvim/src/util/clean.ts	/^    let dir = tmpdir()$/;"	v
dir	.vim/plugged/coc.nvim/src/workspace.ts	/^    let dir = path.dirname(filepath)$/;"	v
dir	.vim/plugged/coc.nvim/src/workspace.ts	/^    let dir = path.dirname(u.fsPath)$/;"	v
dir_path	.vim/plugged/ghost-text.vim/python3/test/test_channel_server.py	/^dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
dir_path	.vim/plugged/ghost-text.vim/python3/test/test_http_server.py	/^dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
dir_path	.vim/plugged/ghost-text.vim/python3/test/test_server_thread.py	/^dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
dir_path	.vim/plugged/ghost-text.vim/python3/test/test_websocket_server.py	/^dir_path = os.path.dirname(os.path.realpath(__file__))$/;"	v
direction	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    direction: str = ''$/;"	v	class:Context
directory	.vim/plugged/coc.nvim/src/extensions.ts	/^          let directory = await util.promisify(fs.realpath)(stat.root)$/;"	v
directory	.vim/plugged/coc.nvim/src/extensions.ts	/^    let directory = idx == -1 ? null : this.list[idx].directory$/;"	v
directory	.vim/plugged/coc.nvim/src/extensions.ts	/^  directory?: string$/;"	p	interface:ExtensionItem
dirname	.vim/plugged/coc.nvim/src/util/factory.ts	/^    const args = [this.exports, require, this, filename, dirname]$/;"	C	function:compileInSandbox
dirname	.vim/plugged/coc.nvim/src/util/factory.ts	/^    const dirname = path.dirname(filename)$/;"	C	function:compileInSandbox
dirname	.vim/plugged/coc.nvim/src/util/processes.ts	/^const pluginRoot = isWebpack ? dirname(__dirname) : resolve(__dirname, '..\/..')$/;"	C
dirs	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let dirs = parentDirs('\/a\/b\/c')$/;"	v
dirs	.vim/plugged/coc.nvim/src/util/fs.ts	/^  const dirs = [root]$/;"	C	function:parentDirs
dirty	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let { changedtick, dirty } = doc$/;"	v
disableCompletion	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "disableCompletion": {$/;"	o	object:definitions.languageServerBase.properties
disableCompletion	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "disableCompletion": {},$/;"	o	object:definitions.languageServerCommand.properties
disableCompletion	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "disableCompletion": {},$/;"	o	object:definitions.languageServerModule.properties
disableCompletion	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "disableCompletion": {},$/;"	o	object:definitions.languageServerSocket.properties
disableCompletion	.vim/plugged/coc.nvim/data/schema.json	/^        "disableCompletion": {$/;"	o	object:definitions.languageServerBase.properties
disableCompletion	.vim/plugged/coc.nvim/data/schema.json	/^        "disableCompletion": {},$/;"	o	object:definitions.languageServerCommand.properties
disableCompletion	.vim/plugged/coc.nvim/data/schema.json	/^        "disableCompletion": {},$/;"	o	object:definitions.languageServerModule.properties
disableCompletion	.vim/plugged/coc.nvim/data/schema.json	/^        "disableCompletion": {},$/;"	o	object:definitions.languageServerSocket.properties
disableCompletion	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  disableCompletion?: boolean$/;"	p	interface:ResolvedClientOptions
disableCompletion	.vim/plugged/coc.nvim/src/types.ts	/^  disableCompletion?: boolean$/;"	p	interface:LanguageServerConfig
disableDiagnostics	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "disableDiagnostics": {$/;"	o	object:definitions.languageServerBase.properties
disableDiagnostics	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "disableDiagnostics": {},$/;"	o	object:definitions.languageServerCommand.properties
disableDiagnostics	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "disableDiagnostics": {},$/;"	o	object:definitions.languageServerModule.properties
disableDiagnostics	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "disableDiagnostics": {},$/;"	o	object:definitions.languageServerSocket.properties
disableDiagnostics	.vim/plugged/coc.nvim/data/schema.json	/^        "disableDiagnostics": {$/;"	o	object:definitions.languageServerBase.properties
disableDiagnostics	.vim/plugged/coc.nvim/data/schema.json	/^        "disableDiagnostics": {},$/;"	o	object:definitions.languageServerCommand.properties
disableDiagnostics	.vim/plugged/coc.nvim/data/schema.json	/^        "disableDiagnostics": {},$/;"	o	object:definitions.languageServerModule.properties
disableDiagnostics	.vim/plugged/coc.nvim/data/schema.json	/^        "disableDiagnostics": {},$/;"	o	object:definitions.languageServerSocket.properties
disableDiagnostics	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  disableDiagnostics?: boolean$/;"	p	interface:ResolvedClientOptions
disableDiagnostics	.vim/plugged/coc.nvim/src/types.ts	/^  disableDiagnostics?: boolean$/;"	p	interface:LanguageServerConfig
disableKind	.vim/plugged/coc.nvim/src/types.ts	/^  disableKind: boolean$/;"	p	interface:CompleteConfig
disableMenu	.vim/plugged/coc.nvim/src/types.ts	/^  disableMenu: boolean$/;"	p	interface:CompleteConfig
disableMenuShortcut	.vim/plugged/coc.nvim/src/types.ts	/^  disableMenuShortcut: boolean$/;"	p	interface:CompleteConfig
disableSyntaxes	.vim/plugged/coc.nvim/src/model/source.ts	/^  public get disableSyntaxes(): string[] {$/;"	m	class:Source
disableSyntaxes	.vim/plugged/coc.nvim/src/types.ts	/^  disableSyntaxes?: string[]$/;"	p	interface:ISource
disableWorkspaceFolders	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "disableWorkspaceFolders": {$/;"	o	object:definitions.languageServerBase.properties
disableWorkspaceFolders	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "disableWorkspaceFolders": {},$/;"	o	object:definitions.languageServerCommand.properties
disableWorkspaceFolders	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "disableWorkspaceFolders": {},$/;"	o	object:definitions.languageServerModule.properties
disableWorkspaceFolders	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "disableWorkspaceFolders": {},$/;"	o	object:definitions.languageServerSocket.properties
disableWorkspaceFolders	.vim/plugged/coc.nvim/data/schema.json	/^        "disableWorkspaceFolders": {$/;"	o	object:definitions.languageServerBase.properties
disableWorkspaceFolders	.vim/plugged/coc.nvim/data/schema.json	/^        "disableWorkspaceFolders": {},$/;"	o	object:definitions.languageServerCommand.properties
disableWorkspaceFolders	.vim/plugged/coc.nvim/data/schema.json	/^        "disableWorkspaceFolders": {},$/;"	o	object:definitions.languageServerModule.properties
disableWorkspaceFolders	.vim/plugged/coc.nvim/data/schema.json	/^        "disableWorkspaceFolders": {},$/;"	o	object:definitions.languageServerSocket.properties
disableWorkspaceFolders	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  disableWorkspaceFolders?: boolean$/;"	p	interface:ResolvedClientOptions
disableWorkspaceFolders	.vim/plugged/coc.nvim/src/types.ts	/^  disableWorkspaceFolders?: boolean$/;"	p	interface:LanguageServerConfig
disabled	.vim/plugged/coc.nvim/src/extensions.ts	/^    let disabled = this.isDisabled(id)$/;"	v
disabled	.vim/plugged/coc.nvim/src/types.ts	/^  disabled: boolean$/;"	p	interface:SourceStat
discard	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^discard,$/;"	s
display	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, props = { position: "absolute", visibility: "hidden", display:"block" }, which = nam/;"	p	class:AnonymousFunctiond47633f82700.props
display	.config/nvim/plugged/oceanic-next/test/test.jsx	/^        display: isEditMode ? 'block' : 'none'$/;"	p	class:EmailField.editStyle
display	.config/nvim/plugged/oceanic-next/test/test.jsx	/^        display: isEditMode ? 'none' : 'block'$/;"	p	class:EmailField.displayStyle
displayByAle	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let { displayByAle } = this.config$/;"	v
displayByAle	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  displayByAle: boolean$/;"	p	interface:DiagnosticConfig
displayStyle	.config/nvim/plugged/oceanic-next/test/test.jsx	/^      const displayStyle = {$/;"	c	class:EmailField
displayWidth	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) displayWidth(runes []rune) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
displayWidth	.vim/plugged/fzf/src/tui/light.go	/^	displayWidth int$/;"	m	struct:tui.wrappedLine	typeref:typename:int
displayWidthWithLimit	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) displayWidthWithLimit(runes []rune, prefixWidth int, limit int) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
disposable	.vim/plugged/coc.nvim/src/__tests__/client/changedFiles.test.ts	/^    let disposable = client.start()$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^          disposable.dispose()$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^    let disposable = client.start()$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let disposable = sources.addSource(source)$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^    let disposable = sources.addSource(source)$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let disposable = manager.registerList(list)$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let disposable = manager.registerList(lineList)$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let disposable = manager.registerList(list)$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let disposable = manager.registerList(new TestList(nvim))$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^      let disposable = manager.registerList(list)$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^    let disposable = manager.registerList(new ErrorList(nvim))$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^    let disposable = manager.registerList(new ErrorTaskList(nvim))$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^    let disposable = manager.registerList(new InteractiveList(nvim))$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^    let disposable = manager.registerList(new TaskList(nvim))$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let disposable = languages.registerCompletionItemProvider('edits', 'edit', null, provider)$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let disposable = languages.registerCompletionItemProvider('snippets-test', 'st', null, provi/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let disposable = sources.addSource(source)$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let disposable = await extensions.updateExtensions('', true)$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/modules/sources.test.ts	/^    let disposable = sources.createSource({$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^    let disposable = await client.subscribe('\/tmp\/*', fn)$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let disposable = workspace.onDidChangeConfiguration(e => {$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let disposable = workspace.onWillSaveUntil(event => {$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let disposable = workspace.registerAutocmd({$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let disposable = workspace.registerExprKeymap('i', '"', fn)$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let disposable = workspace.registerExprKeymap('i', '"', fn, true)$/;"	v
disposable	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let disposable = workspace.registerKeymap(['n', 'v'], 'echo', fn)$/;"	v
disposable	.vim/plugged/coc.nvim/src/completion/complete.ts	/^          disposable.dispose()$/;"	v
disposable	.vim/plugged/coc.nvim/src/completion/complete.ts	/^        let disposable = tokenSource.token.onCancellationRequested(() => {$/;"	v
disposable	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let disposable = watchFile(filepath, () => {$/;"	v
disposable	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let disposable = collection.onDidDiagnosticsChange(async uri => {$/;"	v
disposable	.vim/plugged/coc.nvim/src/events.ts	/^      let disposable = Disposable.create(() => {$/;"	v
disposable	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      for (let disposable of disposables) {$/;"	v
disposable	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    for (let disposable of this._listeners.values()) {$/;"	v
disposable	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let disposable = this._listeners.get(id)$/;"	v
disposable	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let disposable = workspace.onDidChangeConfiguration(() => {$/;"	v
disposable	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^    for (let disposable of this._listeners.values()) {$/;"	v
disposable	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^    let disposable = this._listeners.get(id)$/;"	v
disposable	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^    let disposable = workspace.onDidChangeWorkspaceFolders(event => {$/;"	v
disposable	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  private disposable: Disposable$/;"	C
disposable	.vim/plugged/coc.nvim/src/list/ui.ts	/^        let disposable = this.onDidOpen(() => {$/;"	v
disposable	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let disposable = token.onCancellationRequested(() => {$/;"	v
disposable	.vim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^    let disposable = await client.subscribe(globPattern, (change: FileChange) => {$/;"	v
disposable	.vim/plugged/coc.nvim/src/services.ts	/^        let disposable = client.start()$/;"	v
disposable	.vim/plugged/coc.nvim/src/workspace.ts	/^      let disposable = this.onDidOpenTextDocument(doc => {$/;"	v
disposable	.vim/plugged/coc.nvim/src/workspace.ts	/^      let disposable = this.onDidOpenTextDocument(textDocument => {$/;"	v
disposable	.vim/plugged/coc.nvim/src/workspace.ts	/^      let disposable = this.onDidWorkspaceInitialized(() => {$/;"	v
disposable	.vim/plugged/coc.nvim/src/workspace.ts	/^    let disposable = events.on('GlobalChange', async (changed: string, oldValue: any, newValue: /;"	v
disposable	.vim/plugged/coc.nvim/src/workspace.ts	/^    let disposable = events.on('OptionSet', async (changed: string, oldValue: any, newValue: any/;"	v
disposables	.vim/plugged/coc.nvim/src/__tests__/modules/colors.test.ts	/^let disposables: Disposable[] = []$/;"	v
disposables	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^let disposables: Disposable[] = []$/;"	v
disposables	.vim/plugged/coc.nvim/src/events.ts	/^        disposables.push(this.on(ev as any, handler, thisArg, disposables))$/;"	v
disposables	.vim/plugged/coc.nvim/src/events.ts	/^      let disposables: Disposable[] = []$/;"	v
disposables	.vim/plugged/coc.nvim/src/extensions.ts	/^    let disposables: Disposable[] = []$/;"	v
disposables	.vim/plugged/coc.nvim/src/handler/colors.ts	/^  private disposables: Disposable[] = []$/;"	p	class:Colors
disposables	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^  private disposables: Disposable[] = []$/;"	p	class:DocumentHighlighter
disposables	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        disposables.push($/;"	v
disposables	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      disposables.push(fileSystemWatcher)$/;"	v
disposables	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      let disposables: Disposable[] = []$/;"	v
disposables	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let disposables = this._commands.get(id)$/;"	v
disposables	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let disposables = this._watchers.get(id)$/;"	v
disposables	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let disposables: Disposable[] = []$/;"	v
disposables	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private disposables: Disposable[] = []$/;"	C
disposables	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private disposables: Disposable[] = []$/;"	p	class:FloatFactory
disposables	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^  private disposables: Disposable[] = []$/;"	p	class:BufferChannel
disposables	.vim/plugged/coc.nvim/src/model/task.ts	/^  private disposables: Disposable[] = []$/;"	p	class:Task
disposables	.vim/plugged/coc.nvim/src/services.ts	/^        disposables.push(disposable)$/;"	v
disposables	.vim/plugged/coc.nvim/src/services.ts	/^    let disposables: Disposable[] = []$/;"	v
disposables	.vim/plugged/coc.nvim/src/workspace.ts	/^    let disposables: Disposable[] = []$/;"	v
dispose	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let dispose = collection.onDidDiagnosticsClear(uris => {$/;"	v
dispose	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  dispose(): void$/;"	m	interface:DynamicFeature
dispose	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  dispose(): void$/;"	m	interface:IConnection
dispose	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  dispose(): void {$/;"	m	class:Delayer
dispose	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  public dispose(): void {$/;"	C
dispose	.vim/plugged/coc.nvim/src/model/popup.ts	/^  public dispose(): void {$/;"	m	class:Popup
dispose	.vim/plugged/coc.nvim/src/model/status.ts	/^      dispose: () => {$/;"	C
dispose	.vim/plugged/coc.nvim/src/model/status.ts	/^  public dispose(): void {$/;"	C
dispose	.vim/plugged/coc.nvim/src/model/terminal.ts	/^  public dispose(): void {$/;"	m	class:TerminalModel
dispose	.vim/plugged/coc.nvim/src/plugin.ts	/^  public async dispose(): Promise<void> {$/;"	m	class:Plugin
dispose	.vim/plugged/coc.nvim/src/provider/codeActionmanager.ts	/^  public dispose(): void {$/;"	m	class:CodeActionManager
dispose	.vim/plugged/coc.nvim/src/provider/codeLensManager.ts	/^  public dispose(): void {$/;"	m	class:CodeLensManager
dispose	.vim/plugged/coc.nvim/src/provider/declarationManager.ts	/^  public dispose(): void {$/;"	m	class:DeclarationManager
dispose	.vim/plugged/coc.nvim/src/provider/definitionManager.ts	/^  public dispose(): void {$/;"	m	class:DefinitionManager
dispose	.vim/plugged/coc.nvim/src/provider/documentColorManager.ts	/^  public dispose(): void {$/;"	m	class:DocumentColorManager
dispose	.vim/plugged/coc.nvim/src/provider/documentHighlightManager.ts	/^  public dispose(): void {$/;"	m	class:DocumentHighlightManager
dispose	.vim/plugged/coc.nvim/src/provider/documentLinkManager.ts	/^  public dispose(): void {$/;"	m	class:DocumentLinkManager
dispose	.vim/plugged/coc.nvim/src/provider/documentSymbolManager.ts	/^  public dispose(): void {$/;"	m	class:DocumentSymbolManager
dispose	.vim/plugged/coc.nvim/src/provider/foldingRangeManager.ts	/^  public dispose(): void {$/;"	m	class:FoldingRangeManager
dispose	.vim/plugged/coc.nvim/src/provider/formatManager.ts	/^  public dispose(): void {$/;"	m	class:FormatManager
dispose	.vim/plugged/coc.nvim/src/provider/formatRangeManager.ts	/^  public dispose(): void {$/;"	m	class:FormatRangeManager
dispose	.vim/plugged/coc.nvim/src/provider/hoverManager.ts	/^  public dispose(): void {$/;"	m	class:HoverManager
dispose	.vim/plugged/coc.nvim/src/provider/implementatioinManager.ts	/^  public dispose(): void {$/;"	m	class:ImplementationManager
dispose	.vim/plugged/coc.nvim/src/provider/rangeManager.ts	/^  public dispose(): void {$/;"	m	class:SelectionRangeManager
dispose	.vim/plugged/coc.nvim/src/provider/referenceManager.ts	/^  public dispose(): void {$/;"	m	class:ReferenceManager
dispose	.vim/plugged/coc.nvim/src/provider/signatureManager.ts	/^  public dispose(): void {$/;"	m	class:SignatureManager
dispose	.vim/plugged/coc.nvim/src/provider/typeDefinitionManager.ts	/^  public dispose(): void {$/;"	m	class:TypeDefinitionManager
dispose	.vim/plugged/coc.nvim/src/provider/workspaceSymbolsManager.ts	/^  public dispose(): void {$/;"	m	class:WorkspaceSymbolManager
dispose	.vim/plugged/coc.nvim/src/services.ts	/^      dispose: () => {$/;"	v
dispose	.vim/plugged/coc.nvim/src/types.ts	/^  dispose(): void$/;"	m	interface:DiagnosticCollection
dispose	.vim/plugged/coc.nvim/src/types.ts	/^  dispose(): void$/;"	m	interface:IServiceProvider
dispose	.vim/plugged/coc.nvim/src/types.ts	/^  dispose(): void$/;"	m	interface:IWorkspace
dispose	.vim/plugged/coc.nvim/src/types.ts	/^  dispose(): void$/;"	m	interface:ListTask
dispose	.vim/plugged/coc.nvim/src/types.ts	/^  dispose(): void$/;"	m	interface:OutputChannel
dispose	.vim/plugged/coc.nvim/src/types.ts	/^  dispose(): void$/;"	m	interface:StatusBarItem
dispose	.vim/plugged/coc.nvim/src/types.ts	/^  dispose(): void$/;"	m	interface:Terminal
dispose	.vim/plugged/coc.nvim/src/types.ts	/^  dispose?(): void$/;"	m	interface:IList
dispose	.vim/plugged/coc.nvim/src/watchman.ts	/^  public dispose(): void {$/;"	m	class:Watchman
dispose	.vim/plugged/coc.nvim/src/watchman.ts	/^  public static dispose(): void {$/;"	m	class:Watchman
disposeAll	.vim/plugged/coc.nvim/src/extensions.ts	/^      disposeAll(disposables)$/;"	v
disposeAll	.vim/plugged/coc.nvim/src/services.ts	/^        disposeAll(disposables)$/;"	v
disposeAll	.vim/plugged/coc.nvim/src/util/index.ts	/^export function disposeAll(disposables: Disposable[]): void {$/;"	f
dist	.config/nvim/plugged/html5.vim/Makefile	/^dist: bundle mkfilelist$/;"	t
doAction	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async doAction( name?: string ): Promise<void> {$/;"	C
doComplete	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^      doComplete: (): Promise<CompleteResult> => {$/;"	v
doComplete	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^      doComplete: async (): Promise<CompleteResult> => {$/;"	v
doComplete	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^      doComplete: (_opt: CompleteOption): Promise<CompleteResult> => {$/;"	v
doComplete	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^      doComplete: (opt: CompleteOption): Promise<CompleteResult> => {$/;"	v
doComplete	.vim/plugged/coc.nvim/src/model/source-vim.ts	/^  public async doComplete(opt: CompleteOption, token: CancellationToken): Promise<CompleteResult/;"	m	class:VimSource
doComplete	.vim/plugged/coc.nvim/src/model/source.ts	/^  public async doComplete(opt: CompleteOption, token: CancellationToken): Promise<CompleteResult/;"	m	class:Source
doComplete	.vim/plugged/coc.nvim/src/source/around.ts	/^  public async doComplete(opt: CompleteOption): Promise<CompleteResult> {$/;"	m	class:Around
doComplete	.vim/plugged/coc.nvim/src/source/buffer.ts	/^  public async doComplete(opt: CompleteOption): Promise<CompleteResult> {$/;"	m	class:Buffer
doComplete	.vim/plugged/coc.nvim/src/types.ts	/^  doComplete(opt: CompleteOption, token: CancellationToken): ProviderResult<CompleteResult | nul/;"	m	interface:ISource
doEqualsIgnoreCase	.vim/plugged/coc.nvim/src/util/string.ts	/^function doEqualsIgnoreCase(a: string, b: string, stopAt = a.length): boolean {$/;"	f
doHighlight	.vim/plugged/coc.nvim/src/list/source/commands.ts	/^  public doHighlight(): void {$/;"	m	class:CommandsList
doHighlight	.vim/plugged/coc.nvim/src/list/source/diagnostics.ts	/^  public doHighlight(): void {$/;"	m	class:DiagnosticsList
doHighlight	.vim/plugged/coc.nvim/src/list/source/extensions.ts	/^  public doHighlight(): void {$/;"	m	class:ExtensionList
doHighlight	.vim/plugged/coc.nvim/src/list/source/location.ts	/^  public doHighlight(): void {$/;"	m	class:LocationList
doHighlight	.vim/plugged/coc.nvim/src/list/source/outline.ts	/^  public doHighlight(): void {$/;"	m	class:Outline
doHighlight	.vim/plugged/coc.nvim/src/list/source/services.ts	/^  public doHighlight(): void {$/;"	m	class:ServicesList
doHighlight	.vim/plugged/coc.nvim/src/list/source/sources.ts	/^  public doHighlight(): void {$/;"	m	class:SourcesList
doHighlight	.vim/plugged/coc.nvim/src/list/source/symbols.ts	/^  public doHighlight(): void {$/;"	m	class:Symbols
doHighlight	.vim/plugged/coc.nvim/src/types.ts	/^  doHighlight?(): void$/;"	m	interface:IList
doReject	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  private doReject: (err: any) => void$/;"	p	class:Delayer
doRemoveFromValueTree	.vim/plugged/coc.nvim/src/configuration/util.ts	/^function doRemoveFromValueTree(valueTree: any, segments: string[]): void {$/;"	f
doRequest	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^def doRequest(host, path, parameters, timeout=1, json=False):$/;"	f
doResolve	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  private doResolve: ((value?: any | Thenable<any>) => void) | null$/;"	p	class:Delayer
do_action	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/__init__.py	/^        def do_action(self, args: typing.List[typing.Any]) -> None:$/;"	m	class:DefxHandlers
do_action	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/action.py	/^def do_action(view: View, defx: Defx,$/;"	f
do_action	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/rplugin.py	/^    def do_action(self, args: typing.List[typing.Any]) -> None:$/;"	m	class:Rplugin
do_action	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def do_action(self, action_name: str,$/;"	m	class:View
do_action	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^        def do_action(self, args):$/;"	m	class:DeniteHandlers
do_action	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def do_action(self, context, action_name, targets):$/;"	m	class:Child
do_action	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def do_action(self, context, action_name, targets):$/;"	m	class:_Parent
do_action	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^    def do_action(self, args):$/;"	m	class:Rplugin
do_action	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def do_action(self, action_name, command='', is_manual=False):$/;"	m	class:Default
do_action	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^        def do_action(self, args):$/;"	m	class:DeniteHandlers
do_action	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def do_action(self, context, action_name, targets):$/;"	m	class:Child
do_action	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def do_action(self, context, action_name, targets):$/;"	m	class:_Parent
do_action	.vim/plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^    def do_action(self, args):$/;"	m	class:Rplugin
do_action	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def do_action(self, action_name, command='', is_manual=False):$/;"	m	class:Default
do_async_map	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^        def do_async_map(self, args):$/;"	m	class:DeniteHandlers
do_async_map	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^        def do_async_map(self, args):$/;"	m	class:DeniteHandlers
do_codecheck	.vim/plugged/omnisharp-vim/python/ale_lint.py	/^def do_codecheck(logger, filename, host, cwd, translate, delimiter, encoding):$/;"	f
do_map	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^        def do_map(self, args):$/;"	m	class:DeniteHandlers
do_map	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^    def do_map(self, args):$/;"	m	class:Rplugin
do_map	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def do_map(denite, name, params):$/;"	f
do_map	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^        def do_map(self, args):$/;"	m	class:DeniteHandlers
do_map	.vim/plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^    def do_map(self, args):$/;"	m	class:Rplugin
do_map	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^def do_map(denite, name, params):$/;"	f
do_post_expand	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def do_post_expand(self, start, end, snippets_stack):$/;"	m	class:SnippetDefinition
do_post_jump	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def do_post_jump($/;"	m	class:SnippetDefinition
do_pre_expand	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def do_pre_expand(self, visual_content, snippets_stack):$/;"	m	class:SnippetDefinition
do_unmapping	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    do_unmapping = False$/;"	v	class:SelectModeMappings_DisableRemoveBeforeSelecting_ECR
do_unmapping	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    do_unmapping = True$/;"	v	class:_SelectModeMappings
doc	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var doc = document.documentElement, body = document.body;$/;"	v
doc	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		    doc          = elem.ownerDocument,$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/client/converter.test.ts	/^    let doc = createDocument()$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/client/converter.test.ts	/^    let doc = cv.asCodeLensParams(createDocument())$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/client/converter.test.ts	/^    let doc = cv.asDocumentSymbolParams(createDocument())$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/client/converter.test.ts	/^    let doc = cv.asTextDocumentIdentifier(createDocument())$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^      let doc = workspace.getDocument(buffer.id)$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/modules/colors.test.ts	/^    let doc = await helper.createDocument()$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^  let doc = await helper.createDocument()$/;"	C
doc	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let doc = await createDocument()$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let doc = await helper.createDocument()$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let doc = await helper.createDocument()$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let doc = await workspace.document$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let doc = await helper.createDocument('tmp.xml')$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let doc = await helper.createDocument()$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let doc = await workspace.document$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let doc = workspace.getDocument(buf.id)$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let doc = workspace.getDocument(newUri)$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let doc = workspace.getDocument(uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let doc = await helper.createDocument()$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let doc = await helper.createDocument()$/;"	v
doc	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let doc = await workspace.document$/;"	v
doc	.vim/plugged/coc.nvim/src/commands.ts	/^        let doc = workspace.getDocument(workspace.bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let doc = workspace.getDocument(bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let doc = workspace.getDocument(bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let doc = workspace.getDocument(bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let doc = workspace.getDocument(textDocument.uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    for (let doc of workspace.documents) {$/;"	v
doc	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^      let doc = workspace.getDocument(e.textDocument.uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^      let doc = workspace.getDocument(workspace.bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let doc = workspace.getDocument(bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let doc = workspace.getDocument(workspace.bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/handler/colors.ts	/^        let doc = workspace.getDocument(bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/handler/colors.ts	/^      let doc = workspace.getDocument(textDocument.uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let doc = workspace.getDocument(bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let doc = workspace.getDocument(bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let doc = workspace.documents.find(doc => doc.uri.startsWith('coc:\/\/'))$/;"	v
doc	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let doc = workspace.getDocument(bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let doc = await workspace.document$/;"	v
doc	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let doc = workspace.getDocument(buf.id)$/;"	v
doc	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let doc = workspace.getDocument(bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      let doc = workspace.getDocument(workspace.bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let doc = workspace.getDocument(event.textDocument.uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let doc = workspace.getDocument(workspace.bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/languages.ts	/^        doc = workspace.getDocument(bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/languages.ts	/^      let doc = workspace.getDocument(bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/languages.ts	/^      let doc = workspace.getDocument(document.uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/languages.ts	/^    let doc: Document = null$/;"	v
doc	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let doc = workspace.getDocument(location.uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^    let doc = workspace.getDocument(buf.id)$/;"	v
doc	.vim/plugged/coc.nvim/src/model/document.ts	/^    let doc = TextDocument.create(this.uri, this.filetype, 1, content)$/;"	v
doc	.vim/plugged/coc.nvim/src/model/document.ts	/^    let tailCount = len - doc.offsetAt(ep)$/;"	v
doc	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    for (let doc of docs) {$/;"	v
doc	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^    let doc = workspace.getDocument(`output:\/\/\/${this.name}`)$/;"	v
doc	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^    let doc = workspace.getDocument(document.uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/services.ts	/^    for (let doc of workspace.documents) {$/;"	v
doc	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^      let doc = workspace.getDocument(textDocument.uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^      let doc = workspace.getDocument(uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    const doc = TextDocument.create('untitled:\/1', 'snippet', 0, content)$/;"	C
doc	.vim/plugged/coc.nvim/src/workspace.ts	/^            let doc = await this.loadFile(textDocument.uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/workspace.ts	/^        let doc = this.getDocument(uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/workspace.ts	/^      if (doc && doc.shouldAttach) doc.fetchContent()$/;"	C
doc	.vim/plugged/coc.nvim/src/workspace.ts	/^      let doc = this.getDocument(bufnr)$/;"	C
doc	.vim/plugged/coc.nvim/src/workspace.ts	/^      let doc = this.getDocument(this.bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/workspace.ts	/^      let doc = this.getDocument(uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/workspace.ts	/^    for (let doc of this.buffers.values()) {$/;"	v
doc	.vim/plugged/coc.nvim/src/workspace.ts	/^    for (let doc of this.documents) {$/;"	v
doc	.vim/plugged/coc.nvim/src/workspace.ts	/^    let bufnr = doc ? doc.bufnr : -1$/;"	v
doc	.vim/plugged/coc.nvim/src/workspace.ts	/^    let doc = this.buffers.get(bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/workspace.ts	/^    let doc = this.getDocument(bufnr)$/;"	v
doc	.vim/plugged/coc.nvim/src/workspace.ts	/^    let doc = this.getDocument(loc.uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/workspace.ts	/^    let doc = this.getDocument(uri)$/;"	v
doc	.vim/plugged/coc.nvim/src/workspace.ts	/^    let doc: Document$/;"	v
doc/textobj	.config/nvim/plugged/vim-textobj-rubyblock/textobj-rubyblock.vba	/^doc\/textobj-rubyblock.txt	[[[1$/;"	n
docker	.vim/plugged/fzf/Makefile	/^docker:$/;"	t
docker-test	.vim/plugged/fzf/Makefile	/^docker-test:$/;"	t
docs	.vim/plugged/coc.nvim/src/__tests__/modules/floatBuffer.test.ts	/^    let docs: Documentation[] = [{$/;"	v
docs	.vim/plugged/coc.nvim/src/__tests__/modules/floatFactory.test.ts	/^    let docs = [{$/;"	v
docs	.vim/plugged/coc.nvim/src/__tests__/modules/floatFactory.test.ts	/^    let docs: Documentation[] = [{$/;"	v
docs	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let docs = resolvedItem.documentation$/;"	v
docs	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let docs: Documentation[] = []$/;"	v
docs	.vim/plugged/coc.nvim/src/handler/index.ts	/^              docs.push({ content: item, filetype: 'markdown' })$/;"	v
docs	.vim/plugged/coc.nvim/src/handler/index.ts	/^            docs.push({ filetype: item.language, content: item.value })$/;"	v
docs	.vim/plugged/coc.nvim/src/handler/index.ts	/^        docs.push({ content: contents, filetype: 'markdown' })$/;"	v
docs	.vim/plugged/coc.nvim/src/handler/index.ts	/^        docs.push({ filetype: contents.kind == 'markdown' ? 'markdown' : 'txt', content: content/;"	v
docs	.vim/plugged/coc.nvim/src/handler/index.ts	/^        docs.push({ filetype: contents.language, content: contents.value })$/;"	v
docs	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let docs: Documentation[] = signatures.reduce((p: Documentation[], c, idx) => {$/;"	v
docs	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let docs: Documentation[] = []$/;"	v
docs	.vim/plugged/coc.nvim/src/languages.ts	/^              docs.push({ filetype: isText ? 'txt' : doc.filetype, content: detail })$/;"	v
docs	.vim/plugged/coc.nvim/src/languages.ts	/^          let docs: Documentation[] = []$/;"	v
docs	.vim/plugged/coc.nvim/src/workspace.ts	/^      docs.push(b.textDocument)$/;"	v
docs	.vim/plugged/coc.nvim/src/workspace.ts	/^    let docs = []$/;"	v
document	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let document = await workspace.loadFile(newFile)$/;"	v
document	.vim/plugged/coc.nvim/src/commands.ts	/^        let document = await workspace.document$/;"	v
document	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let { results, document } = this$/;"	v
document	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let document = workspace.getDocument(option.bufnr)$/;"	v
document	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let document = workspace.getDocument(workspace.bufnr)$/;"	v
document	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { document } = this$/;"	v
document	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { document, complete, activted } = this$/;"	v
document	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { nvim, config, document } = this$/;"	v
document	.vim/plugged/coc.nvim/src/completion/index.ts	/^  private document: Document$/;"	p	class:Completion
document	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let document = workspace.getDocument(this.bufnr)$/;"	v
document	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let document = workspace.getDocument(buffer.id)$/;"	v
document	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let document = workspace.getDocument(uri)$/;"	v
document	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let document = await workspace.document$/;"	v
document	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^    let document = workspace.getDocument(bufnr)$/;"	v
document	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let document = await workspace.document$/;"	v
document	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let document = workspace.getDocument(buffer.id)$/;"	v
document	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let document = workspace.getDocument(bufnr)$/;"	v
document	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let { document, position } = await workspace.getCurrentState()$/;"	v
document	.vim/plugged/coc.nvim/src/languages.ts	/^      let document = workspace.getDocument(bufnr)$/;"	v
document	.vim/plugged/coc.nvim/src/languages.ts	/^    let document = workspace.getDocument(bufnr)$/;"	v
document	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^    let { document } = event$/;"	v
document	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const document = TextDocument.create('untitled:\/1', 'snippet', 0, placeholder.toString())$/;"	C
document	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    const { document, nvim } = this$/;"	C
document	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let { document, nvim } = this$/;"	v
document	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let { nvim, document } = this$/;"	v
document	.vim/plugged/coc.nvim/src/types.ts	/^  document: TextDocument$/;"	p	interface:EditerState
document	.vim/plugged/coc.nvim/src/types.ts	/^  document: TextDocument$/;"	p	interface:TextDocumentWillSaveEvent
document	.vim/plugged/coc.nvim/src/workspace.ts	/^          let document = await this.loadFile(uri)$/;"	v
document	.vim/plugged/coc.nvim/src/workspace.ts	/^        return document.uri$/;"	v
document	.vim/plugged/coc.nvim/src/workspace.ts	/^      let document = this.getDocument(bufnr)$/;"	v
document	.vim/plugged/coc.nvim/src/workspace.ts	/^    let document = await this.document$/;"	v
document	.vim/plugged/coc.nvim/src/workspace.ts	/^    let document = this.getDocument(bufnr)$/;"	v
document	.vim/plugged/coc.nvim/src/workspace.ts	/^    let document = this.getDocument(uri)$/;"	v
documentChanges	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let documentChanges = [TextDocumentEdit.create(versioned, [edit])]$/;"	v
documentChanges	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { documentChanges, changes } = edit$/;"	v
documentEdit	.vim/plugged/coc.nvim/src/workspace.ts	/^          documentEdit.edits.push(...edits)$/;"	v
documentEdit	.vim/plugged/coc.nvim/src/workspace.ts	/^        let documentEdit = documentEdits.find(o => o.textDocument.uri == textDocument.uri && o.t/;"	v
documentEdits	.vim/plugged/coc.nvim/src/workspace.ts	/^          documentEdits.push(change as TextDocumentEdit)$/;"	v
documentEdits	.vim/plugged/coc.nvim/src/workspace.ts	/^    let documentEdits: TextDocumentEdit[] = []$/;"	v
documentHighlighter	.vim/plugged/coc.nvim/src/handler/index.ts	/^  private documentHighlighter: DocumentHighlighter$/;"	p	class:Handler
documentLines	.vim/plugged/coc.nvim/src/handler/index.ts	/^  private documentLines: string[] = []$/;"	p	class:Handler
documentSelector	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let documentSelector = this._clientOptions.documentSelector$/;"	v
documentSelector	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  documentSelector: DocumentSelector$/;"	p	interface:DidChangeTextDocumentData
documentSelector	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  documentSelector?: DocumentSelector$/;"	p	interface:ResolvedClientOptions
documentSelectorToLanguageIds	.vim/plugged/coc.nvim/src/services.ts	/^export function documentSelectorToLanguageIds(documentSelector: DocumentSelector): string[] {$/;"	f
document_structure	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let document_structure = [$/;"	v
document_structure	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let document_structure = ['article', 'cell', 'columnheader', 'definition', 'directory', 'doc/;"	v
documentation	.vim/plugged/coc.nvim/src/languages.ts	/^          let { documentation, detail } = resolving$/;"	v
documentation	.vim/plugged/coc.nvim/src/types.ts	/^  documentation?: Documentation[]$/;"	p	interface:VimCompleteItem
documents	.vim/plugged/coc.nvim/src/__tests__/client/server/testFileWatcher.js	/^let documents = new languageserver.TextDocuments()$/;"	v
documents	.vim/plugged/coc.nvim/src/__tests__/client/server/testInitializeResult.js	/^let documents = new vscode_languageserver_1.TextDocuments();$/;"	v
documents	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let { nvim, workspaceFolders, channelNames, rootPath, cwd, documents, initialized, textDocum/;"	v
documents	.vim/plugged/coc.nvim/src/types.ts	/^  readonly documents: Document[]$/;"	p	interface:IWorkspace
done	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^          done()$/;"	v
done	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let done = await this.mappings.doInsertKeymap( inserted )$/;"	v
double splat operators	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^  context "double splat operators" do$/;"	c
doubleClickDuration	.vim/plugged/fzf/src/tui/tui.go	/^	doubleClickDuration = 500 * time.Millisecond$/;"	c	package:tui
download	.vim/plugged/coc.nvim/install.sh	/^download() {$/;"	f
download	.vim/plugged/fzf/install	/^download() {$/;"	f
dpub_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let dpub_role = [$/;"	v
dpub_role	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let dpub_role = ['dpub-abstract', 'dpub-afterword', 'dpub-appendix', 'dpub-biblioentry', 'dp/;"	v
drag	.vim/plugged/coc.nvim/src/types.ts	/^  drag?: boolean$/;"	p	interface:PopupOptions
drag_and_drop_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let drag_and_drop_attributes = {$/;"	v
drawBorder	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorder() {$/;"	f	struct:tui.LightWindow
drawBorder	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) drawBorder() {$/;"	f	struct:tui.TcellWindow
drawBorderAround	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderAround() {$/;"	f	struct:tui.LightWindow
drawBorderHorizontal	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderHorizontal() {$/;"	f	struct:tui.LightWindow
drive_replace	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^        def drive_replace(match):$/;"	f	function:formatPathForServer	file:
ds	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^  nmap ds  <Plug>Dsurround$/;"	m
ds	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap ds  <Plug>Dsurround$/;"	m
ds	.vim/sessions/foo.vim	/^nmap ds <Plug>Dsurround$/;"	m
dsf	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^  nmap dsf <Plug>DsfDelete$/;"	m
dsf#SearchFunctionStart	.config/nvim/plugged/dsf.vim/autoload/dsf.vim	/^function! dsf#SearchFunctionStart(flags)$/;"	f
dsf#Setting	.config/nvim/plugged/dsf.vim/autoload/dsf.vim	/^function! dsf#Setting(key)$/;"	f
dt	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:current(p, li, dt, dd),$/;"	s
dt	.vim/plugged/coc.nvim/src/completion/complete.ts	/^          let dt = Date.now() - start$/;"	v
dup	.vim/plugged/coc.nvim/src/languages.ts	/^      dup: 1$/;"	v
dup	.vim/plugged/coc.nvim/src/types.ts	/^  dup?: number$/;"	p	interface:VimCompleteItem
dupeTheme	.vim/plugged/fzf/src/options.go	/^func dupeTheme(theme *tui.ColorTheme) *tui.ColorTheme {$/;"	f	package:fzf	typeref:typename:*tui.ColorTheme
duplicate	.vim/plugged/coc.nvim/src/types.ts	/^  duplicate?: boolean$/;"	p	interface:ISource
e	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^          let e = byteIndex(line, end.character) + 1$/;"	v
e	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let e = i == end.line ? end.character : -1$/;"	v
e	.vim/plugged/coc.nvim/src/list/manager.ts	/^      let msg = e instanceof Error ? e.message : e.toString()$/;"	C
e	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  e = 101,$/;"	e	enum:CharCode
easyescape_plus	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^augroup easyescape_plus$/;"	a
ec	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let ec = i == range.end.line ? range.end.character : curr.length$/;"	v
ec	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [, el, ec] = await nvim.call('getpos', isVisual ? `'>` : `']`) as [number, number, numbe/;"	v
echo	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def echo(vim: Nvim, color, string):$/;"	f
echo	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def echo(vim: Nvim, color, string):$/;"	f
echoErr	.vim/plugged/coc.nvim/src/util/index.ts	/^export function echoErr(nvim: Neovim, msg: string): void {$/;"	f
echoLine	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        let echoLine = await this.nvim.call('coc#util#echo_line') as string$/;"	v
echoLines	.vim/plugged/coc.nvim/src/types.ts	/^  echoLines(lines: string[], truncate?: boolean): Promise<void>$/;"	m	interface:IWorkspace
echoMessage	.vim/plugged/coc.nvim/src/util/index.ts	/^export function echoMessage(nvim: Neovim, msg: string): void {$/;"	f
echoMsg	.vim/plugged/coc.nvim/src/util/index.ts	/^function echoMsg(nvim: Neovim, msg: string, hl: string): void {$/;"	f
echoWarning	.vim/plugged/coc.nvim/src/util/index.ts	/^export function echoWarning(nvim: Neovim, msg: string): void {$/;"	f
echo_to_hierarchy	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/debug.py	/^def echo_to_hierarchy(text_object):$/;"	f
echodocSupport	.vim/plugged/coc.nvim/src/languages.ts	/^    let { echodocSupport, detailField, detailMaxLength } = this.completeConfig$/;"	v
echodocSupport	.vim/plugged/coc.nvim/src/languages.ts	/^  echodocSupport: boolean$/;"	p	interface:CompleteConfig
edit	.config/nvim/plugged/tagalong.vim/spec/support/vim.rb	/^    def edit(keys)$/;"	f	module:Support.Vim
edit	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async edit(file?: string): Promise<Buffer> {$/;"	m	class:Helper
edit	.vim/plugged/coc.nvim/src/__tests__/modules/position.test.ts	/^    let edit = TextEdit.insert(pos, 'a\\nb\\nc')$/;"	v
edit	.vim/plugged/coc.nvim/src/__tests__/modules/position.test.ts	/^    let edit = TextEdit.insert(pos, 'abc')$/;"	v
edit	.vim/plugged/coc.nvim/src/__tests__/modules/position.test.ts	/^    let edit = TextEdit.replace(r, 'a\\nb\\n')$/;"	v
edit	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let edit = TextEdit.insert(Position.create(0, 0), 'bar')$/;"	v
edit	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let edit = TextEdit.insert(Position.create(0, 0), 'foo\\n')$/;"	v
edit	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let edit = {$/;"	v
edit	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let edit = await languages.provideRenameEdits(doc.textDocument, position, newName)$/;"	v
edit	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let { command, edit } = action$/;"	v
edit	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^      let { command, edit } = action$/;"	v
edit	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    const edit = TextEdit.replace(range, snippet.toString())$/;"	C
edit	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let edit: TextEdit = { range: change.range, newText: change.text }$/;"	v
editEnd	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let editEnd = Position.create($/;"	v
editRange	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let editRange = Range.create(editStart, editEnd)$/;"	v
editRange	.vim/plugged/coc.nvim/src/util/position.ts	/^export function editRange(range: Range, text: string, edit: TextEdit): string {$/;"	f
editStart	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let editStart = Position.create($/;"	v
editStyle	.config/nvim/plugged/oceanic-next/test/test.jsx	/^      const editStyle = {$/;"	c	class:EmailField
editor.lineHighlightBackground	VSCode/settings.json	/^"editor.lineHighlightBackground": "#1E1E1EAA",$/;"	s
editor.lineNumbers	VSCode/settings.json	/^"editor.lineNumbers": "relative",$/;"	s
edits	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let edits: TextEdit[] = []$/;"	v
edits	.vim/plugged/coc.nvim/src/handler/index.ts	/^            let edits: TextEdit[] = []$/;"	v
edits	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let edits = await languages.provideDocumentOntTypeEdits(ch, doc.textDocument, pos)$/;"	v
edits	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let { edits, delta } = snippet.updatePlaceholder(placeholder, edit)$/;"	v
edits	.vim/plugged/coc.nvim/src/workspace.ts	/^            let { textDocument, edits } = change as TextDocumentEdit$/;"	v
edits	.vim/plugged/coc.nvim/src/workspace.ts	/^        let { edits, textDocument } = change as TextDocumentEdit$/;"	v
el	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [, el, ec] = await nvim.call('getpos', isVisual ? `'>` : `']`) as [number, number, numbe/;"	v
elem	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					var elem = document.getElementById( match[3] );$/;"	v
elems	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var clone = this.length > 1, elems;$/;"	v
elems	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var elems = jQuery.map(this, function(elem){$/;"	v
elixir definitions	.config/nvim/plugged/switch.vim/spec/plugin/elixir_spec.rb	/^describe "elixir definitions" do$/;"	d
ellipse	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^ellipse,$/;"	s
elm	.config/nvim/plugged/oceanic-next/test/test.css	/^elm {$/;"	s
elm	.config/nvim/plugged/oceanic-next/test/test.css	/^elm{$/;"	s
else	.vim/plugged/coc.nvim/src/completion/index.ts	/^    } else {$/;"	v
else	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      } else {$/;"	v
else	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    } else {$/;"	v
else	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^        } else {$/;"	v
else	.vim/plugged/coc.nvim/src/extensions.ts	/^      } else if (ev == 'onCommand') {$/;"	v
else	.vim/plugged/coc.nvim/src/extensions.ts	/^      } else if (ev == 'onFileSystem') {$/;"	v
else	.vim/plugged/coc.nvim/src/extensions.ts	/^      } else if (ev == 'workspaceContains') {$/;"	v
else	.vim/plugged/coc.nvim/src/extensions.ts	/^      } else {$/;"	v
else	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^      } else {$/;"	v
else	.vim/plugged/coc.nvim/src/handler/index.ts	/^          } else {$/;"	v
else	.vim/plugged/coc.nvim/src/handler/index.ts	/^      } else if (MarkedString.is(contents)) { \/\/ tslint:disable-line$/;"	v
else	.vim/plugged/coc.nvim/src/handler/index.ts	/^      } else if (MarkupContent.is(contents)) {$/;"	v
else	.vim/plugged/coc.nvim/src/handler/index.ts	/^      } else if (typeof contents == 'string') {$/;"	v
else	.vim/plugged/coc.nvim/src/handler/index.ts	/^      } else {$/;"	v
else	.vim/plugged/coc.nvim/src/handler/index.ts	/^    } else if (only == 'source') {$/;"	v
else	.vim/plugged/coc.nvim/src/handler/index.ts	/^    } else if (target == 'float') {$/;"	v
else	.vim/plugged/coc.nvim/src/handler/index.ts	/^    } else {$/;"	v
else	.vim/plugged/coc.nvim/src/list/manager.ts	/^      } else if ( !name ) {$/;"	C
else	.vim/plugged/coc.nvim/src/list/manager.ts	/^      } else if ( opt == '--auto-preview' || opt == '-A' ) {$/;"	C
else	.vim/plugged/coc.nvim/src/list/manager.ts	/^      } else if ( opt == '--ignore-case' || opt == '--top' || opt == '--normal' || opt == '--no-/;"	C
else	.vim/plugged/coc.nvim/src/list/manager.ts	/^      } else if ( opt == '--number-select' || opt == '-N' ) {$/;"	C
else	.vim/plugged/coc.nvim/src/list/manager.ts	/^      } else if ( opt == '--regex' || opt == '-R' ) {$/;"	C
else	.vim/plugged/coc.nvim/src/list/manager.ts	/^      } else {$/;"	C
else	.vim/plugged/coc.nvim/src/list/manager.ts	/^    } else {$/;"	C
else	.vim/plugged/coc.nvim/src/list/prompt.ts	/^      } else if (_matcher) {$/;"	v
else	.vim/plugged/coc.nvim/src/list/prompt.ts	/^      } else {$/;"	v
else	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    } else {$/;"	v
else	.vim/plugged/coc.nvim/src/list/worker.ts	/^          } else {$/;"	v
else	.vim/plugged/coc.nvim/src/list/worker.ts	/^      } else {$/;"	v
else	.vim/plugged/coc.nvim/src/list/worker.ts	/^    } else {$/;"	v
else	.vim/plugged/coc.nvim/src/model/document.ts	/^    } else {$/;"	v
else	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    } else {$/;"	v
else	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    } else {$/;"	v
else	.vim/plugged/coc.nvim/src/provider/manager.ts	/^      } else if (Array.isArray(def)) {$/;"	v
else	.vim/plugged/coc.nvim/src/provider/manager.ts	/^      } else {$/;"	v
else	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      } else {$/;"	C
else	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^      else {$/;"	C
else	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^    else if (result.length) {$/;"	C
else	.vim/plugged/coc.nvim/src/workspace.ts	/^        } else {$/;"	v
else	.vim/plugged/coc.nvim/src/workspace.ts	/^      } else {$/;"	v
elseValue	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        let elseValue = this._until(TokenType.CurlyClose)$/;"	v
elseValue	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      let elseValue = this._until(TokenType.CurlyClose)$/;"	v
emitter	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let emitter = new Emitter<URI>()$/;"	v
emmet#anchorizeURL	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#anchorizeURL(flag) abort$/;"	f
emmet#balanceTag	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#balanceTag(flag) range abort$/;"	f
emmet#codePretty	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#codePretty() range abort$/;"	f
emmet#completeTag	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#completeTag(findstart, base) abort$/;"	f
emmet#expandAbbr	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandAbbr(mode, abbr) range abort$/;"	f
emmet#expandAbbrIntelligent	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandAbbrIntelligent(feedkey) abort$/;"	f
emmet#expandCursorExpr	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandCursorExpr(expand, mode) abort$/;"	f
emmet#expandDollarExpr	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandDollarExpr(expand) abort$/;"	f
emmet#expandWord	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#expandWord(abbr, type, orig) abort$/;"	f
emmet#getBaseType	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getBaseType(type) abort$/;"	f
emmet#getDollarExprs	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getDollarExprs(expand) abort$/;"	f
emmet#getDollarValueByKey	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getDollarValueByKey(key) abort$/;"	f
emmet#getExpandos	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getExpandos(type, key) abort$/;"	f
emmet#getFileType	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getFileType(...) abort$/;"	f
emmet#getFilters	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getFilters(type) abort$/;"	f
emmet#getIndentation	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getIndentation(...) abort$/;"	f
emmet#getResource	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getResource(type, name, default) abort$/;"	f
emmet#getSettings	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getSettings() abort$/;"	f
emmet#getSnippets	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#getSnippets(type) abort$/;"	f
emmet#imageEncode	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#imageEncode() abort$/;"	f
emmet#imageSize	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#imageSize() abort$/;"	f
emmet#isExpandable	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#isExpandable() abort$/;"	f
emmet#isExtends	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#isExtends(type, extend) abort$/;"	f
emmet#lang#css#balanceTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#balanceTag(flag) range abort$/;"	f
emmet#lang#css#findTokens	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#findTokens(str) abort$/;"	f
emmet#lang#css#imageEncode	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#imageEncode() abort$/;"	f
emmet#lang#css#imageSize	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#imageSize() abort$/;"	f
emmet#lang#css#mergeLines	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#mergeLines() abort$/;"	f
emmet#lang#css#moveNextPrev	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#moveNextPrev(flag) abort$/;"	f
emmet#lang#css#moveNextPrevItem	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#css#parseIntoTree	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#css#parseTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#parseTag(tag) abort$/;"	f
emmet#lang#css#removeTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#removeTag() abort$/;"	f
emmet#lang#css#splitJoinTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#splitJoinTag() abort$/;"	f
emmet#lang#css#toString	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#toString(settings, current, type, inline, filters, itemno, indent) abor/;"	f
emmet#lang#css#toggleComment	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#toggleComment() abort$/;"	f
emmet#lang#elm#balanceTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#balanceTag(flag) range abort$/;"	f
emmet#lang#elm#findTokens	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#findTokens(str) abort$/;"	f
emmet#lang#elm#imageEncode	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#imageEncode() abort$/;"	f
emmet#lang#elm#mergeLines	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#mergeLines() abort$/;"	f
emmet#lang#elm#moveNextPrev	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#moveNextPrev(flag) abort$/;"	f
emmet#lang#elm#moveNextPrevItem	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#elm#parseIntoTree	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#elm#parseTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#parseTag(tag) abort$/;"	f
emmet#lang#elm#removeTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#removeTag() abort$/;"	f
emmet#lang#elm#renderNode	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#renderNode(node)$/;"	f
emmet#lang#elm#renderParam	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#renderParam(param)$/;"	f
emmet#lang#elm#splitJoinTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#splitJoinTag() abort$/;"	f
emmet#lang#elm#toString	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#toString(settings, current, type, inline, filters, itemno, indent) abor/;"	f
emmet#lang#elm#toggleComment	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#toggleComment() abort$/;"	f
emmet#lang#exists	.config/nvim/plugged/emmet-vim/autoload/emmet/lang.vim	/^function! emmet#lang#exists(type) abort$/;"	f
emmet#lang#getExtends	.config/nvim/plugged/emmet-vim/autoload/emmet/lang.vim	/^function! emmet#lang#getExtends(type) abort$/;"	f
emmet#lang#haml#balanceTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#balanceTag(flag) range abort$/;"	f
emmet#lang#haml#findTokens	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#findTokens(str) abort$/;"	f
emmet#lang#haml#imageEncode	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#imageEncode() abort$/;"	f
emmet#lang#haml#imageSize	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#imageSize() abort$/;"	f
emmet#lang#haml#mergeLines	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#mergeLines() abort$/;"	f
emmet#lang#haml#moveNextPrev	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#moveNextPrev(flag) abort$/;"	f
emmet#lang#haml#moveNextPrevItem	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#haml#parseIntoTree	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#haml#parseTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#parseTag(tag) abort$/;"	f
emmet#lang#haml#removeTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#removeTag() abort$/;"	f
emmet#lang#haml#splitJoinTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#splitJoinTag() abort$/;"	f
emmet#lang#haml#toString	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#toString(settings, current, type, inline, filters, itemno, indent) abo/;"	f
emmet#lang#haml#toggleComment	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#toggleComment() abort$/;"	f
emmet#lang#html#balanceTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#balanceTag(flag) range abort$/;"	f
emmet#lang#html#findTokens	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#findTokens(str) abort$/;"	f
emmet#lang#html#imageEncode	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#imageEncode() abort$/;"	f
emmet#lang#html#imageSize	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#imageSize() abort$/;"	f
emmet#lang#html#mergeLines	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#mergeLines() abort$/;"	f
emmet#lang#html#moveNextPrev	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#moveNextPrev(flag) abort$/;"	f
emmet#lang#html#moveNextPrevItem	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#html#parseIntoTree	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#html#parseTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#parseTag(tag) abort$/;"	f
emmet#lang#html#removeTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#removeTag() abort$/;"	f
emmet#lang#html#splitJoinTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#splitJoinTag() abort$/;"	f
emmet#lang#html#toString	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#toString(settings, current, type, inline, filters, itemno, indent) abo/;"	f
emmet#lang#html#toggleComment	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#toggleComment() abort$/;"	f
emmet#lang#jade#balanceTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#balanceTag(flag) range abort$/;"	f
emmet#lang#jade#findTokens	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#findTokens(str) abort$/;"	f
emmet#lang#jade#imageEncode	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#imageEncode() abort$/;"	f
emmet#lang#jade#imageSize	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#imageSize() abort$/;"	f
emmet#lang#jade#mergeLines	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#mergeLines() abort$/;"	f
emmet#lang#jade#moveNextPrev	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#moveNextPrev(flag) abort$/;"	f
emmet#lang#jade#moveNextPrevItem	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#jade#parseIntoTree	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#jade#parseTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#parseTag(tag) abort$/;"	f
emmet#lang#jade#removeTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#removeTag() abort$/;"	f
emmet#lang#jade#splitJoinTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#splitJoinTag() abort$/;"	f
emmet#lang#jade#toString	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#toString(settings, current, type, inline, filters, itemno, indent) abo/;"	f
emmet#lang#jade#toggleComment	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#toggleComment() abort$/;"	f
emmet#lang#less#balanceTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#balanceTag(flag) range abort$/;"	f
emmet#lang#less#findTokens	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#findTokens(str) abort$/;"	f
emmet#lang#less#imageEncode	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#imageEncode() abort$/;"	f
emmet#lang#less#imageSize	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#imageSize() abort$/;"	f
emmet#lang#less#mergeLines	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#mergeLines() abort$/;"	f
emmet#lang#less#moveNextPrev	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#moveNextPrev(flag) abort$/;"	f
emmet#lang#less#moveNextPrevItem	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#less#parseIntoTree	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#less#parseTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#parseTag(tag) abort$/;"	f
emmet#lang#less#removeTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#removeTag() abort$/;"	f
emmet#lang#less#splitJoinTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#splitJoinTag() abort$/;"	f
emmet#lang#less#toString	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#toString(settings, current, type, inline, filters, itemno, indent) abo/;"	f
emmet#lang#less#toggleComment	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#toggleComment() abort$/;"	f
emmet#lang#sass#balanceTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#balanceTag(flag) range abort$/;"	f
emmet#lang#sass#findTokens	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#findTokens(str) abort$/;"	f
emmet#lang#sass#imageEncode	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#imageEncode() abort$/;"	f
emmet#lang#sass#imageSize	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#imageSize() abort$/;"	f
emmet#lang#sass#mergeLines	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#mergeLines() abort$/;"	f
emmet#lang#sass#moveNextPrev	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#moveNextPrev(flag) abort$/;"	f
emmet#lang#sass#moveNextPrevItem	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#sass#parseIntoTree	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#sass#parseTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#parseTag(tag) abort$/;"	f
emmet#lang#sass#removeTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#removeTag() abort$/;"	f
emmet#lang#sass#splitJoinTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#splitJoinTag() abort$/;"	f
emmet#lang#sass#toString	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#toString(settings, current, type, inline, filters, itemno, indent) abo/;"	f
emmet#lang#sass#toggleComment	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#toggleComment() abort$/;"	f
emmet#lang#scss#balanceTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#balanceTag(flag) range abort$/;"	f
emmet#lang#scss#findTokens	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#findTokens(str) abort$/;"	f
emmet#lang#scss#imageEncode	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#imageEncode() abort$/;"	f
emmet#lang#scss#imageSize	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#imageSize() abort$/;"	f
emmet#lang#scss#mergeLines	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#mergeLines() abort$/;"	f
emmet#lang#scss#moveNextPrev	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#moveNextPrev(flag) abort$/;"	f
emmet#lang#scss#moveNextPrevItem	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#scss#parseIntoTree	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#scss#parseTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#parseTag(tag) abort$/;"	f
emmet#lang#scss#removeTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#removeTag() abort$/;"	f
emmet#lang#scss#splitJoinTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#splitJoinTag() abort$/;"	f
emmet#lang#scss#toString	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#toString(settings, current, type, inline, filters, itemno, indent) abo/;"	f
emmet#lang#scss#toggleComment	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#toggleComment() abort$/;"	f
emmet#lang#slim#balanceTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#balanceTag(flag) range abort$/;"	f
emmet#lang#slim#findTokens	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#findTokens(str) abort$/;"	f
emmet#lang#slim#imageEncode	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#imageEncode() abort$/;"	f
emmet#lang#slim#imageSize	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#imageSize() abort$/;"	f
emmet#lang#slim#mergeLines	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#mergeLines() abort$/;"	f
emmet#lang#slim#moveNextPrev	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#moveNextPrev(flag) abort$/;"	f
emmet#lang#slim#moveNextPrevItem	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#slim#parseIntoTree	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#slim#parseTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#parseTag(tag) abort$/;"	f
emmet#lang#slim#removeTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#removeTag() abort$/;"	f
emmet#lang#slim#splitJoinTag	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#splitJoinTag() abort$/;"	f
emmet#lang#slim#toString	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#toString(settings, current, type, inline, filters, itemno, indent) abo/;"	f
emmet#lang#slim#toggleComment	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#toggleComment() abort$/;"	f
emmet#lang#type	.config/nvim/plugged/emmet-vim/autoload/emmet/lang.vim	/^function! emmet#lang#type(type) abort$/;"	f
emmet#lorem#en#expand	.config/nvim/plugged/emmet-vim/autoload/emmet/lorem/en.vim	/^function! emmet#lorem#en#expand(command) abort$/;"	f
emmet#lorem#ja#expand	.config/nvim/plugged/emmet-vim/autoload/emmet/lorem/ja.vim	/^function! emmet#lorem#ja#expand(command) abort$/;"	f
emmet#mergeConfig	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#mergeConfig(lhs, rhs) abort$/;"	f
emmet#mergeLines	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#mergeLines() abort$/;"	f
emmet#mergeLines	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#mergeLines() range abort$/;"	f
emmet#moveNextPrev	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#moveNextPrev(flag) abort$/;"	f
emmet#moveNextPrevItem	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#moveNextPrevItem(flag) abort$/;"	f
emmet#newNode	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#newNode() abort$/;"	f
emmet#parseIntoTree	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#parseIntoTree(abbr, type) abort$/;"	f
emmet#reExpandDollarExpr	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#reExpandDollarExpr(expand, times) abort$/;"	f
emmet#removeTag	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#removeTag() abort$/;"	f
emmet#splitFilterArg	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#splitFilterArg(filters) abort$/;"	f
emmet#splitJoinTag	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#splitJoinTag() abort$/;"	f
emmet#toString	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#toString(...) abort$/;"	f
emmet#toggleComment	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#toggleComment() abort$/;"	f
emmet#unescapeDollarExpr	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#unescapeDollarExpr(expand) abort$/;"	f
emmet#updateTag	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#updateTag() abort$/;"	f
emmet#useFilter	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! emmet#useFilter(filters, filter) abort$/;"	f
emmet#util#cache	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#cache(name, ...) abort$/;"	f
emmet#util#closePopup	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#closePopup() abort$/;"	f
emmet#util#cursorInRegion	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#cursorInRegion(region) abort$/;"	f
emmet#util#deleteContent	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#deleteContent(region) abort$/;"	f
emmet#util#getContent	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getContent(region) abort$/;"	f
emmet#util#getContentFromURL	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getContentFromURL(url) abort$/;"	f
emmet#util#getImageSize	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getImageSize(fn) abort$/;"	f
emmet#util#getTextFromHTML	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getTextFromHTML(buf) abort$/;"	f
emmet#util#getVisualBlock	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getVisualBlock() abort$/;"	f
emmet#util#getcurpos	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getcurpos() abort$/;"	f
emmet#util#imageEncodeDecode	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#imageEncodeDecode(fn, flag) abort$/;"	f
emmet#util#imageSizeWithImageMagick	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#imageSizeWithImageMagick(fn) abort$/;"	f
emmet#util#isImageMagickInstalled	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#isImageMagickInstalled() abort$/;"	f
emmet#util#pointInRegion	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#pointInRegion(point, region) abort$/;"	f
emmet#util#rand	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#rand() abort$/;"	f
emmet#util#regionInRegion	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#regionInRegion(outer, inner) abort$/;"	f
emmet#util#regionIsValid	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#regionIsValid(region) abort$/;"	f
emmet#util#searchRegion	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#searchRegion(start, end) abort$/;"	f
emmet#util#selectRegion	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#selectRegion(region) abort$/;"	f
emmet#util#setContent	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#setContent(region, content) abort$/;"	f
emmet#util#srand	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#srand(seed) abort$/;"	f
emmet#util#unique	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#unique(arr) abort$/;"	f
emmet-vim.zip	.config/nvim/plugged/emmet-vim/Makefile	/^emmet-vim.zip: remove-zip$/;"	t
empty	.vim/plugged/coc.nvim/src/completion/complete.ts	/^        let empty = false$/;"	v
empty	.vim/plugged/coc.nvim/src/types.ts	/^  empty?: number$/;"	p	interface:VimCompleteItem
emptyLine	.vim/plugged/fzf/src/terminal.go	/^var emptyLine = itemLine{}$/;"	v	package:fzf
emptyObject	.vim/plugged/coc.nvim/src/util/is.ts	/^export function emptyObject(obj: any): boolean {$/;"	f
empty_mark	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^    def empty_mark(self, mark_info):$/;"	m	class:Source
empty_mark	.vim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^    def empty_mark(self, mark_info):$/;"	m	class:Source
enable	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "enable": {$/;"	o	object:definitions.languageServerBase.properties
enable	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "enable": {},$/;"	o	object:definitions.languageServerCommand.properties
enable	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "enable": {},$/;"	o	object:definitions.languageServerModule.properties
enable	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "enable": {},$/;"	o	object:definitions.languageServerSocket.properties
enable	.vim/plugged/coc.nvim/data/schema.json	/^        "enable": {$/;"	o	object:definitions.languageServerBase.properties
enable	.vim/plugged/coc.nvim/data/schema.json	/^        "enable": {},$/;"	o	object:definitions.languageServerCommand.properties
enable	.vim/plugged/coc.nvim/data/schema.json	/^        "enable": {},$/;"	o	object:definitions.languageServerModule.properties
enable	.vim/plugged/coc.nvim/data/schema.json	/^        "enable": {},$/;"	o	object:definitions.languageServerSocket.properties
enable	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  enable: boolean$/;"	p	interface:FloatingConfig
enable	.vim/plugged/coc.nvim/src/languages.ts	/^      enable: true,$/;"	v
enable	.vim/plugged/coc.nvim/src/model/source.ts	/^  public get enable(): boolean {$/;"	m	class:Source
enable	.vim/plugged/coc.nvim/src/sources.ts	/^      let { filetypes, enable } = source$/;"	v
enable	.vim/plugged/coc.nvim/src/sources.ts	/^      let { filetypes, triggerOnly, enable } = source$/;"	v
enable	.vim/plugged/coc.nvim/src/types.ts	/^  enable: boolean$/;"	p	interface:LanguageServerConfig
enable	.vim/plugged/coc.nvim/src/types.ts	/^  enable?: boolean$/;"	p	interface:ISource
enableMessage	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  enableMessage: string$/;"	p	interface:DiagnosticConfig
enablePreview	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { noselect, enablePreview } = this.config$/;"	v
enablePreview	.vim/plugged/coc.nvim/src/types.ts	/^  enablePreview: boolean$/;"	p	interface:CompleteConfig
enableSign	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^  enableSign: true,$/;"	C
enableSign	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  enableSign: boolean$/;"	p	interface:DiagnosticConfig
enable_logging	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def enable_logging():$/;"	f
enabled	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  public enabled = true$/;"	p	class:DiagnosticManager
enabled	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^  private enabled: boolean$/;"	p	class:CodeLensManager
enabled	.vim/plugged/fzf/src/terminal.go	/^	enabled bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
enclosing	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const enclosing = snippet.enclosingPlaceholders(second)$/;"	C
encoding	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  encoding?: string$/;"	p	interface:ForkOptions
encoding	.vim/plugged/coc.nvim/src/workspace.ts	/^        let encoding = await this.getFileEncoding()$/;"	v
encoding	.vim/plugged/coc.nvim/src/workspace.ts	/^    let encoding = await this.getFileEncoding()$/;"	v
encoding	.vim/plugged/coc.nvim/src/workspace.ts	/^    let encoding = await this.nvim.getOption('fileencoding') as string$/;"	v
end	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def end(self):$/;"	m	class:TextObject
end	.config/nvim/plugged/vim-ruby/spec/syntax/methods_spec.rb	/^      def end end$/;"	f
end	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let e = i == end.line ? end.character : -1$/;"	v
end	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { start, end } = range$/;"	v
end	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^      let end = await nvim.call('line', 'w$')$/;"	v
end	.vim/plugged/coc.nvim/src/handler/colors.ts	/^      let { start, end } = range$/;"	v
end	.vim/plugged/coc.nvim/src/handler/index.ts	/^              let end: number$/;"	v
end	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let [start, end] = docs[0].active$/;"	v
end	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let { start, end } = selectRange$/;"	v
end	.vim/plugged/coc.nvim/src/languages.ts	/^      let character = newLines[newLines.length - 1].length - end.length$/;"	v
end	.vim/plugged/coc.nvim/src/languages.ts	/^      let end = document.positionAt(document.getText().length)$/;"	v
end	.vim/plugged/coc.nvim/src/languages.ts	/^    let end = line.substr(range.end.character)$/;"	v
end	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let end = byteIndex(line, r.end.character) + 1$/;"	v
end	.vim/plugged/coc.nvim/src/list/basic.ts	/^      let end = Position.create(n, character + (location.text ? location.text.length : 0))$/;"	v
end	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let [start, end] = await nvim.eval('[line("w0"),line("w$")]') as number[]$/;"	v
end	.vim/plugged/coc.nvim/src/model/chars.ts	/^  public end: number$/;"	p	class:Range
end	.vim/plugged/coc.nvim/src/model/document.ts	/^        let { start, end } = range$/;"	v
end	.vim/plugged/coc.nvim/src/model/document.ts	/^        range: { start, end },$/;"	v
end	.vim/plugged/coc.nvim/src/model/document.ts	/^      let end = textDocument.positionAt(change.end)$/;"	v
end	.vim/plugged/coc.nvim/src/model/document.ts	/^      let { start, end } = range$/;"	v
end	.vim/plugged/coc.nvim/src/model/document.ts	/^    let end = position.character + 1$/;"	v
end	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let { start, end } = placeholder.range$/;"	v
end	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let { start, end } = range$/;"	v
end	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    const end = pos.line == 0 ? position.character + pos.character : pos.character$/;"	C
end	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let { start, end } = edit.range$/;"	v
end	.vim/plugged/coc.nvim/src/types.ts	/^  end: number$/;"	p	interface:ChangedLines
end	.vim/plugged/coc.nvim/src/util/diff.ts	/^  end: number$/;"	p	interface:Change
end	.vim/plugged/coc.nvim/src/util/position.ts	/^  let removed = start.line == end.line && newLines.length == 1 ? end.character - start.character/;"	v
end	.vim/plugged/coc.nvim/src/util/position.ts	/^  let { start, end } = range$/;"	v
end	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { start, end } = range$/;"	v
end	.vim/plugged/fzf/src/tokenizer.go	/^	end   int$/;"	m	struct:fzf.Range	typeref:typename:int
endCol	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let endCol = endLine ? byteLength(endLine.slice(0, end.character)) : 0$/;"	v
endCol	.vim/plugged/coc.nvim/src/workspace.ts	/^    let endCol = endLine ? byteLength(endLine.slice(0, end.character)) : 0$/;"	v
endLine	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let { startLine, endLine } = range$/;"	v
endLine	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let endLine = doc.getline(end.line - 1)$/;"	v
endLine	.vim/plugged/coc.nvim/src/model/document.ts	/^    let endLine = Math.min(this.lineCount, sp.line + 100)$/;"	v
endLine	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let endLine = document.getline(end.line)$/;"	v
endLine	.vim/plugged/coc.nvim/src/workspace.ts	/^    let endLine = document.getline(end.line)$/;"	v
end_col	.vim/plugged/coc.nvim/src/types.ts	/^  end_col?: number$/;"	p	interface:PopupProps
end_lnum	.vim/plugged/coc.nvim/src/types.ts	/^  end_lnum?: number$/;"	p	interface:PopupProps
end_with?	.vim/plugged/fzf/test/test_go.rb	/^  def end_with?(_str)$/;"	f	class:NilClass
engines	.vim/plugged/coc.nvim/src/__tests__/extensions/coc-json/package.json	/^  "engines": {$/;"	o
engines	.vim/plugged/coc.nvim/src/__tests__/extensions/global/package.json	/^  "engines": {$/;"	o
engines	.vim/plugged/coc.nvim/src/__tests__/extensions/local/package.json	/^  "engines": {$/;"	o
engines	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^  "engines": {$/;"	o
engines	.vim/plugged/coc.nvim/src/extensions.ts	/^      let { engines } = packageJSON$/;"	v
engines	.vim/plugged/coc.nvim/src/extensions.ts	/^    let { engines } = packageJSON$/;"	v
enqueue_output	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/process.py	/^    def enqueue_output(self):$/;"	m	class:Process
enqueue_output	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def enqueue_output(self):$/;"	m	class:Socket
enqueue_output	.vim/plugged/denite.nvim/rplugin/python3/denite/process.py	/^    def enqueue_output(self):$/;"	m	class:Process
enqueue_output	.vim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def enqueue_output(self):$/;"	m	class:Socket
ensure	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_base.py	/^    def ensure(self, filetypes):$/;"	m	class:SnippetSource
ensure	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/_base.py	/^    def ensure(self, filetypes):$/;"	m	class:SnippetFileSource
ensure	.vim/plugged/coc.nvim/src/language-client/client.ts	/^function ensure<T, K extends keyof T>(target: T, key: K): T[K] {$/;"	f
ensure	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^function ensure<T, K extends keyof T>(target: T, key: K): T[K] {$/;"	f
ensure	.vim/plugged/coc.nvim/src/language-client/declaration.ts	/^function ensure<T, K extends keyof T>(target: T, key: K): T[K] {$/;"	f
ensure	.vim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^function ensure<T, K extends keyof T>(target: T, key: K): T[K] {$/;"	f
ensure	.vim/plugged/coc.nvim/src/language-client/implementation.ts	/^function ensure<T, K extends keyof T>(target: T, key: K): T[K] {$/;"	f
ensure	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^function ensure<T, K extends keyof T>(target: T, key: K): T[K] {$/;"	f
ensure	.vim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^function ensure<T, K extends keyof T>(target: T, key: K): T[K] {$/;"	f
ensurePath	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    function ensurePath(config: any, path: string[]): any {$/;"	f
entered	.vim/plugged/coc.nvim/src/attach.ts	/^    let entered = await nvim.getVvar('vim_did_enter')$/;"	v
entries	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^    let entries: [string, Diagnostic[] | null][] = [$/;"	v
entries	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^    let entries: [string, Diagnostic[]][] = [$/;"	v
entries	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let entries: Map<string, Diagnostic[]> = new Map()$/;"	v
entry	.vim/plugged/coc.nvim/webpack.config.js	/^  entry: '.\/bin\/server',$/;"	p	class:module.exports
enum	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	a	object:definitions.languageServerBase.properties.revealOutputChannelOn
enum	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	a	object:definitions.languageServerModule.properties.transport
enum	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "enum": ["off", "messages", "verbose"],$/;"	a	object:definitions.languageServerBase.properties.trace.server
enum	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "enum": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
enum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["abbr", "menu", "preview"]$/;"	a	object:properties.suggest.detailField
enum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "jump", "never"]$/;"	a	object:properties.diagnostic.enableMessage
enum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "trigger", "none"]$/;"	a	object:properties.suggest.autoTrigger
enum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["daily", "weekly", "never"]$/;"	a	object:properties.coc.preferences.extensionUpdateCheck
enum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["echo", "float"]$/;"	a	object:properties.diagnostic.messageTarget
enum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"]$/;"	a	object:properties.coc.preferences.jumpCommand
enum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["float", "echo"]$/;"	a	object:properties.signature.target
enum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	a	object:properties.diagnostic.level
enum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["more", "warning", "error"]$/;"	a	object:properties.coc.preferences.messageLevel
enum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "enum": ["preview", "echo", "float"]$/;"	a	object:properties.coc.preferences.hoverTarget
enum	.vim/plugged/coc.nvim/data/schema.json	/^          "enum": ["info", "warn", "error", "never"]$/;"	a	object:definitions.languageServerBase.properties.revealOutputChannelOn
enum	.vim/plugged/coc.nvim/data/schema.json	/^          "enum": ["ipc", "stdio", "socket", "pipe"]$/;"	a	object:definitions.languageServerModule.properties.transport
enum	.vim/plugged/coc.nvim/data/schema.json	/^          "enum": ["off", "messages", "verbose"],$/;"	a	object:definitions.languageServerBase.properties.trace.server
enum	.vim/plugged/coc.nvim/data/schema.json	/^        "enum": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
enum	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["abbr", "menu", "preview"]$/;"	a	object:properties.suggest.detailField
enum	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "jump", "never"]$/;"	a	object:properties.diagnostic.enableMessage
enum	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["always", "trigger", "none"]$/;"	a	object:properties.suggest.autoTrigger
enum	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["daily", "weekly", "never"]$/;"	a	object:properties.coc.preferences.extensionUpdateCheck
enum	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["echo", "float"]$/;"	a	object:properties.diagnostic.messageTarget
enum	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["edit", "split", "vsplit", "tabe", "drop", "tab drop"]$/;"	a	object:properties.coc.preferences.jumpCommand
enum	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["float", "echo"]$/;"	a	object:properties.signature.target
enum	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["hint", "information", "warning", "error"]$/;"	a	object:properties.diagnostic.level
enum	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["more", "warning", "error"]$/;"	a	object:properties.coc.preferences.messageLevel
enum	.vim/plugged/coc.nvim/data/schema.json	/^      "enum": ["preview", "echo", "float"]$/;"	a	object:properties.coc.preferences.hoverTarget
enum	.vim/plugged/coc.nvim/src/extensions.ts	/^  enum?: string[]$/;"	p	interface:PropertyScheme
enumMember	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "enumMember": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
enumMember	.vim/plugged/coc.nvim/data/schema.json	/^        "enumMember": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
env	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "env": {$/;"	o	object:definitions.languageServerBase.properties
env	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "env": {},$/;"	o	object:definitions.languageServerCommand.properties
env	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "env": {},$/;"	o	object:definitions.languageServerModule.properties
env	.eslintrc.json	/^ "env": {$/;"	o
env	.vim/plugged/coc.nvim/data/schema.json	/^        "env": {$/;"	o	object:definitions.languageServerBase.properties
env	.vim/plugged/coc.nvim/data/schema.json	/^        "env": {},$/;"	o	object:definitions.languageServerCommand.properties
env	.vim/plugged/coc.nvim/data/schema.json	/^        "env": {},$/;"	o	object:definitions.languageServerModule.properties
env	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  env?: any$/;"	p	interface:ForkOptions
env	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  env?: any$/;"	p	interface:SpawnOptions
env	.vim/plugged/coc.nvim/src/types.ts	/^  env?: string[]$/;"	p	interface:LanguageServerConfig
env	.vim/plugged/coc.nvim/src/types.ts	/^  env?: { [key: string]: string | null }$/;"	p	interface:TerminalOptions
env	.vim/plugged/coc.nvim/src/util/highlight.ts	/^let env: Env = null$/;"	C
env	.vim/plugged/coc.nvim/src/util/platform.ts	/^  env: IProcessEnvironment$/;"	p	interface:INodeProcess
environment	.vim/plugged/vim-airline/ISSUE_TEMPLATE.md	/^#### environment$/;"	t
envlist	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^envlist =$/;"	k	section:tox
envlist	.vim/plugged/omnisharp-vim/python/tox.ini	/^envlist =$/;"	k	section:tox
eof	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/process.py	/^    def eof(self):$/;"	m	class:Process
eof	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def eof(self):$/;"	m	class:Socket
eof	.vim/plugged/denite.nvim/rplugin/python3/denite/process.py	/^    def eof(self):$/;"	m	class:Process
eof	.vim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def eof(self):$/;"	m	class:Socket
eol	.vim/plugged/coc.nvim/src/model/document.ts	/^  private eol = true$/;"	p	class:Document
eol	.vim/plugged/coc.nvim/src/types.ts	/^  eol: number$/;"	p	interface:BufferOption
equal	.vim/plugged/coc.nvim/src/types.ts	/^  equal?: number$/;"	p	interface:VimCompleteItem
equals	.vim/plugged/coc.nvim/src/util/object.ts	/^export function equals(one: any, other: any): boolean {$/;"	f
equals	.vim/plugged/fzf/src/ansi.go	/^func (s *ansiState) equals(t *ansiState) bool {$/;"	f	struct:fzf.ansiState	typeref:typename:bool
equalsIgnoreCase	.vim/plugged/coc.nvim/src/util/string.ts	/^export function equalsIgnoreCase(a: string, b: string): boolean {$/;"	f
eraseChar	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^  eraseChar = () => {$/;"	C
eraseChar	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^  let eraseChar$/;"	C
err	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let [, err] = await nvim.resumeNotification()$/;"	v
err	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      let [res, err] = await nvim.resumeNotification()$/;"	v
err	.vim/plugged/coc.nvim/src/util/index.ts	/^      throw err$/;"	C	function:mkdirp
error	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/util.py	/^def error(vim: Nvim, expr: typing.Any) -> None:$/;"	f
error	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def error(self, msg):$/;"	m	class:Child
error	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def error(vim: Nvim, expr):$/;"	f
error	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  error(error: Error, message: Message, count: number): ErrorAction$/;"	m	interface:ErrorHandler
error	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public error(_error: Error, _message: Message, count: number): ErrorAction {$/;"	m	class:DefaultErrorHandler
error	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public error(message: string): void {$/;"	m	class:ConsoleLogger
error	.vim/plugged/coc.nvim/src/types.ts	/^  error: number$/;"	p	interface:DiagnosticInfo
error	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def error(self, msg):$/;"	m	class:Child
error	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def error(vim: Nvim, expr):$/;"	f
errorExit	.vim/plugged/fzf/src/options.go	/^func errorExit(msg string) {$/;"	f	package:fzf
errorExit	.vim/plugged/fzf/src/tui/tui.go	/^func errorExit(message string) {$/;"	f	package:tui
errorHandler	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let errorHandler = (error: Error, message: Message, count: number) => {$/;"	v
errorHandler	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  errorHandler: ErrorHandler$/;"	p	interface:ResolvedClientOptions
errorItems	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let { errorItems } = workspace.configurations$/;"	v
errorSign	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let { errorSign, warningSign, infoSign, hintSign } = this.config$/;"	v
errorSign	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  errorSign: string$/;"	p	interface:DiagnosticConfig
error_message	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/filter.py	/^    def error_message(self, context, expr):$/;"	m	class:Base
error_message	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def error_message(self, context, expr):$/;"	m	class:Base
error_message	.vim/plugged/denite.nvim/rplugin/python3/denite/base/filter.py	/^    def error_message(self, context, expr):$/;"	m	class:Base
error_message	.vim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def error_message(self, context, expr):$/;"	m	class:Base
error_tb	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def error_tb(vim: Nvim, msg):$/;"	f
error_tb	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def error_tb(vim: Nvim, msg):$/;"	f
errors	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let errors = conf.errorItems$/;"	v
errors	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let errors: ParseError[] = []$/;"	v
eruby definitions	.config/nvim/plugged/switch.vim/spec/plugin/eruby_spec.rb	/^describe "eruby definitions" do$/;"	d
es6	.eslintrc.json	/^ "es6": true,$/;"	b	object:env
esModuleInterop	.vim/plugged/coc.nvim/tsconfig.json	/^    "esModuleInterop": true,$/;"	b	object:compilerOptions
esc	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^    def esc(string):$/;"	f	function:convert2fuzzy_pattern	file:
esc	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^    def esc(string):$/;"	f	function:convert2fuzzy_pattern	file:
escDelay	.vim/plugged/fzf/src/tui/light.go	/^	escDelay      int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
escPollInterval	.vim/plugged/fzf/src/tui/light.go	/^	escPollInterval = 5$/;"	c	package:tui
escSequence	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) escSequence(sz *int) Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
escape	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def escape(expr):$/;"	f
escape	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def escape(inp):$/;"	f
escape	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text.py	/^def escape(text, chars):$/;"	f
escape	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public static escape(value: string): string {$/;"	m	class:SnippetParser
escape	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public static escape(value: string): string {$/;"	m	class:Text
escape	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def escape(expr):$/;"	f
escapeSingleQuote	.vim/plugged/coc.nvim/src/util/index.ts	/^export function escapeSingleQuote(str: string): string {$/;"	f
escape_fuzzy	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def escape_fuzzy(string):$/;"	f
escape_fuzzy	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def escape_fuzzy(string):$/;"	f
escaped	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let escaped = await nvim.call('fnameescape', filepath)$/;"	v
escaped	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      let escaped: string$/;"	v
escaped	.vim/plugged/coc.nvim/src/workspace.ts	/^    let escaped = await nvim.call('fnameescape', filepath)$/;"	v
escapedColon	.vim/plugged/fzf/src/options.go	/^	escapedColon = 0$/;"	c	package:fzf
escapedComma	.vim/plugged/fzf/src/options.go	/^	escapedComma = 1$/;"	c	package:fzf
escapedPlus	.vim/plugged/fzf/src/options.go	/^	escapedPlus  = 2$/;"	c	package:fzf
eslint.options	VSCode/settings.json	/^  "eslint.options": { "configFile": "\/home\/evakuator\/.eslintrc.json" },$/;"	o
ev	.vim/plugged/coc.nvim/src/extensions.ts	/^      let ev = parts[0]$/;"	v
ev	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^      let ev: TextDocumentWillSaveEvent = Object.assign({}, event)$/;"	v
eval	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def eval(text):$/;"	f
evalScript	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^function evalScript( i, elem ) {$/;"	f
evaluation order	.config/nvim/plugged/switch.vim/spec/plugin/evaluation_order_spec.rb	/^describe "evaluation order" do$/;"	d
event	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "event": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
event	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				event = !data[0] || !data[0].preventDefault;$/;"	v
event	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		event = { originalEvent: originalEvent };$/;"	c
event	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.event = {$/;"	c	class:jQuery
event	.vim/plugged/coc.nvim/data/schema.json	/^        "event": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
event	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let event = emitter.event$/;"	v
event	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let event: any$/;"	v
event	.vim/plugged/coc.nvim/src/types.ts	/^  event: string | string[]$/;"	p	interface:Autocmd
event	.vim/plugged/coc.nvim/src/workspace.ts	/^      let event = Array.isArray(autocmd.event) ? autocmd.event.join(' ') : autocmd.event$/;"	v
event	.vim/plugged/coc.nvim/src/workspace.ts	/^    let event: TextDocumentWillSaveEvent = {$/;"	v
event	.vim/plugged/fzf/src/reader.go	/^	event    int32$/;"	m	struct:fzf.Reader	typeref:typename:int32
eventBox	.vim/plugged/fzf/src/matcher.go	/^	eventBox       *util.EventBox$/;"	m	struct:fzf.Matcher	typeref:typename:*util.EventBox
eventBox	.vim/plugged/fzf/src/reader.go	/^	eventBox *util.EventBox$/;"	m	struct:fzf.Reader	typeref:typename:*util.EventBox
eventBox	.vim/plugged/fzf/src/terminal.go	/^	eventBox   *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
event_attributes_value	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let event_attributes_value = {$/;"	v
event_handler_attributes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let event_handler_attributes = {'onabort': [], 'onblur': [], 'oncanplay': [], 'oncanplaythro/;"	v
events	.vim/plugged/coc.nvim/src/extensions.ts	/^        events.on('Command', command => {$/;"	v
events	.vim/plugged/coc.nvim/src/list/manager.ts	/^    events.on( 'BufEnter', debounce( async () => {$/;"	C
events	.vim/plugged/coc.nvim/src/list/manager.ts	/^    events.on( 'FocusGained', debounce( async () => {$/;"	C
events	.vim/plugged/coc.nvim/src/list/manager.ts	/^    events.on( 'InputChar', this.onInputChar, this, this.disposables )$/;"	C
events	.vim/plugged/coc.nvim/src/list/manager.ts	/^    events.on( 'VimResized', () => {$/;"	C
events	.vim/plugged/fzf/src/util/eventbox.go	/^	events Events$/;"	m	struct:util.EventBox	typeref:typename:Events
example	.vim/plugged/omnisharp-vim/test/example/Program.cs	/^namespace example$/;"	n
exclude	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	exclude = \/z-?index|font-?weight|opacity|zoom|line-?height\/i,$/;"	v
exclude	.vim/plugged/coc.nvim/tsconfig.json	/^  "exclude": []$/;"	a
exclude	.vim/plugged/coc.nvim/tslint.json	/^    "exclude": []$/;"	a	object:linterOptions
exclusionRules	vimium-options.json	/^  "exclusionRules": [$/;"	a
exclusive	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var exclusive = true;$/;"	v
execArgv	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "execArgv": {$/;"	o	object:definitions.languageServerModule.properties
execArgv	.vim/plugged/coc.nvim/data/schema.json	/^        "execArgv": {$/;"	o	object:definitions.languageServerModule.properties
execArgv	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  execArgv?: string[]$/;"	p	interface:ForkOptions
execArgv	.vim/plugged/coc.nvim/src/types.ts	/^  execArgv?: string[]$/;"	p	interface:LanguageServerConfig
execPath	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  execPath?: string$/;"	p	interface:ForkOptions
executable	.vim/plugged/coc.nvim/src/util/index.ts	/^export function executable(command: string): boolean {$/;"	f
execute	.vim/plugged/coc.nvim/src/commands.ts	/^  execute(...args: any[]): void | Promise<any>$/;"	m	interface:Command
execute	.vim/plugged/coc.nvim/src/types.ts	/^  execute: (item: ListItem | ListItem[], context: ListContext) => ProviderResult<void>$/;"	p	interface:ListAction
executeCommand	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) executeCommand(template string, forcePlus bool, background bool) {$/;"	f	struct:fzf.Terminal
executeRegexp	.vim/plugged/fzf/src/options.go	/^var executeRegexp *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
executing	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private executing = false$/;"	C
exists	.vim/plugged/coc.nvim/src/__tests__/modules/colors.test.ts	/^    let exists = await nvim.call('hlexists', 'BGffffff')$/;"	v
exists	.vim/plugged/coc.nvim/src/__tests__/modules/db.test.ts	/^    let exists = await db.exists('a.b')$/;"	v
exists	.vim/plugged/coc.nvim/src/__tests__/modules/db.test.ts	/^    let exists = await db.exists('foo.bar')$/;"	v
exists	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let exists = fs.existsSync(filepath)$/;"	v
exists	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^            exists.push(diagnostic)$/;"	v
exists	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^          exists = []$/;"	v
exists	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^        let exists = map.get(file) || []$/;"	v
exists	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^          let exists = allDiagnostics.get(collection.name)$/;"	v
exists	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let exists = await nvim.call('bufloaded', filepath)$/;"	v
exists	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let exists = this.listMap.get( name )$/;"	v
exists	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let exists = selected.has(lnum)$/;"	v
exists	.vim/plugged/coc.nvim/src/model/db.ts	/^  public async exists(key: string): Promise<boolean> {$/;"	m	class:DB
exists	.vim/plugged/coc.nvim/src/watchman.ts	/^  exists: boolean$/;"	p	interface:FileChangeItem
exists	.vim/plugged/coc.nvim/src/workspace.ts	/^          let exists = fs.existsSync(URI.parse(uri).fsPath)$/;"	v
exists	.vim/plugged/coc.nvim/src/workspace.ts	/^    let exists = fs.existsSync(oldPath)$/;"	v
exit	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  exit(): void$/;"	m	interface:IConnection
exit	.vim/plugged/coc.nvim/src/util/highlight.ts	/^    const exit = () => {$/;"	C	function:getHiglights
exitCancel	.vim/plugged/fzf/src/constants.go	/^	exitCancel    = -1$/;"	c	package:fzf
exitError	.vim/plugged/fzf/src/constants.go	/^	exitError     = 2$/;"	c	package:fzf
exitInterrupt	.vim/plugged/fzf/src/constants.go	/^	exitInterrupt = 130$/;"	c	package:fzf
exitNoMatch	.vim/plugged/fzf/src/constants.go	/^	exitNoMatch   = 1$/;"	c	package:fzf
exitOk	.vim/plugged/fzf/src/constants.go	/^	exitOk        = 0$/;"	c	package:fzf
exited	.vim/plugged/coc.nvim/src/util/highlight.ts	/^      exited = true$/;"	C	function:getHiglights
exotic	.vim/plugged/coc.nvim/src/types.ts	/^  exotic: boolean$/;"	p	interface:ExtensionInfo
expand	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def expand(path):$/;"	f
expand	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def expand(self):$/;"	m	class:SnippetManager
expand	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def expand(path):$/;"	f
expand_anon	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def expand_anon($/;"	m	class:SnippetManager
expand_anon	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def expand_anon(self, *args, **kwargs):$/;"	m	class:SnippetUtilForAction
expand_or_jump	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def expand_or_jump(self):$/;"	m	class:SnippetManager
expando	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var expando = "jQuery" + now(), uuid = 0, windowData = {},$/;"	v
expect	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^      expect(mode).toBe('insert')$/;"	v
expect	.vim/plugged/fzf/src/terminal.go	/^	expect     map[int]string$/;"	m	struct:fzf.Terminal	typeref:typename:map[int]string
expected	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^        let expected = {$/;"	v
expected	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^        const expected = lengths.shift()$/;"	C	function:assertLen
expected	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const expected = [Placeholder, Text, Text, Text]$/;"	C
expected behavior	.vim/plugged/vim-airline/ISSUE_TEMPLATE.md	/^#### expected behavior$/;"	t
expected_error	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    expected_error = r"IndexError: line number out of range"$/;"	v	class:ContextSnippets_ReportErrorOnIndexOutOfRange
expected_error	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    expected_error = r"NameError: name 'Tru' is not defined"$/;"	v	class:ContextSnippets_ReportError
expected_error	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = " > \\s+qwe"$/;"	v	class:ParseSnippets_PrintPythonStacktraceMultiline
expected_error	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = " > abc"$/;"	v	class:ParseSnippets_PrintPythonStacktrace
expected_error	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = "Context: asd"$/;"	v	class:ParseSnippets_PrintErroneousSnippetContext
expected_error	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = "Defined in: .*\/all.snippets"$/;"	v	class:ParseSnippets_PrintErroneousSnippetLocation
expected_error	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = "Invalid multiword trigger: '!inv snip\/' in \\S+:2"$/;"	v	class:ParseSnippets_MultiWord_UnmatchedContainer
expected_error	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = "Invalid multiword trigger: 'test snip' in \\S+:2"$/;"	v	class:ParseSnippets_MultiWord_NoContainer
expected_error	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = "Post-expand: asd"$/;"	v	class:ParseSnippets_PrintErroneousSnippetPostAction
expected_error	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = "Pre-expand: asd"$/;"	v	class:ParseSnippets_PrintErroneousSnippetPreAction
expected_error	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = "Trigger: test"$/;"	v	class:ParseSnippets_PrintErroneousSnippet
expected_error	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = r"'extends' without file types in \\S+:2"$/;"	v	class:ParseSnippets_ExtendsWithoutFiletype
expected_error	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = r"Invalid line 'unknown directive' in \\S+:2"$/;"	v	class:ParseSnippets_UnknownDirective
expected_error	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = r"Invalid priority '' in \\S+:2"$/;"	v	class:ParseSnippets_InvalidPriorityLine1
expected_error	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = r"Invalid priority '- 50' in \\S+:2"$/;"	v	class:ParseSnippets_InvalidPriorityLine
expected_error	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = r"Missing 'endsnippet' for 'testsnip' in \\S+:4"$/;"	v	class:ParseSnippets_MissingEndSnippet
expected_error	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    expected_error = 'changes are untrackable'$/;"	v	class:SnippetActions_ErrorOnBufferModificationThroughCommand
expected_error	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    expected_error = 'line under the cursor was modified'$/;"	v	class:SnippetActions_ErrorOnModificationSnippetLine
expected_error	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    expected_error = ''$/;"	v	class:VimTestCase
expected_python_version	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    expected_python_version = None # If set, we need to check that our Vim is running this pytho/;"	v	class:VimTestCase
experimentalDecorators	.vim/plugged/coc.nvim/tsconfig.json	/^    "experimentalDecorators": true,$/;"	b	object:compilerOptions
explicit definitions	.config/nvim/plugged/switch.vim/spec/plugin/explicit_definitions_spec.rb	/^describe "explicit definitions" do$/;"	d
exports	.vim/plugged/coc.nvim/src/extensions.ts	/^          exports = await Promise.resolve(ext.activate(context))$/;"	v
exports	.vim/plugged/coc.nvim/src/extensions.ts	/^        return exports as API$/;"	v
exports	.vim/plugged/coc.nvim/src/extensions.ts	/^    let exports = null$/;"	v
exports	.vim/plugged/coc.nvim/src/extensions.ts	/^    let { exports } = extension$/;"	v
exports	.vim/plugged/coc.nvim/src/sources.ts	/^        exports: void 0,$/;"	v
exports	.vim/plugged/coc.nvim/src/types.ts	/^  readonly exports: T$/;"	p	interface:Extension
exports	.vim/plugged/coc.nvim/webpack.config.js	/^module.exports = {$/;"	c	class:module
expr	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    let expr = this.userInsertMappings.get(key)$/;"	v
expr	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    let expr = this.userNormalMappings.get(key)$/;"	v
ext	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let ext = createExtension('onCommand:test.echo')$/;"	v
ext	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let ext = createExtension('onFileSystem:zip')$/;"	v
ext	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let ext = createExtension('onLanguage:javascript')$/;"	v
ext	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let ext = createExtension('workspaceContains:package.json')$/;"	v
ext	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let ext = extensions.getExtension('test')$/;"	v
ext	.vim/plugged/coc.nvim/src/extensions.ts	/^            ext = createExtension(id, filename)$/;"	v
ext	.vim/plugged/coc.nvim/src/extensions.ts	/^    let ext: ExtensionExport$/;"	v
extended	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let extended = this.manager.getConfig<boolean>('extendedSearchMode', true)$/;"	v
extended	.vim/plugged/fzf/src/pattern.go	/^	extended      bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
extendedMatch	.vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) extendedMatch(item *Item, withPos bool, slab *util.Slab) ([]Offset, int, *[]in/;"	f	struct:fzf.Pattern	typeref:typename:([]Offset, int, *[]int)
extends	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^class OptionList extends BasicList {$/;"	v
extends	.vim/plugged/coc.nvim/tslint.json	/^  "extends": ".\/node_modules\/@chemzqm\/tslint-config\/tslint.json",$/;"	s
extension	.vim/plugged/coc.nvim/src/extensions.ts	/^      let extension = db ? db.extension : null$/;"	v
extension	.vim/plugged/coc.nvim/src/extensions.ts	/^    let extension: any = {$/;"	v
extension	.vim/plugged/coc.nvim/src/extensions.ts	/^    let { extension } = item$/;"	v
extension	.vim/plugged/coc.nvim/src/extensions.ts	/^  extension: Extension<API>$/;"	p	interface:ExtensionItem
extension	.vim/plugged/coc.nvim/src/sources.ts	/^      let extension: any = {$/;"	v
extensionFolder	.vim/plugged/coc.nvim/src/extensions.ts	/^const extensionFolder = global.hasOwnProperty('__TEST__') ? '' : 'node_modules'$/;"	C
extensionPath	.vim/plugged/coc.nvim/src/extensions.ts	/^          extensionPath: root,$/;"	v
extensionPath	.vim/plugged/coc.nvim/src/sources.ts	/^        extensionPath: filepath,$/;"	v
extensionPath	.vim/plugged/coc.nvim/src/types.ts	/^  extensionPath: string$/;"	p	interface:ExtensionContext
extensionPath	.vim/plugged/coc.nvim/src/types.ts	/^  readonly extensionPath: string$/;"	p	interface:Extension
extensionRoot	.vim/plugged/coc.nvim/src/types.ts	/^  readonly extensionRoot: string$/;"	p	interface:Env
extractColor	.vim/plugged/fzf/src/ansi.go	/^func extractColor(str string, state *ansiState, proc func(string, *ansiState) bool) (string, *[]/;"	f	package:fzf	typeref:typename:(string, *[]ansiOffset, *ansiState)
f	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map f <Plug>(easymotion-f)$/;"	m
f	.config/nvim/plugged/vim-easymotion/t/operator_pending_spec.vim	/^        omap f <Plug>(easymotion-f)$/;"	m
f	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  f = 102,$/;"	e	enum:CharCode
f/	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map f\/ <Plug>(easymotion-fn)$/;"	m
factory	.vim/plugged/coc.nvim/src/__tests__/client/delayer.test.ts	/^  let factory = () => {$/;"	v
factoryFactory	.vim/plugged/coc.nvim/src/__tests__/client/delayer.test.ts	/^  let factoryFactory = (n: number) => () => {$/;"	v
fail	.vim/plugged/fzf/bin/fzf-tmux	/^fail() {$/;"	f
false	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    if (!session) return false$/;"	v
false	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        return false$/;"	C
false	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    if (!document) return false$/;"	C
fast-diff	.config/nvim/plugged/coc.nvim/package.json	/^    "fast-diff": "^1.2.0",$/;"	s	object:dependencies
fast-diff	.vim/plugged/coc.nvim/package.json	/^    "fast-diff": "^1.2.0",$/;"	s	object:dependencies
fb-watchman	.config/nvim/plugged/coc.nvim/package.json	/^    "fb-watchman": "^2.0.0",$/;"	s	object:dependencies
fb-watchman	.vim/plugged/coc.nvim/package.json	/^    "fb-watchman": "^2.0.0",$/;"	s	object:dependencies
fd	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) fd() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
feBlend	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feBlend,$/;"	s
feColorMatrix	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feColorMatrix,$/;"	s
feComponentTransfer	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feComponentTransfer,$/;"	s
feComposite	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feComposite,$/;"	s
feConvolveMatrix	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feConvolveMatrix,$/;"	s
feDiffuseLighting	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feDiffuseLighting,$/;"	s
feDisplacementMap	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feDisplacementMap,$/;"	s
feDistantLight	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feDistantLight,$/;"	s
feDropShadow	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feDropShadow,$/;"	s
feFlood	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feFlood,$/;"	s
feFuncA	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feFuncA,$/;"	s
feFuncB	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feFuncB,$/;"	s
feFuncG	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feFuncG,$/;"	s
feFuncR	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feFuncR,$/;"	s
feGaussianBlur	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feGaussianBlur,$/;"	s
feImage	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feImage,$/;"	s
feMerge	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feMerge,$/;"	s
feMergeNode	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feMergeNode,$/;"	s
feMorphology	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feMorphology,$/;"	s
feOffset	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feOffset,$/;"	s
fePointLight	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^fePointLight,$/;"	s
feSpecularLighting	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feSpecularLighting,$/;"	s
feSpotLight	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feSpotLight,$/;"	s
feTile	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feTile,$/;"	s
feTurbulence	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^feTurbulence,$/;"	s
feature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        const feature = this._dynamicFeatures.get(registration.method)$/;"	C
feature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        const feature = this._dynamicFeatures.get(unregistration.method)$/;"	C
feature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    for (let feature of features) {$/;"	v
feature	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    for (let feature of this._features) {$/;"	v
feed	.vim/plugged/fzf/src/reader.go	/^func (r *Reader) feed(src io.Reader) {$/;"	f	struct:fzf.Reader
feedkeys	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def feedkeys(keys, mode='n'):$/;"	f
fetch	.vim/plugged/coc.nvim/install.sh	/^fetch() {$/;"	f
fetch	.vim/plugged/coc.nvim/src/model/db.ts	/^  public async fetch(key: string): Promise<any> {$/;"	m	class:DB
fetchContent	.vim/plugged/coc.nvim/src/model/document.ts	/^  public fetchContent: Function & { clear(): void }$/;"	p	class:Document
fetchContent	.vim/plugged/coc.nvim/src/model/memos.ts	/^  private fetchContent(id: string, key: string): any {$/;"	m	class:Memos
fetchSync	.vim/plugged/coc.nvim/src/model/db.ts	/^  public fetchSync(key: string): any {$/;"	m	class:DB
fetch_github	.config/nvim/plugged/html5.vim/Makefile	/^fetch_github = \\$/;"	m
fetch_local	.config/nvim/plugged/html5.vim/Makefile	/^fetch_local = @cp -v $(1) $(2) \\$/;"	m
fetch_snippets_from_dir	.config/nvim/plugged/ultisnips/utils/get_tm_snippets.py	/^def fetch_snippets_from_dir(path):$/;"	f
fetch_snippets_from_svn	.config/nvim/plugged/ultisnips/utils/get_tm_snippets.py	/^def fetch_snippets_from_svn(name):$/;"	f
fetch_url	.config/nvim/plugged/html5.vim/Makefile	/^fetch_url = \\$/;"	m
fetching	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^  private fetching: Set<number> = new Set()$/;"	p	class:CodeLensManager
fg	.vim/plugged/fzf/src/ansi.go	/^	fg   tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
fg	.vim/plugged/fzf/src/tui/light.go	/^	fg       Color$/;"	m	struct:tui.LightWindow	typeref:typename:Color
fg	.vim/plugged/fzf/src/tui/tui.go	/^	fg Color$/;"	m	struct:tui.ColorPair	typeref:typename:Color
field	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "field": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
field	.vim/plugged/coc.nvim/data/schema.json	/^        "field": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
fields	.vim/plugged/coc.nvim/src/languages.ts	/^      let fields = [item.detail || '', obj.abbr, obj.word]$/;"	v
file	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "file": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
file	.vim/plugged/coc.nvim/data/schema.json	/^        "file": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
file	.vim/plugged/coc.nvim/src/__tests__/client/changedFiles.test.ts	/^        let file = path.join(__dirname, 'test.js')$/;"	v
file	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let file = path.resolve(__dirname, '..\/sample\/tmp.js')$/;"	v
file	.vim/plugged/coc.nvim/src/__tests__/modules/task.test.ts	/^    let file = await createTmpFile('console.error("error")')$/;"	v
file	.vim/plugged/coc.nvim/src/__tests__/modules/task.test.ts	/^    let file = await createTmpFile('echo foo')$/;"	v
file	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let file = await createTmpFile('foo')$/;"	v
file	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let file = path.join(__dirname, 'foo')$/;"	v
file	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let file = path.join(cwd, 'a')$/;"	v
file	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let file = workspace.getConfigFile(ConfigurationTarget.Global)$/;"	v
file	.vim/plugged/coc.nvim/src/configuration/index.ts	/^          let file = this.workspaceConfigFile = this._proxy.workspaceConfigFile$/;"	v
file	.vim/plugged/coc.nvim/src/configuration/index.ts	/^        let file = path.join(folder, 'coc-settings.json')$/;"	v
file	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^        let [file, diagnostics] = item$/;"	v
file	.vim/plugged/coc.nvim/src/extensions.ts	/^      let file = path.join(stat.root, 'package.json')$/;"	v
file	.vim/plugged/coc.nvim/src/extensions.ts	/^    for (let file of files) {$/;"	v
file	.vim/plugged/coc.nvim/src/model/mru.ts	/^  private file: string$/;"	p	class:Mru
file	.vim/plugged/coc.nvim/src/types.ts	/^  file: string$/;"	p	interface:DiagnosticItem
file	.vim/plugged/coc.nvim/src/util/clean.ts	/^    for (let file of files) {$/;"	v
file	.vim/plugged/coc.nvim/src/workspace.ts	/^            let file = URI.parse(change.uri).fsPath$/;"	v
fileEvents	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let fileEvents = this._clientOptions.synchronize.fileEvents$/;"	v
fileSystemWatcher	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      let fileSystemWatcher = workspace.createFileSystemWatcher($/;"	v
file_contents	.config/nvim/plugged/switch.vim/spec/support/vim.rb	/^    def file_contents$/;"	f	module:Support.Vim
filename	.config/nvim/plugged/switch.vim/spec/plugin/regression_spec.rb	/^    def filename$/;"	f
filename	.vim/plugged/coc.nvim/src/extensions.ts	/^    let filename = path.basename(filepath)$/;"	v
filename	.vim/plugged/coc.nvim/src/extensions.ts	/^    let filename = path.join(root, packageJSON.main || 'index.js')$/;"	v
filename	.vim/plugged/coc.nvim/src/types.ts	/^  filename?: string$/;"	p	interface:QuickfixItem
filename	.vim/plugged/coc.nvim/src/util/factory.ts	/^    const args = [this.exports, require, this, filename, dirname]$/;"	C	function:compileInSandbox
filename	.vim/plugged/coc.nvim/src/workspace.ts	/^      filename: u.scheme == 'file' ? u.fsPath : uri,$/;"	v
filename	.vim/plugged/coc.nvim/webpack.config.js	/^    filename: 'index.js'$/;"	p	class:module.exports.output
filepath	.vim/plugged/coc.nvim/src/__tests__/modules/memos.test.ts	/^let filepath = path.join(os.tmpdir(), 'test')$/;"	v
filepath	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let filepath = findUp('package.json', __dirname)$/;"	v
filepath	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let filepath = findUp(['src'], __dirname)$/;"	v
filepath	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let filepath = URI.parse(doc.uri).fsPath$/;"	v
filepath	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let filepath = await createTmpFile('bar')$/;"	v
filepath	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let filepath = await createTmpFile('content')$/;"	v
filepath	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let filepath = await createTmpFile('quickfix')$/;"	v
filepath	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let filepath = await workspace.findUp('tsconfig.json')$/;"	v
filepath	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let filepath = path.join(__dirname, 'bar\/')$/;"	v
filepath	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let filepath = path.join(__dirname, 'foo')$/;"	v
filepath	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let filepath = path.join(__dirname, 'foo\/')$/;"	v
filepath	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let filepath = path.join(__dirname, 'not_exists')$/;"	v
filepath	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let filepath = path.join(__dirname, 'old')$/;"	v
filepath	.vim/plugged/coc.nvim/src/configuration/index.ts	/^        let filepath = u.fsPath$/;"	v
filepath	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let filepath = u.fsPath$/;"	v
filepath	.vim/plugged/coc.nvim/src/extensions.ts	/^    let filepath = path.join(this.root, 'db.json')$/;"	v
filepath	.vim/plugged/coc.nvim/src/handler/index.ts	/^  filepath?: string$/;"	p	interface:SymbolInfo
filepath	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let filepath = u.scheme == 'file' ? u.fsPath : u.toString()$/;"	v
filepath	.vim/plugged/coc.nvim/src/model/db.ts	/^    public readonly filepath: string$/;"	p	class:DB
filepath	.vim/plugged/coc.nvim/src/model/memos.ts	/^  constructor(private filepath: string) {$/;"	p	class:Memos
filepath	.vim/plugged/coc.nvim/src/model/source.ts	/^  public readonly filepath: string$/;"	p	class:Source
filepath	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^    let filepath = URI.parse(document.uri).fsPath$/;"	v
filepath	.vim/plugged/coc.nvim/src/types.ts	/^  filepath: string$/;"	p	interface:SourceStat
filepath	.vim/plugged/coc.nvim/src/types.ts	/^  filepath?: string$/;"	p	interface:ISource
filepath	.vim/plugged/coc.nvim/src/types.ts	/^  filepath?: string$/;"	p	interface:SourceConfig
filepath	.vim/plugged/coc.nvim/src/types.ts	/^  readonly filepath: string$/;"	p	interface:CompleteOption
filepath	.vim/plugged/coc.nvim/src/workspace.ts	/^      let filepath = path.join(os.tmpdir(), `coc-${process.pid}.vim`)$/;"	v
filepath	.vim/plugged/coc.nvim/src/workspace.ts	/^    let filepath = URI.parse(uri).fsPath$/;"	v
filepath	.vim/plugged/coc.nvim/src/workspace.ts	/^    let filepath = await this.nvim.call('expand', '%:p') as string$/;"	v
filepath	.vim/plugged/coc.nvim/src/workspace.ts	/^    let filepath = isParentFolder(cwd, newPath) ? path.relative(cwd, newPath) : newPath$/;"	v
filepath	.vim/plugged/coc.nvim/src/workspace.ts	/^    let filepath = path.join(root, name + '.json')$/;"	v
filepath	.vim/plugged/coc.nvim/src/workspace.ts	/^    let filepath = path.normalize(uri.fsPath)$/;"	v
filepath	.vim/plugged/coc.nvim/src/workspace.ts	/^    let filepath = u.scheme == 'file' ? u.fsPath : uri$/;"	v
files	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne
files	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:Autotrigger_CanMatchContext
files	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:Autotrigger_CanMatchPreviouslySelectedPlaceholder
files	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:Autotrigger_CanMatchSimpleTrigger
files	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:Autotrigger_WillProduceNoExceptionWithVimLowerThan214
files	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_ContextHasAccessToVisual
files	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_ContextIsClearedBeforeExpand
files	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_CursorIsZeroBased
files	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_DoNotExpandOnFalse
files	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_ExpandOnTrue
files	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_Header_DoNotExpandOnFalse
files	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_Header_ExpandOnTrue
files	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_PriorityKeyword
files	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_ReportError
files	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_ReportErrorOnIndexOutOfRange
files	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_SimpleSnippet
files	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_SnippetPriority
files	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ContextSnippets_UseContext
files	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_ClearAll
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_ClearOne
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_ClearTwo
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_ExtendsWithoutFiletype
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_Global_Local_Python
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_Global_Python
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_InvalidPriorityLine
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_InvalidPriorityLine1
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_MissingEndSnippet
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_MultiWord_NoContainer
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_MultiWord_Quotes
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_MultiWord_UnmatchedContainer
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_MultiWord_WithQuotes
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_PrintErroneousSnippet
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_PrintErroneousSnippetContext
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_PrintErroneousSnippetLocation
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_PrintErroneousSnippetPostAction
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_PrintErroneousSnippetPreAction
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_PrintPythonStacktrace
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_PrintPythonStacktraceMultiline
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_SimpleSnippet
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:ParseSnippets_UnknownDirective
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:_ParseSnippets_MultiWord
files	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:_ParseSnippets_MultiWord_RE
files	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:RecTabStops_ChildTriggerContainsParentTextObjects
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_Disabled
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_EmptyLinesContinueSnippets
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_Interpolation
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_InterpolationWithSystem
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_Issue658
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_MultiMatches
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_NoNestedTabstops
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_OverwrittenByRegExpTrigger
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_SimpleSnippet
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_TestMirrors
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_TestMirrorsInPlaceholders
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_TestMirrorsInPlaceholders_Overwrite
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_TestNoBraceTabstops
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_TestNoBraceTabstopsAndMirrors
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_.snippets': """$/;"	v	class:snipMate_Visual_Simple
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/_\/blub.snippets': """$/;"	v	class:snipMate_SimpleSnippetSubDirectory
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/a.snippets': """$/;"	v	class:snipMate_Extends
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = { 'snippets\/blubi.snippets': """$/;"	v	class:snipMate_OtherFiletype
files	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_SimpleSnippetInSnippetFile
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanEvenWrapSnippetInPreAction
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanExpandAnonOnPreExpand
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpAction
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanExpandAnonSnippetOnFirstJump
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanExpandSnippetInDifferentPlace
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanMirrorTabStopsOutsideOfSnippet
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanModifyParentBody
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanUseContextFromContextMatch
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_DoNotBreakCursorOnSingleLikeChange
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_EnsureIndent
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_ErrorOnBufferModificationThroughCommand
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_ErrorOnModificationSnippetLine
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_MoveParentSnippetFromChildInPreAction
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_MoveVisual
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_PostActionCanUseSnippetRange
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_PostActionModifiesBuffer
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_PostActionModifiesCharAfterSnippet
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_PostActionModifiesLineAfterSnippet
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_PreActionModifiesBuffer
files	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetActions_UseCorrectJumpActions
files	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetPriorities_AddedHasHigherThanFile
files	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded
files	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded_neg_prio
files	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_ClearedByChild
files	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_ClearedByParent
files	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_SimpleClear
files	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_SimpleClear2
files	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet
files	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    files = { 'us\/all.snippets': r"""$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE
files	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    files = {}$/;"	v	class:VimTestCase
files	.vim/plugged/coc.nvim/src/extensions.ts	/^    let files = await readdirAsync(folder)$/;"	v
files	.vim/plugged/coc.nvim/src/sources.ts	/^      let files = arr.map(s => path.join(folder, s))$/;"	v
files	.vim/plugged/coc.nvim/src/util/clean.ts	/^    let files = glob.sync(path.join(dir, '\/coc-*.sock'))$/;"	v
files	.vim/plugged/coc.nvim/src/watchman.ts	/^  files: FileChangeItem[]$/;"	p	interface:FileChange
files	tsconfig.json	/^  "files": [$/;"	a
filetype	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^        "filetype": "javascript",$/;"	s	object:contributes.rootPatterns.0
filetype	.vim/plugged/coc.nvim/src/__tests__/modules/floatBuffer.test.ts	/^      filetype: 'markdown',$/;"	v
filetype	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    for (let filetype of ['Error', 'Warning', 'Info', 'Hint']) {$/;"	v
filetype	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let filetype = document.filetype$/;"	v
filetype	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let filetype = await nvim.call('getbufvar', [bufnr, '&filetype'])$/;"	v
filetype	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let { bufname, filetype, sketch, lines, lnum } = options$/;"	v
filetype	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { version, uri, filetype } = this$/;"	v
filetype	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let filetype = await this.nvim.eval('&filetype') as string$/;"	v
filetype	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let filetype = fragment.filetype$/;"	v
filetype	.vim/plugged/coc.nvim/src/sources.ts	/^    let { filetype } = opt$/;"	v
filetype	.vim/plugged/coc.nvim/src/types.ts	/^  filetype: string$/;"	p	interface:BufferOption
filetype	.vim/plugged/coc.nvim/src/types.ts	/^  filetype: string$/;"	p	interface:CompleteOption
filetype	.vim/plugged/coc.nvim/src/types.ts	/^  filetype: string$/;"	p	interface:Documentation
filetype	.vim/plugged/coc.nvim/src/types.ts	/^  filetype: string$/;"	p	interface:Fragment
filetype	.vim/plugged/coc.nvim/src/types.ts	/^  filetype: string$/;"	p	interface:PreiewOptions
filetypeMap	.vim/plugged/coc.nvim/src/types.ts	/^  readonly filetypeMap: { [index: string]: string }$/;"	p	interface:Env
filetypedetect	.config/nvim/autoload/plug.vim	/^        augroup filetypedetect$/;"	a
filetypedetect	.vim/autoload/plug.vim	/^        augroup filetypedetect$/;"	a
filetypes	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "filetypes": {$/;"	o	object:definitions.languageServerBase.properties
filetypes	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "filetypes": {},$/;"	o	object:definitions.languageServerCommand.properties
filetypes	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "filetypes": {},$/;"	o	object:definitions.languageServerModule.properties
filetypes	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "filetypes": {},$/;"	o	object:definitions.languageServerSocket.properties
filetypes	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^    def filetypes(self):$/;"	m	class:VimBuffer
filetypes	.vim/plugged/coc.nvim/data/schema.json	/^        "filetypes": {$/;"	o	object:definitions.languageServerBase.properties
filetypes	.vim/plugged/coc.nvim/data/schema.json	/^        "filetypes": {},$/;"	o	object:definitions.languageServerCommand.properties
filetypes	.vim/plugged/coc.nvim/data/schema.json	/^        "filetypes": {},$/;"	o	object:definitions.languageServerModule.properties
filetypes	.vim/plugged/coc.nvim/data/schema.json	/^        "filetypes": {},$/;"	o	object:definitions.languageServerSocket.properties
filetypes	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let filetypes = workspace.filetypes$/;"	v
filetypes	.vim/plugged/coc.nvim/src/languages.ts	/^      filetypes: languageIds,$/;"	v
filetypes	.vim/plugged/coc.nvim/src/languages.ts	/^      let filetypes = config.get<string[]>('formatOnSaveFiletypes', [])$/;"	v
filetypes	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      let filetypes = docs.reduce((p, curr) => {$/;"	v
filetypes	.vim/plugged/coc.nvim/src/model/source.ts	/^  public get filetypes(): string[] | null {$/;"	m	class:Source
filetypes	.vim/plugged/coc.nvim/src/sources.ts	/^      let { filetypes } = source$/;"	v
filetypes	.vim/plugged/coc.nvim/src/sources.ts	/^      let { filetypes, enable } = source$/;"	v
filetypes	.vim/plugged/coc.nvim/src/sources.ts	/^      let { filetypes, triggerOnly, enable } = source$/;"	v
filetypes	.vim/plugged/coc.nvim/src/types.ts	/^  filetypes: string[]$/;"	p	interface:LanguageServerConfig
filetypes	.vim/plugged/coc.nvim/src/types.ts	/^  filetypes: string[]$/;"	p	interface:SourceStat
filetypes	.vim/plugged/coc.nvim/src/types.ts	/^  filetypes?: string[]$/;"	p	interface:ISource
filetypes	.vim/plugged/coc.nvim/src/types.ts	/^  readonly filetypes: Set<string>$/;"	p	interface:IWorkspace
filetypes	.vim/plugged/coc.nvim/src/workspace.ts	/^      let filetypes = config.get<string[]>('ignoredFiletypes', [])$/;"	v
filetypes	.vim/plugged/coc.nvim/src/workspace.ts	/^      let { filetypes, rootPatterns } = config$/;"	v
fill	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) fill(str string, onMove func()) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
fill	.vim/plugged/fzf/src/tui/tcell.go	/^func fill(x, y, w, h int, r rune) {$/;"	f	package:tui
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  fillClientCapabilities(capabilities: ClientCapabilities): void$/;"	m	interface:DynamicFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  fillClientCapabilities(capabilities: ClientCapabilities): void$/;"	m	interface:StaticFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:CodeActionFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:CodeLensFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:CompletionItemFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:DefinitionFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:DocumentFormattingFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:DocumentHighlightFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:DocumentLinkFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:DocumentOnTypeFormattingFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:DocumentRangeFormattingFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:DocumentSymbolFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:HoverFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:ReferencesFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:RenameFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:SignatureHelpFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:WorkspaceSymbolFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilities: ClientCapabilities): void {$/;"	m	class:DidCloseTextDocumentFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilities: ClientCapabilities): void {$/;"	m	class:DidOpenTextDocumentFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilities: ClientCapabilities): void {$/;"	m	class:DidSaveTextDocumentFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public fillClientCapabilities(capabilities: ClientCapabilities): void {$/;"	m	class:WillSaveFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:ColorProviderFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/configuration.ts	/^  public fillClientCapabilities(capabilities: ClientCapabilities): void {$/;"	m	class:ConfigurationFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/declaration.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:DeclarationFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:FoldingRangeFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/implementation.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:ImplementationFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities & SelectionRangeClientCapabiliti/;"	m	class:SelectionRangeFeature
fillClientCapabilities	.vim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^  public fillClientCapabilities(capabilites: ClientCapabilities): void {$/;"	m	class:TypeDefinitionFeature
fillInitializeParams	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  fillInitializeParams?: (params: InitializeParams) => void$/;"	p	interface:DynamicFeature
fillInitializeParams	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  fillInitializeParams?: (params: InitializeParams) => void$/;"	p	interface:StaticFeature
fillString	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) fillString(text string, pair ColorPair, a Attr) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
fill_in_whitespace	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text.py	/^def fill_in_whitespace(text):$/;"	f
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/filter.py	/^    def filter(self, context):$/;"	m	class:Base
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/abbr_word.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/relative_abbr.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/relative_word.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/cpsm.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/fuzzy.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/hide_hidden_files.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/ignore_current_buffer.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/ignore_globs.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/project_files.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/regexp.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/substring.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/rank.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/reverse.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/word.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^filter,$/;"	s
filter	.vim/plugged/coc.nvim/src/types.ts	/^  filter?: string$/;"	p	interface:PopupOptions
filter	.vim/plugged/coc.nvim/src/util/match.ts	/^    for (const filter of selector) {$/;"	C	function:score
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/base/filter.py	/^    def filter(self, context):$/;"	m	class:Base
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/abbr_word.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/relative_abbr.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/converter/relative_word.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/cpsm.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/fuzzy.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/hide_hidden_files.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/ignore_current_buffer.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/ignore_globs.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/project_files.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/regexp.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/matcher/substring.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/rank.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/reverse.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^    def filter(self, context):$/;"	m	class:Filter
filter	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/word.py	/^    def filter(self, context):$/;"	m	class:Filter
filterLabel	.vim/plugged/coc.nvim/src/list/worker.ts	/^            let idx = ignorecase ? filterLabel.toLowerCase().indexOf(input.toLowerCase()) : filt/;"	v
filterLabel	.vim/plugged/coc.nvim/src/list/worker.ts	/^          let filterLabel = getFilterLabel(item)$/;"	v
filterLabel	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let filterLabel = getFilterLabel(item)$/;"	v
filterLabel	.vim/plugged/coc.nvim/src/list/worker.ts	/^  filterLabel: string$/;"	p	interface:ExtendedItem
filterLinkHints	vimium-options.json	/^  "filterLinkHints": false,$/;"	b
filterText	.vim/plugged/coc.nvim/src/languages.ts	/^      filterText: item.filterText || label,$/;"	v
filterText	.vim/plugged/coc.nvim/src/list/worker.ts	/^          let filterText = item.filterText || item.label$/;"	v
filterText	.vim/plugged/coc.nvim/src/types.ts	/^  filterText?: string$/;"	p	interface:ListItem
filterText	.vim/plugged/coc.nvim/src/types.ts	/^  filterText?: string$/;"	p	interface:VimCompleteItem
filterWords	.vim/plugged/coc.nvim/src/model/source.ts	/^  protected filterWords(words: string[], opt: CompleteOption): string[] {$/;"	m	class:Source
filter_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def filter_candidates(self, context):$/;"	m	class:Child
filter_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def filter_candidates(self, context):$/;"	m	class:_Parent
filter_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/menu.py	/^    def filter_candidates(self, candidates, filetype=None):$/;"	m	class:Source
filter_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def filter_candidates(self, context):$/;"	m	class:Child
filter_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def filter_candidates(self, context):$/;"	m	class:_Parent
filter_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/menu.py	/^    def filter_candidates(self, candidates, filetype=None):$/;"	m	class:Source
filtered	.vim/plugged/coc.nvim/src/list/worker.ts	/^        items: sort ? filtered.sort((a, b) => b.recentScore - a.recentScore) : filtered,$/;"	v
filtered	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let filtered = items.slice()$/;"	v
filtered	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let filtered: ListItem[] | ExtendedItem[]$/;"	v
filtered	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let filtered = placeholders.filter(o => !o.transform)$/;"	v
fin	.vim/plugged/fzf/src/reader.go	/^func (r *Reader) fin(success bool) {$/;"	f	struct:fzf.Reader
final	.vim/plugged/fzf/src/matcher.go	/^	final   bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
final	.vim/plugged/fzf/src/merger.go	/^	final   bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
finalize	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_base.py	/^def finalize(all_tokens, seen_ts, snippet_instance):$/;"	f
find	.vim/plugged/coc.nvim/src/__tests__/list/location.test.ts	/^    let find = matches.find(o => o.group == 'Search')$/;"	v
find	.vim/plugged/coc.nvim/src/list/configuration.ts	/^    if (find) return find$/;"	C
find	.vim/plugged/coc.nvim/src/list/configuration.ts	/^    let find = validKeys.find(s => s.toLowerCase() == key.toLowerCase())$/;"	C
find	.vim/plugged/coc.nvim/src/list/mappings.ts	/^          let find = false$/;"	v
findAnsiStart	.vim/plugged/fzf/src/ansi.go	/^func findAnsiStart(str string) int {$/;"	f	package:fzf	typeref:typename:int
findFirstMatch	.vim/plugged/fzf/src/terminal.go	/^func findFirstMatch(pattern string, str string) int {$/;"	f	package:fzf	typeref:typename:int
findHighlightTypes	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def findHighlightTypes():$/;"	f
findImplementations	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def findImplementations():$/;"	f
findLastMatch	.vim/plugged/fzf/src/terminal.go	/^func findLastMatch(pattern string, str string) int {$/;"	f	package:fzf	typeref:typename:int
findLocations	.vim/plugged/coc.nvim/src/plugin.ts	/^  public async findLocations(id: string, method: string, params: any, openCommand?: string | fal/;"	m	class:Plugin
findMembers	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def findMembers():$/;"	f
findOffset	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f	struct:tui.LightRenderer	typeref:typename:(row int, col int)
findSymbols	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def findSymbols(filter=''):$/;"	f
findUp	.vim/plugged/coc.nvim/src/types.ts	/^  findUp(filename: string | string[]): Promise<string | null>$/;"	m	interface:IWorkspace
findUp	.vim/plugged/coc.nvim/src/util/fs.ts	/^export function findUp(name: string | string[], cwd: string): string {$/;"	f
findUsages	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def findUsages():$/;"	f
find_all_snippet_files	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^def find_all_snippet_files(ft):$/;"	f
find_end_of_match	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/rank.py	/^def find_end_of_match(to_match, chars, first_index):$/;"	f
find_end_of_match	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/rank.py	/^def find_end_of_match(to_match, chars, first_index):$/;"	f
find_free_port	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def find_free_port():$/;"	f
find_free_port	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^def find_free_port():$/;"	f
find_parent_for_new_to	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def find_parent_for_new_to(self, pos):$/;"	m	class:EditableTextObject
find_rplugins	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def find_rplugins(context, source, loaded_paths):$/;"	f
find_rplugins	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def find_rplugins(context, source, loaded_paths):$/;"	f
find_snippet_files	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^def find_snippet_files(ft, directory):$/;"	f
fireContentChanges	.vim/plugged/coc.nvim/src/model/document.ts	/^  public fireContentChanges: Function & { clear(): void }$/;"	p	class:Document
first	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const [first, second] = placeholders$/;"	C
first	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let [first, second] = snippet.placeholders$/;"	v
first	.vim/plugged/coc.nvim/src/commands.ts	/^    let first = mruList[0]$/;"	v
first	.vim/plugged/coc.nvim/src/configuration/util.ts	/^    const value = valueTree[first]$/;"	C	function:doRemoveFromValueTree
first	.vim/plugged/coc.nvim/src/configuration/util.ts	/^  const first = segments.shift()$/;"	C	function:doRemoveFromValueTree
first	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let first = this.tmSnippet.insertSnippet(snippet, placeholder.id, editRange)$/;"	v
firstKey	.vim/plugged/fzf/src/options.go	/^func firstKey(keymap map[int]string) int {$/;"	f	package:fzf	typeref:typename:int
firstMatch	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^      firstMatch: false,$/;"	v
firstMatch	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^      firstMatch: false,$/;"	v
firstMatch	.vim/plugged/coc.nvim/src/model/source.ts	/^  public get firstMatch(): boolean {$/;"	m	class:Source
firstMatch	.vim/plugged/coc.nvim/src/types.ts	/^  firstMatch?: boolean$/;"	p	interface:ISource
firstline	.vim/plugged/coc.nvim/src/types.ts	/^  firstline?: number$/;"	p	interface:PopupOptions
fish	.vim/plugged/fzf/test/test_go.rb	/^    def fish$/;"	S	class:Shell
fixDocumentation	.vim/plugged/coc.nvim/src/languages.ts	/^function fixDocumentation(str: string): string {$/;"	f
fixInsertedWord	.vim/plugged/coc.nvim/src/types.ts	/^  fixInsertedWord: boolean$/;"	p	interface:CompleteConfig
fixKey	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  public fixKey(key: string): string {$/;"	C
fixStartcol	.vim/plugged/coc.nvim/src/model/source.ts	/^  protected fixStartcol(opt: CompleteOption, valids: string[]): number {$/;"	m	class:Source
fix_usings	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def fix_usings():$/;"	f
fixed	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		    fixed        = css(elem, "position") == "fixed";$/;"	v
fixed	.vim/plugged/coc.nvim/src/types.ts	/^  fixed?: boolean$/;"	p	interface:PopupOptions
fixup	.config/nvim/plugged/ultisnips/utils/get_tm_snippets.py	/^    def fixup(m):$/;"	f	function:unescape	file:
flags	.vim/plugged/coc.nvim/src/list/worker.ts	/^        let flags = ignorecase ? 'iu' : 'u'$/;"	v
flatMap	.vim/plugged/coc.nvim/src/util/array.ts	/^export const flatMap = <T, U>(xs: T[], f: (item: T) => U[]): U[] =>$/;"	C	function:group
flatten_test_suite	.config/nvim/plugged/ultisnips/test_all.py	/^    def flatten_test_suite(suite):$/;"	f
flip	.vim/plugged/coc.nvim/src/types.ts	/^  flip?: boolean$/;"	p	interface:PopupOptions
floatBuffer	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  private floatBuffer: FloatBuffer$/;"	p	class:Floating
floatBuffer	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let { floatBuffer, nvim, window } = this$/;"	v
floatFactory	.vim/plugged/coc.nvim/src/__tests__/modules/floatFactory.test.ts	/^let floatFactory: FloatFactory$/;"	v
floatWin	.vim/plugged/coc.nvim/src/__tests__/completion/float.test.ts	/^    let floatWin = await helper.getFloat()$/;"	v
floating	.vim/plugged/coc.nvim/src/completion/index.ts	/^  private floating: Floating$/;"	p	class:Completion
floating	.vim/plugged/coc.nvim/src/types.ts	/^  readonly floating: boolean$/;"	p	interface:Env
flow_elements	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let flow_elements = phrasing_elements + ['p', 'hr', 'pre', 'ul', 'ol', 'dl', 'div', 'h1', 'h2', /;"	v
flush	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) flush() {$/;"	f	unknown:tui.LightRenderer
fn	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, ret, fn = jQuery.isFunction( elem[ type ] || null ),$/;"	v
fn	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	jQuery.fn[ name ] = function( selector ) {$/;"	f	function:jQuery
fn	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def fn(self):  # pylint:disable=no-self-use,invalid-name$/;"	m	class:SnippetUtil
fn	.vim/plugged/coc.nvim/src/__tests__/modules/attach.test.ts	/^    let fn = jest.fn()$/;"	v
fn	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let fn = (completion as any)._doComplete$/;"	v
fn	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let fn = jest.fn()$/;"	v
fn	.vim/plugged/coc.nvim/src/__tests__/modules/sources.test.ts	/^    let fn = jest.fn()$/;"	v
fn	.vim/plugged/coc.nvim/src/__tests__/modules/task.test.ts	/^    let fn = jest.fn()$/;"	v
fn	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^    let fn = jest.fn()$/;"	v
fn	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let fn = () => {$/;"	v
fn	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let fn = jest.fn()$/;"	v
fn	.vim/plugged/coc.nvim/src/list/mappings.ts	/^      let fn = this.insertMappings.get(key)$/;"	v
fn	.vim/plugged/coc.nvim/src/list/mappings.ts	/^      let fn = this.normalMappings.get(key)$/;"	v
fn	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let fn = workspace.isVim ? 'coc#list#prompt_start' : 'coc#list#start_prompt'$/;"	v
fn	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^    for (let fn of callbacks) {$/;"	v
fn	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^    let fn = (event: TextDocumentWillSaveEvent): Promise<void> => {$/;"	v
fn	.vim/plugged/coc.nvim/src/sources.ts	/^      for (let fn of ['init', 'complete']) {$/;"	v
fn	.vim/plugged/coc.nvim/src/util/callSequence.ts	/^      for (let fn of this.funcs) {$/;"	v
fn	.vim/plugged/coc.nvim/src/util/throttle.ts	/^  function fn(): any {$/;"	f
fns	.vim/plugged/coc.nvim/src/sources.ts	/^      let fns = await nvim.call('coc#util#remote_fns', name) as string[]$/;"	v
focus	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def focus(self, title=None):$/;"	m	class:VimInterfaceWindows
folder	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "folder": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
folder	.vim/plugged/coc.nvim/data/schema.json	/^        "folder": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
folder	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let folder = path.resolve(__dirname, '..\/extensions\/local')$/;"	v
folder	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let folder = path.resolve(__dirname, '..\/extensions\/test')$/;"	v
folder	.vim/plugged/coc.nvim/src/configuration/index.ts	/^            let folder = path.dirname(file)$/;"	v
folder	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      let folder = findUp('.vim', rootPath)$/;"	v
folder	.vim/plugged/coc.nvim/src/extensions.ts	/^      let folder = path.join(this.root, extensionFolder, id)$/;"	v
folder	.vim/plugged/coc.nvim/src/extensions.ts	/^    let folder = path.join(process.env.VIMCONFIG, 'coc-extensions')$/;"	v
folder	.vim/plugged/coc.nvim/src/extensions.ts	/^    let folder = path.join(this.root, extensionFolder, id)$/;"	v
folder	.vim/plugged/coc.nvim/src/sources.ts	/^    let folder = path.join(pluginPath, 'autoload\/coc\/source')$/;"	v
folder	.vim/plugged/coc.nvim/src/workspace.ts	/^      let folder = this._workspaceFolders[idx]$/;"	v
folders	.vim/plugged/coc.nvim/src/commands.ts	/^        let folders = workspace.workspaceFolders$/;"	v
folders	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let { folders } = this$/;"	v
folders	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    return folders.findIndex(f => isParentFolder(f, filepath)) !== -1$/;"	v
folders	.vim/plugged/coc.nvim/src/extensions.ts	/^          let folders = workspace.workspaceFolders.map(o => URI.parse(o.uri).fsPath)$/;"	v
foldmarker	.config/nvim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def foldmarker():$/;"	f
foldmarker	.vim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def foldmarker():$/;"	f
foldmethod	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let foldmethod = await win.getOption('foldmethod')$/;"	v
foo	.config/nvim/plugged/vim-ruby/spec/indent/basic_spec.rb	/^      def foo$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/indent/blocks_spec.rb	/^      def foo$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/indent/blocks_spec.rb	/^      def foo(job)$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/indent/continuations_spec.rb	/^      def foo$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/syntax/methods_spec.rb	/^      def foo bar$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/syntax/methods_spec.rb	/^      def foo bar:; end$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/syntax/methods_spec.rb	/^      def foo bar=:baz$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^          def foo &bar$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo **bar$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo *bar$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(&bar)$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(*)$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(**)$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(**bar)$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(*bar)$/;"	f
foo	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^        def foo(bar,$/;"	f
foo.bar	.vim/plugged/coc.nvim/src/__tests__/modules/settings.json	/^  "foo.bar": 1,$/;"	n
forEach	.vim/plugged/coc.nvim/src/types.ts	/^  forEach(callback: (uri: string, diagnostics: Diagnostic[], collection: DiagnosticCollection) =/;"	m	interface:DiagnosticCollection
forceBlack	.vim/plugged/fzf/src/tui/light.go	/^	forceBlack    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
forceBlack	.vim/plugged/fzf/src/tui/tui.go	/^	forceBlack   bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
forceConsistentCasingInFileNames	.vim/plugged/coc.nvim/tsconfig.json	/^    "forceConsistentCasingInFileNames": true,$/;"	b	object:compilerOptions
foreground	.vim/plugged/coc.nvim/src/list/ui.ts	/^        let foreground = key[0].toUpperCase() + key.slice(1)$/;"	v
foreground	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let { foreground, background } = item$/;"	v
foreground	.vim/plugged/coc.nvim/src/types.ts	/^  foreground?: string$/;"	p	interface:AnsiItem
foregroundColor	.vim/plugged/coc.nvim/src/list/ui.ts	/^        let foregroundColor = map[key]$/;"	v
foregroundColors	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^const foregroundColors = {$/;"	C
foreignObject	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^foreignObject,$/;"	s
formatOnType	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let { triggerSignatureHelp, triggerSignatureWait, formatOnType } = this.preferences$/;"	v
formatOnType	.vim/plugged/coc.nvim/src/handler/index.ts	/^  formatOnType: boolean$/;"	p	interface:Preferences
formatOptions	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    const formatOptions = await workspace.getFormatOptions(this.document.uri)$/;"	C
formatOpts	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^    let formatOpts = await workspace.getFormatOptions(document.uri)$/;"	v
formatPathForClient	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^def formatPathForClient(ctx, filepath):$/;"	f
formatPathForServer	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^def formatPathForServer(ctx, filepath):$/;"	f
formatUri	.vim/plugged/coc.nvim/src/list/source/links.ts	/^function formatUri(uri: string): string {$/;"	f
forward	.vim/plugged/fzf/src/pattern.go	/^	forward       bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
found	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let found = false$/;"	v
fragment	.vim/plugged/coc.nvim/src/__tests__/modules/floatBuffer.test.ts	/^    let fragment: Fragment = {$/;"	v
fragments	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let fragments = this.calculateFragments(docs, maxWidth)$/;"	v
frames	.vim/plugged/coc.nvim/src/list/worker.ts	/^const frames = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏']$/;"	C
frames	.vim/plugged/coc.nvim/src/model/status.ts	/^const frames = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏']$/;"	C
fromKeywordOption	.vim/plugged/coc.nvim/src/model/chars.ts	/^  public static fromKeywordOption(keywordOption: string): Range[] {$/;"	m	class:Range
from_client	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^    def from_client(msg):$/;"	f
fsPath	.vim/plugged/coc.nvim/src/list/worker.ts	/^              let fsPath = URI.parse(uri).fsPath$/;"	v
ft	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def ft(self):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
ft	.vim/plugged/coc.nvim/src/completion/complete.ts	/^        let ft = setTimeout(() => {$/;"	v
fullpath	.vim/plugged/coc.nvim/src/types.ts	/^  fullpath: string$/;"	p	interface:BufferOption
fullscreen	.vim/plugged/fzf/src/terminal.go	/^	fullscreen bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
fullscreen	.vim/plugged/fzf/src/tui/light.go	/^	fullscreen    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
func	.config/nvim/plugged/sideways.vim/spec/plugin/textobj_spec.rb	/^        def func(changed, three):$/;"	f	method:func
func	.config/nvim/plugged/sideways.vim/spec/plugin/textobj_spec.rb	/^        def func(one):$/;"	f	method:func.func
func	.config/nvim/plugged/sideways.vim/spec/plugin/textobj_spec.rb	/^        def func(one, changed):$/;"	f	method:func.func.func
func	.config/nvim/plugged/sideways.vim/spec/plugin/textobj_spec.rb	/^        def func(one, changed, three):$/;"	f	method:func.func
func	.config/nvim/plugged/sideways.vim/spec/plugin/textobj_spec.rb	/^        def func(one, three):$/;"	f	method:func
func	.config/nvim/plugged/sideways.vim/spec/plugin/textobj_spec.rb	/^        def func(one, two):$/;"	f	method:func.func
func	.config/nvim/plugged/sideways.vim/spec/plugin/textobj_spec.rb	/^        def func(one, two, three):$/;"	f
func	.config/nvim/plugged/sideways.vim/spec/plugin/textobj_spec.rb	/^        def func(two, three):$/;"	f
func	.vim/plugged/coc.nvim/src/util/is.ts	/^export function func(value: any): value is Function {$/;"	f
funcs	.vim/plugged/coc.nvim/src/util/callSequence.ts	/^  private funcs: Set<Function> = new Set()$/;"	p	class:CallSequence
function	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "function": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
function	.config/nvim/plugged/sideways.vim/examples/example.py	/^def function(one, [1, 2, 3], two):$/;"	f
function	.config/nvim/plugged/sideways.vim/examples/example.py	/^def function(one, three, two$/;"	f
function	.config/nvim/plugged/sideways.vim/examples/example.py	/^def function(three, one, two):$/;"	f
function	.config/nvim/plugged/sideways.vim/spec/plugin/haml_spec.rb	/^      def function(one, two, three):$/;"	f
function	.config/nvim/plugged/sideways.vim/spec/plugin/jumping_spec.rb	/^      def function(One, Two, Three):$/;"	f	method:function.function
function	.config/nvim/plugged/sideways.vim/spec/plugin/jumping_spec.rb	/^      def function(One, Two, Three):$/;"	f	method:function.function.function.function
function	.config/nvim/plugged/sideways.vim/spec/plugin/jumping_spec.rb	/^      def function(one, Two, Three):$/;"	f	method:function
function	.config/nvim/plugged/sideways.vim/spec/plugin/jumping_spec.rb	/^      def function(one, Two, Three):$/;"	f	method:function.function.function
function	.config/nvim/plugged/sideways.vim/spec/plugin/jumping_spec.rb	/^      def function(one, Two, three):$/;"	f	method:function.function
function	.config/nvim/plugged/sideways.vim/spec/plugin/jumping_spec.rb	/^      def function(one, two, Three):$/;"	f
function	.config/nvim/plugged/sideways.vim/spec/plugin/jumping_spec.rb	/^      def function(one, two, three):$/;"	f
function	.config/nvim/plugged/sideways.vim/spec/plugin/python_functions_spec.rb	/^      def function( one, two, three ):$/;"	f	method:function.function.function.function.function
function	.config/nvim/plugged/sideways.vim/spec/plugin/python_functions_spec.rb	/^      def function( two, one, three ):$/;"	f	method:function.function.function.function.function.function
function	.config/nvim/plugged/sideways.vim/spec/plugin/python_functions_spec.rb	/^      def function(one, three, two):$/;"	f	method:function.function
function	.config/nvim/plugged/sideways.vim/spec/plugin/python_functions_spec.rb	/^      def function(one, three, two):$/;"	f	method:function.function.function.function
function	.config/nvim/plugged/sideways.vim/spec/plugin/python_functions_spec.rb	/^      def function(one, two, three$/;"	f	method:function.function.function.function
function	.config/nvim/plugged/sideways.vim/spec/plugin/python_functions_spec.rb	/^      def function(one, two, three):$/;"	f
function	.config/nvim/plugged/sideways.vim/spec/plugin/python_functions_spec.rb	/^      def function(three, one, two):$/;"	f	method:function
function	.config/nvim/plugged/sideways.vim/spec/plugin/python_functions_spec.rb	/^      def function(three, two, one):$/;"	f
function	.config/nvim/plugged/sideways.vim/spec/plugin/python_functions_spec.rb	/^      def function(two, one, three$/;"	f	method:function.function.function.function.function
function	.config/nvim/plugged/sideways.vim/spec/plugin/python_functions_spec.rb	/^      def function(two, one, three):$/;"	f	method:function.function
function	.config/nvim/plugged/sideways.vim/spec/plugin/python_functions_spec.rb	/^      def function(two, three, one):$/;"	f	method:function.function.function
function	.vim/plugged/coc.nvim/data/schema.json	/^        "function": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
function	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^async function createDiagnosticBuffer(): Promise<DiagnosticBuffer> {$/;"	C
function	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^export function ansiparse(str: string): AnsiItem[] {$/;"	C
function	.vim/plugged/coc.nvim/src/util/complete.ts	/^export function getPosition(opt: CompleteOption): Position {$/;"	C
functionName	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let functionName = ''$/;"	v
fuzzy	.vim/plugged/fzf/src/pattern.go	/^	fuzzy         bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
fuzzyAlgo	.vim/plugged/fzf/src/pattern.go	/^	fuzzyAlgo     algo.Algo$/;"	m	struct:fzf.Pattern	typeref:typename:algo.Algo
fx	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.fx.prototype = {$/;"	c	class:jQuery
fzf	.vim/plugged/fzf/man/man1/fzf.1	/^.TH fzf 1 "Mar 2019" "fzf 0.18.0" "fzf - a command-line fuzzy finder"$/;"	t
fzf	.vim/plugged/fzf/src/ansi.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/ansi_test.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/cache.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/cache_test.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/chunklist.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/chunklist_test.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/constants.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/core.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/history.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/history_test.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/item.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/item_test.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/matcher.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/merger.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/merger_test.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/options.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/options_test.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/pattern.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/pattern_test.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/reader.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/reader_test.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/result.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/result_others.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/result_test.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/result_x86.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/terminal.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/terminal_test.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/terminal_unix.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/terminal_windows.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/tokenizer.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/src/tokenizer_test.go	/^package fzf$/;"	p
fzf	.vim/plugged/fzf/test/test_go.rb	/^  def fzf(*opts)$/;"	f	class:TestBase
fzf :heart: vim	.config/nvim/plugged/fzf.vim/README.md	/^fzf :heart: vim$/;"	c
fzf inside terminal buffer	.vim/plugged/fzf/README-VIM.md	/^fzf inside terminal buffer$/;"	s
fzf!	.vim/plugged/fzf/test/test_go.rb	/^  def fzf!(*opts)$/;"	f	class:TestBase
fzf#OmniSharp#FindSymbols	.vim/plugged/omnisharp-vim/autoload/fzf/OmniSharp.vim	/^function! fzf#OmniSharp#FindSymbols(quickfixes) abort$/;"	f
fzf#OmniSharp#GetCodeActions	.vim/plugged/omnisharp-vim/autoload/fzf/OmniSharp.vim	/^function! fzf#OmniSharp#GetCodeActions(mode, actions) abort$/;"	f
fzf#complete	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^function! fzf#complete(...)$/;"	f
fzf#run	.vim/plugged/fzf/plugin/fzf.vim	/^function! fzf#run(...) abort$/;"	f
fzf#shellescape	.vim/plugged/fzf/plugin/fzf.vim	/^function! fzf#shellescape(arg, ...)$/;"	f
fzf#vim#_lines	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_lines(all)$/;"	f
fzf#vim#_uniq	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_uniq(list)$/;"	f
fzf#vim#ag	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag(query, ...)$/;"	f
fzf#vim#ag_raw	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag_raw(command_suffix, ...)$/;"	f
fzf#vim#buffer_commits	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_commits(...)$/;"	f
fzf#vim#buffer_lines	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_lines(...)$/;"	f
fzf#vim#buffer_tags	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_tags(query, ...)$/;"	f
fzf#vim#buffers	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffers(...)$/;"	f
fzf#vim#colors	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#colors(...)$/;"	f
fzf#vim#command_history	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#command_history(...)$/;"	f
fzf#vim#commands	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commands(...)$/;"	f
fzf#vim#commits	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commits(...)$/;"	f
fzf#vim#complete	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#complete(...)$/;"	f
fzf#vim#complete#buffer_line	.config/nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#buffer_line(...)$/;"	f
fzf#vim#complete#line	.config/nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#line(...)$/;"	f
fzf#vim#complete#path	.config/nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#path(command, ...)$/;"	f
fzf#vim#complete#word	.config/nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#word(...)$/;"	f
fzf#vim#files	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#files(dir, ...)$/;"	f
fzf#vim#filetypes	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#filetypes(...)$/;"	f
fzf#vim#gitfiles	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#gitfiles(args, ...)$/;"	f
fzf#vim#grep	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep(grep_command, with_column, ...)$/;"	f
fzf#vim#helptags	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#helptags(...)$/;"	f
fzf#vim#history	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#history(...)$/;"	f
fzf#vim#lines	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#lines(...)$/;"	f
fzf#vim#locate	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#locate(query, ...)$/;"	f
fzf#vim#maps	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#maps(mode, ...)$/;"	f
fzf#vim#marks	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#marks(...)$/;"	f
fzf#vim#search_history	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#search_history(...)$/;"	f
fzf#vim#snippets	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#snippets(...)$/;"	f
fzf#vim#tags	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#tags(query, ...)$/;"	f
fzf#vim#windows	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#windows(...)$/;"	f
fzf#vim#with_preview	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#with_preview(...)$/;"	f
fzf#wrap	.vim/plugged/fzf/plugin/fzf.vim	/^function! fzf#wrap(...)$/;"	f
fzf-cd-widget	.vim/plugged/fzf/shell/key-bindings.zsh	/^fzf-cd-widget() {$/;"	f
fzf-completion	.vim/plugged/fzf/shell/completion.zsh	/^fzf-completion() {$/;"	f
fzf-file-widget	.vim/plugged/fzf/shell/key-bindings.bash	/^fzf-file-widget() {$/;"	f
fzf-file-widget	.vim/plugged/fzf/shell/key-bindings.zsh	/^fzf-file-widget() {$/;"	f
fzf-history-widget	.vim/plugged/fzf/shell/key-bindings.zsh	/^fzf-history-widget() {$/;"	f
fzf-redraw-prompt	.vim/plugged/fzf/shell/key-bindings.zsh	/^fzf-redraw-prompt() {$/;"	f
fzf-tmux	.vim/plugged/fzf/man/man1/fzf-tmux.1	/^.TH fzf-tmux 1 "Mar 2019" "fzf 0.18.0" "fzf-tmux - open fzf in tmux split pane"$/;"	t
fzf.on_exit	.vim/plugged/fzf/plugin/fzf.vim	/^      function! fzf.on_exit(job_id, exit_status, event) dict$/;"	f
fzf.on_exit	.vim/plugged/fzf/plugin/fzf.vim	/^  function! fzf.on_exit(id, code, ...)$/;"	f
fzf.switch_back	.vim/plugged/fzf/plugin/fzf.vim	/^  function! fzf.switch_back(inplace)$/;"	f
fzf_buffers	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^augroup fzf_buffers$/;"	a
fzf_popd	.vim/plugged/fzf/plugin/fzf.vim	/^augroup fzf_popd$/;"	a
fzf_swap	.vim/plugged/fzf/plugin/fzf.vim	/^    augroup fzf_swap$/;"	a
g	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^g,$/;"	s
g	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  g = 103,$/;"	e	enum:CharCode
g:	.config/nvim/plugged/emmet-vim/unittest.vim	/^            let g:[opt] = oldoptions[opt]$/;"	v
g:	.config/nvim/plugged/emmet-vim/unittest.vim	/^          let g:[opt] = options[opt]$/;"	v
g:	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:[newname] = g:[key]$/;"	v
g:Abolish	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^      let g:Abolish.Coercions.l = s:function('s:abolish_l')$/;"	v
g:Abolish	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^      let g:Abolish.Coercions.t = s:function('s:abolish_t')$/;"	v
g:CtrlSpaceStatuslineFunction	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^  let g:CtrlSpaceStatuslineFunction = "airline#extensions#ctrlspace#statusline()"$/;"	v
g:EasyMotion_add_search_history	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_add_search_history = get(g: , 'EasyMotion_add_search_history' , 1)$/;"	v
g:EasyMotion_command_line_key_mappings	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_command_line_key_mappings =$/;"	v
g:EasyMotion_cursor_highlight	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_cursor_highlight   = get(g: , 'EasyMotion_cursor_highlight'   , 1)$/;"	v
g:EasyMotion_disable_two_key_combo	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_disable_two_key_combo     =$/;"	v
g:EasyMotion_do_mapping	.config/nvim/configs/plugins.vim	/^let g:EasyMotion_do_mapping = 0 " Disable default mappings$/;"	v
g:EasyMotion_do_mapping	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_do_mapping         = get(g: , 'EasyMotion_do_mapping'         , 1)$/;"	v
g:EasyMotion_do_shade	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_do_shade           = get(g: , 'EasyMotion_do_shade'           , 1)$/;"	v
g:EasyMotion_enter_jump_first	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_enter_jump_first   = get(g: , 'EasyMotion_enter_jump_first'   , 0)$/;"	v
g:EasyMotion_force_csapprox	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_force_csapprox     = get(g: , 'EasyMotion_force_csapprox'     , 0)$/;"	v
g:EasyMotion_grouping	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_grouping           = get(g: , 'EasyMotion_grouping'           , 1)$/;"	v
g:EasyMotion_hl2_first_group_target	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let g:EasyMotion_hl2_first_group_target  = get(g:,$/;"	v
g:EasyMotion_hl2_second_group_target	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let g:EasyMotion_hl2_second_group_target = get(g:,$/;"	v
g:EasyMotion_hl_group_shade	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let g:EasyMotion_hl_group_shade          = get(g:,$/;"	v
g:EasyMotion_hl_group_target	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let g:EasyMotion_hl_group_target         = get(g:,$/;"	v
g:EasyMotion_hl_inc_cursor	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let g:EasyMotion_hl_inc_cursor     = get(g:,$/;"	v
g:EasyMotion_hl_inc_search	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let g:EasyMotion_hl_inc_search     = get(g:,$/;"	v
g:EasyMotion_hl_move	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let g:EasyMotion_hl_move           = get(g:,$/;"	v
g:EasyMotion_ignore_exception	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^    let g:EasyMotion_ignore_exception = 0$/;"	v
g:EasyMotion_inc_highlight	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_inc_highlight      = get(g: , 'EasyMotion_inc_highlight'      , 1)$/;"	v
g:EasyMotion_keys	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_keys               = get(g:,$/;"	v
g:EasyMotion_keys	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^        let g:EasyMotion_keys = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'$/;"	v
g:EasyMotion_keys	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let g:EasyMotion_keys = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'$/;"	v
g:EasyMotion_keys	.config/nvim/plugged/vim-easymotion/t/operator_pending_spec.vim	/^        let g:EasyMotion_keys = '123456789'$/;"	v
g:EasyMotion_keys	.config/nvim/plugged/vim-easymotion/t/smartsign_spec.vim	/^        let g:EasyMotion_keys = '123456789'$/;"	v
g:EasyMotion_landing_highlight	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_landing_highlight  = get(g: , 'EasyMotion_landing_highlight'  , 0)$/;"	v
g:EasyMotion_loaded	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_loaded = 1$/;"	v
g:EasyMotion_maximal_jumpmarks	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^        let g:EasyMotion_maximal_jumpmarks  = 2 " Error for value 1 unanalyzed. $/;"	v
g:EasyMotion_move_highlight	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_move_highlight     = get(g: , 'EasyMotion_move_highlight'     , 1)$/;"	v
g:EasyMotion_off_screen_search	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_off_screen_search  = get(g: , 'EasyMotion_off_screen_search'  , 1)$/;"	v
g:EasyMotion_off_screen_search	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let g:EasyMotion_off_screen_search = 0$/;"	v
g:EasyMotion_off_screen_search	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let g:EasyMotion_off_screen_search = 1$/;"	v
g:EasyMotion_prompt	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_prompt             =$/;"	v
g:EasyMotion_re_anywhere	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^    let g:EasyMotion_re_anywhere = get(g:, 'EasyMotion_re_anywhere', re)$/;"	v
g:EasyMotion_re_line_anywhere	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^    let g:EasyMotion_re_line_anywhere = get(g:, 'EasyMotion_re_line_anywhere', re)$/;"	v
g:EasyMotion_show_prompt	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_show_prompt        = get(g: , 'EasyMotion_show_prompt'        , 1)$/;"	v
g:EasyMotion_skipfoldedline	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_skipfoldedline     = get(g: , 'EasyMotion_skipfoldedline'     , 1)$/;"	v
g:EasyMotion_smartcase	.config/nvim/configs/plugins.vim	/^let g:EasyMotion_smartcase = 1$/;"	v
g:EasyMotion_smartcase	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_smartcase          = get(g: , 'EasyMotion_smartcase'          , 0)$/;"	v
g:EasyMotion_smartcase	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let g:EasyMotion_smartcase = 0$/;"	v
g:EasyMotion_smartcase	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let g:EasyMotion_smartcase = 1$/;"	v
g:EasyMotion_space_jump_first	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_space_jump_first   = get(g: , 'EasyMotion_space_jump_first'   , 0)$/;"	v
g:EasyMotion_startofline	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_startofline        = get(g: , 'EasyMotion_startofline'        , 1)$/;"	v
g:EasyMotion_use_migemo	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/helper.vim	/^        let g:EasyMotion_use_migemo = 0$/;"	v
g:EasyMotion_use_migemo	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_use_migemo         = get(g: , 'EasyMotion_use_migemo'         , 0)$/;"	v
g:EasyMotion_use_migemo	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let g:EasyMotion_use_migemo = 1$/;"	v
g:EasyMotion_use_regexp	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_use_regexp         = get(g: , 'EasyMotion_use_regexp'         , 1)$/;"	v
g:EasyMotion_use_regexp	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let g:EasyMotion_use_regexp = 0$/;"	v
g:EasyMotion_use_regexp	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let g:EasyMotion_use_regexp = 1$/;"	v
g:EasyMotion_use_smartsign_jp	.config/nvim/plugged/vim-easymotion/t/smartsign_spec.vim	/^        let g:EasyMotion_use_smartsign_jp = 1$/;"	v
g:EasyMotion_use_smartsign_us	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let g:EasyMotion_use_smartsign_us = 0$/;"	v
g:EasyMotion_use_smartsign_us	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let g:EasyMotion_use_smartsign_us = 1$/;"	v
g:EasyMotion_use_smartsign_us	.config/nvim/plugged/vim-easymotion/t/smartsign_spec.vim	/^        let g:EasyMotion_use_smartsign_us = 1$/;"	v
g:EasyMotion_use_upper	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_use_upper          = get(g: , 'EasyMotion_use_upper'          , 0)$/;"	v
g:EasyMotion_verbose	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let g:EasyMotion_verbose            = get(g: , 'EasyMotion_verbose'            , 1)$/;"	v
g:EasyMotion_verbose	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let g:EasyMotion_verbose = 0$/;"	v
g:EasyMotion_verbose	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let g:EasyMotion_verbose = 1$/;"	v
g:OmniSharp_BufWritePreSyntaxCheck	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_BufWritePreSyntaxCheck = get(g:, 'OmniSharp_BufWritePreSyntaxCheck', 1)$/;"	v
g:OmniSharp_CursorHoldSyntaxCheck	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_CursorHoldSyntaxCheck = get(g:, 'OmniSharp_CursorHoldSyntaxCheck', 0)$/;"	v
g:OmniSharp_ale_diagnostics_requested	.vim/plugged/omnisharp-vim/autoload/ale/sources/OmniSharp.vim	/^  let g:OmniSharp_ale_diagnostics_requested = 1$/;"	v
g:OmniSharp_autoselect_existing_sln	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_autoselect_existing_sln = get(g:, 'OmniSharp_autoselect_existing_sln', 1)$/;"	v
g:OmniSharp_ctrlp_extensions_added	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^    let g:OmniSharp_ctrlp_extensions_added = 1$/;"	v
g:OmniSharp_highlight_types	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_highlight_types = get(g:, 'OmniSharp_highlight_types', 0)$/;"	v
g:OmniSharp_loaded	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_loaded = 1$/;"	v
g:OmniSharp_loglevel	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_loglevel = get(g:, 'OmniSharp_loglevel', defaultlevel)$/;"	v
g:OmniSharp_loglevel	.vim/plugged/omnisharp-vim/test/vimrc	/^let g:OmniSharp_loglevel = 'none'$/;"	v
g:OmniSharp_lookup_metadata	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_lookup_metadata = get(g:, 'OmniSharp_lookup_metadata', 1)$/;"	v
g:OmniSharp_open_quickfix	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_open_quickfix = get(g:, 'OmniSharp_open_quickfix', 1)$/;"	v
g:OmniSharp_open_quickfix	.vim/plugged/omnisharp-vim/test/vimrc	/^let g:OmniSharp_open_quickfix = 0$/;"	v
g:OmniSharp_prefer_global_sln	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_prefer_global_sln = get(g:, 'OmniSharp_prefer_global_sln', 0)$/;"	v
g:OmniSharp_proc_debug	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_proc_debug = get(g:, 'OmniSharp_proc_debug', get(g:, 'omnisharp_proc_debug', 0))$/;"	v
g:OmniSharp_py_err	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^  let g:OmniSharp_py_err = {}$/;"	v
g:OmniSharp_python_path	.vim/plugged/omnisharp-vim/autoload/OmniSharp/py.vim	/^let g:OmniSharp_python_path = OmniSharp#util#PathJoin(['python'])$/;"	v
g:OmniSharp_selector_ui	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^  let g:OmniSharp_selector_ui = get(filter($/;"	v
g:OmniSharp_selector_ui	.vim/plugged/omnisharp-vim/test/vimrc	/^let g:OmniSharp_selector_ui = ''$/;"	v
g:OmniSharp_server_display_loading	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_server_display_loading = get(g:, 'OmniSharp_server_display_loading', 1)$/;"	v
g:OmniSharp_server_loading_timeout	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_server_loading_timeout = get(g:, 'OmniSharp_server_loading_timeout', 30)$/;"	v
g:OmniSharp_server_ports	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^  let g:OmniSharp_server_ports[sln_or_dir] = port$/;"	v
g:OmniSharp_server_ports	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_server_ports = get(g:, 'OmniSharp_server_ports', get(g:, 'OmniSharp_sln_ports', /;"	v
g:OmniSharp_server_stdio	.vim/.vimrc	/^let g:OmniSharp_server_stdio = 1$/;"	v
g:OmniSharp_server_stdio	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_server_stdio = get(g:, 'OmniSharp_server_stdio', 0)$/;"	v
g:OmniSharp_server_stdio	.vim/plugged/omnisharp-vim/test/vimrc	/^let g:OmniSharp_server_stdio = 1$/;"	v
g:OmniSharp_server_stdio_quickload	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_server_stdio_quickload = get(g:, 'OmniSharp_server_stdio_quickload', 0)$/;"	v
g:OmniSharp_server_use_mono	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_server_use_mono = get(g:, 'OmniSharp_server_use_mono', 0)$/;"	v
g:OmniSharp_sln_list_index	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_sln_list_index = get(g:, 'OmniSharp_sln_list_index', -1)$/;"	v
g:OmniSharp_sln_list_name	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_sln_list_name = get(g:, 'OmniSharp_sln_list_name', '')$/;"	v
g:OmniSharp_start_server	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_start_server = get(g:, 'OmniSharp_start_server', get(g:, 'Omnisharp_start_server/;"	v
g:OmniSharp_start_without_solution	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_start_without_solution = get(g:, 'OmniSharp_start_without_solution', 0)$/;"	v
g:OmniSharp_temp_dir	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_temp_dir = get(g:, 'OmniSharp_temp_dir', fnamemodify(tempname(), ':p:h'))$/;"	v
g:OmniSharp_timeout	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_timeout = get(g:, 'OmniSharp_timeout', 1)$/;"	v
g:OmniSharp_timeout	.vim/plugged/omnisharp-vim/test/vimrc	/^let g:OmniSharp_timeout = 10$/;"	v
g:OmniSharp_translate_cygwin_wsl	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_translate_cygwin_wsl = get(g:, 'OmniSharp_translate_cygwin_wsl', has('win32unix'/;"	v
g:OmniSharp_typeLookupInPreview	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_typeLookupInPreview = get(g:, 'OmniSharp_typeLookupInPreview', 0)$/;"	v
g:OmniSharp_want_snippet	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:OmniSharp_want_snippet = get(g:, 'OmniSharp_want_snippet', 0)$/;"	v
g:UltiSnipsEditSplit	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsEditSplit = 'normal'$/;"	v
g:UltiSnipsEditSplit	.config/nvim/plugged/ultisnips/docker/docker_vimrc.vim	/^let g:UltiSnipsEditSplit="vertical"$/;"	v
g:UltiSnipsEnableSnipMate	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsEnableSnipMate = 1$/;"	v
g:UltiSnipsExpandTrigger	.config/nvim/configs/plugins.vim	/^let g:UltiSnipsExpandTrigger="<tab>"$/;"	v
g:UltiSnipsExpandTrigger	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsExpandTrigger = "<tab>"$/;"	v
g:UltiSnipsExpandTrigger	.config/nvim/plugged/ultisnips/docker/docker_vimrc.vim	/^let g:UltiSnipsExpandTrigger="<tab>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	.config/nvim/configs/plugins.vim	/^let g:UltiSnipsJumpBackwardTrigger="<c-z>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsJumpBackwardTrigger = "<c-k>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	.config/nvim/plugged/ultisnips/docker/docker_vimrc.vim	/^let g:UltiSnipsJumpBackwardTrigger="<c-z>"$/;"	v
g:UltiSnipsJumpForwardTrigger	.config/nvim/configs/plugins.vim	/^let g:UltiSnipsJumpForwardTrigger="<c-b>"$/;"	v
g:UltiSnipsJumpForwardTrigger	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsJumpForwardTrigger = "<c-j>"$/;"	v
g:UltiSnipsJumpForwardTrigger	.config/nvim/plugged/ultisnips/docker/docker_vimrc.vim	/^let g:UltiSnipsJumpForwardTrigger="<c-b>"$/;"	v
g:UltiSnipsListSnippets	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsListSnippets = "<c-tab>"$/;"	v
g:UltiSnipsMappingsToIgnore	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsMappingsToIgnore = []$/;"	v
g:UltiSnipsRemoveSelectModeMappings	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsRemoveSelectModeMappings = 1$/;"	v
g:UltiSnipsSnippetDirectories	.config/nvim/plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsSnippetDirectories = [ "UltiSnips" ]$/;"	v
g:__FILE__	.config/nvim/plugged/vim-textobj-user/t/snr-prefix.vim	/^let g:__FILE__ = expand('<sfile>')$/;"	v
g:__fzf_command	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^    let g:__fzf_command = "normal ".prefix.item."\\<cr>"$/;"	v
g:__textobj_	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^  let g:__textobj_{plugin} = s:plugin.new(a:plugin_name, a:obj_specs)$/;"	v
g:_neovim_rpc_jobs	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let g:_neovim_rpc_jobs[l:jobid] = {'cmd':a:cmd, 'opts': l:opts, 'job': l:job}$/;"	v
g:_neovim_rpc_jobs	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^let g:_neovim_rpc_jobs = {}$/;"	v
g:_neovim_rpc_main_channel	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let g:_neovim_rpc_main_channel = ch_open(g:_neovim_rpc_vim_server)$/;"	v
g:_neovim_rpc_main_channel	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^let g:_neovim_rpc_main_channel = -1$/;"	v
g:_neovim_rpc_nvim_server	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let g:_neovim_rpc_nvim_server     = l:servers[0]$/;"	v
g:_neovim_rpc_vim_server	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let g:_neovim_rpc_vim_server = l:servers[1]$/;"	v
g:_plug_bang	.config/nvim/autoload/plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v
g:_plug_bang	.vim/autoload/plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v
g:_uspy	.config/nvim/plugged/ultisnips/plugin/UltiSnips.vim	/^       let g:_uspy=":py "$/;"	v
g:_uspy	.config/nvim/plugged/ultisnips/plugin/UltiSnips.vim	/^       let g:_uspy=":python "$/;"	v
g:_uspy	.config/nvim/plugged/ultisnips/plugin/UltiSnips.vim	/^       let g:_uspy=":python3 "$/;"	v
g:_uspy	.config/nvim/plugged/ultisnips/plugin/UltiSnips.vim	/^   let g:_uspy=":py3 "$/;"	v
g:_yarp_py	.vim/plugged/nvim-yarp/autoload/yarp/pyx.vim	/^        let g:_yarp_py = 'python2'$/;"	v
g:_yarp_py	.vim/plugged/nvim-yarp/autoload/yarp/pyx.vim	/^        let g:_yarp_py = pyeval('sys.executable')$/;"	v
g:_yarp_py	.vim/plugged/nvim-yarp/autoload/yarp/pyx.vim	/^    let g:_yarp_py = get(g:, 'python_host_prog', '')$/;"	v
g:_yarp_py3	.vim/plugged/nvim-yarp/autoload/yarp/pyx.vim	/^        let g:_yarp_py3 = 'python3'$/;"	v
g:_yarp_py3	.vim/plugged/nvim-yarp/autoload/yarp/pyx.vim	/^        let g:_yarp_py3 = py3eval('sys.executable')$/;"	v
g:_yarp_py3	.vim/plugged/nvim-yarp/autoload/yarp/pyx.vim	/^    let g:_yarp_py3 = get(g:, 'python3_host_prog', '')$/;"	v
g:airline#extensions#default#layout	.vim/plugged/vim-airline/t/extensions_default.vim	/^let g:airline#extensions#default#layout = [$/;"	v
g:airline#extensions#example#number_of_cats	.vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^  let g:airline#extensions#example#number_of_cats = 42$/;"	v
g:airline#extensions#localsearch#loaded	.vim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let g:airline#extensions#localsearch#loaded = 001$/;"	v
g:airline#extensions#obsession#indicator_text	.vim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^  let g:airline#extensions#obsession#indicator_text = '$'$/;"	v
g:airline#extensions#quickfix#location_text	.vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^  let g:airline#extensions#quickfix#location_text = 'Location'$/;"	v
g:airline#extensions#quickfix#quickfix_text	.vim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^  let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'$/;"	v
g:airline#extensions#tabline#enabled	.vim/plugged/vim-airline/t/extensions_tabline.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#exclude_buffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:airline#extensions#tabline#exclude_buffers = []$/;"	v
g:airline#extensions#tabline#exclude_buffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    let g:airline#extensions#tabline#exclude_buffers = []$/;"	v
g:airline#extensions#tabline#show_tabs	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:airline#extensions#tabline#show_tabs = 0$/;"	v
g:airline#extensions#tabline#show_tabs	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:airline#extensions#tabline#show_tabs = 1$/;"	v
g:airline#extensions#whitespace#enabled	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^    let g:airline#extensions#whitespace#enabled = s:enabled$/;"	v
g:airline#extensions#windowswap#indicator_text	.vim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^  let g:airline#extensions#windowswap#indicator_text = 'WS'$/;"	v
g:airline#extensions#wordcount#filetypes	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^  let g:airline#extensions#wordcount#filetypes = filetypes$/;"	v
g:airline#highlighter#normal_fg_hi	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^    let g:airline#highlighter#normal_fg_hi = synIDattr(synIDtrans(hlID('Normal')), 'fg', 'cterm'/;"	v
g:airline#init#bootstrapping	.vim/plugged/vim-airline/autoload/airline/init.vim	/^  let g:airline#init#bootstrapping = 1$/;"	v
g:airline#init#is_windows	.vim/plugged/vim-airline/autoload/airline/init.vim	/^  let g:airline#init#is_windows = has('win32') || has('win64')$/;"	v
g:airline#init#vim_async	.vim/plugged/vim-airline/autoload/airline/init.vim	/^  let g:airline#init#vim_async = (v:version >= 800 && has('job'))$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^  let g:airline#themes#dark#palette.ctrlp = airline#extensions#ctrlp#generate_color_map($/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette = {}$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.accents = {$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.commandline = airline#themes#generate_color_map(s:airline_a_co/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.inactive = airline#themes#generate_color_map(s:airline_a_inact/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.inactive_modified = {$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert = airline#themes#generate_color_map(s:airline_a_insert,/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert_modified = {$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert_paste = {$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.normal = airline#themes#generate_color_map(s:airline_a_normal,/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.normal_modified = {$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace = copy(g:airline#themes#dark#palette.insert)$/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace.airline_a = [ s:airline_b_insert[0]   , '#af0000' , s:/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace_modified = g:airline#themes#dark#palette.insert_modifi/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.visual = airline#themes#generate_color_map(s:airline_a_visual,/;"	v
g:airline#themes#dark#palette	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.visual_modified = {$/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.accents = { 'red': accents_group }$/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.inactive = airline#themes#generate_color_map(s:IA, s:IA, /;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.inactive_modified = { 'airline_c': modified_group }$/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.insert = airline#themes#generate_color_map(s:I1, s:I2, s:/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.insert.airline_error = g:airline#themes#gruvbox#palette.n/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.insert.airline_warning = g:airline#themes#gruvbox#palette/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.insert_modified = g:airline#themes#gruvbox#palette.normal/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.insert_modified.airline_error = g:airline#themes#gruvbox#/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.insert_modified.airline_warning = g:airline#themes#gruvbo/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.normal = airline#themes#generate_color_map(s:N1, s:N2, s:/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.normal.airline_error = error_group$/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.normal.airline_warning = warning_group$/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.normal_modified = { 'airline_c': modified_group }$/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.normal_modified.airline_error = error_group$/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.normal_modified.airline_warning = warning_group$/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.replace = airline#themes#generate_color_map(s:R1, s:R2, s/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.replace.airline_error = g:airline#themes#gruvbox#palette./;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.replace.airline_warning = g:airline#themes#gruvbox#palett/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.replace_modified = g:airline#themes#gruvbox#palette.norma/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.replace_modified.airline_error = g:airline#themes#gruvbox/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.replace_modified.airline_warning = g:airline#themes#gruvb/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.tabline = {$/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.visual = airline#themes#generate_color_map(s:V1, s:V2, s:/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.visual.airline_error = g:airline#themes#gruvbox#palette.n/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.visual.airline_warning = g:airline#themes#gruvbox#palette/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.visual_modified = { 'airline_c': [ s:V3[0], '', s:V3[2], /;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.visual_modified.airline_error = g:airline#themes#gruvbox#/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.visual_modified.airline_warning = g:airline#themes#gruvbo/;"	v
g:airline#themes#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^let g:airline#themes#gruvbox#palette = {}$/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette = {}$/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.ctrlp = airline#extensions#ctrlp#generate_color_map(s:c/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.inactive = airline#themes#generate_color_map(s:inactive/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.inactive.airline_error = s:error$/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.inactive.airline_warning = s:warning$/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.insert = airline#themes#generate_color_map(s:insert1, s/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.insert.airline_error = s:error$/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.insert.airline_warning = s:warning$/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.normal = airline#themes#generate_color_map(s:normal1, s/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.normal.airline_error = s:error$/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.normal.airline_warning = s:warning$/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.replace = airline#themes#generate_color_map(s:replace1,/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.replace.airline_error = s:error$/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.replace.airline_warning = s:warning$/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.visual = airline#themes#generate_color_map(s:visual1, s/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.visual.airline_error = s:error$/;"	v
g:airline#themes#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let g:airline#themes#oceanicnext#palette.visual.airline_warning = s:warning$/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette = {}$/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.ctrlp = airline#extensions#ctrlp#generate_color_ma/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.inactive = airline#themes#generate_color_map(s:ina/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.inactive.airline_error = s:error$/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.inactive.airline_warning = s:warning$/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.insert = airline#themes#generate_color_map(s:inser/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.insert.airline_error = s:error$/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.insert.airline_warning = s:warning$/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.normal = airline#themes#generate_color_map(s:norma/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.normal.airline_error = s:error$/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.normal.airline_warning = s:warning$/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.replace = airline#themes#generate_color_map(s:repl/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.replace.airline_error = s:error$/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.replace.airline_warning = s:warning$/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.visual = airline#themes#generate_color_map(s:visua/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.visual.airline_error = s:error$/;"	v
g:airline#themes#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let g:airline#themes#oceanicnextlight#palette.visual.airline_warning = s:warning$/;"	v
g:airline#visual_active	.vim/plugged/vim-airline/autoload/airline.vim	/^  let g:airline#visual_active = (mode() =~? '[vs]')$/;"	v
g:airline_gui_mode	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^    let g:airline_gui_mode = airline#init#gui_mode()$/;"	v
g:airline_gui_mode	.vim/plugged/vim-airline/plugin/airline.vim	/^  let g:airline_gui_mode = airline#init#gui_mode()$/;"	v
g:airline_inactive_collapse	.vim/plugged/vim-airline/t/airline.vim	/^    let g:airline_inactive_collapse = 0$/;"	v
g:airline_inactive_collapse	.vim/plugged/vim-airline/t/airline.vim	/^    let g:airline_inactive_collapse = 1$/;"	v
g:airline_last_window_changed	.vim/plugged/vim-airline/plugin/airline.vim	/^  let g:airline_last_window_changed = l:key$/;"	v
g:airline_section_	.vim/plugged/vim-airline/t/init.vim	/^      let g:airline_section_{s} = s$/;"	v
g:airline_section_a	.vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_a = airline#section#create_left(['mode', 'crypt', 'paste', 'keymap', '/;"	v
g:airline_section_a	.vim/plugged/vim-airline/t/airline.vim	/^    let g:airline_section_a = airline#section#create(['mode', 'mode'])$/;"	v
g:airline_section_b	.vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_b = airline#section#create(['hunks', 'branch'])$/;"	v
g:airline_section_c	.vim/plugged/vim-airline/autoload/airline/init.vim	/^      let g:airline_section_c = airline#section#create(['%<', 'file', spc, 'readonly'])$/;"	v
g:airline_section_c	.vim/plugged/vim-airline/autoload/airline/init.vim	/^      let g:airline_section_c = airline#section#create(['%<', 'path', spc, 'readonly'])$/;"	v
g:airline_section_error	.vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_error = airline#section#create(['ycm_error_count', 'syntastic-err', 'e/;"	v
g:airline_section_gutter	.vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_gutter = airline#section#create(['%='])$/;"	v
g:airline_section_warning	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^      let g:airline_section_warning .= airline#section#create(['whitespace'])$/;"	v
g:airline_section_warning	.vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_warning = airline#section#create(['ycm_warning_count',  'syntastic-war/;"	v
g:airline_section_x	.vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_x = airline#section#create_right(['bookmark', 'tagbar', 'gutentags', '/;"	v
g:airline_section_y	.vim/plugged/vim-airline/autoload/airline/init.vim	/^    let g:airline_section_y = airline#section#create_right(['ffenc'])$/;"	v
g:airline_section_z	.vim/plugged/vim-airline/autoload/airline/init.vim	/^      let g:airline_section_z = airline#section#create(['%3p%%'.spc, 'linenr',  ':%3v'])$/;"	v
g:airline_section_z	.vim/plugged/vim-airline/autoload/airline/init.vim	/^      let g:airline_section_z = airline#section#create(['windowswap', 'obsession', '%3p%%'.spc, /;"	v
g:airline_statusline_funcrefs	.vim/plugged/vim-airline/autoload/airline.vim	/^let g:airline_statusline_funcrefs = get(g:, 'airline_statusline_funcrefs', [])$/;"	v
g:airline_statusline_funcrefs	.vim/plugged/vim-airline/t/airline.vim	/^    let g:airline_statusline_funcrefs = []$/;"	v
g:airline_theme	.vim/plugged/vim-airline/autoload/airline.vim	/^      let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/plugged/vim-airline/autoload/airline.vim	/^      let g:airline_theme = a:name$/;"	v
g:airline_theme	.vim/plugged/vim-airline/autoload/airline.vim	/^  let g:airline_theme = get(g:, 'airline_theme', 'dark')$/;"	v
g:airline_theme	.vim/plugged/vim-airline/plugin/airline.vim	/^        let g:airline_theme=s:random_theme()$/;"	v
g:airline_theme	.vim/plugged/vim-airline/plugin/airline.vim	/^      let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/plugged/vim-airline/plugin/airline.vim	/^    let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/plugged/vim-airline/t/airline.vim	/^let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/plugged/vim-airline/t/builder.vim	/^let g:airline_theme = 'dark'$/;"	v
g:airline_theme	.vim/plugged/vim-airline/t/highlighter.vim	/^let g:airline_theme = 'dark'$/;"	v
g:aria_attributes_complete	.config/nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^        let g:aria_attributes_complete = 0$/;"	v
g:aria_attributes_complete	.config/nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^  let g:aria_attributes_complete = 1$/;"	v
g:autoloaded_projectionist	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^let g:autoloaded_projectionist = 1$/;"	v
g:autoloaded_rails	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let g:autoloaded_rails = '5.4'$/;"	v
g:bufferline_active_buffer_left	.vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_active_buffer_left = ''$/;"	v
g:bufferline_active_buffer_right	.vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_active_buffer_right = ''$/;"	v
g:bufferline_active_highlight	.vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_active_highlight = 'bufferline_selected'$/;"	v
g:bufferline_inactive_highlight	.vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_inactive_highlight = 'airline_c'$/;"	v
g:bufferline_separator	.vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^    let g:bufferline_separator = g:airline_symbols.space$/;"	v
g:clever_f_use_migemo	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let g:clever_f_use_migemo = 0$/;"	v
g:closer_autoloaded	.vim/plugged/vim-closer/autoload/closer.vim	/^let g:closer_autoloaded=1$/;"	v
g:coc#_context	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^    let g:coc#_context['candidates'] = []$/;"	v
g:coc#_context	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^  let g:coc#_context = {$/;"	v
g:coc#_context	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc#_context = {'start': 0, 'candidates': []}$/;"	v
g:coc#_context	.vim/plugged/coc.nvim/autoload/coc.vim	/^    let g:coc#_context['candidates'] = []$/;"	v
g:coc#_context	.vim/plugged/coc.nvim/autoload/coc.vim	/^  let g:coc#_context = {$/;"	v
g:coc#_context	.vim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc#_context = {'start': 0, 'candidates': []}$/;"	v
g:coc_enabled	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^  let g:coc_enabled = 0$/;"	v
g:coc_enabled	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^  let g:coc_enabled = 1$/;"	v
g:coc_enabled	.vim/plugged/coc.nvim/plugin/coc.vim	/^  let g:coc_enabled = 0$/;"	v
g:coc_enabled	.vim/plugged/coc.nvim/plugin/coc.vim	/^  let g:coc_enabled = 1$/;"	v
g:coc_global_extensions	.config/nvim/configs/plugins.vim	/^let g:coc_global_extensions =['coc-html',$/;"	v
g:coc_global_extensions	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc_global_extensions = get(g:, 'coc_global_extensions', [])$/;"	v
g:coc_global_extensions	.vim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc_global_extensions = get(g:, 'coc_global_extensions', [])$/;"	v
g:coc_last_hover_message	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  let g:coc_last_hover_message = a:msg$/;"	v
g:coc_last_hover_message	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^  let g:coc_last_hover_message = a:msg$/;"	v
g:coc_selected_text	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc_selected_text = ''$/;"	v
g:coc_selected_text	.vim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc_selected_text = ''$/;"	v
g:coc_service_initialized	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^let g:coc_service_initialized = 0$/;"	v
g:coc_service_initialized	.vim/plugged/coc.nvim/plugin/coc.vim	/^let g:coc_service_initialized = 0$/;"	v
g:coc_stl_format	.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^    let g:coc_stl_format = _backup$/;"	v
g:coc_stl_format	.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^    let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_err', '%E{[%e(#%fe)]}')$/;"	v
g:coc_stl_format	.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^    let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_warn', '%W{[%w(#%fw)]}')$/;"	v
g:coc_user_config	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^  let g:coc_user_config[a:section] = a:value$/;"	v
g:coc_user_config	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc_user_config = get(g:, 'coc_user_config', {})$/;"	v
g:coc_user_config	.vim/plugged/coc.nvim/autoload/coc.vim	/^  let g:coc_user_config[a:section] = a:value$/;"	v
g:coc_user_config	.vim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc_user_config = get(g:, 'coc_user_config', {})$/;"	v
g:coc_vim_commands	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc_vim_commands = []$/;"	v
g:coc_vim_commands	.vim/plugged/coc.nvim/autoload/coc.vim	/^let g:coc_vim_commands = []$/;"	v
g:coc_watch_extensions	.vim/plugged/coc.nvim/src/__tests__/vimrc	/^let g:coc_watch_extensions = ['test']$/;"	v
g:colors_name	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:colors_name='gruvbox'$/;"	v
g:colors_name	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let g:colors_name="OceanicNext"$/;"	v
g:colors_name	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let g:colors_name="OceanicNextLight"$/;"	v
g:colors_name	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^let g:colors_name = "PaperColor"$/;"	v
g:colors_name	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let g:colors_name = "orange-moon"$/;"	v
g:colors_name	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let g:colors_name = "pink-moon"$/;"	v
g:colors_name	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let g:colors_name = "yellow-moon"$/;"	v
g:comfortable_motion_air_drag	.config/nvim/plugged/comfortable-motion.vim/autoload/comfortable_motion.vim	/^  let g:comfortable_motion_air_drag = 2.0$/;"	v
g:comfortable_motion_friction	.config/nvim/plugged/comfortable-motion.vim/autoload/comfortable_motion.vim	/^  let g:comfortable_motion_friction = 80.0$/;"	v
g:comfortable_motion_interval	.config/nvim/plugged/comfortable-motion.vim/autoload/comfortable_motion.vim	/^  let g:comfortable_motion_interval = 1000.0 \/ 60$/;"	v
g:comfortable_motion_scroll_down_key	.config/nvim/plugged/comfortable-motion.vim/autoload/comfortable_motion.vim	/^  let g:comfortable_motion_scroll_down_key = "\\<C-e>"$/;"	v
g:comfortable_motion_scroll_up_key	.config/nvim/plugged/comfortable-motion.vim/autoload/comfortable_motion.vim	/^  let g:comfortable_motion_scroll_up_key = "\\<C-y>"$/;"	v
g:count	.vim/plugged/vim-airline/t/util.vim	/^    let g:count = 0$/;"	v
g:count	.vim/plugged/vim-airline/t/util.vim	/^  let g:count += 1$/;"	v
g:count	.vim/plugged/vim-airline/t/util.vim	/^  let g:count += 2$/;"	v
g:count	.vim/plugged/vim-airline/t/util.vim	/^  let g:count = a:0$/;"	v
g:ctrlp_extensions	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^    let g:ctrlp_extensions += ['findsymbols', 'findcodeactions']$/;"	v
g:ctrlp_extensions	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^    let g:ctrlp_extensions = []$/;"	v
g:ctrlp_status_func	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^  let g:ctrlp_status_func = {$/;"	v
g:current_ulti_dict	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^    let g:current_ulti_dict = {}$/;"	v
g:current_ulti_dict_info	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^      let g:current_ulti_dict_info = {}$/;"	v
g:cursormode_exit_mode	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^  let g:cursormode_exit_mode='n'$/;"	v
g:db_adapter_rails	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^let g:db_adapter_rails = 'rails#db_'$/;"	v
g:defx#_channel_id	.config/nvim/plugged/defx.nvim/autoload/defx/init.vim	/^      let g:defx#_channel_id = 1$/;"	v
g:defx#_histories	.config/nvim/plugged/defx.nvim/autoload/defx/init.vim	/^  let g:defx#_histories = []$/;"	v
g:defx#_yarp	.config/nvim/plugged/defx.nvim/autoload/defx/init.vim	/^      let g:defx#_yarp = yarp#py3('defx')$/;"	v
g:denite#_async_ret	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_async_ret = {}$/;"	v
g:denite#_async_ret	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_async_ret = {}$/;"	v
g:denite#_candidates	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_candidates = []$/;"	v
g:denite#_candidates	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_candidates = []$/;"	v
g:denite#_channel_id	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^      let g:denite#_channel_id = 1$/;"	v
g:denite#_channel_id	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^      let g:denite#_channel_id = 1$/;"	v
g:denite#_filter_buffer_timer	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^    let g:denite#_filter_buffer_timer = timer_start($/;"	v
g:denite#_filter_buffer_timer	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^    let g:denite#_filter_buffer_timer = timer_start($/;"	v
g:denite#_filter_bufnr	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^  let g:denite#_filter_bufnr = bufnr('%')$/;"	v
g:denite#_filter_bufnr	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_filter_bufnr = -1$/;"	v
g:denite#_filter_bufnr	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^  let g:denite#_filter_bufnr = bufnr('%')$/;"	v
g:denite#_filter_bufnr	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_filter_bufnr = -1$/;"	v
g:denite#_filter_candidates_timer	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^    let g:denite#_filter_candidates_timer = timer_start($/;"	v
g:denite#_filter_candidates_timer	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^    let g:denite#_filter_candidates_timer = timer_start($/;"	v
g:denite#_filter_entire_len	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^  let g:denite#_filter_entire_len = a:entire_len$/;"	v
g:denite#_filter_entire_len	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^  let g:denite#_filter_entire_len = a:entire_len$/;"	v
g:denite#_filter_parent	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^  let g:denite#_filter_parent = a:parent$/;"	v
g:denite#_filter_parent	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^  let g:denite#_filter_parent = a:parent$/;"	v
g:denite#_filter_winid	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^  let g:denite#_filter_winid = -1$/;"	v
g:denite#_filter_winid	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^  let g:denite#_filter_winid = win_getid()$/;"	v
g:denite#_filter_winid	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_filter_winid = -1$/;"	v
g:denite#_filter_winid	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^  let g:denite#_filter_winid = win_getid()$/;"	v
g:denite#_previewed_buffers	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_previewed_buffers = {}$/;"	v
g:denite#_previewed_buffers	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_previewed_buffers = {}$/;"	v
g:denite#_ret	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_ret = {}$/;"	v
g:denite#_ret	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_ret = {}$/;"	v
g:denite#_serveraddr	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^    let g:denite#_serveraddr = $NVIM_LISTEN_ADDRESS$/;"	v
g:denite#_serveraddr	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_serveraddr =$/;"	v
g:denite#_serveraddr	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^    let g:denite#_serveraddr = $NVIM_LISTEN_ADDRESS$/;"	v
g:denite#_serveraddr	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_serveraddr =$/;"	v
g:denite#_update_buffer_timer	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_update_buffer_timer = timer_start(300,$/;"	v
g:denite#_update_buffer_timer	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_update_buffer_timer = timer_start(300,$/;"	v
g:denite#_update_candidates_timer	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_update_candidates_timer = timer_start(300,$/;"	v
g:denite#_update_candidates_timer	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^  let g:denite#_update_candidates_timer = timer_start(300,$/;"	v
g:denite#_yarp	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^      let g:denite#_yarp = yarp#py3('denite')$/;"	v
g:denite#_yarp	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^      let g:denite#_yarp = yarp#py3('denite')$/;"	v
g:did_coc_loaded	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^let g:did_coc_loaded = 1$/;"	v
g:did_coc_loaded	.vim/plugged/coc.nvim/plugin/coc.vim	/^let g:did_coc_loaded = 1$/;"	v
g:did_ruby_ftplugin_functions	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let g:did_ruby_ftplugin_functions = 1$/;"	v
g:dispatch_compilers	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^  let g:dispatch_compilers = {}$/;"	v
g:dispatch_compilers	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^let g:dispatch_compilers['bundle exec'] = ''$/;"	v
g:dispatch_compilers	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^  let g:dispatch_compilers = {}$/;"	v
g:dispatch_compilers	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^let g:dispatch_compilers['bundle exec'] = ''$/;"	v
g:dispatch_compilers	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^let g:dispatch_compilers['ruby -Itest'] = 'rubyunit'$/;"	v
g:dispatch_compilers	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^let g:dispatch_compilers['ruby bin\/rake'] = 'rake'$/;"	v
g:dsf_brackets	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^  let g:dsf_brackets = '([{'$/;"	v
g:dsf_function_pattern	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^  let g:dsf_function_pattern = '\\k\\+'$/;"	v
g:dsf_namespace_pattern	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^  let g:dsf_namespace_pattern = '\\k\\+\\%(\\.\\|::\\)'$/;"	v
g:dsf_no_mappings	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^  let g:dsf_no_mappings = 0$/;"	v
g:easyescape_string	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^    let g:easyescape_string = "kj"$/;"	v
g:easyescape_timeout	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^        let g:easyescape_timeout = 100$/;"	v
g:easyescape_timeout	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^        let g:easyescape_timeout = 2000$/;"	v
g:easyescape_timeout	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^    let g:easyescape_timeout = 2000$/;"	v
g:emmet_curl_command	.config/nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:emmet_curl_command = 'curl -s -L -A Mozilla\/5.0'$/;"	v
g:emmet_debug	.config/nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:emmet_debug = 0$/;"	v
g:emmet_docroot	.config/nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:emmet_docroot = {}$/;"	v
g:emmet_html5	.config/nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:emmet_html5 = 1$/;"	v
g:error	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let g:error = a:msg$/;"	v
g:eruby_default_subtype	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:eruby_default_subtype	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:filler_line	.config/nvim/plugged/vim-textobj-entire/t/basics.vim	/^let g:filler_line = [$/;"	v
g:filler_line	.config/nvim/plugged/vim-textobj-entire/t/jumplist.vim	/^let g:filler_line = [$/;"	v
g:filler_line	.config/nvim/plugged/vim-textobj-entire/t/mark.vim	/^let g:filler_line = [$/;"	v
g:fzf#vim#buffers	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^  let g:fzf#vim#buffers = {}$/;"	v
g:fzf_colors	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^      let g:fzf_colors = old_fzf_colors$/;"	v
g:ghost_text_verbose	.vim/plugged/ghost-text.vim/plugin/ghost-text.vim	/^let g:ghost_text_verbose = 0$/;"	v
g:gitgutter_override_sign_column_highlight	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gitgutter_override_sign_column_highlight = 0$/;"	v
g:gruvbox_bold	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_bold=1$/;"	v
g:gruvbox_contrast_dark	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_contrast_dark='medium'$/;"	v
g:gruvbox_contrast_light	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_contrast_light='medium'$/;"	v
g:gruvbox_guisp_fallback	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_guisp_fallback='NONE'$/;"	v
g:gruvbox_improved_strings	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_improved_strings=0$/;"	v
g:gruvbox_improved_warnings	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_improved_warnings=0$/;"	v
g:gruvbox_inverse	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_inverse=1$/;"	v
g:gruvbox_invert_indent_guides	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_invert_indent_guides=0$/;"	v
g:gruvbox_invert_signs	.config/nvim/plugged/gruvbox/autoload/gruvbox.vim	/^    let g:gruvbox_invert_signs=0$/;"	v
g:gruvbox_invert_signs	.config/nvim/plugged/gruvbox/autoload/gruvbox.vim	/^    let g:gruvbox_invert_signs=1$/;"	v
g:gruvbox_italic	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let g:gruvbox_italic=0$/;"	v
g:gruvbox_italic	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let g:gruvbox_italic=1$/;"	v
g:gruvbox_termcolors	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_termcolors=256$/;"	v
g:gruvbox_undercurl	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_undercurl=1$/;"	v
g:gruvbox_underline	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_underline=1$/;"	v
g:gutentags_add_ctrlp_root_markers	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)$/;"	v
g:gutentags_add_default_project_roots	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	.config/nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	.config/nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_background_update	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_build_inverted_index	.config/nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_build_inverted_index = 0$/;"	v
g:gutentags_cscope_executable	.config/nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_extra_args	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:gutentags_enabled = 0$/;"	v
g:gutentags_enabled	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_filetypes	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_project_root	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['\/usr\/local'/;"	v
g:gutentags_fake	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_fake = a:1$/;"	v
g:gutentags_fake	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_fake = !g:gutentags_fake$/;"	v
g:gutentags_fake	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	.config/nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	.config/nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	.config/nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	.config/nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslc/;"	v
g:gutentags_project_root	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_res_dir	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	.config/nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_script_ext	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^            let g:gutentags_trace = l:prev_trace$/;"	v
g:gutentags_trace	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = 1$/;"	v
g:gutentags_trace	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = a:1$/;"	v
g:gutentags_trace	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = l:trace_backup$/;"	v
g:gutentags_trace	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_trace = !g:gutentags_trace$/;"	v
g:gutentags_trace	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_use_jobs	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:html5_aria_attributes_complete	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let g:html5_aria_attributes_complete = 1$/;"	v
g:html5_event_handler_attributes_complete	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let g:html5_event_handler_attributes_complete = 1$/;"	v
g:html5_microdata_attributes_complete	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let g:html5_microdata_attributes_complete = 1$/;"	v
g:html5_rdfa_attributes_complete	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let g:html5_rdfa_attributes_complete = 1$/;"	v
g:indentLine_color_gui	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:indentLine_color_gui = s:bg2[0]$/;"	v
g:indentLine_color_term	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:indentLine_color_term = s:bg2[1]$/;"	v
g:indent_guides_auto_colors	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:indent_guides_auto_colors = 0$/;"	v
g:indent_object_except_first_level	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^	let g:indent_object_except_first_level = 1$/;"	v
g:leetcode\\_categories	.vim/plugged/leetcode.vim/README.md	/^### g:leetcode\\_categories$/;"	S
g:leetcode\\_password	.vim/plugged/leetcode.vim/README.md	/^### g:leetcode\\_password$/;"	S
g:leetcode\\_solution\\_filetype	.vim/plugged/leetcode.vim/README.md	/^### g:leetcode\\_solution\\_filetype$/;"	S
g:leetcode\\_username	.vim/plugged/leetcode.vim/README.md	/^### g:leetcode\\_username$/;"	S
g:leetcode_categories	.vim/plugged/leetcode.vim/plugin/leetcode.vim	/^    let g:leetcode_categories = ['algorithms']$/;"	v
g:leetcode_debug	.vim/plugged/leetcode.vim/plugin/leetcode.vim	/^    let g:leetcode_debug = 0$/;"	v
g:leetcode_password	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^        let g:leetcode_password = password$/;"	v
g:leetcode_password	.vim/plugged/leetcode.vim/plugin/leetcode.vim	/^    let g:leetcode_password = ''$/;"	v
g:leetcode_solution_filetype	.vim/plugged/leetcode.vim/plugin/leetcode.vim	/^    let g:leetcode_solution_filetype = 'cpp'$/;"	v
g:leetcode_username	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^        let g:leetcode_username = username$/;"	v
g:leetcode_username	.vim/plugged/leetcode.vim/plugin/leetcode.vim	/^    let g:leetcode_username = ''$/;"	v
g:lightline#colorscheme#gruvbox#palette	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let g:lightline#colorscheme#gruvbox#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#oceanicnext#palette	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let g:lightline#colorscheme#oceanicnext#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#oceanicnextlight#palette	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let g:lightline#colorscheme#oceanicnextlight#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:loaded_after_object	.config/nvim/plugged/vim-after-object/autoload/after_object.vim	/^let g:loaded_after_object = 1$/;"	v
g:loaded_airline	.vim/plugged/vim-airline/plugin/airline.vim	/^let g:loaded_airline = 1$/;"	v
g:loaded_bundler	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^let g:loaded_bundler = 1$/;"	v
g:loaded_comfortable_motion	.config/nvim/plugged/comfortable-motion.vim/autoload/comfortable_motion.vim	/^let g:loaded_comfortable_motion = 1$/;"	v
g:loaded_comfortable_motion	.config/nvim/plugged/comfortable-motion.vim/plugin/comfortable_motion.vim	/^let g:loaded_comfortable_motion = 1$/;"	v
g:loaded_commentary	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^let g:loaded_commentary = 1$/;"	v
g:loaded_ctrlp_OmniSharp_findcodeactions	.vim/plugged/omnisharp-vim/autoload/ctrlp/OmniSharp/findcodeactions.vim	/^let g:loaded_ctrlp_OmniSharp_findcodeactions = 1$/;"	v
g:loaded_ctrlp_OmniSharp_findsymbols	.vim/plugged/omnisharp-vim/autoload/ctrlp/OmniSharp/findsymbols.vim	/^let g:loaded_ctrlp_OmniSharp_findsymbols = 1$/;"	v
g:loaded_defx	.config/nvim/plugged/defx.nvim/plugin/defx.vim	/^let g:loaded_defx = 1$/;"	v
g:loaded_denite	.config/nvim/plugged/denite.nvim/plugin/denite.vim	/^let g:loaded_denite = 1$/;"	v
g:loaded_denite	.vim/plugged/denite.nvim/plugin/denite.vim	/^let g:loaded_denite = 1$/;"	v
g:loaded_dsf	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^let g:loaded_dsf = '0.1.0' " version number$/;"	v
g:loaded_easyescape	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^let g:loaded_easyescape = 1$/;"	v
g:loaded_emmet_vim	.config/nvim/plugged/emmet-vim/plugin/emmet.vim	/^let g:loaded_emmet_vim = 1$/;"	v
g:loaded_fzf	.vim/plugged/fzf/plugin/fzf.vim	/^let g:loaded_fzf = 1$/;"	v
g:loaded_gutentags	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_plug	.config/nvim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_plug	.vim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_projectionist	.config/nvim/plugged/vim-projectionist/plugin/projectionist.vim	/^let g:loaded_projectionist = 1$/;"	v
g:loaded_rails	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^let g:loaded_rails = 1$/;"	v
g:loaded_rake	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^let g:loaded_rake = 1$/;"	v
g:loaded_repeat	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^let g:loaded_repeat = 1$/;"	v
g:loaded_rsi	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^let g:loaded_rsi = 1$/;"	v
g:loaded_sideways	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^let g:loaded_sideways = '0.3.0' " version number$/;"	v
g:loaded_surround	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_surround	.vim/plugged/vim-surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_switch	.config/nvim/plugged/switch.vim/plugin/switch.vim	/^let g:loaded_switch = '0.3.0' " version number$/;"	v
g:loaded_syntastic_cs_code_checker	.vim/plugged/omnisharp-vim/syntax_checkers/cs/codecheck.vim	/^let g:loaded_syntastic_cs_code_checker = 1$/;"	v
g:loaded_tagalong	.config/nvim/plugged/tagalong.vim/plugin/tagalong.vim	/^let g:loaded_tagalong = '0.2.0' " version number$/;"	v
g:loaded_targets	.config/nvim/plugged/targets.vim/plugin/targets.vim	/^let g:loaded_targets = '0.5.0' " version number$/;"	v
g:loaded_textobj_entire	.config/nvim/plugged/vim-textobj-entire/plugin/textobj/entire.vim	/^let g:loaded_textobj_entire = 1$/;"	v
g:loaded_textobj_indent	.config/nvim/plugged/vim-textobj-indent/plugin/textobj/indent.vim	/^let g:loaded_textobj_indent = 1$/;"	v
g:loaded_textobj_line	.config/nvim/plugged/vim-textobj-line/plugin/textobj/line.vim	/^let g:loaded_textobj_line = 1$/;"	v
g:loaded_textobj_rubyblock	.config/nvim/plugged/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^let g:loaded_textobj_rubyblock = 1$/;"	v
g:loaded_tmux_navigator	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^let g:loaded_tmux_navigator = 1$/;"	v
g:loaded_xtabline	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    let g:loaded_xtabline = 1$/;"	v
g:neovim_rpc#_tmp_args	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let g:neovim_rpc#_tmp_args = copy(a:000)$/;"	v
g:neovim_rpc#py	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let g:neovim_rpc#py = 'python'$/;"	v
g:neovim_rpc#py	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let g:neovim_rpc#py = 'python3'$/;"	v
g:neovim_rpc#py	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let g:neovim_rpc#py = 'pythonx'$/;"	v
g:netrw_force_overwrite_statusline	.vim/plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^  let g:netrw_force_overwrite_statusline = 0$/;"	v
g:niji_dark_colours	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:not_finish_vimplug	.vim/.vimrc	/^  let g:not_finish_vimplug = "yes"$/;"	v
g:obsession_append	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:obsession_append = [string]$/;"	v
g:oceanic_next_terminal_bold	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let g:oceanic_next_terminal_bold = get(g:, 'oceanic_next_terminal_bold', 0)$/;"	v
g:oceanic_next_terminal_bold	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let g:oceanic_next_terminal_bold = get(g:, 'oceanic_next_terminal_bold', 0)$/;"	v
g:oceanic_next_terminal_italic	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let g:oceanic_next_terminal_italic = get(g:, 'oceanic_next_terminal_italic', 0)$/;"	v
g:oceanic_next_terminal_italic	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let g:oceanic_next_terminal_italic = get(g:, 'oceanic_next_terminal_italic', 0)$/;"	v
g:omnicomplete_fetch_full_documentation	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^let g:omnicomplete_fetch_full_documentation = get(g:, 'omnicomplete_fetch_full_documentation', 0/;"	v
g:plug_home	.config/nvim/autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plug_home	.vim/autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	.config/nvim/autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	.config/nvim/autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs	.vim/autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	.vim/autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	.config/nvim/autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	.config/nvim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:plugs_order	.vim/autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	.vim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:projectionist_file	.config/nvim/plugged/vim-projectionist/plugin/projectionist.vim	/^        let g:projectionist_file = file$/;"	v
g:projectionist_heuristics	.config/nvim/plugged/vim-projectionist/plugin/projectionist.vim	/^  let g:projectionist_heuristics = {}$/;"	v
g:projectionist_transformations	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^  let g:projectionist_transformations = {}$/;"	v
g:promptline_symbols	.vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^    let g:promptline_symbols = {$/;"	v
g:python3_host_prog	.config/nvim/configs/global.vim	/^let g:python3_host_prog = '\/usr\/bin\/python3'$/;"	v
g:python_host_prog	.config/nvim/configs/global.vim	/^let g:python_host_prog = '\/usr\/bin\/python2'$/;"	v
g:rainbow_conf	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^   let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^   let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^   let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_ctermfgs	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_guifgs	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rbpt_colorpairs	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:rbpt_colorpairs =$/;"	v
g:repeat_count	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_count = a:0 ? a:1 : v:count$/;"	v
g:repeat_reg	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_reg = [a:sequence, a:register]$/;"	v
g:repeat_reg	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^let g:repeat_reg = ['', '']$/;"	v
g:repeat_sequence	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_sequence = a:sequence$/;"	v
g:repeat_tick	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^                    let g:repeat_tick = b:changedtick$/;"	v
g:repeat_tick	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^        let g:repeat_tick = b:changedtick$/;"	v
g:repeat_tick	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_tick = -1$/;"	v
g:repeat_tick	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_tick = b:changedtick$/;"	v
g:repeat_tick	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^let g:repeat_tick = -1$/;"	v
g:ruby_default_path	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^      let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# "." ? "" : v:val')$/;"	v
g:ruby_default_path	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^      let g:ruby_default_path = s:query_path($HOME)$/;"	v
g:ruby_indent_access_modifier_style	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^  let g:ruby_indent_access_modifier_style = 'normal'$/;"	v
g:ruby_indent_assignment_style	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^  let g:ruby_indent_assignment_style = 'hanging'$/;"	v
g:ruby_indent_block_style	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^  let g:ruby_indent_block_style = 'expression'$/;"	v
g:ruby_version_paths	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^      let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'/;"	v
g:ruby_version_paths	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let g:ruby_version_paths = {}$/;"	v
g:rubycomplete_buffer_loading	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_buffer_loading = 0$/;"	v
g:rubycomplete_classes_in_global	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_classes_in_global = 0$/;"	v
g:rubycomplete_completions	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^        let g:rubycomplete_completions = []$/;"	v
g:rubycomplete_include_object	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_object = 0$/;"	v
g:rubycomplete_include_objectspace	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_objectspace = 0$/;"	v
g:rubycomplete_rails	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^    let g:rubycomplete_rails = 0$/;"	v
g:sideways_definitions	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^let g:sideways_definitions =$/;"	v
g:sideways_search_timeout	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^  let g:sideways_search_timeout = 0$/;"	v
g:sideways_skip_strings_and_comments	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^  let g:sideways_skip_strings_and_comments = 1$/;"	v
g:snips_author	.config/nvim/plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_author = "yourname"$/;"	v
g:snips_author	.vim/plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_author = "yourname"$/;"	v
g:snips_email	.config/nvim/plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_email = "yourname@email.com"$/;"	v
g:snips_email	.vim/plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_email = "yourname@email.com"$/;"	v
g:snips_github	.config/nvim/plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_github = "https:\/\/github.com\/yourname"$/;"	v
g:snips_github	.vim/plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_github = "https:\/\/github.com\/yourname"$/;"	v
g:switch_builtins	.config/nvim/plugged/switch.vim/plugin/switch.vim	/^let g:switch_builtins =$/;"	v
g:switch_definitions	.config/nvim/plugged/switch.vim/examples/example_multibyte.vim	/^let g:switch_definitions = [['a', 'b'], ['否', '是']]$/;"	v
g:switch_definitions	.config/nvim/plugged/switch.vim/plugin/switch.vim	/^let g:switch_definitions =$/;"	v
g:switch_find_smallest_match	.config/nvim/plugged/switch.vim/plugin/switch.vim	/^  let g:switch_find_smallest_match = 1$/;"	v
g:switch_mapping	.config/nvim/plugged/switch.vim/plugin/switch.vim	/^  let g:switch_mapping = 'gs'$/;"	v
g:switch_reverse_mapping	.config/nvim/plugged/switch.vim/plugin/switch.vim	/^  let g:switch_reverse_mapping = ''$/;"	v
g:syntastic_stl_format	.vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^    let g:syntastic_stl_format = _backup$/;"	v
g:syntastic_stl_format	.vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^    let g:syntastic_stl_format = get(g:, 'airline#extensions#syntastic#stl_format_err', '%E{[%fe/;"	v
g:syntastic_stl_format	.vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^    let g:syntastic_stl_format = get(g:, 'airline#extensions#syntastic#stl_format_warn', '%W{[%f/;"	v
g:taboo_tabline	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  let g:taboo_tabline = 0$/;"	v
g:tabular_default_format	.config/nvim/plugged/tabular/autoload/tabular.vim	/^  let g:tabular_default_format = "l1"$/;"	v
g:tabular_loaded	.config/nvim/plugged/tabular/plugin/Tabular.vim	/^let g:tabular_loaded = 1$/;"	v
g:tagalong_additional_filetypes	.config/nvim/plugged/tagalong.vim/plugin/tagalong.vim	/^  let g:tagalong_additional_filetypes = []$/;"	v
g:tagalong_filetypes	.config/nvim/plugged/tagalong.vim/plugin/tagalong.vim	/^  let g:tagalong_filetypes = ['html', 'xml', 'jsx', 'eruby', 'ejs', 'eco', 'php', 'htmldjango']$/;"	v
g:tagalong_mappings	.config/nvim/plugged/tagalong.vim/plugin/tagalong.vim	/^  let g:tagalong_mappings = ['c', 'C', 'v', 'i', 'a']$/;"	v
g:tagalong_timeout	.config/nvim/plugged/tagalong.vim/plugin/tagalong.vim	/^  let g:tagalong_timeout = 500$/;"	v
g:tagalong_verbose	.config/nvim/plugged/tagalong.vim/plugin/tagalong.vim	/^  let g:tagalong_verbose = 0$/;"	v
g:tagbar_status_func	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^  let g:tagbar_status_func = 'airline#extensions#tagbar#get_status'$/;"	v
g:tagbar_type_snippets	.config/nvim/plugged/ultisnips/ftplugin/snippets.vim	/^let g:tagbar_type_snippets = {$/;"	v
g:targets_aiAI	.config/nvim/plugged/targets.vim/README.md	/^### g:targets_aiAI$/;"	S
g:targets_gracious	.config/nvim/plugged/targets.vim/README.md	/^### g:targets_gracious$/;"	S
g:targets_jumpRanges	.config/nvim/plugged/targets.vim/README.md	/^### g:targets_jumpRanges$/;"	S
g:targets_mapped_aiAI	.config/nvim/plugged/targets.vim/README.md	/^### g:targets_mapped_aiAI$/;"	S
g:targets_nl	.config/nvim/configs/plugins.vim	/^let g:targets_nl = 'nN'$/;"	v
g:targets_nl	.config/nvim/plugged/targets.vim/README.md	/^### g:targets_nl$/;"	S
g:targets_nl	.config/nvim/plugged/targets.vim/plugin/targets.vim	/^    let g:targets_nl = get(g:, 'targets_nl', get(g:, 'targets_nlNL', 'nl')[0:1]) " legacy fallba/;"	v
g:targets_seekRanges	.config/nvim/plugged/targets.vim/README.md	/^### g:targets_seekRanges$/;"	S
g:terminal_color_0	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_0 = s:bg0[0]$/;"	v
g:terminal_color_0	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_0=s:base00[0]$/;"	v
g:terminal_color_0	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_0=s:base00[0]$/;"	v
g:terminal_color_0	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_0  = color00[0]$/;"	v
g:terminal_color_0	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_0 = "#333C47"$/;"	v
g:terminal_color_0	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_0 = "#252932"$/;"	v
g:terminal_color_0	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_0 = "#252932"$/;"	v
g:terminal_color_1	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_1 = s:gb.neutral_red[0]$/;"	v
g:terminal_color_1	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_1=s:base08[0]$/;"	v
g:terminal_color_1	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_1=s:base08[0]$/;"	v
g:terminal_color_1	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_1  = color01[0]$/;"	v
g:terminal_color_1	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_1 = "#9dd6f4"$/;"	v
g:terminal_color_1	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_1 = "#9dd6f4"$/;"	v
g:terminal_color_1	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_1 = "#9dd6f4"$/;"	v
g:terminal_color_10	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_10 = s:green[0]$/;"	v
g:terminal_color_10	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_10=s:base0B[0]$/;"	v
g:terminal_color_10	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_10=s:base0B[0]$/;"	v
g:terminal_color_10	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_10 = color10[0]$/;"	v
g:terminal_color_10	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_10 = "#f8f8f2"$/;"	v
g:terminal_color_10	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_10 = "#f8f8f2"$/;"	v
g:terminal_color_10	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_10 = "#f8f8f2"$/;"	v
g:terminal_color_11	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_11 = s:yellow[0]$/;"	v
g:terminal_color_11	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_11=s:base0A[0]$/;"	v
g:terminal_color_11	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_11=s:base0A[0]$/;"	v
g:terminal_color_11	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_11 = color11[0]$/;"	v
g:terminal_color_11	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_11 = "#9dd6f4"$/;"	v
g:terminal_color_11	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_11 = "#9dd6f4"$/;"	v
g:terminal_color_11	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_11 = "#9dd6f4"$/;"	v
g:terminal_color_12	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_12 = s:blue[0]$/;"	v
g:terminal_color_12	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_12=s:base0D[0]$/;"	v
g:terminal_color_12	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_12=s:base0D[0]$/;"	v
g:terminal_color_12	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_12 = color12[0]$/;"	v
g:terminal_color_12	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_12 = "#608DAB"$/;"	v
g:terminal_color_12	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_12 = "#608DAB"$/;"	v
g:terminal_color_12	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_12 = "#608DAB"$/;"	v
g:terminal_color_13	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_13 = s:purple[0]$/;"	v
g:terminal_color_13	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_13=s:base0E[0]$/;"	v
g:terminal_color_13	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_13=s:base0E[0]$/;"	v
g:terminal_color_13	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_13 = color13[0]$/;"	v
g:terminal_color_13	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_13 = "#5673BE" $/;"	v
g:terminal_color_13	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_13 = "#5673BE" $/;"	v
g:terminal_color_13	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_13 = "#5673BE" $/;"	v
g:terminal_color_14	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_14 = s:aqua[0]$/;"	v
g:terminal_color_14	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_14=s:base0C[0]$/;"	v
g:terminal_color_14	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_14=s:base0C[0]$/;"	v
g:terminal_color_14	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_14 = color14[0]$/;"	v
g:terminal_color_14	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_14 = "#5673BE"$/;"	v
g:terminal_color_14	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_14 = "#5673BE"$/;"	v
g:terminal_color_14	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_14 = "#5673BE"$/;"	v
g:terminal_color_15	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_15 = s:fg1[0]$/;"	v
g:terminal_color_15	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_15=s:base05[0]$/;"	v
g:terminal_color_15	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_15=s:base05[0]$/;"	v
g:terminal_color_15	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_15 = color15[0]$/;"	v
g:terminal_color_15	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_15 = "#5673BE"$/;"	v
g:terminal_color_15	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_15 = "#5673BE"$/;"	v
g:terminal_color_15	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_15 = "#5673BE"$/;"	v
g:terminal_color_16	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_16 ="#333C47"$/;"	v
g:terminal_color_16	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_16 ="#333C47"$/;"	v
g:terminal_color_16	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_16 ="#333C47"$/;"	v
g:terminal_color_2	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_2 = s:gb.neutral_green[0]$/;"	v
g:terminal_color_2	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_2=s:base0B[0]$/;"	v
g:terminal_color_2	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_2=s:base0B[0]$/;"	v
g:terminal_color_2	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_2  = color02[0]$/;"	v
g:terminal_color_2	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_2 = "#6E7B87"$/;"	v
g:terminal_color_2	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_2 = "#6E7B87"$/;"	v
g:terminal_color_2	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_2 = "#6E7B87"$/;"	v
g:terminal_color_3	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_3 = s:gb.neutral_yellow[0]$/;"	v
g:terminal_color_3	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_3=s:base0A[0]$/;"	v
g:terminal_color_3	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_3=s:base0A[0]$/;"	v
g:terminal_color_3	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_3  = color03[0]$/;"	v
g:terminal_color_3	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_3 = "#5F7C99"$/;"	v
g:terminal_color_3	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_3 = "#5F7C99"$/;"	v
g:terminal_color_3	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_3 = "#5F7C99"$/;"	v
g:terminal_color_4	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_4 = s:gb.neutral_blue[0]$/;"	v
g:terminal_color_4	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_4=s:base0D[0]$/;"	v
g:terminal_color_4	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_4=s:base0D[0]$/;"	v
g:terminal_color_4	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_4  = color04[0]$/;"	v
g:terminal_color_4	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_4 = "#edd98f"$/;"	v
g:terminal_color_4	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_4 = "#edd98f"$/;"	v
g:terminal_color_4	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_4 = "#edd98f"$/;"	v
g:terminal_color_5	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_5 = s:gb.neutral_purple[0]$/;"	v
g:terminal_color_5	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_5=s:base0E[0]$/;"	v
g:terminal_color_5	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_5=s:base0E[0]$/;"	v
g:terminal_color_5	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_5  = color05[0]$/;"	v
g:terminal_color_5	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_5 = "#f8f8f2"$/;"	v
g:terminal_color_5	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_5 = "#f8f8f2"$/;"	v
g:terminal_color_5	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_5 = "#f8f8f2"$/;"	v
g:terminal_color_6	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_6 = s:gb.neutral_aqua[0]$/;"	v
g:terminal_color_6	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_6=s:base0C[0]$/;"	v
g:terminal_color_6	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_6=s:base0C[0]$/;"	v
g:terminal_color_6	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_6  = color06[0]$/;"	v
g:terminal_color_6	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_6 = "#9dd6f4"$/;"	v
g:terminal_color_6	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_6 = "#9dd6f4"$/;"	v
g:terminal_color_6	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_6 = "#9dd6f4"$/;"	v
g:terminal_color_7	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_7 = s:fg4[0]$/;"	v
g:terminal_color_7	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_7=s:base05[0]$/;"	v
g:terminal_color_7	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_7=s:base05[0]$/;"	v
g:terminal_color_7	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_7  = color07[0]$/;"	v
g:terminal_color_7	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_7 = "#f8f8f2"$/;"	v
g:terminal_color_7	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_7 = "#f8f8f2"$/;"	v
g:terminal_color_7	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_7 = "#f8f8f2"$/;"	v
g:terminal_color_8	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_8 = s:gray[0]$/;"	v
g:terminal_color_8	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_8=s:base00[0]$/;"	v
g:terminal_color_8	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_8=s:base00[0]$/;"	v
g:terminal_color_8	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_8  = color08[0]$/;"	v
g:terminal_color_8	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_8 = "#edd98f"$/;"	v
g:terminal_color_8	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_8 = "#edd98f"$/;"	v
g:terminal_color_8	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_8 = "#edd98f"$/;"	v
g:terminal_color_9	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_9 = s:red[0]$/;"	v
g:terminal_color_9	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_9=s:base08[0]$/;"	v
g:terminal_color_9	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_9=s:base08[0]$/;"	v
g:terminal_color_9	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_9  = color09[0]$/;"	v
g:terminal_color_9	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_9 = "#608DAB"$/;"	v
g:terminal_color_9	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_9 = "#608DAB"$/;"	v
g:terminal_color_9	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_9 = "#608DAB"$/;"	v
g:terminal_color_background	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_background=s:base00[0]$/;"	v
g:terminal_color_background	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_background=s:base00[0]$/;"	v
g:terminal_color_background	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_background="#333C47"$/;"	v
g:terminal_color_background	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_background="#333C47"$/;"	v
g:terminal_color_background	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_background="#333C47"$/;"	v
g:terminal_color_foreground	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^let g:terminal_color_foreground=s:base10[0]$/;"	v
g:terminal_color_foreground	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^let g:terminal_color_foreground=s:base10[0]$/;"	v
g:terminal_color_foreground	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let g:terminal_color_foreground="#eee"$/;"	v
g:terminal_color_foreground	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let g:terminal_color_foreground="#eee"$/;"	v
g:terminal_color_foreground	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let g:terminal_color_foreground="#eee"$/;"	v
g:tmux_navigator_disable_when_zoomed	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^  let g:tmux_navigator_disable_when_zoomed = 0$/;"	v
g:tmux_navigator_no_mappings	.config/nvim/configs/plugins.vim	/^let g:tmux_navigator_no_mappings = 1$/;"	v
g:tmux_navigator_save_on_switch	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^  let g:tmux_navigator_save_on_switch = 0$/;"	v
g:unite_force_overwrite_statusline	.vim/plugged/vim-airline/autoload/airline/extensions/unite.vim	/^  let g:unite_force_overwrite_statusline = 0$/;"	v
g:user_emmet_install_global	.config/nvim/configs/plugins.vim	/^let g:user_emmet_install_global = 0$/;"	v
g:user_emmet_install_global	.config/nvim/plugged/emmet-vim/unittest.vim	/^      let g:user_emmet_install_global = s:old_user_emmet_install_global$/;"	v
g:user_emmet_leader_key	.config/nvim/configs/plugins.vim	/^let g:user_emmet_leader_key=','$/;"	v
g:user_emmet_leader_key	.config/nvim/plugged/emmet-vim/plugin/emmet.vim	/^  let g:user_emmet_leader_key = '<c-y>'$/;"	v
g:user_emmet_settings	.config/nvim/plugged/emmet-vim/unittest.vim	/^      let g:user_emmet_settings = s:old_user_emmet_settings$/;"	v
g:user_emmet_settings	.config/nvim/plugged/emmet-vim/unittest.vim	/^    let g:user_emmet_settings = {'variables': {'indentation': "\\t", 'use_selection': 1}}$/;"	v
g:vimfiler_force_overwrite_statusline	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^    let g:vimfiler_force_overwrite_statusline = 0$/;"	v
g:vimshell_escape_colors	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let g:vimshell_escape_colors = [$/;"	v
g:vista#executive#ctags#support_json_format	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^let g:vista#executive#ctags#support_json_format = s:support_json_format$/;"	v
g:vista#executives	.config/nvim/plugged/vista.vim/autoload/vista.vim	/^let g:vista#executives = map($/;"	v
g:vista#renderer#ctags	.config/nvim/plugged/vista.vim/autoload/vista/renderer.vim	/^let g:vista#renderer#ctags = get(g:, 'vista#renderer#ctags', 'default')$/;"	v
g:vista#renderer#default#vlnum_offset	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^let g:vista#renderer#default#vlnum_offset = 3$/;"	v
g:vista#renderer#enable_icon	.config/nvim/plugged/vista.vim/autoload/vista/renderer.vim	/^let g:vista#renderer#enable_icon = get(g:, 'vista#renderer#enable_icon',$/;"	v
g:vista#renderer#icons	.config/nvim/plugged/vista.vim/autoload/vista/renderer.vim	/^let g:vista#renderer#icons = map(extend(s:icons, get(g:, 'vista#renderer#icons', {})), 'tolower(/;"	v
g:vista#types#uctags#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/lua.vim	/^let g:vista#types#uctags# = s:types$/;"	v
g:vista#types#uctags#ada#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ada.vim	/^let g:vista#types#uctags#ada# = s:types$/;"	v
g:vista#types#uctags#ant#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ant.vim	/^let g:vista#types#uctags#ant# = s:types$/;"	v
g:vista#types#uctags#asm#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/asm.vim	/^let g:vista#types#uctags#asm# = s:types$/;"	v
g:vista#types#uctags#aspvbs#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/aspvbs.vim	/^let g:vista#types#uctags#aspvbs# = s:types$/;"	v
g:vista#types#uctags#asy#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/asy.vim	/^let g:vista#types#uctags#asy# = s:types$/;"	v
g:vista#types#uctags#automake#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/automake.vim	/^let g:vista#types#uctags#automake# = s:types$/;"	v
g:vista#types#uctags#awk#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/awk.vim	/^let g:vista#types#uctags#awk# = s:types$/;"	v
g:vista#types#uctags#basic#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/basic.vim	/^let g:vista#types#uctags#basic# = s:types$/;"	v
g:vista#types#uctags#beta#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/beta.vim	/^let g:vista#types#uctags#beta# = s:types$/;"	v
g:vista#types#uctags#c#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/c.vim	/^let g:vista#types#uctags#c# = s:types$/;"	v
g:vista#types#uctags#clojure#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/clojure.vim	/^let g:vista#types#uctags#clojure# = s:types$/;"	v
g:vista#types#uctags#cobol#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cobol.vim	/^let g:vista#types#uctags#cobol# = s:types$/;"	v
g:vista#types#uctags#config#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/config.vim	/^let g:vista#types#uctags#config# = s:types$/;"	v
g:vista#types#uctags#cpp#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cpp.vim	/^let g:vista#types#uctags#cpp# = s:types$/;"	v
g:vista#types#uctags#cs#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cs.vim	/^let g:vista#types#uctags#cs# = s:types$/;"	v
g:vista#types#uctags#css#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/css.vim	/^let g:vista#types#uctags#css# = s:types$/;"	v
g:vista#types#uctags#ctags#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ctags.vim	/^let g:vista#types#uctags#ctags# = s:types$/;"	v
g:vista#types#uctags#d#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/d.vim	/^let g:vista#types#uctags#d# = s:types$/;"	v
g:vista#types#uctags#dosbatch#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/dosbatch.vim	/^let g:vista#types#uctags#dosbatch# = s:types$/;"	v
g:vista#types#uctags#eiffel#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/eiffel.vim	/^let g:vista#types#uctags#eiffel# = s:types$/;"	v
g:vista#types#uctags#elm#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/elm.vim	/^let g:vista#types#uctags#elm# = s:types$/;"	v
g:vista#types#uctags#erlang#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/erlang.vim	/^let g:vista#types#uctags#erlang# = s:types$/;"	v
g:vista#types#uctags#fortran#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/fortran.vim	/^let g:vista#types#uctags#fortran# = s:types$/;"	v
g:vista#types#uctags#go#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/go.vim	/^let g:vista#types#uctags#go# = type_go$/;"	v
g:vista#types#uctags#html#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/html.vim	/^let g:vista#types#uctags#html# = s:types$/;"	v
g:vista#types#uctags#java#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/java.vim	/^let g:vista#types#uctags#java# = s:types$/;"	v
g:vista#types#uctags#javascript#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/javascript.vim	/^let g:vista#types#uctags#javascript# = s:types$/;"	v
g:vista#types#uctags#lisp#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/lisp.vim	/^let g:vista#types#uctags#lisp# = s:types$/;"	v
g:vista#types#uctags#make#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/make.vim	/^let g:vista#types#uctags#make# = s:types$/;"	v
g:vista#types#uctags#matlab#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/matlab.vim	/^let g:vista#types#uctags#matlab# = s:types$/;"	v
g:vista#types#uctags#mxml#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/mxml.vim	/^let g:vista#types#uctags#mxml# = s:types$/;"	v
g:vista#types#uctags#objc#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/objc.vim	/^let g:vista#types#uctags#objc# = s:types$/;"	v
g:vista#types#uctags#ocaml#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ocaml.vim	/^let g:vista#types#uctags#ocaml# = s:types$/;"	v
g:vista#types#uctags#pascal#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/pascal.vim	/^let g:vista#types#uctags#pascal# = s:types$/;"	v
g:vista#types#uctags#perl#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/perl.vim	/^let g:vista#types#uctags#perl# = s:types$/;"	v
g:vista#types#uctags#perl6#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/perl6.vim	/^let g:vista#types#uctags#perl6# = s:types6$/;"	v
g:vista#types#uctags#php#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/php.vim	/^let g:vista#types#uctags#php# = s:types$/;"	v
g:vista#types#uctags#proto#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/proto.vim	/^let g:vista#types#uctags#proto# = s:types$/;"	v
g:vista#types#uctags#python#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/python.vim	/^let g:vista#types#uctags#python# = s:types$/;"	v
g:vista#types#uctags#r#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/r.vim	/^let g:vista#types#uctags#r# = s:types$/;"	v
g:vista#types#uctags#rexx#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/rexx.vim	/^let g:vista#types#uctags#rexx# = s:types$/;"	v
g:vista#types#uctags#ruby#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ruby.vim	/^let g:vista#types#uctags#ruby# = s:types$/;"	v
g:vista#types#uctags#rust#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/rust.vim	/^let g:vista#types#uctags#rust# = s:types$/;"	v
g:vista#types#uctags#scheme#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/scheme.vim	/^let g:vista#types#uctags#scheme# = s:types$/;"	v
g:vista#types#uctags#sh#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/sh.vim	/^let g:vista#types#uctags#sh# = s:types$/;"	v
g:vista#types#uctags#slang#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/slang.vim	/^let g:vista#types#uctags#slang# = s:types$/;"	v
g:vista#types#uctags#sml#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/sml.vim	/^let g:vista#types#uctags#sml# = s:types$/;"	v
g:vista#types#uctags#sql#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/sql.vim	/^let g:vista#types#uctags#sql# = s:types$/;"	v
g:vista#types#uctags#tcl#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/tcl.vim	/^let g:vista#types#uctags#tcl# = s:types$/;"	v
g:vista#types#uctags#tex#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/tex.vim	/^let g:vista#types#uctags#tex# = s:types$/;"	v
g:vista#types#uctags#vala#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vala.vim	/^  let g:vista#types#uctags#vala#.ctagsbin = 'anjuta-tags'$/;"	v
g:vista#types#uctags#vala#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vala.vim	/^let g:vista#types#uctags#vala# = s:types$/;"	v
g:vista#types#uctags#vera#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vera.vim	/^let g:vista#types#uctags#vera# = s:types$/;"	v
g:vista#types#uctags#verilog#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/verilog.vim	/^let g:vista#types#uctags#verilog# = s:types$/;"	v
g:vista#types#uctags#vhdl#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vhdl.vim	/^let g:vista#types#uctags#vhdl# = s:types$/;"	v
g:vista#types#uctags#vim#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vim.vim	/^let g:vista#types#uctags#vim# = s:types$/;"	v
g:vista#types#uctags#yacc#	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/yacc.vim	/^let g:vista#types#uctags#yacc# = s:types$/;"	v
g:xmldata_aria	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let g:xmldata_aria = {$/;"	v
g:xmldata_html5	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let g:xmldata_html5 = {$/;"	v
g:xtab_cwds	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:xtab_cwds[tabpagenr()-1] = t:cwd$/;"	v
g:xtabline_alt_action	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    let g:xtabline_alt_action = get(g:, 'xtabline_alt_action', "buffer #")$/;"	v
g:xtabline_changing_buffer	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        let g:xtabline_changing_buffer = 1$/;"	v
g:xtabline_include_previews	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    let g:xtabline_include_previews = get(g:, 'xtabline_include_previews', 1)$/;"	v
gS	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^  xmap gS  <Plug>VgSurround$/;"	m
gS	.vim/plugged/vim-surround/plugin/surround.vim	/^  xmap gS  <Plug>VgSurround$/;"	m
gS	.vim/sessions/foo.vim	/^xmap gS <Plug>VgSurround$/;"	m
gather_candidates	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/source.py	/^    def gather_candidates($/;"	m	class:Base
gather_candidates	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/source/file.py	/^    def gather_candidates($/;"	m	class:Source
gather_candidates	.config/nvim/plugged/defx.nvim/rplugin/python3/denite/source/defx/history.py	/^    def gather_candidates(self, context: dict):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/defx.nvim/rplugin/python3/denite/source/defx/session.py	/^    def gather_candidates(self, context: dict):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def gather_candidates(self, context):$/;"	m	class:Base
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def gather_candidates(self, context):$/;"	m	class:Child
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def gather_candidates(self, context):$/;"	m	class:_Parent
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/directory_rec.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/__init__.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/point.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/filetype.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/help.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/menu.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/outline.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/output.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/register.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/source.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/spell.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/denite.nvim/rplugin/python3/deoplete/source/denite.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.config/nvim/plugged/ultisnips/rplugin/python3/deoplete/sources/ultisnips.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def gather_candidates(self, context):$/;"	m	class:Base
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def gather_candidates(self, context):$/;"	m	class:Child
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def gather_candidates(self, context):$/;"	m	class:_Parent
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/directory_rec.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/__init__.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/point.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/filetype.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/help.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/menu.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/outline.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/output.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/register.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/source.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/spell.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/denite.nvim/rplugin/python3/deoplete/source/denite.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.vim/plugged/omnisharp-vim/rplugin/python3/deoplete/sources/deoplete_OmniSharp.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates_recursive	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/defx.py	/^    def gather_candidates_recursive($/;"	m	class:Defx
gc	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^  nmap gc  <Plug>Commentary$/;"	m
gc	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^  omap gc  <Plug>Commentary$/;"	m
gc	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^  xmap gc  <Plug>Commentary$/;"	m
gcc	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^  nmap gcc <Plug>CommentaryLine$/;"	m
gcu	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^  nmap gcu <Plug>Commentary<Plug>Commentary$/;"	m
gd	.config/nvim/configs/plugins.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
generateUuid	.vim/plugged/coc.nvim/src/language-client/utils/uuid.ts	/^export function generateUuid(): string {$/;"	f
get	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/column.py	/^    def get(self, context: Context,$/;"	m	class:Base
get	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/icon.py	/^    def get(self, context: Context,$/;"	m	class:Column
get	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/indent.py	/^    def get(self, context: Context,$/;"	m	class:Column
get	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/mark.py	/^    def get(self, context: Context,$/;"	m	class:Column
get	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/size.py	/^    def get(self, context: Context,$/;"	m	class:Column
get	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/time.py	/^    def get(self, context: Context,$/;"	m	class:Column
get	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/type.py	/^    def get(self, context: Context,$/;"	m	class:Column
get	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/context.py	/^    def get(self, user_context):$/;"	m	class:Context
get	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  public get nextKey(): string {$/;"	C
get	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  public get previousKey(): string {$/;"	C
get	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  public get<T>(key: string, defaultValue?: T): T {$/;"	C
get	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public get list(): IList {$/;"	C
get	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public get name(): string {$/;"	C
get	.vim/plugged/coc.nvim/src/types.ts	/^  get(uri: string): Diagnostic[] | undefined$/;"	m	interface:DiagnosticCollection
get	.vim/plugged/coc.nvim/src/types.ts	/^  get<T>(key: string): T | undefined$/;"	m	interface:Memento
get	.vim/plugged/coc.nvim/src/types.ts	/^  get<T>(key: string, defaultValue: T): T$/;"	m	interface:Memento
get	.vim/plugged/coc.nvim/src/types.ts	/^  get<T>(section: string): T | undefined$/;"	m	interface:WorkspaceConfiguration
get	.vim/plugged/coc.nvim/src/types.ts	/^  get<T>(section: string, defaultValue: T): T$/;"	m	interface:WorkspaceConfiguration
get	.vim/plugged/denite.nvim/rplugin/python3/denite/context.py	/^    def get(self, user_context):$/;"	m	class:Context
getBytes	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytes() []byte {$/;"	f	struct:tui.LightRenderer	typeref:typename:[]byte
getBytesInternal	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytesInternal(buffer []byte, nonblock bool) []byte {$/;"	f	struct:tui.LightRenderer	typeref:typename:[]byte
getChange	.vim/plugged/coc.nvim/src/util/diff.ts	/^export function getChange(oldStr: string, newStr: string): Change {$/;"	f
getChangedFromEdits	.vim/plugged/coc.nvim/src/util/position.ts	/^export function getChangedFromEdits(start: Position, edits: TextEdit[]): Position | null {$/;"	f
getChangedKeys	.vim/plugged/coc.nvim/src/configuration/util.ts	/^export function getChangedKeys(from: { [key: string]: any }, to: { [key: string]: any }): string/;"	f
getChangedPosition	.vim/plugged/coc.nvim/src/util/position.ts	/^export function getChangedPosition(start: Position, edit: TextEdit): { line: number, character: /;"	f
getCharCodes	.vim/plugged/coc.nvim/src/util/fuzzy.ts	/^export function getCharCodes(str: string): number[] {$/;"	f
getCmdline	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async getCmdline(): Promise<string> {$/;"	m	class:Helper
getCodeActions	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def getCodeActions(mode):$/;"	f
getColor	.vim/plugged/coc.nvim/src/__tests__/modules/colors.test.ts	/^function getColor(r: number, g: number, b: number): Color {$/;"	f
getCompletions	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def getCompletions(partialWord):$/;"	f
getConfig	.vim/plugged/coc.nvim/src/completion/index.ts	/^    function getConfig<T>(key, defaultValue: T): T {$/;"	f
getConfig	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    function getConfig<T>(key: string, defaultValue: T): T {$/;"	f
getConfig	.vim/plugged/coc.nvim/src/languages.ts	/^    function getConfig<T>(key, defaultValue: T): T {$/;"	f
getConfig	.vim/plugged/coc.nvim/src/model/source.ts	/^  public getConfig<T>(key: string, defaultValue?: T): T | null {$/;"	m	class:Source
getConfigFile	.vim/plugged/coc.nvim/src/types.ts	/^  getConfigFile(target: ConfigurationTarget): string$/;"	m	interface:IWorkspace
getConfiguration	.vim/plugged/coc.nvim/src/language-client/configuration.ts	/^  private getConfiguration($/;"	m	class:ConfigurationFeature
getConfiguration	.vim/plugged/coc.nvim/src/types.ts	/^  getConfiguration(section?: string, _resource?: string): WorkspaceConfiguration$/;"	m	interface:IWorkspace
getConfigurationModel	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^function getConfigurationModel(): IConfigurationModel {$/;"	f
getConfigurationValue	.vim/plugged/coc.nvim/src/configuration/util.ts	/^export function getConfigurationValue<T>($/;"	f
getConsolidateConfiguration	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^  private getConsolidateConfiguration(): ConfigurationModel {$/;"	m	class:Configuration
getCurrentState	.vim/plugged/coc.nvim/src/types.ts	/^  getCurrentState(): Promise<EditerState>$/;"	m	interface:IWorkspace
getCursorPosition	.vim/plugged/coc.nvim/src/types.ts	/^  getCursorPosition(): Promise<Position>$/;"	m	interface:IWorkspace
getDocument	.vim/plugged/coc.nvim/src/types.ts	/^  getDocument(uri: number | string): Document$/;"	m	interface:IWorkspace
getDocumentation	.vim/plugged/coc.nvim/src/util/complete.ts	/^export function getDocumentation(item: CompletionItem): string {$/;"	f
getEnv	.vim/plugged/fzf/src/tui/light.go	/^func getEnv(name string, defaultValue int) int {$/;"	f	package:tui	typeref:typename:int
getFilterLabel	.vim/plugged/coc.nvim/src/list/worker.ts	/^function getFilterLabel(item: ListItem): string {$/;"	f
getFloat	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async getFloat(): Promise<Window> {$/;"	m	class:Helper
getForkOptions	.vim/plugged/coc.nvim/src/services.ts	/^function getForkOptions(config: LanguageServerConfig): ForkOptions {$/;"	f
getFormatOptions	.vim/plugged/coc.nvim/src/types.ts	/^  getFormatOptions(uri?: string): Promise<FormattingOptions>$/;"	m	interface:IWorkspace
getHiglights	.vim/plugged/coc.nvim/src/util/highlight.ts	/^export function getHiglights(lines: string[], filetype: string): Promise<Highlight[]> {$/;"	f
getItemUri	.vim/plugged/coc.nvim/src/list/worker.ts	/^function getItemUri(item: ListItem): string {$/;"	f
getItems	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async getItems(): Promise<VimCompleteItem[]> {$/;"	m	class:Helper
getKeymapModifier	.vim/plugged/coc.nvim/src/util/index.ts	/^export function getKeymapModifier(mode: MapMode): string {$/;"	f
getKeys	.vim/plugged/coc.nvim/src/configuration/util.ts	/^export function getKeys(obj: { [key: string]: any }, curr?: string): string[] {$/;"	f
getLanguageServerOptions	.vim/plugged/coc.nvim/src/services.ts	/^export function getLanguageServerOptions(id: string, name: string, config: LanguageServerConfig)/;"	f
getLine	.vim/plugged/coc.nvim/src/types.ts	/^  getLine(uri: string, line: number): Promise<string>$/;"	m	interface:IWorkspace
getLocationListItem	.vim/plugged/coc.nvim/src/diagnostic/util.ts	/^export function getLocationListItem(owner: string, bufnr: number, diagnostic: Diagnostic): Locat/;"	f
getLogFile	.vim/plugged/coc.nvim/src/util/logger.ts	/^function getLogFile(): string {$/;"	f
getLogFile	.vim/plugged/omnisharp-vim/python/bootstrap.py	/^def getLogFile():$/;"	f
getMatchResult	.vim/plugged/coc.nvim/src/util/score.ts	/^export function getMatchResult(text: string, query: string, filename = ''): MatchResult {$/;"	f
getNameFromSeverity	.vim/plugged/coc.nvim/src/diagnostic/util.ts	/^export function getNameFromSeverity(severity: DiagnosticSeverity): string {$/;"	f
getOffset	.vim/plugged/coc.nvim/src/types.ts	/^  getOffset(): Promise<number>$/;"	m	interface:IWorkspace
getPathOption	.vim/plugged/coc.nvim/src/source/file.ts	/^  private getPathOption(opt: CompleteOption): PathOption | null {$/;"	m	class:File
getPosition	.vim/plugged/coc.nvim/src/model/popup.ts	/^  public async getPosition(): Promise<any> {$/;"	m	class:Popup
getPosition	.vim/plugged/coc.nvim/src/util/complete.ts	/^export function getPosition(opt: CompleteOption): Position {$/;"	C
getPreviousContainer	.vim/plugged/coc.nvim/src/handler/index.ts	/^function getPreviousContainer(containerName: string, symbols: SymbolInfo[]): SymbolInfo {$/;"	f
getPriority	.vim/plugged/coc.nvim/src/list/source/extensions.ts	/^function getPriority(stat: string): number {$/;"	f
getPublicState	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public getPublicState(): State {$/;"	m	class:BaseLanguageClient
getQuickfixItem	.vim/plugged/coc.nvim/src/types.ts	/^  getQuickfixItem(loc: Location, text?: string, type?: string): Promise<QuickfixItem>$/;"	m	interface:IWorkspace
getResponse	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^def getResponse(ctx, path, additional_parameters=None, timeout=None, json=False):$/;"	f
getRevealOutputChannelOn	.vim/plugged/coc.nvim/src/services.ts	/^export function getRevealOutputChannelOn(revealOn: string | undefined): RevealOutputChannelOn {$/;"	f
getSeverityName	.vim/plugged/coc.nvim/src/diagnostic/util.ts	/^export function getSeverityName(severity: DiagnosticSeverity): string {$/;"	f
getSeverityType	.vim/plugged/coc.nvim/src/diagnostic/util.ts	/^export function getSeverityType(severity: DiagnosticSeverity): string {$/;"	f
getSnippetDocumentation	.vim/plugged/coc.nvim/src/util/complete.ts	/^export function getSnippetDocumentation(languageId: string, body: string): string {$/;"	f
getSnippets	.vim/plugged/coc.nvim/src/types.ts	/^  getSnippets(language: string): Promise<Snippet[]> | Snippet[]$/;"	m	interface:SnippetProvider
getSpawnOptions	.vim/plugged/coc.nvim/src/services.ts	/^function getSpawnOptions(config: LanguageServerConfig): SpawnOptions {$/;"	f
getStateName	.vim/plugged/coc.nvim/src/services.ts	/^export function getStateName(state: ServiceStat): string {$/;"	f
getSymbolKind	.vim/plugged/coc.nvim/src/util/convert.ts	/^export function getSymbolKind(kind: SymbolKind): string {$/;"	f
getText	.vim/plugged/coc.nvim/src/model/status.ts	/^  private getText(): string {$/;"	C
getTransportKind	.vim/plugged/coc.nvim/src/services.ts	/^export function getTransportKind(config: LanguageServerConfig): Transport {$/;"	f
getUri	.vim/plugged/coc.nvim/src/util/index.ts	/^export function getUri(fullpath: string, id: number, buftype: string): string {$/;"	f
getValidWord	.vim/plugged/coc.nvim/src/util/complete.ts	/^export function getValidWord(text: string, invalidChars: string[]): string {$/;"	f
getValue	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^  public getValue(section?: string): any {$/;"	m	class:Configuration
getWH	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			function getWH() {$/;"	f	function:AnonymousFunctiond47633f82700
getWord	.vim/plugged/coc.nvim/src/util/complete.ts	/^export function getWord(item: CompletionItem, opt: CompleteOption): string {$/;"	f
getWords	.vim/plugged/coc.nvim/src/source/buffer.ts	/^  private getWords(bufnr: number): string[] {$/;"	m	class:Buffer
get_action	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def get_action(self, context, action_name, targets):$/;"	m	class:Child
get_action	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def get_action(self, context, action_name, targets):$/;"	m	class:_Parent
get_action	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def get_action(self, context, action_name, targets):$/;"	m	class:Child
get_action	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def get_action(self, context, action_name, targets):$/;"	m	class:_Parent
get_action_names	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def get_action_names(self):$/;"	m	class:Base
get_action_names	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def get_action_names(self, context, targets):$/;"	m	class:Child
get_action_names	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def get_action_names(self, context, targets):$/;"	m	class:_Parent
get_action_names	.vim/plugged/denite.nvim/rplugin/python3/denite/base/kind.py	/^    def get_action_names(self):$/;"	m	class:Base
get_action_names	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def get_action_names(self, context, targets):$/;"	m	class:Child
get_action_names	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def get_action_names(self, context, targets):$/;"	m	class:_Parent
get_actions	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^    def get_actions(self) -> typing.Dict[str, ActionTable]:$/;"	m	class:Base
get_actions	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^    def get_actions(self) -> typing.Dict[str, ActionTable]:$/;"	m	class:Kind
get_buffer_data	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def get_buffer_data(self):$/;"	m	class:VimInterface
get_buffer_filetypes	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def get_buffer_filetypes(self):$/;"	m	class:SnippetManager
get_candidate	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/__init__.py	/^        def get_candidate(self, args: typing.List[$/;"	m	class:DefxHandlers
get_candidate	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/rplugin.py	/^    def get_candidate(self) -> typing.Dict[str, typing.Union[str, bool]]:$/;"	m	class:Rplugin
get_candidate_pos	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def get_candidate_pos(self, path: Path, index: int) -> int:$/;"	m	class:View
get_clear_priority	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_base.py	/^    def get_clear_priority(self, filetypes):$/;"	m	class:SnippetSource
get_cleared	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_base.py	/^    def get_cleared(self, filetypes):$/;"	m	class:SnippetSource
get_comment_format	.config/nvim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def get_comment_format():$/;"	f
get_comment_format	.vim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def get_comment_format():$/;"	f
get_complete_position	.config/nvim/plugged/denite.nvim/rplugin/python3/deoplete/source/denite.py	/^    def get_complete_position(self, context):$/;"	m	class:Source
get_complete_position	.vim/plugged/denite.nvim/rplugin/python3/deoplete/source/denite.py	/^    def get_complete_position(self, context):$/;"	m	class:Source
get_cursor_candidate	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def get_cursor_candidate($/;"	m	class:View
get_cursor_pos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def get_cursor_pos():$/;"	f
get_custom	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def get_custom(custom, kind, name, key, default):$/;"	f
get_custom_source	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def get_custom_source(custom, source_name, key, default):$/;"	f
get_deep_extends	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_base.py	/^    def get_deep_extends(self, base_filetypes):$/;"	m	class:SnippetSource
get_latest_release	.vim/plugged/coc.nvim/install.sh	/^get_latest_release() {$/;"	f
get_latest_version	.vim/plugged/omnisharp-vim/installer/omnisharp-manager.sh	/^get_latest_version() {$/;"	f
get_mark_pos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def get_mark_pos(name):$/;"	f
get_matching_snippets	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_snippet_dictionary.py	/^    def get_matching_snippets(self, trigger, potentially, autotrigger_only,$/;"	m	class:SnippetDictionary
get_navigate_response	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def get_navigate_response(endpoint):$/;"	f
get_option	.config/nvim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^def get_option(snip, option, default=None):$/;"	f
get_option	.vim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^def get_option(snip, option, default=None):$/;"	f
get_problem	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def get_problem(slug):$/;"	f
get_problems	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def get_problems(categories):$/;"	f
get_python_exe	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^    def get_python_exe():$/;"	m	class:Source
get_python_exe	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^    def get_python_exe():$/;"	m	class:Source
get_quick_move_table	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^    def get_quick_move_table():$/;"	f	function:_quick_move	file:
get_quick_move_table	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^    def get_quick_move_table():$/;"	f	function:_quick_move	file:
get_regex	.config/nvim/plugged/vim-ruby/spec/syntax/statement_modifiers_spec.rb	/^      def get_regex$/;"	f
get_root_candidate	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/source.py	/^    def get_root_candidate($/;"	m	class:Base
get_root_candidate	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/defx.py	/^    def get_root_candidate(self) -> Candidate:$/;"	m	class:Defx
get_root_candidate	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/source/file.py	/^    def get_root_candidate($/;"	m	class:Source
get_score	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/rank.py	/^def get_score(string, query_chars):$/;"	f
get_score	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^def get_score(pattern, candidate):$/;"	f
get_score	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/rank.py	/^def get_score(string, query_chars):$/;"	f
get_score	.vim/plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^def get_score(pattern, candidate):$/;"	f
get_selected_candidates	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def get_selected_candidates($/;"	m	class:View
get_snippets	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_base.py	/^    def get_snippets(self, filetypes, before, possible, autotrigger_only,$/;"	m	class:SnippetSource
get_status	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def get_status(self, context):$/;"	m	class:Base
get_status	.vim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def get_status(self, context):$/;"	m	class:Base
get_submission	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def get_submission(sid):$/;"	f
get_submissions	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def get_submissions(slug):$/;"	f
get_tabstops	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_snippet_instance.py	/^    def get_tabstops(self):$/;"	m	class:SnippetInstance
get_ui	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^    def get_ui(self, buffer_name):$/;"	m	class:Rplugin
get_ui	.vim/plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^    def get_ui(self, buffer_name):$/;"	m	class:Rplugin
get_with_variable_text	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/column.py	/^    def get_with_variable_text($/;"	m	class:Base
get_with_variable_text	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/filename.py	/^    def get_with_variable_text($/;"	m	class:Column
getch	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f	struct:tui.LightRenderer	typeref:typename:(int, bool)
getuid	.vim/plugged/coc.nvim/src/util/platform.ts	/^  getuid(): number$/;"	m	interface:INodeProcess
gf	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^    nnoremap <silent><buffer> gf         :Bopen    <C-R><C-F><CR>$/;"	m
gf	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^    nmap <buffer><silent> gf         <SID>:find <Plug><cfile><CR>$/;"	m
ghost-text.vim	.vim/plugged/ghost-text.vim/README.md	/^# ghost-text.vim$/;"	c
gi	.config/nvim/configs/plugins.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
glob	.config/nvim/plugged/coc.nvim/package.json	/^    "glob": "^7.1.4",$/;"	s	object:dependencies
glob	.vim/plugged/coc.nvim/package.json	/^    "glob": "^7.1.4",$/;"	s	object:dependencies
globPattern	.vim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^    let { globPattern,$/;"	v
global	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	global: {},$/;"	p	class:jQuery.event
global	.vim/plugged/coc.nvim/src/util/platform.ts	/^declare let global: any$/;"	v
global definitions	.config/nvim/plugged/switch.vim/spec/plugin/global_spec.rb	/^describe "global definitions" do$/;"	d
globalCodeCheck	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def globalCodeCheck():$/;"	f
globalExtensions	.vim/plugged/coc.nvim/src/extensions.ts	/^    let { globalExtensions, watchExtensions } = workspace.env$/;"	v
globalExtensions	.vim/plugged/coc.nvim/src/types.ts	/^  readonly globalExtensions: string[]$/;"	p	interface:Env
globalSetup	.config/nvim/plugged/coc.nvim/package.json	/^    "globalSetup": ".\/jest.js",$/;"	s	object:jest
globalSetup	.vim/plugged/coc.nvim/package.json	/^    "globalSetup": ".\/jest.js",$/;"	s	object:jest
globalState	.vim/plugged/coc.nvim/src/extensions.ts	/^          globalState: this.memos.createMemento(`${id}|global`),$/;"	v
globalState	.vim/plugged/coc.nvim/src/types.ts	/^  globalState: Memento$/;"	p	interface:ExtensionContext
globalStats	.vim/plugged/coc.nvim/src/extensions.ts	/^    let globalStats = await this.globalExtensionStats()$/;"	v
globalValue	.vim/plugged/coc.nvim/src/types.ts	/^  globalValue?: T$/;"	p	interface:ConfigurationInspect
global_attributes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, event_handler_attributes)$/;"	v
global_attributes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, microdata_attributes)$/;"	v
global_attributes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, rdfa_attributes)$/;"	v
global_attributes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let global_attributes = extend(global_attributes, {'role': role})$/;"	v
global_attributes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let global_attributes = extend(core_attributes, xml_attributes)$/;"	v
global_defx	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/__init__.py	/^    global_defx = Rplugin(vim)$/;"	v
global_denite	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    global_denite = Rplugin(vim)$/;"	v
global_denite	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    global_denite = Rplugin(vim)$/;"	v
global_states_and_properties	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let global_states_and_properties = {$/;"	v
globals	.config/nvim/plugged/coc.nvim/package.json	/^    "globals": {$/;"	o	object:jest
globals	.vim/plugged/coc.nvim/package.json	/^    "globals": {$/;"	o	object:jest
globals	.vim/plugged/coc.nvim/src/util/platform.ts	/^export const globals: any = _globals$/;"	C
globruntime	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def globruntime(runtimepath, path):$/;"	f
globruntime	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def globruntime(runtimepath, path):$/;"	f
go	.vim/plugged/fzf/test/test_go.rb	/^  def go(*args)$/;"	f
go lists	.config/nvim/plugged/sideways.vim/spec/plugin/go_lists_spec.rb	/^describe "go lists" do$/;"	d
gotoDefinition	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def gotoDefinition():$/;"	f
goyo	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^  augroup goyo$/;"	a
goyo#execute	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! goyo#execute(bang, dim)$/;"	f
goyo.vim ([고요](http://en.wiktionary.org/wiki/고요하다))	.config/nvim/plugged/goyo.vim/README.md	/^goyo.vim ([고요](http:\/\/en.wiktionary.org\/wiki\/고요하다))$/;"	c
goyop	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^  augroup goyop$/;"	a
gr	.config/nvim/configs/plugins.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
grabBackFocus	vimium-options.json	/^  "grabBackFocus": false,$/;"	b
graphic_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let graphic_role = [$/;"	v
green	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    let { red, green, blue } = toHexColor(color)$/;"	v
green	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^  let { red, green, blue } = color$/;"	v
group	.vim/plugged/coc.nvim/src/list/ui.ts	/^          let group = `CocList${foreground}${background}`$/;"	v
group	.vim/plugged/coc.nvim/src/util/array.ts	/^export function group<T>(array: T[], size: number): T[][] {$/;"	f
grouped	.vim/plugged/coc.nvim/src/model/document.ts	/^    for (let grouped of group(arr, 8)) {$/;"	v
groups	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^    let groups: { [index: string]: Range[] } = {}$/;"	v
groups	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    let groups = group(colors, 100)$/;"	v
gruvbox#hls_hide	.config/nvim/plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#hls_hide()$/;"	f
gruvbox#hls_show	.config/nvim/plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#hls_show()$/;"	f
gruvbox#hls_toggle	.config/nvim/plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#hls_toggle()$/;"	f
gruvbox#invert_signs_toggle	.config/nvim/plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#invert_signs_toggle()$/;"	f
guess_edit	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_diff.py	/^def guess_edit(initial_line, last_text, current_text, vim_state):$/;"	f
guid	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	guid: 1,$/;"	p	class:jQuery.event
gutentags#add_job	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#build_default_job_options	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#chdir	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#generate	.config/nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#init	.config/nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#on_job_exit	.config/nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#generate	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#init	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#on_job_exit	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#default_get_project_root	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_get_project_root(path) abort$/;"	f
gutentags#default_io_cb	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_io_cb(chan, msg) abort$/;"	f
gutentags#error	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#fake	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#find_job_index_by_data	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#get_cachefile	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_job_data	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_plat_file	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	.config/nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#init	.config/nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	.config/nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#inprogress	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#make_args	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#normalizepath	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#remove_job	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#rescan	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#start_job	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#statusline	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#stripslash	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#warning	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags_detect	.config/nvim/plugged/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
gx	.vim/sessions/foo.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
gx	.vim/sessions/foo.vim	/^vmap gx <Plug>NetrwBrowseXVis$/;"	m
gy	.config/nvim/configs/plugins.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
h	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> h    denite#do_map('do_action', 'split')$/;"	m
h	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> h$/;"	m
h	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  h = 104,$/;"	e	enum:CharCode
h	.vim/plugged/ghost-text.vim/python3/test/test_http_server.py	/^h = http_handler.GhostTextHttpHandlerFactory(8765)$/;"	v
h1	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^h1 {$/;"	s
h3 a	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^li a, h3 a {$/;"	s
h3 a:hover	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^li a:hover, li a:active, h3 a:hover, li a:active {$/;"	s
haml	.config/nvim/plugged/sideways.vim/spec/plugin/haml_spec.rb	/^describe "haml" do$/;"	d
haml definitions	.config/nvim/plugged/switch.vim/spec/plugin/haml_spec.rb	/^describe "haml definitions" do$/;"	d
handle	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				var handle = jQuery.data( elem, "handle" );$/;"	v	class:jQuery.event
handle	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var handle = jQuery.data(elem, "handle");$/;"	v
handle	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def handle(self):$/;"	m	class:NvimHandler
handle	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def handle(self):$/;"	m	class:VimHandler
handleConnectionClosed	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  protected handleConnectionClosed(): void {$/;"	m	class:LanguageClient
handle_action	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/_common.py	/^def handle_action(head, tail, line_index):$/;"	f
handle_context	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/_common.py	/^def handle_context(tail, line_index):$/;"	f
handle_extends	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/_common.py	/^def handle_extends(tail, line_index):$/;"	f
handlebars components	.config/nvim/plugged/sideways.vim/spec/plugin/handlebars_spec.rb	/^describe "handlebars components" do$/;"	d
handler	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var handler = handlers[j];$/;"	v
handler	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    for (let handler of this._dynamicFeatures.values()) {$/;"	v
handler	.vim/plugged/coc.nvim/src/plugin.ts	/^  private handler: Handler$/;"	p	class:Plugin
handler	.vim/plugged/ghost-text.vim/python3/http_handler.py	/^    def handler(self):$/;"	m	class:GhostTextHttpHandlerFactory
handler	.vim/plugged/ghost-text.vim/python3/vim_channel_handler.py	/^    def handler(self):$/;"	m	class:Channel
handler	.vim/plugged/ghost-text.vim/python3/vim_websocket_handler.py	/^    def handler(self):$/;"	m	class:Manager
handler	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^        def handler(obj):$/;"	f	function:from_client	file:
handler	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^    def handler(obj):$/;"	f	function:to_client	file:
handlers	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var val, ret, namespace, all, handlers;$/;"	v
handlers	.vim/plugged/coc.nvim/src/events.ts	/^    let handlers = this.handlers.get(event)$/;"	v
handlers	.vim/plugged/coc.nvim/src/events.ts	/^  private handlers: Map<string, Function[]> = new Map()$/;"	p	class:Events
has	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let has = await nvim.call('coc#list#has_preview')$/;"	v
has	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let has = await nvim.call( 'coc#list#has_preview' )$/;"	C
has	.vim/plugged/coc.nvim/src/types.ts	/^  has(section: string): boolean$/;"	m	interface:WorkspaceConfiguration
has	.vim/plugged/coc.nvim/src/types.ts	/^  has(uri: string): boolean$/;"	m	interface:DiagnosticCollection
hasAdditionalEdit	.vim/plugged/coc.nvim/src/languages.ts	/^    let hasAdditionalEdit = item.additionalTextEdits && item.additionalTextEdits.length > 0$/;"	v
hasFloat	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let hasFloat = await nvim.call('coc#util#has_float')$/;"	v
hasFloat	.vim/plugged/coc.nvim/src/__tests__/completion/float.test.ts	/^    let hasFloat = await nvim.call('coc#util#has_float')$/;"	v
hasFloat	.vim/plugged/coc.nvim/src/__tests__/modules/floatFactory.test.ts	/^    let hasFloat = await nvim.call('coc#util#has_float')$/;"	v
hasMatch	.vim/plugged/coc.nvim/src/util/fzy.ts	/^export function hasMatch(needle, haystack): boolean {$/;"	f
hasOwnProperty	.vim/plugged/coc.nvim/src/util/is.ts	/^const hasOwnProperty = Object.prototype.hasOwnProperty$/;"	C
hasOwnProperty	.vim/plugged/coc.nvim/src/util/lodash.ts	/^const hasOwnProperty = objectProto.hasOwnProperty$/;"	C
hasPreviewFlags	.vim/plugged/fzf/src/terminal.go	/^func hasPreviewFlags(template string) (plus bool, query bool) {$/;"	f	package:fzf	typeref:typename:(plus bool, query bool)
hasPreviewWindow	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewWindow() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
hasPreviewer	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewer() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
hasRangeFormater	.vim/plugged/coc.nvim/src/languages.ts	/^      let hasRangeFormater = this.formatRangeManager.hasProvider(document)$/;"	v
hasResolve	.vim/plugged/coc.nvim/src/languages.ts	/^    let hasResolve = typeof provider.resolveCompletionItem === 'function'$/;"	v
hasSelected	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let hasSelected = this.hasSelected()$/;"	v
hasValue	.vim/plugged/coc.nvim/src/list/basic.ts	/^  hasValue: boolean$/;"	p	interface:ArgumentItem
hasValue	.vim/plugged/coc.nvim/src/types.ts	/^  hasValue?: boolean$/;"	p	interface:ListArgument
has_option	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def has_option(self, opt):$/;"	m	class:SnippetDefinition
has_unix	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    has_unix = True$/;"	v
has_version	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def has_version(self, major, minor, patchlevel):$/;"	m	class:VimInterface
hatch	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^hatch,$/;"	s
hatchpath	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^hatchpath,$/;"	s
headCount	.vim/plugged/coc.nvim/src/model/document.ts	/^    let headCount = doc.offsetAt(sp)$/;"	v
head_tail	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text.py	/^def head_tail(line):$/;"	f
header	.vim/plugged/fzf/src/terminal.go	/^	header     []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
header0	.vim/plugged/fzf/src/terminal.go	/^	header0    []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
health#coc#check	.config/nvim/plugged/coc.nvim/autoload/health/coc.vim	/^function! health#coc#check() abort$/;"	f
health#coc#check	.vim/plugged/coc.nvim/autoload/health/coc.vim	/^function! health#coc#check() abort$/;"	f
health#defx#check	.config/nvim/plugged/defx.nvim/autoload/health/defx.vim	/^function! health#defx#check() abort$/;"	f
health#denite#check	.config/nvim/plugged/denite.nvim/autoload/health/denite.vim	/^function! health#denite#check() abort$/;"	f
health#denite#check	.vim/plugged/denite.nvim/autoload/health/denite.vim	/^function! health#denite#check() abort$/;"	f
height	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let height = await win.height$/;"	v
height	.vim/plugged/coc.nvim/src/__tests__/modules/floatBuffer.test.ts	/^    let height = buf.getHeight(docs, 80)$/;"	v
height	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  height: number$/;"	p	interface:Bounding
height	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let bounding: PumBounding = { col, row, height, width, scrollbar }$/;"	v
height	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { completed_item, col, row, height, width, scrollbar } = ev$/;"	v
height	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let height = Math.min(this.previewHeight, lineCount)$/;"	v
height	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let height = Math.min(this.previewHeight, lines ? Math.max(lines.length, 1) : Infinity)$/;"	v
height	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let height = Math.max(1, Math.min(this.items.length, maxHeight))$/;"	v
height	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let height = Math.max(1, Math.min(items.length, maxHeight))$/;"	v
height	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { window, height } = this$/;"	v
height	.vim/plugged/coc.nvim/src/list/ui.ts	/^  private height: number$/;"	p	class:ListUI
height	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let height = this.floatBuffer.getHeight(docs, maxWidth)$/;"	v
height	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^  height: number$/;"	p	interface:WindowConfig
height	.vim/plugged/coc.nvim/src/types.ts	/^  height: number$/;"	p	interface:PopupChangeEvent
height	.vim/plugged/coc.nvim/src/types.ts	/^  readonly height: number$/;"	p	interface:PumBounding
height	.vim/plugged/fzf/src/tui/light.go	/^	height        int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
height	.vim/plugged/fzf/src/tui/light.go	/^	height   int$/;"	m	struct:tui.LightWindow	typeref:typename:int
height	.vim/plugged/fzf/src/tui/tcell.go	/^	height      int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
hello	.config/nvim/plugged/vim-ruby/spec/syntax/symbols_spec.rb	/^      def hello$/;"	f
hello	.config/nvim/plugged/vim-textobj-rubyblock/t/examples.rb	/^def hello$/;"	f
hello	.vim/plugged/ghost-text.vim/python3/test/test_websocket_server.py	/^async def hello(websocket, path):$/;"	f
help	.vim/plugged/fzf/bin/fzf-tmux	/^help() {$/;"	f
help	.vim/plugged/fzf/install	/^help() {$/;"	f
help	.vim/plugged/fzf/src/options.go	/^func help(code int) {$/;"	f	package:fzf
help	.vim/plugged/fzf/uninstall	/^help() {$/;"	f
hex	.vim/plugged/coc.nvim/src/__tests__/modules/colors.test.ts	/^    let hex = toHexString(color)$/;"	v
hex	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let hex = toHexString({$/;"	v
hex	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^      let hex = toHexString(color)$/;"	v
hi	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^function! <sid>hi(group, fg, bg, attr, attrsp)$/;"	f
hi	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^function! <sid>hi(group, fg, bg, attr, attrsp)$/;"	f
hi	.vim/plugged/coc.nvim/src/list/ui.ts	/^        for (let hi of ansiHighlights) {$/;"	v
hi	.vim/plugged/coc.nvim/src/list/worker.ts	/^          let hi = this.getHighlights(item.filterLabel, item.matches)$/;"	v
hi	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^fun <sid>hi(group, guifg, guibg, ctermfg, ctermbg, attr)$/;"	f
hi	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^fun <sid>hi(group, guifg, guibg, ctermfg, ctermbg, attr)$/;"	f
hi	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^fun <sid>hi(group, guifg, guibg, ctermfg, ctermbg, attr)$/;"	f
hi_name	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                let { hi_name } = item[item.length - 1][0]$/;"	C	function:getHiglights
hidden	.vim/plugged/coc.nvim/src/types.ts	/^  hidden?: boolean$/;"	p	interface:PopupOptions
hidden	.vim/plugged/fzf/src/options.go	/^	hidden   bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
hide	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	hide: function(){$/;"	m	class:jQuery.fx
hide	.vim/plugged/coc.nvim/src/model/popup.ts	/^  public hide(): void {$/;"	m	class:Popup
hide	.vim/plugged/coc.nvim/src/model/status.ts	/^      hide: () => {$/;"	C
hide	.vim/plugged/coc.nvim/src/model/terminal.ts	/^  public async hide(): Promise<void> {$/;"	m	class:TerminalModel
hide	.vim/plugged/coc.nvim/src/types.ts	/^  hide(): void$/;"	m	interface:OutputChannel
hide	.vim/plugged/coc.nvim/src/types.ts	/^  hide(): void$/;"	m	interface:StatusBarItem
hide	.vim/plugged/coc.nvim/src/types.ts	/^  hide(): void$/;"	m	interface:Terminal
hideHud	vimium-options.json	/^  "hideHud": false,$/;"	b
highPrioritySourceLimit	.vim/plugged/coc.nvim/src/types.ts	/^  highPrioritySourceLimit: number$/;"	p	interface:CompleteConfig
highlight	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def highlight(self):$/;"	m	class:Base
highlight	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/outline.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let highlight = getNameFromSeverity(diagnostic.severity) + 'VirtualText'$/;"	v
highlight	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let highlight = highlights[i]$/;"	v
highlight	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^          let line = lines[highlight.line]$/;"	v
highlight	.vim/plugged/coc.nvim/src/types.ts	/^  highlight?: string$/;"	p	interface:PopupOptions
highlight	.vim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def highlight(self):$/;"	m	class:Base
highlight	.vim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.vim/plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.vim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.vim/plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.vim/plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.vim/plugged/denite.nvim/rplugin/python3/denite/source/outline.py	/^    def highlight(self):$/;"	m	class:Source
highlight	.vim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^    def highlight(self):$/;"	m	class:Source
highlight_commands	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/column.py	/^    def highlight_commands(self) -> typing.List[str]:$/;"	m	class:Base
highlight_commands	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/filename.py	/^    def highlight_commands(self) -> typing.List[str]:$/;"	m	class:Column
highlight_commands	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/icon.py	/^    def highlight_commands(self) -> typing.List[str]:$/;"	m	class:Column
highlight_commands	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/mark.py	/^    def highlight_commands(self) -> typing.List[str]:$/;"	m	class:Column
highlight_commands	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/size.py	/^    def highlight_commands(self) -> typing.List[str]:$/;"	m	class:Column
highlight_commands	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/time.py	/^    def highlight_commands(self) -> typing.List[str]:$/;"	m	class:Column
highlight_commands	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/type.py	/^    def highlight_commands(self) -> typing.List[str]:$/;"	m	class:Column
highlighter	.vim/plugged/coc.nvim/src/handler/colors.ts	/^        for (let highlighter of this.highlighters.values()) {$/;"	v
highlighter	.vim/plugged/coc.nvim/src/handler/colors.ts	/^      let highlighter = this.highlighters.get(bufnr)$/;"	v
highlighter	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    for (let highlighter of this.highlighters.values()) {$/;"	v
highlighter	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let highlighter = this.getHighlighter(document.bufnr)$/;"	v
highlighter	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let highlighter = this.highlighters.get(bufnr)$/;"	v
highlights	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^    let highlights = await this.getHighlights(document)$/;"	v
highlights	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^    let highlights: DocumentHighlight[]$/;"	v
highlights	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { highlights, items } = this$/;"	v
highlights	.vim/plugged/coc.nvim/src/list/ui.ts	/^  private highlights: ListHighlights[] = []$/;"	p	class:ListUI
highlights	.vim/plugged/coc.nvim/src/list/worker.ts	/^            highlights = res.highlights$/;"	v
highlights	.vim/plugged/coc.nvim/src/list/worker.ts	/^            highlights = this.getItemsHighlight(items)$/;"	v
highlights	.vim/plugged/coc.nvim/src/list/worker.ts	/^            highlights = this.getItemsHighlight(remain)$/;"	v
highlights	.vim/plugged/coc.nvim/src/list/worker.ts	/^          let highlights: ListHighlights[] = []$/;"	v
highlights	.vim/plugged/coc.nvim/src/list/worker.ts	/^        highlights = res.highlights$/;"	v
highlights	.vim/plugged/coc.nvim/src/list/worker.ts	/^        highlights = this.getItemsHighlight(items)$/;"	v
highlights	.vim/plugged/coc.nvim/src/list/worker.ts	/^      highlights = res.highlights$/;"	v
highlights	.vim/plugged/coc.nvim/src/list/worker.ts	/^      highlights = this.getItemsHighlight(items)$/;"	v
highlights	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let highlights: ListHighlights[] = []$/;"	v
highlights	.vim/plugged/coc.nvim/src/list/worker.ts	/^      }$/;"	v
highlights	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let highlights: AnsiHighlight[] = []$/;"	v
highlights	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let highlights: ListHighlights[] = []$/;"	v
highlights	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let { buffer, lines, nvim, highlights } = this$/;"	v
highlights	.vim/plugged/coc.nvim/src/types.ts	/^  highlights: ListHighlights[]$/;"	p	interface:ListItemsEvent
hint	.vim/plugged/coc.nvim/src/types.ts	/^  hint: number$/;"	p	interface:DiagnosticInfo
hintSign	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^  hintSign: '>>'$/;"	C
hintSign	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let { errorSign, warningSign, infoSign, hintSign } = this.config$/;"	v
hintSign	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  hintSign: string$/;"	p	interface:DiagnosticConfig
history	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public history: History$/;"	C
history	.vim/plugged/fzf/src/terminal.go	/^	history    *History$/;"	m	struct:fzf.Terminal	typeref:typename:*History
hjkl motions	.config/nvim/plugged/vim-easymotion/README.md	/^### hjkl motions$/;"	S
hl	.vim/plugged/vim-airline/t/highlighter.vim	/^    let hl = airline#highlighter#get_highlight('Foo1_to_Foo2')$/;"	v
hl	.vim/plugged/vim-airline/t/themes.vim	/^    let hl = airline#themes#get_highlight('Foo', 'bold', 'italic')$/;"	v
hl	.vim/plugged/vim-airline/t/themes.vim	/^    let hl = airline#themes#get_highlight2(['Foo','bg'], ['Foo','fg'], 'italic', 'bold')$/;"	v
hlGroup	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^      groups[hlGroup] = groups[hlGroup] || []$/;"	v
hlGroup	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^      groups[hlGroup].push(hl.range)$/;"	v
hlGroup	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^      let hlGroup = hl.kind == DocumentHighlightKind.Text$/;"	v
hlGroup	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^    for (let hlGroup of Object.keys(groups)) {$/;"	v
hlGroup	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    let hlGroup = `BG${toHexString(color)}`$/;"	v
hlGroup	.vim/plugged/coc.nvim/src/list/ui.ts	/^          let { span, hlGroup } = hi$/;"	v
hlGroup	.vim/plugged/coc.nvim/src/list/ui.ts	/^        let { spans, hlGroup } = highlight$/;"	v
hlGroup	.vim/plugged/coc.nvim/src/list/worker.ts	/^          hlGroup = `CocList${upperFirst(foreground)}${upperFirst(background)}`$/;"	v
hlGroup	.vim/plugged/coc.nvim/src/list/worker.ts	/^          hlGroup = `CocListBg${upperFirst(background)}`$/;"	v
hlGroup	.vim/plugged/coc.nvim/src/list/worker.ts	/^          hlGroup = `CocListFg${upperFirst(foreground)}`$/;"	v
hlGroup	.vim/plugged/coc.nvim/src/list/worker.ts	/^        let hlGroup = ''$/;"	v
hlGroup	.vim/plugged/coc.nvim/src/types.ts	/^  hlGroup: string$/;"	p	interface:AnsiHighlight
hlGroup	.vim/plugged/coc.nvim/src/types.ts	/^  hlGroup?: string$/;"	p	interface:ListHighlights
hlGroup	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                let hlGroup = ''$/;"	C	function:getHiglights
hlGroup	.vim/plugged/coc.nvim/src/util/highlight.ts	/^  hlGroup: string$/;"	p	interface:Highlight
hlMap	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                hlMap.set(id, hi_name)$/;"	C	function:getHiglights
hlMap	.vim/plugged/coc.nvim/src/util/highlight.ts	/^  const hlMap: Map<number, string> = new Map()$/;"	C	function:getHiglights
home	.vim/plugged/coc.nvim/src/workspace.ts	/^    let home = process.env.VIMCONFIG || path.join(os.homedir(), '.vim')$/;"	v
homepage	.config/nvim/plugged/coc.nvim/package.json	/^  "homepage": "https:\/\/github.com\/neoclide\/coc.nvim#readme",$/;"	s
homepage	.vim/plugged/coc.nvim/package.json	/^  "homepage": "https:\/\/github.com\/neoclide\/coc.nvim#readme",$/;"	s
horizontal	.vim/plugged/fzf/src/tui/tui.go	/^	horizontal  rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
host	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "host": {$/;"	o	object:definitions.languageServerSocket.properties
host	.vim/plugged/coc.nvim/data/schema.json	/^        "host": {$/;"	o	object:definitions.languageServerSocket.properties
host	.vim/plugged/coc.nvim/src/types.ts	/^  host?: string$/;"	p	interface:LanguageServerConfig
host	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^    def host(self):$/;"	m	class:VimUtilCtx
hoverCapability	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    const hoverCapability = ensure($/;"	C	method:HoverFeature.fillClientCapabilities
hoverFactory	.vim/plugged/coc.nvim/src/handler/index.ts	/^  private hoverFactory: FloatFactory$/;"	p	class:Handler
hoverPosition	.vim/plugged/coc.nvim/src/handler/index.ts	/^  private hoverPosition: [number, number, number]$/;"	p	class:Handler
hoverTarget	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let hoverTarget = config.get<string>('hoverTarget', 'float')$/;"	v
hoverTarget	.vim/plugged/coc.nvim/src/handler/index.ts	/^  hoverTarget: string$/;"	p	interface:Preferences
hovers	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let hovers = await languages.getHover(document, position)$/;"	v
howworkthis	.config/nvim/plugged/emmet-vim/docs/index.html	/^			<article id="howworkthis">$/;"	I
hscroll	.vim/plugged/fzf/src/terminal.go	/^	hscroll    bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hscrollOff	.vim/plugged/fzf/src/terminal.go	/^	hscrollOff int$/;"	m	struct:fzf.Terminal	typeref:typename:int
html attributes	.config/nvim/plugged/sideways.vim/spec/plugin/html_attributes_spec.rb	/^describe "html attributes" do$/;"	d
html5.vim	.config/nvim/plugged/html5.vim/CHANGES.markdown	/^# html5.vim$/;"	c
html5.vim	.config/nvim/plugged/html5.vim/README.md	/^# html5.vim$/;"	c
htmlcomplete#CheckDoctype	.config/nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#CheckDoctype() " {{{$/;"	f
htmlcomplete#CompleteTags	.config/nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#CompleteTags(findstart, base)$/;"	f
htmlcomplete#DetectOmniFlavor	.config/nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#DetectOmniFlavor()$/;"	f
htmlcomplete#LoadAria	.config/nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadAria() " {{{$/;"	f
htmlcomplete#LoadData	.config/nvim/plugged/html5.vim/autoload/htmlcomplete.vim	/^function! htmlcomplete#LoadData() " {{{$/;"	f
http.proxy	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "http.proxy": {$/;"	o	object:properties
http.proxy	.vim/plugged/coc.nvim/data/schema.json	/^    "http.proxy": {$/;"	o	object:properties
http.proxyStrictSSL	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "http.proxyStrictSSL": {$/;"	o	object:properties
http.proxyStrictSSL	.vim/plugged/coc.nvim/data/schema.json	/^    "http.proxyStrictSSL": {$/;"	o	object:properties
http_handler	.vim/plugged/ghost-text.vim/python3/http_handler.py	/^        async def http_handler(reader, writer):$/;"	f	member:GhostTextHttpHandlerFactory.handler	file:
https://example.com	.vim/plugged/coc.nvim/src/__tests__/modules/settings.json	/^    "https:\/\/example.com": "*.yaml"$/;"	s	object:schema
hunks ([vim-gitgutter][29] & [vim-signify][30])	.vim/plugged/vim-airline/README.md	/^#### hunks ([vim-gitgutter][29] & [vim-signify][30])$/;"	t
i	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> i    denite#do_map('open_filter_buffer')$/;"	m
i	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	var target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, options;$/;"	v
i	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    for (let i = 0; i < 100; i++) {$/;"	v
i	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    for (let i = 0; i < 17; i++) {$/;"	v
i	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    for (let i = 0; i < ranges.length; i++) { \/\/ tslint:disable-line$/;"	v
i	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let ch = i == 0 ? null : pre[i - 1]$/;"	v
i	.vim/plugged/coc.nvim/src/completion/index.ts	/^    for (let i = pre.length - 1; i >= 0; i--) {$/;"	v
i	.vim/plugged/coc.nvim/src/completion/match.ts	/^    const ch = codes[i]$/;"	C	function:nextWordIndex
i	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      for (let i = start.line; i <= end.line; i++) {$/;"	v
i	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    for (let i = start.line; i <= end.line; i++) {$/;"	v
i	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    for (let i = 0; i <= ranges.length - 1; i++) {$/;"	v
i	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    for (let i = ranges.length - 1; i >= 0; i--) {$/;"	v
i	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    for (let i = line; i >= 0; i--) {$/;"	v
i	.vim/plugged/coc.nvim/src/handler/index.ts	/^      i++$/;"	v
i	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let i = 0$/;"	v
i	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        let path = keys[i].split('.')$/;"	v
i	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      let key = keys[i]$/;"	v
i	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    for (let i = 0; i < keys.length; i++) {$/;"	v
i	.vim/plugged/coc.nvim/src/list/basic.ts	/^      for (let i = range.start.line; i <= range.end.line; i++) {$/;"	v
i	.vim/plugged/coc.nvim/src/list/basic.ts	/^      let arg = args[i]$/;"	v
i	.vim/plugged/coc.nvim/src/list/basic.ts	/^    for (let i = 0; i < args.length; i++) {$/;"	v
i	.vim/plugged/coc.nvim/src/list/manager.ts	/^        i++$/;"	C
i	.vim/plugged/coc.nvim/src/list/manager.ts	/^      let i = 0$/;"	C
i	.vim/plugged/coc.nvim/src/list/mappings.ts	/^          for (let i = 0; i < validKeys.length; i++) {$/;"	v
i	.vim/plugged/coc.nvim/src/list/ui.ts	/^      for (let i = start; i <= end; i++) {$/;"	v
i	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let highlight = highlights[i]$/;"	v
i	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let { ansiHighlights } = items[i]$/;"	v
i	.vim/plugged/coc.nvim/src/list/ui.ts	/^    for (let i = start; i <= Math.min(end, items.length - 1); i++) {$/;"	v
i	.vim/plugged/coc.nvim/src/list/ui.ts	/^    for (let i = start; i <= end; i++) {$/;"	v
i	.vim/plugged/coc.nvim/src/model/document.ts	/^      let c = start[i]$/;"	v
i	.vim/plugged/coc.nvim/src/model/document.ts	/^      let ch = content[i]$/;"	v
i	.vim/plugged/coc.nvim/src/model/document.ts	/^    for (let i = 0, l = content.length; i < l; i++) {$/;"	v
i	.vim/plugged/coc.nvim/src/model/document.ts	/^    for (let i = 0; i < headCount; i++) {$/;"	v
i	.vim/plugged/coc.nvim/src/model/document.ts	/^    for (let i = start.length - 1; i >= 0; i--) {$/;"	v
i	.vim/plugged/coc.nvim/src/provider/hoverManager.ts	/^      const item = items[i]$/;"	C	method:HoverManager.provideHover
i	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^  for (let i = 0; i < str.length; i++) { \/\/ tslint:disable-line$/;"	v
i	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  i = 105,$/;"	e	enum:CharCode
i	.vim/plugged/ghost-text.vim/python3/test/test_server_thread.py	/^    i = input()$/;"	v
iI	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^onoremap <silent>iI :<C-u>cal <Sid>HandleTextObjectMapping(1, 1, 0, [line("."), line("."), col("/;"	m
iI	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^vnoremap <silent>iI :<C-u>cal <Sid>HandleTextObjectMapping(1, 1, 1, [line("'<"), line("'>"), col/;"	m
iM	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> iM :<C-U>call <SID>wrap_i('[[','][')<CR>$/;"	m
iM	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    xnoremap <silent> <buffer> iM :<C-U>call <SID>wrap_i('[[','][')<CR>$/;"	m
icase	.vim/plugged/coc.nvim/src/types.ts	/^  icase?: number$/;"	p	interface:VimCompleteItem
icons	.config/nvim/plugged/vista.vim/syntax/vista.vim	/^let icons = join(values(g:vista#renderer#icons), '\\|')$/;"	v
icons	.config/nvim/plugged/vista.vim/syntax/vista_kind.vim	/^let icons = join(values(g:vista#renderer#icons), '\\|')$/;"	v
id	.vim/plugged/coc.nvim/src/commands.ts	/^    for (const id of Array.isArray(command.id) ? command.id : [command.id]) {$/;"	C
id	.vim/plugged/coc.nvim/src/commands.ts	/^  readonly id: string | string[]$/;"	p	interface:Command
id	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        let [, id, name] = ms$/;"	v
id	.vim/plugged/coc.nvim/src/extensions.ts	/^      for (let id of ids) {$/;"	v
id	.vim/plugged/coc.nvim/src/extensions.ts	/^      let { id, packageJSON } = item.extension$/;"	v
id	.vim/plugged/coc.nvim/src/extensions.ts	/^    for (let id of ids) {$/;"	v
id	.vim/plugged/coc.nvim/src/extensions.ts	/^    let id = `${packageJSON.name}`$/;"	v
id	.vim/plugged/coc.nvim/src/extensions.ts	/^    let { id, packageJSON } = extension$/;"	v
id	.vim/plugged/coc.nvim/src/extensions.ts	/^  id: string$/;"	p	interface:ExtensionItem
id	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^      for (let id of ids) {$/;"	v
id	.vim/plugged/coc.nvim/src/handler/index.ts	/^  id: string$/;"	p	interface:CommandItem
id	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  id: string$/;"	p	interface:RegistrationData
id	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public get id(): string {$/;"	m	class:BaseLanguageClient
id	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^    const id =$/;"	C	method:ColorProviderFeature.initialize
id	.vim/plugged/coc.nvim/src/language-client/declaration.ts	/^      const id = Is.string(declCapabilities.id) && declCapabilities.id.length > 0 ? declCapabili/;"	C	method:DeclarationFeature.initialize
id	.vim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^    const id =$/;"	C	method:FoldingRangeFeature.initialize
id	.vim/plugged/coc.nvim/src/language-client/implementation.ts	/^      const id = Is.string(implCapabilities.id) && implCapabilities.id.length > 0 ? implCapabili/;"	C	method:ImplementationFeature.initialize
id	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^    const id = Is.string(implCapabilities.id) && implCapabilities.id.length > 0 ? implCapabiliti/;"	C	method:SelectionRangeFeature.initialize
id	.vim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^      const id = Is.string(implCapabilities.id) && implCapabilities.id.length > 0$/;"	C	method:TypeDefinitionFeature.initialize
id	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^    let id = data.id$/;"	v
id	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^    let id: string | undefined$/;"	v
id	.vim/plugged/coc.nvim/src/languages.ts	/^  id: string$/;"	p	interface:CompletionSource
id	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let id = this.taskId = uuidv1()$/;"	v
id	.vim/plugged/coc.nvim/src/model/document.ts	/^      for (let id of ids) {$/;"	v
id	.vim/plugged/coc.nvim/src/model/document.ts	/^      let id = this.colorId$/;"	v
id	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { id } = buffer$/;"	v
id	.vim/plugged/coc.nvim/src/model/popup.ts	/^  public id: number$/;"	p	class:Popup
id	.vim/plugged/coc.nvim/src/provider/manager.ts	/^  id: string,$/;"	p	interface:ProviderItem
id	.vim/plugged/coc.nvim/src/services.ts	/^      id: client.id,$/;"	v
id	.vim/plugged/coc.nvim/src/services.ts	/^      let id = `${base}.${key}`$/;"	v
id	.vim/plugged/coc.nvim/src/services.ts	/^    let { id } = service$/;"	v
id	.vim/plugged/coc.nvim/src/services.ts	/^  id: string$/;"	p	interface:ServiceInfo
id	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const placeholder = this.placeholders[id]$/;"	C
id	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let placeholder = this.placeholders[id]$/;"	v
id	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let { value, id, index } = placeholder$/;"	v
id	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^  id: number \/\/ unique index$/;"	p	interface:CocSnippetPlaceholder
id	.vim/plugged/coc.nvim/src/types.ts	/^  id: string$/;"	p	interface:ExtensionInfo
id	.vim/plugged/coc.nvim/src/types.ts	/^  id: string$/;"	p	interface:IServiceProvider
id	.vim/plugged/coc.nvim/src/types.ts	/^  id?: number$/;"	p	interface:PopupProps
id	.vim/plugged/coc.nvim/src/types.ts	/^  readonly id: string$/;"	p	interface:Extension
id	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                let id = item[0]$/;"	C	function:getHiglights
id	.vim/plugged/coc.nvim/src/util/highlight.ts	/^  const id = createHash('md5').update(content).digest('hex')$/;"	C	function:getHiglights
id	.vim/plugged/coc.nvim/src/workspace.ts	/^    for (let [id, autocmd] of this.autocmds.entries()) {$/;"	v
id	.vim/plugged/coc.nvim/src/workspace.ts	/^    let id = this.autocmds.size + 1$/;"	v
id	.vim/plugged/coc.nvim/src/workspace.ts	/^    let id = uuid()$/;"	v
id	.vim/plugged/fzf/src/tui/tui.go	/^	id int$/;"	m	struct:tui.ColorPair	typeref:typename:int
identifiers	.vim/plugged/coc.nvim/src/types.ts	/^  identifiers: string[]$/;"	p	interface:IOverrides
ids	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^          ids.push(id)$/;"	v
ids	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let ids = []$/;"	v
ids	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^      let ids = document.matchAddRanges(groups[hlGroup], hlGroup, -1)$/;"	v
ids	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    let ids = this.document.highlightRanges(ranges, hlGroup, this.srcId)$/;"	v
idx	.vim/plugged/coc.nvim/src/commands.ts	/^            let idx = await workspace.showQuickpick(names)$/;"	v
idx	.vim/plugged/coc.nvim/src/commands.ts	/^            let name = names[idx]$/;"	v
idx	.vim/plugged/coc.nvim/src/completion/complete.ts	/^              let idx = results.findIndex(o => o.source == name)$/;"	v
idx	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let idx = characterIndex(line, colnr - 1)$/;"	v
idx	.vim/plugged/coc.nvim/src/completion/index.ts	/^        let idx = i + 1$/;"	v
idx	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let buf = this.buffers[idx]$/;"	v
idx	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let idx = this.buffers.findIndex(buf => buf.bufnr == bufnr)$/;"	v
idx	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let idx = this.collections.findIndex(o => o == collection)$/;"	v
idx	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let idx = this.buffers.findIndex(b => b.bufnr == doc.bufnr)$/;"	v
idx	.vim/plugged/coc.nvim/src/extensions.ts	/^        let idx = this.list.findIndex(o => o.id == id)$/;"	v
idx	.vim/plugged/coc.nvim/src/extensions.ts	/^      let idx = this.list.findIndex(o => o.id == id)$/;"	v
idx	.vim/plugged/coc.nvim/src/extensions.ts	/^    let directory = idx == -1 ? null : this.list[idx].directory$/;"	v
idx	.vim/plugged/coc.nvim/src/extensions.ts	/^    let idx = this.list.findIndex(o => o.id == id)$/;"	v
idx	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^        let r = res[idx]$/;"	v
idx	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^      let idx = res.findIndex(o => {$/;"	v
idx	.vim/plugged/coc.nvim/src/handler/index.ts	/^                let idx = ms ? ms.index : str.indexOf(active.label)$/;"	v
idx	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let action = codeActions[idx]$/;"	v
idx	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let idx = await workspace.showQuickpick(codeActions.map(o => o.title))$/;"	v
idx	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let idx = Math.max(part.lastIndexOf(','), part.lastIndexOf('('))$/;"	v
idx	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let idx = this.actions.findIndex(o => o.name == name)$/;"	v
idx	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( idx >= list.length ) idx = 0$/;"	C
idx	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let idx = list.indexOf( matcher ) + 1$/;"	C
idx	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let idx = names.indexOf( defaultAction )$/;"	C
idx	.vim/plugged/coc.nvim/src/list/manager.ts	/^    this.listOptions.matcher = list[idx]$/;"	C
idx	.vim/plugged/coc.nvim/src/list/manager.ts	/^    this.prompt.matcher = list[idx]$/;"	C
idx	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let idx = items.indexOf(item)$/;"	v
idx	.vim/plugged/coc.nvim/src/list/worker.ts	/^            let idx = ignorecase ? filterLabel.toLowerCase().indexOf(input.toLowerCase()) : filt/;"	v
idx	.vim/plugged/coc.nvim/src/model/status.ts	/^    let idx = Math.floor(d.getMilliseconds() \/ 100)$/;"	C
idx	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^      let idx = this.callbacks.indexOf(fn)$/;"	v
idx	.vim/plugged/coc.nvim/src/provider/manager.ts	/^          let idx = res.findIndex(l => l.uri == uri && l.range.start.line == range.start.line)$/;"	v
idx	.vim/plugged/coc.nvim/src/provider/manager.ts	/^        let idx = res.findIndex(l => l.uri == uri && l.range.start.line == range.start.line)$/;"	v
idx	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const idx = parent.children.indexOf(child)$/;"	C
idx	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let idx = children.indexOf(this)$/;"	v
idx	.vim/plugged/coc.nvim/src/sources.ts	/^    let idx = this.sources.findIndex(s => {$/;"	v
idx	.vim/plugged/coc.nvim/src/workspace.ts	/^      let folder = this._workspaceFolders[idx]$/;"	v
idx	.vim/plugged/coc.nvim/src/workspace.ts	/^    let idx = this._workspaceFolders.findIndex(f => URI.parse(f.uri).fsPath == fsPath)$/;"	v
idx	.vim/plugged/coc.nvim/src/workspace.ts	/^    let idx = this._workspaceFolders.findIndex(f => URI.parse(f.uri).fsPath == oldPath)$/;"	v
idx	.vim/plugged/coc.nvim/src/workspace.ts	/^    let removed = this._workspaceFolders[idx]$/;"	v
if	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^  omap if <Plug>(coc-funcobj-i)$/;"	m
if	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^  xmap if <Plug>(coc-funcobj-i)$/;"	m
if	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^  omap if <Plug>DsfTextObjectI$/;"	m
if	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^  xmap if <Plug>DsfTextObjectI$/;"	m
if	.vim/plugged/coc.nvim/plugin/coc.vim	/^  omap if <Plug>(coc-funcobj-i)$/;"	m
if	.vim/plugged/coc.nvim/plugin/coc.vim	/^  xmap if <Plug>(coc-funcobj-i)$/;"	m
if	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^        if (opt.triggerCharacter != '.') {$/;"	v
if	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        if (!opt.input.startsWith('EM')) return null$/;"	v
if	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        if (opt.input.length <= 1) {$/;"	v
if	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        if (opt.triggerCharacter == '.') {$/;"	v
if	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        if (opt.triggerCharacter == '>') {$/;"	v
if	.vim/plugged/coc.nvim/src/commands.ts	/^      if (!item.internal) res.push(item)$/;"	v
if	.vim/plugged/coc.nvim/src/completion/complete.ts	/^          if (called) return$/;"	v
if	.vim/plugged/coc.nvim/src/completion/index.ts	/^      if (s) arr.push(s)$/;"	v
if	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        if (!ms) continue$/;"	v
if	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        if (!signIds.has(Number(id)) && severityNames.indexOf(name) != -1) {$/;"	v
if	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      if (this.nvim.hasFunction('nvim_create_namespace')) {$/;"	v
if	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        if (rangeIntersect(item.range, range)) {$/;"	v
if	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      if (!items) continue$/;"	v
if	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      if (level && level < DiagnosticSeverity.Hint) {$/;"	v
if	.vim/plugged/coc.nvim/src/extensions.ts	/^            if (inDirectory(folder, parts[1].split(\/\\s+\/))) {$/;"	v
if	.vim/plugged/coc.nvim/src/extensions.ts	/^          if (u.scheme == parts[1]) {$/;"	v
if	.vim/plugged/coc.nvim/src/extensions.ts	/^          if (val != null) props[key] = val$/;"	v
if	.vim/plugged/coc.nvim/src/extensions.ts	/^        if (!ext) {$/;"	v
if	.vim/plugged/coc.nvim/src/extensions.ts	/^        if (isActive) return$/;"	v
if	.vim/plugged/coc.nvim/src/extensions.ts	/^        if (workspace.filetypes.has(parts[1])) {$/;"	v
if	.vim/plugged/coc.nvim/src/extensions.ts	/^      if (ev == 'onLanguage') {$/;"	v
if	.vim/plugged/coc.nvim/src/extensions.ts	/^      } else if (ev == 'onCommand') {$/;"	v
if	.vim/plugged/coc.nvim/src/extensions.ts	/^      } else if (ev == 'onFileSystem') {$/;"	v
if	.vim/plugged/coc.nvim/src/extensions.ts	/^      } else if (ev == 'workspaceContains') {$/;"	v
if	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^      if (!usedColors.has(hex)) {$/;"	v
if	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^      if (idx == -1) {$/;"	v
if	.vim/plugged/coc.nvim/src/handler/index.ts	/^            if (item.trim().length) {$/;"	v
if	.vim/plugged/coc.nvim/src/handler/index.ts	/^            if (target == 'preview') {$/;"	v
if	.vim/plugged/coc.nvim/src/handler/index.ts	/^          if (typeof item === 'string') {$/;"	v
if	.vim/plugged/coc.nvim/src/handler/index.ts	/^        if (equals(selectionRange.parent.range, curr)) {$/;"	v
if	.vim/plugged/coc.nvim/src/handler/index.ts	/^        if (target == 'preview') {$/;"	v
if	.vim/plugged/coc.nvim/src/handler/index.ts	/^      if (Array.isArray(contents)) {$/;"	v
if	.vim/plugged/coc.nvim/src/handler/index.ts	/^      if (i > 0) lines.push('---')$/;"	v
if	.vim/plugged/coc.nvim/src/handler/index.ts	/^      if (link.target) {$/;"	v
if	.vim/plugged/coc.nvim/src/handler/index.ts	/^      if (msg.length) {$/;"	v
if	.vim/plugged/coc.nvim/src/handler/index.ts	/^      } else if (MarkedString.is(contents)) { \/\/ tslint:disable-line$/;"	v
if	.vim/plugged/coc.nvim/src/handler/index.ts	/^      } else if (MarkupContent.is(contents)) {$/;"	v
if	.vim/plugged/coc.nvim/src/handler/index.ts	/^      } else if (typeof contents == 'string') {$/;"	v
if	.vim/plugged/coc.nvim/src/handler/index.ts	/^    } else if (only == 'source') {$/;"	v
if	.vim/plugged/coc.nvim/src/handler/index.ts	/^    } else if (target == 'float') {$/;"	v
if	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      if (!Is.string(watcher.globPattern)) {$/;"	v
if	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      if (sections == null) {$/;"	v
if	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      if (watcher.kind != null) {$/;"	v
if	.vim/plugged/coc.nvim/src/languages.ts	/^            if (detail.length) {$/;"	v
if	.vim/plugged/coc.nvim/src/languages.ts	/^        if (!doc) return null$/;"	v
if	.vim/plugged/coc.nvim/src/languages.ts	/^        if (detailField == 'menu') {$/;"	v
if	.vim/plugged/coc.nvim/src/languages.ts	/^        } else if (detailField == 'abbr') {$/;"	v
if	.vim/plugged/coc.nvim/src/languages.ts	/^      if (byteLength(detail) < detailMaxLength) {$/;"	v
if	.vim/plugged/coc.nvim/src/list/configuration.ts	/^    if (find) return find$/;"	C
if	.vim/plugged/coc.nvim/src/list/configuration.ts	/^    if (validKeys.indexOf(key) !== -1) return key$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^        if ( !\/^\\w+$\/.test( arg ) ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^      if ( opt.startsWith( '--input' ) ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^      if ( resolved && index == this.ui.index ) {$/;"	v
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^      if ( this.window ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^      } else if ( !name ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^      } else if ( opt == '--auto-preview' || opt == '-A' ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^      } else if ( opt == '--ignore-case' || opt == '--top' || opt == '--normal' || opt == '--no-/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^      } else if ( opt == '--interactive' || opt == '-I' ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^      } else if ( opt == '--number-select' || opt == '-N' ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^      } else if ( opt == '--regex' || opt == '-R' ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^      } else if ( opt == '--strict' || opt == '-S' ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( !action ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( !item ) return$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( !list ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( !listArgs.length ) listArgs = config.get<string[]>( 'defaultArgs', [] )$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( !listOptions.length && !listArgs.length ) listOptions = config.get<string[]>( 'defaultO/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( !res ) return$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( close ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( has ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( idx != -1 ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( interactive && !list.interactive ) {$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( interactive ) return$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( items.length ) await this.doItemAction( items, action )$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( n ) await this.doAction( names[n - 1] )$/;"	C
if	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( this.activated ) return$/;"	C
if	.vim/plugged/coc.nvim/src/list/prompt.ts	/^        if (pre) cmds.push(`echon '${pre.replace(\/'\/g, "''")}'`)$/;"	v
if	.vim/plugged/coc.nvim/src/list/prompt.ts	/^        if (workspace.isVim) {$/;"	v
if	.vim/plugged/coc.nvim/src/list/prompt.ts	/^      if (cusorIndex == input.length) {$/;"	v
if	.vim/plugged/coc.nvim/src/list/prompt.ts	/^      if (interactive) {$/;"	v
if	.vim/plugged/coc.nvim/src/list/prompt.ts	/^      } else if (_matcher) {$/;"	v
if	.vim/plugged/coc.nvim/src/list/ui.ts	/^      if (items[i - 1]) res.push(items[i - 1])$/;"	v
if	.vim/plugged/coc.nvim/src/list/worker.ts	/^        if (count >= totalItems.length) return$/;"	v
if	.vim/plugged/coc.nvim/src/list/worker.ts	/^        if (next == curr + 1) {$/;"	v
if	.vim/plugged/coc.nvim/src/list/worker.ts	/^        if (this.taskId != id || !this.manager.isActivated) return$/;"	v
if	.vim/plugged/coc.nvim/src/list/worker.ts	/^        } else if (background) {$/;"	v
if	.vim/plugged/coc.nvim/src/list/worker.ts	/^        } else if (foreground) {$/;"	v
if	.vim/plugged/coc.nvim/src/list/worker.ts	/^      if (!item.text) continue$/;"	v
if	.vim/plugged/coc.nvim/src/list/worker.ts	/^      if (foreground || background) {$/;"	v
if	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^          if (before == after && ['_', '`', '*'].indexOf(before) !== -1) {$/;"	v
if	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^          if (highlight.colEnd - highlight.colStart == 2 && before == '\\\\') {$/;"	v
if	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^        if (highlight.isMarkdown) {$/;"	v
if	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^        if (valid) return$/;"	v
if	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      if (!valid) window = null$/;"	v
if	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      if (!window) {$/;"	v
if	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      if (floatBuffer) {$/;"	v
if	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^      if (!loaded) buffer = null$/;"	v
if	.vim/plugged/coc.nvim/src/model/status.ts	/^      if (!item.isProgress) {$/;"	C
if	.vim/plugged/coc.nvim/src/model/status.ts	/^    if (text != this._text) {$/;"	C
if	.vim/plugged/coc.nvim/src/model/status.ts	/^    if (this.shownIds.size == 0) return ''$/;"	C
if	.vim/plugged/coc.nvim/src/provider/manager.ts	/^          if (idx == -1) {$/;"	v
if	.vim/plugged/coc.nvim/src/provider/manager.ts	/^        if (idx == -1) {$/;"	v
if	.vim/plugged/coc.nvim/src/provider/manager.ts	/^      if (!def) continue$/;"	v
if	.vim/plugged/coc.nvim/src/provider/manager.ts	/^      if (Location.is(def)) {$/;"	v
if	.vim/plugged/coc.nvim/src/provider/manager.ts	/^      } else if (Array.isArray(def)) {$/;"	v
if	.vim/plugged/coc.nvim/src/services.ts	/^        if (client.getPublicState() == State.Starting) {$/;"	v
if	.vim/plugged/coc.nvim/src/services.ts	/^        if (clientId == id || clientId == `languageserver.${id}`) {$/;"	v
if	.vim/plugged/coc.nvim/src/services.ts	/^        if (service.state != ServiceStat.Initial && service.state != ServiceStat.Stopped) {$/;"	v
if	.vim/plugged/coc.nvim/src/services.ts	/^        if (service.state == ServiceStat.Running) {$/;"	v
if	.vim/plugged/coc.nvim/src/services.ts	/^      if (workspace.match(service.selector, document) > 0) {$/;"	v
if	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      if (!candidate) {$/;"	v
if	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      if (!value) {$/;"	C
if	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      if (candidate instanceof TextmateSnippet) {$/;"	v
if	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      if (this._token.type === TokenType.Comma || this._token.type === TokenType.Pipe) {$/;"	C
if	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      if (value = this._accept(TokenType.Backslash, true)) { \/\/ tslint:disable-line$/;"	C
if	.vim/plugged/coc.nvim/src/sources.ts	/^      if (!s.enable) continue$/;"	v
if	.vim/plugged/coc.nvim/src/sources.ts	/^      if (typeof s.onEnter == 'function') {$/;"	v
if	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^      if (text.length === 1) {$/;"	C
if	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^    else if (result.length) {$/;"	C
if	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^    if (matchingText.length) {$/;"	C
if	.vim/plugged/coc.nvim/src/util/factory.ts	/^    if (p === 'coc.nvim') {$/;"	C	function:makeRequireFunction
if	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                if (line >= lines.length) continue$/;"	C	function:getHiglights
if	.vim/plugged/coc.nvim/src/util/highlight.ts	/^            if (name == 'grid_line') {$/;"	C	function:getHiglights
if	.vim/plugged/coc.nvim/src/util/highlight.ts	/^            if (name == 'hl_attr_define') {$/;"	C	function:getHiglights
if	.vim/plugged/coc.nvim/src/util/highlight.ts	/^        if (method == 'redraw') {$/;"	C	function:getHiglights
if	.vim/plugged/coc.nvim/src/util/highlight.ts	/^      if (exited) return$/;"	C	function:getHiglights
if	.vim/plugged/coc.nvim/src/util/highlight.ts	/^      if (nvim) {$/;"	C	function:getHiglights
if	.vim/plugged/coc.nvim/src/util/highlight.ts	/^      if (timer) clearTimeout(timer)$/;"	C	function:getHiglights
if	.vim/plugged/coc.nvim/src/util/index.ts	/^        if (stat.isDirectory) {$/;"	C	function:mkdirp
if	.vim/plugged/coc.nvim/src/util/index.ts	/^      if (err.code === 'EEXIST') {$/;"	C	function:mkdirp
if	.vim/plugged/coc.nvim/src/workspace.ts	/^        if (!channel) return ''$/;"	v
if	.vim/plugged/coc.nvim/src/workspace.ts	/^        if (documentEdit) {$/;"	v
if	.vim/plugged/coc.nvim/src/workspace.ts	/^      if (doc && doc.shouldAttach) doc.fetchContent()$/;"	C
if	.vim/plugged/coc.nvim/src/workspace.ts	/^      if (document && document.schema == 'file') {$/;"	v
if	.vim/plugged/coc.nvim/src/workspace.ts	/^      if (filetypes && rootPatterns && filetypes.indexOf(filetype) !== -1) {$/;"	v
if	.vim/plugged/coc.nvim/src/workspace.ts	/^      if (isDocumentEdit(change)) {$/;"	v
if	.vim/plugged/coc.nvim/src/workspace.ts	/^      if (patterns.indexOf(p) == -1) {$/;"	v
ifValue	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      let ifValue = this._until(TokenType.Colon)$/;"	v
ifValue	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      let ifValue = this._until(TokenType.CurlyClose)$/;"	v
ignore	.vim/plugged/fzf/src/util/eventbox.go	/^	ignore map[EventType]bool$/;"	m	struct:util.EventBox	typeref:typename:map[EventType]bool
ignoreChangeEvents	.vim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^      ignoreChangeEvents,$/;"	v
ignoreCreateEvents	.vim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^      ignoreCreateEvents,$/;"	v
ignoreDeleteEvents	.vim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^      ignoreDeleteEvents } = this$/;"	v
ignoreGitignore	.vim/plugged/coc.nvim/src/source/buffer.ts	/^  public get ignoreGitignore(): boolean {$/;"	m	class:Buffer
ignoreIfExists	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { overwrite, ignoreIfExists } = opts$/;"	v
ignoreIfNotExists	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { ignoreIfNotExists, recursive } = opts$/;"	v
ignoreKeyboardLayout	vimium-options.json	/^  "ignoreKeyboardLayout": false,$/;"	b
ignorecase	.vim/plugged/coc.nvim/src/list/manager.ts	/^        ignorecase: options.indexOf( 'ignore-case' ) != -1 ? true : false,$/;"	C
ignorecase	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { sort, matcher, ignorecase } = this.manager.listOptions$/;"	v
ignorecase	.vim/plugged/coc.nvim/src/types.ts	/^  ignorecase: boolean$/;"	p	interface:ListOptions
ignoredRootPaths	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "ignoredRootPaths": {$/;"	o	object:definitions.languageServerBase.properties
ignoredRootPaths	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "ignoredRootPaths": {},$/;"	o	object:definitions.languageServerCommand.properties
ignoredRootPaths	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "ignoredRootPaths": {},$/;"	o	object:definitions.languageServerModule.properties
ignoredRootPaths	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "ignoredRootPaths": {},$/;"	o	object:definitions.languageServerSocket.properties
ignoredRootPaths	.vim/plugged/coc.nvim/data/schema.json	/^        "ignoredRootPaths": {$/;"	o	object:definitions.languageServerBase.properties
ignoredRootPaths	.vim/plugged/coc.nvim/data/schema.json	/^        "ignoredRootPaths": {},$/;"	o	object:definitions.languageServerCommand.properties
ignoredRootPaths	.vim/plugged/coc.nvim/data/schema.json	/^        "ignoredRootPaths": {},$/;"	o	object:definitions.languageServerModule.properties
ignoredRootPaths	.vim/plugged/coc.nvim/data/schema.json	/^        "ignoredRootPaths": {},$/;"	o	object:definitions.languageServerSocket.properties
ignoredRootPaths	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let { ignoredRootPaths } = this._clientOptions$/;"	v
ignoredRootPaths	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  ignoredRootPaths?: string[]$/;"	p	interface:ResolvedClientOptions
ignoredRootPaths	.vim/plugged/coc.nvim/src/types.ts	/^  ignoredRootPaths?: string[]$/;"	p	interface:LanguageServerConfig
ignored_files	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    ignored_files: str = ''$/;"	v	class:Context
ignores	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    ignores = ['H']$/;"	v	class:SelectModeMappings_IgnoreMappings1_ECR
ignores	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    ignores = ['e', 'H']$/;"	v	class:SelectModeMappings_IgnoreMappings2_ECR
ignores	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    ignores = ['e']$/;"	v	class:SelectModeMappings_IgnoreMappings_ECR
ignores	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    ignores = []$/;"	v	class:_SelectModeMappings
ii	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^onoremap <silent>ii :<C-u>cal <Sid>HandleTextObjectMapping(1, 0, 0, [line("."), line("."), col("/;"	m
ii	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^vnoremap <silent>ii :<C-u>cal <Sid>HandleTextObjectMapping(1, 0, 1, [line("'<"), line("'>"), col/;"	m
im	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    onoremap <silent> <buffer> im :<C-U>call <SID>wrap_i('[m',']M')<CR>$/;"	m
im	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^    xnoremap <silent> <buffer> im :<C-U>call <SID>wrap_i('[m',']M')<CR>$/;"	m
image	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^image,$/;"	s
image_repro	.config/nvim/plugged/ultisnips/Makefile	/^image_repro: image_vim_80_py3$/;"	t
image_vim_74_py2	.config/nvim/plugged/ultisnips/Makefile	/^image_vim_74_py2:$/;"	t
image_vim_74_py3	.config/nvim/plugged/ultisnips/Makefile	/^image_vim_74_py3:$/;"	t
image_vim_80_py2	.config/nvim/plugged/ultisnips/Makefile	/^image_vim_80_py2:$/;"	t
image_vim_80_py3	.config/nvim/plugged/ultisnips/Makefile	/^image_vim_80_py3:$/;"	t
image_vim_git_py2	.config/nvim/plugged/ultisnips/Makefile	/^image_vim_git_py2:$/;"	t
image_vim_git_py3	.config/nvim/plugged/ultisnips/Makefile	/^image_vim_git_py3:$/;"	t
img	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^img {$/;"	s
impl	.vim/plugged/coc.nvim/src/commands.ts	/^    let { impl, thisArg } = this$/;"	v
impl	.vim/plugged/coc.nvim/src/commands.ts	/^    return impl.apply(thisArg, args || [])$/;"	v
implCapabilities	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^    const implCapabilities = capabilities.colorProvider as TextDocumentRegistrationOptions &$/;"	C	method:ColorProviderFeature.initialize
implCapabilities	.vim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^    const implCapabilities = capabilities.foldingRangeProvider as TextDocumentRegistrationOption/;"	C	method:FoldingRangeFeature.initialize
implCapabilities	.vim/plugged/coc.nvim/src/language-client/implementation.ts	/^      const id = Is.string(implCapabilities.id) && implCapabilities.id.length > 0 ? implCapabili/;"	C	method:ImplementationFeature.initialize
implCapabilities	.vim/plugged/coc.nvim/src/language-client/implementation.ts	/^      const implCapabilities = capabilities.implementationProvider$/;"	C	method:ImplementationFeature.initialize
implCapabilities	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^    const id = Is.string(implCapabilities.id) && implCapabilities.id.length > 0 ? implCapabiliti/;"	C	method:SelectionRangeFeature.initialize
implCapabilities	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^    const implCapabilities = capabilities.selectionRangeProvider as TextDocumentRegistrationOpti/;"	C	method:SelectionRangeFeature.initialize
implCapabilities	.vim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^      const implCapabilities = capabilities.typeDefinitionProvider$/;"	C	method:TypeDefinitionFeature.initialize
implements	.vim/plugged/coc.nvim/src/list/manager.ts	/^export class ListManager implements Disposable {$/;"	C
implements	.vim/plugged/coc.nvim/src/model/status.ts	/^export default class StatusLine implements Disposable {$/;"	C
importHelpers	.vim/plugged/coc.nvim/tsconfig.json	/^    "importHelpers": true,$/;"	b	object:compilerOptions
import_plugin	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/util.py	/^def import_plugin(path: Path, source: str,$/;"	f
import_rplugins	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def import_rplugins(name, context, source, loaded_paths):$/;"	f
import_rplugins	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def import_rplugins(name, context, source, loaded_paths):$/;"	f
inBlock	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let inBlock = false$/;"	v
inBytes	.vim/plugged/fzf/src/util/chars.go	/^	inBytes         bool$/;"	m	struct:util.Chars	typeref:typename:bool
inDirectory	.vim/plugged/coc.nvim/src/util/fs.ts	/^export function inDirectory(dir: string, subs: string[]): boolean {$/;"	f
include	.vim/plugged/coc.nvim/tsconfig.json	/^  "include": ["src"],$/;"	a
include?	.vim/plugged/fzf/test/test_go.rb	/^  def include?(_str)$/;"	f	class:NilClass
includeDeclaration	.vim/plugged/coc.nvim/src/provider/index.ts	/^  includeDeclaration: boolean$/;"	p	interface:ReferenceContext
included	.vim/plugged/coc.nvim/src/extensions.ts	/^    let included = exclude.map(o => o.root)$/;"	v
incompletePlaceholders	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const incompletePlaceholders: Placeholder[] = []$/;"	C
indent_to_spaces	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/indent_util.py	/^    def indent_to_spaces(self, indent):$/;"	m	class:IndentUtil
index	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^					var index = elem.selectedIndex,$/;"	v
index	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      let index: number = key.indexOf('.')$/;"	v
index	.vim/plugged/coc.nvim/src/list/history.ts	/^    let { current, index } = this$/;"	v
index	.vim/plugged/coc.nvim/src/list/history.ts	/^  private index = -1$/;"	p	class:History
index	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let index = this.ui.index$/;"	v
index	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let index = this._accept(TokenType.Int, true)$/;"	v
index	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let index: string$/;"	v
index	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let { index } = placeholder$/;"	v
index	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  constructor(public index: number) {$/;"	p	class:Placeholder
index	.vim/plugged/coc.nvim/src/snippets/session.ts	/^        let index = this.snippet.insertSnippet(placeholder, inserted, range)$/;"	v
index	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let { value, id, index } = placeholder$/;"	v
index	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^  index: number$/;"	p	interface:CocSnippetPlaceholder
index	.vim/plugged/coc.nvim/src/types.ts	/^  index?: number$/;"	p	interface:VimCompleteItem
index	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^        result[index].text = text.substr(0, text.length - 1)$/;"	C
index	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^      index = result.length - 1$/;"	C
index	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^      text = result[index].text$/;"	C
index	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^    let index$/;"	C
index	.vim/plugged/fzf/src/matcher.go	/^	index   int$/;"	m	struct:fzf.partialResult	typeref:typename:int
index	.vim/plugged/fzf/src/result.go	/^	index  int32$/;"	m	struct:fzf.colorOffset	typeref:typename:int32
indexAt	.vim/plugged/fzf/src/algo/algo.go	/^func indexAt(index int, max int, forward bool) int {$/;"	f	package:algo	typeref:typename:int
indexOf	.vim/plugged/coc.nvim/src/util/string.ts	/^export function indexOf(str: string, ch: string, count = 1): number {$/;"	f
indicator	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let indicator = this.config.get<string>('indicator', '>')$/;"	v
info	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let info = await doc.buffer.getVar('coc_diagnostic_info')$/;"	v
info	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let { info } = resolvedItem$/;"	v
info	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let info = { error: 0, warning: 0, information: 0, hint: 0 }$/;"	v
info	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^      let info = this.codeLensMap.get(bufnr)$/;"	v
info	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    for (let info of highlighter.colors) {$/;"	v
info	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let info = await this.currentColorInfomation()$/;"	v
info	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public info(message: string): void {$/;"	m	class:ConsoleLogger
info	.vim/plugged/coc.nvim/src/types.ts	/^  info?: string$/;"	p	interface:VimCompleteItem
infoChannel	.vim/plugged/coc.nvim/src/plugin.ts	/^  private infoChannel: OutputChannel$/;"	p	class:Plugin
infoSign	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let { errorSign, warningSign, infoSign, hintSign } = this.config$/;"	v
infoSign	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  infoSign: string$/;"	p	interface:DiagnosticConfig
information	.vim/plugged/coc.nvim/src/types.ts	/^  information: number$/;"	p	interface:DiagnosticInfo
init	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def init(self, paths: typing.List[str],$/;"	m	class:View
init	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.fn.init.prototype = jQuery.fn;$/;"	c	class:jQuery.fn
init	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public init( nvim: Neovim ): void {$/;"	C
init	.vim/plugged/coc.nvim/src/plugin.ts	/^  public async init(): Promise<void> {$/;"	m	class:Plugin
init	.vim/plugged/fzf/src/ansi.go	/^func init() {$/;"	f	package:fzf
init	.vim/plugged/fzf/src/constants.go	/^func init() {$/;"	f	package:fzf
init	.vim/plugged/fzf/src/options.go	/^func init() {$/;"	f	package:fzf
init	.vim/plugged/fzf/src/pattern.go	/^func init() {$/;"	f	package:fzf
init	.vim/plugged/fzf/src/pattern_test.go	/^func init() {$/;"	f	package:fzf
init	.vim/plugged/fzf/src/terminal.go	/^func init() {$/;"	f	package:fzf
init	.vim/plugged/fzf/src/tui/tui.go	/^func init() {$/;"	f	package:tui
init-author	.config/nvim/plugged/html5.vim/Makefile	/^init-author:$/;"	t
init-runtime	.config/nvim/plugged/html5.vim/Makefile	/^init-runtime:$/;"	t
initDelay	.vim/plugged/fzf/src/terminal.go	/^	initDelay  time.Duration$/;"	m	struct:fzf.Terminal	typeref:typename:time.Duration
initFunc	.vim/plugged/fzf/src/terminal.go	/^	initFunc   func()$/;"	m	struct:fzf.Terminal	typeref:typename:func()
initOption	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      initializationOptions: Is.func(initOption) ? initOption() : initOption,$/;"	v
initOption	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let initOption = this._clientOptions.initializationOptions$/;"	v
initPalette	.vim/plugged/fzf/src/tui/tui.go	/^func initPalette(theme *ColorTheme) {$/;"	f	package:tui
initParams	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let initParams: any = {$/;"	v
initScreen	.vim/plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) initScreen() {$/;"	f	unknown:tui.FullscreenRenderer
initTheme	.vim/plugged/fzf/src/tui/tui.go	/^func initTheme(theme *ColorTheme, baseTheme *ColorTheme, forceBlack bool) {$/;"	f	package:tui
init_channel	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/__init__.py	/^        def init_channel(self, args: typing.List[typing.Any]) -> None:$/;"	m	class:DefxHandlers
init_channel	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/rplugin.py	/^    def init_channel(self) -> None:$/;"	m	class:Rplugin
init_channel	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^        def init_channel(self, args):$/;"	m	class:DeniteHandlers
init_channel	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^    def init_channel(self, args):$/;"	m	class:Rplugin
init_channel	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^        def init_channel(self, args):$/;"	m	class:DeniteHandlers
init_channel	.vim/plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^    def init_channel(self, args):$/;"	m	class:Rplugin
init_syntax	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def init_syntax(self, context, is_multi):$/;"	m	class:Child
init_syntax	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def init_syntax(self, context, is_multi):$/;"	m	class:_Parent
init_syntax	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def init_syntax(self, context, is_multi):$/;"	m	class:Child
init_syntax	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def init_syntax(self, context, is_multi):$/;"	m	class:_Parent
inited	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^    inited = 0$/;"	v
inited	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^    inited = 1$/;"	v
initialDelay	.vim/plugged/fzf/src/constants.go	/^	initialDelay      = 20 * time.Millisecond$/;"	c	package:fzf
initialDelayTac	.vim/plugged/fzf/src/constants.go	/^	initialDelayTac   = 100 * time.Millisecond$/;"	c	package:fzf
initial_line	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_BackspaceOneChar
initial_line	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_DeleteOneChar
initial_line	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_InsertOneChar
initial_line	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_InsertOneChar1
initial_line	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_Noop0
initializationFailedHandler	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  initializationFailedHandler?: InitializationFailedHandler$/;"	p	interface:ResolvedClientOptions
initializationOptions	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "initializationOptions": {$/;"	o	object:definitions.languageServerBase.properties
initializationOptions	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "initializationOptions": {},$/;"	o	object:definitions.languageServerCommand.properties
initializationOptions	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "initializationOptions": {},$/;"	o	object:definitions.languageServerModule.properties
initializationOptions	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "initializationOptions": {},$/;"	o	object:definitions.languageServerSocket.properties
initializationOptions	.vim/plugged/coc.nvim/data/schema.json	/^        "initializationOptions": {$/;"	o	object:definitions.languageServerBase.properties
initializationOptions	.vim/plugged/coc.nvim/data/schema.json	/^        "initializationOptions": {},$/;"	o	object:definitions.languageServerCommand.properties
initializationOptions	.vim/plugged/coc.nvim/data/schema.json	/^        "initializationOptions": {},$/;"	o	object:definitions.languageServerModule.properties
initializationOptions	.vim/plugged/coc.nvim/data/schema.json	/^        "initializationOptions": {},$/;"	o	object:definitions.languageServerSocket.properties
initializationOptions	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      initializationOptions: Is.func(initOption) ? initOption() : initOption,$/;"	v
initializationOptions	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  initializationOptions?: any | (() => any)$/;"	p	interface:ResolvedClientOptions
initializationOptions	.vim/plugged/coc.nvim/src/types.ts	/^  initializationOptions?: any$/;"	p	interface:LanguageServerConfig
initialize	.config/nvim/plugged/sideways.vim/spec/plugin/regression_spec.rb	/^        def initialize(attributes = {}, options = {})$/;"	f
initialize	.config/nvim/plugged/sideways.vim/spec/plugin/regression_spec.rb	/^        def initialize(options = {}, attributes = {})$/;"	f	method:initialize
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  initialize($/;"	m	interface:DynamicFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  initialize($/;"	m	interface:StaticFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  initialize(params: InitializeParams): Thenable<InitializeResult>$/;"	m	interface:IConnection
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:CodeActionFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:CodeLensFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:CompletionItemFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:DefinitionFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:DidOpenTextDocumentFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:DidSaveTextDocumentFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:DocumentFormattingFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:DocumentHighlightFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:DocumentLinkFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:DocumentRangeFormattingFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:DocumentSymbolFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:HoverFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:ReferencesFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:RenameFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:SignatureHelpFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:WillSaveFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize($/;"	m	class:WorkspaceSymbolFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize(capabilities: ServerCapabilities, documentSelector: DocumentSelector): void /;"	m	class:DidCloseTextDocumentFeature
initialize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public initialize(capabilities: ServerCapabilities, documentSelector: DocumentSelector): void /;"	m	class:DocumentOnTypeFormattingFeature
initialize	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^  public initialize($/;"	m	class:ColorProviderFeature
initialize	.vim/plugged/coc.nvim/src/language-client/configuration.ts	/^  public initialize(): void {$/;"	m	class:ConfigurationFeature
initialize	.vim/plugged/coc.nvim/src/language-client/declaration.ts	/^  public initialize(capabilities: ServerCapabilities, documentSelector: DocumentSelector): void /;"	m	class:DeclarationFeature
initialize	.vim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^  public initialize($/;"	m	class:FoldingRangeFeature
initialize	.vim/plugged/coc.nvim/src/language-client/implementation.ts	/^  public initialize(capabilities: ServerCapabilities, documentSelector: DocumentSelector): void /;"	m	class:ImplementationFeature
initialize	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^  public initialize(capabilities: ServerCapabilities & SelectionRangeServerCapabilities, documen/;"	m	class:SelectionRangeFeature
initialize	.vim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^  public initialize(capabilities: ServerCapabilities, documentSelector: DocumentSelector): void /;"	m	class:TypeDefinitionFeature
initialize	.vim/plugged/fzf/test/test_go.rb	/^  def initialize(shell = :bash)$/;"	f	class:Tmux
initializeResult	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public get initializeResult(): InitializeResult | undefined {$/;"	m	class:BaseLanguageClient
initialized	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let { nvim, workspaceFolders, channelNames, rootPath, cwd, documents, initialized, textDocum/;"	v
initialized	.vim/plugged/coc.nvim/src/attach.ts	/^  let initialized = false$/;"	v
initialized	.vim/plugged/coc.nvim/src/types.ts	/^  readonly initialized: boolean$/;"	p	interface:IWorkspace
inlineInfo	.vim/plugged/fzf/src/terminal.go	/^	inlineInfo bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
inner_wrapper	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^        def inner_wrapper(view: View, defx: Defx, context: Context) -> None:$/;"	f	function:action.wrapper	file:
inner_wrapper	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^        def inner_wrapper(view: View, defx: Defx, context: Context) -> None:$/;"	f	function:action.wrapper	file:
input	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def input(vim: Nvim, context, prompt='', text='', completion=''):$/;"	f
input	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let input = manager.prompt.input$/;"	v
input	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let { input } = manager.prompt$/;"	v
input	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let { input, colnr, linenr } = this.option$/;"	v
input	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let input = this.getInput(document, pre)$/;"	v
input	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let input = ''$/;"	v
input	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let input = byteSlice(pre, option.col)$/;"	v
input	.vim/plugged/coc.nvim/src/completion/index.ts	/^  private input: string$/;"	p	class:Completion
input	.vim/plugged/coc.nvim/src/list/history.ts	/^    let { input } = prompt$/;"	v
input	.vim/plugged/coc.nvim/src/list/history.ts	/^    let { input } = this.manager.prompt$/;"	v
input	.vim/plugged/coc.nvim/src/list/manager.ts	/^        input = opt.slice( 8 )$/;"	C
input	.vim/plugged/coc.nvim/src/list/manager.ts	/^        input,$/;"	C
input	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let input = ''$/;"	C
input	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let { cusorIndex, input } = this$/;"	v
input	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let { cusorIndex, interactive, input, _matcher } = this$/;"	v
input	.vim/plugged/coc.nvim/src/list/worker.ts	/^          for (let input of inputs) {$/;"	v
input	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let inputs = extended ? input.split(\/\\s+\/) : [input]$/;"	v
input	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { input } = this$/;"	v
input	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { input } = this.manager.prompt$/;"	v
input	.vim/plugged/coc.nvim/src/source/file.ts	/^  input: string$/;"	p	interface:PathOption
input	.vim/plugged/coc.nvim/src/types.ts	/^  input: string$/;"	p	interface:CompleteOption
input	.vim/plugged/coc.nvim/src/types.ts	/^  input: string$/;"	p	interface:ListContext
input	.vim/plugged/coc.nvim/src/types.ts	/^  input: string$/;"	p	interface:ListOptions
input	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def input(vim: Nvim, context, prompt='', text='', completion=''):$/;"	f
input	.vim/plugged/fzf/src/terminal.go	/^	input      []rune$/;"	m	struct:fzf.Terminal	typeref:typename:[]rune
input2	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^      const input2 = snippet.toTextmateString()$/;"	C	function:assertIdent
inputChanged	.vim/plugged/coc.nvim/src/list/worker.ts	/^        let inputChanged = this.input != currInput$/;"	v
inputs	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let inputs = extended ? input.split(\/\\s+\/) : [input]$/;"	v
insertLeaveTs	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let insertLeaveTs = this.insertLeaveTs$/;"	v
insertMappings	.vim/plugged/coc.nvim/src/list/mappings.ts	/^        let insertMappings = config.get<any>('insertMappings', {})$/;"	v
insertMappings	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    let insertMappings = this.manager.getConfig<any>('insertMappings', {})$/;"	v
insertMappings	.vim/plugged/coc.nvim/src/list/mappings.ts	/^  private insertMappings: Map<string, () => void | Promise<void>> = new Map()$/;"	p	class:Mappings
insertSnippet	.vim/plugged/coc.nvim/src/types.ts	/^  insertSnippet(snippet: string): Promise<boolean>$/;"	m	interface:SnippetManager
insertSpaces	.vim/plugged/coc.nvim/src/workspace.ts	/^    let insertSpaces = (await this.getDocumentOption('expandtab', doc)) == 1$/;"	v
inserted	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let inserted = normalizeSnippetString(snippetString, currentIndent, formatOptions)$/;"	v
inspect	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^  public inspect<C>(key: string): {$/;"	m	class:Configuration
inspect	.vim/plugged/coc.nvim/src/types.ts	/^  inspect<T>(section: string): ConfigurationInspect<T> | undefined$/;"	m	interface:WorkspaceConfiguration
install	.config/nvim/plugged/defx.nvim/Makefile	/^install: vim-themis$/;"	t
install	.config/nvim/plugged/denite.nvim/Makefile	/^install: vim-themis$/;"	t
install	.config/nvim/plugged/emmet-vim/docs/index.html	/^			<article id="install">$/;"	I
install	.config/nvim/plugged/html5.vim/Makefile	/^install: init-runtime bundle pure-install record$/;"	t
install	.vim/plugged/denite.nvim/Makefile	/^install: vim-themis$/;"	t
install	.vim/plugged/fzf/Makefile	/^install: bin\/fzf$/;"	t
install with vundle:	.vim/plugged/ghost-text.vim/README.md	/^# install with vundle:$/;"	c
install-deps	.config/nvim/plugged/html5.vim/Makefile	/^install-deps:$/;"	t
install_file	.config/nvim/plugged/html5.vim/Makefile	/^install_file = \\$/;"	m
install_git_source	.config/nvim/plugged/html5.vim/Makefile	/^install_git_source = \\$/;"	m
install_source	.config/nvim/plugged/html5.vim/Makefile	/^install_source = \\$/;"	m
installedModules	.config/nvim/plugged/coc.nvim/build/index.js	/^\/******\/ 	var installedModules = {};$/;"	v
installedModules	.vim/plugged/coc.nvim/build/index.js	/^\/******\/ 	var installedModules = {};$/;"	v
instanceof	.vim/plugged/coc.nvim/src/list/manager.ts	/^      let msg = e instanceof Error ? e.message : e.toString()$/;"	C
instantiate	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def instantiate(self, snippet_instance, initial_text, indent):$/;"	m	class:SnippetDefinition
instantiate	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/snipmate.py	/^    def instantiate(self, snippet_instance, initial_text, indent):$/;"	m	class:SnipMateSnippetDefinition
instantiate	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/ulti_snips.py	/^    def instantiate(self, snippet_instance, initial_text, indent):$/;"	m	class:UltiSnipsSnippetDefinition
interactive	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public interactive = true$/;"	p	class:ErrorList
interactive	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public interactive = true$/;"	p	class:InteractiveList
interactive	.vim/plugged/coc.nvim/src/list/manager.ts	/^        interactive = true$/;"	C
interactive	.vim/plugged/coc.nvim/src/list/manager.ts	/^        interactive,$/;"	C
interactive	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let interactive = false$/;"	C
interactive	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { matcher, interactive } = this.listOptions$/;"	C
interactive	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let { cusorIndex, interactive, input, _matcher } = this$/;"	v
interactive	.vim/plugged/coc.nvim/src/list/prompt.ts	/^  private interactive = false$/;"	p	class:Prompt
interactive	.vim/plugged/coc.nvim/src/list/source/symbols.ts	/^  public readonly interactive = true$/;"	p	class:Symbols
interactive	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let { interactive } = listOptions$/;"	v
interactive	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { interactive } = listOptions$/;"	v
interactive	.vim/plugged/coc.nvim/src/types.ts	/^  interactive: boolean$/;"	p	interface:ListOptions
interactive	.vim/plugged/coc.nvim/src/types.ts	/^  interactive?: boolean$/;"	p	interface:IList
interface	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "interface": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
interface	.vim/plugged/coc.nvim/data/schema.json	/^        "interface": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
interface	.vim/plugged/coc.nvim/src/completion/index.ts	/^export interface LastInsert {$/;"	C
interface	.vim/plugged/coc.nvim/src/watchman.ts	/^export interface WatchResponse {$/;"	C
interpretCode	.vim/plugged/fzf/src/ansi.go	/^func interpretCode(ansiCode string, prevState *ansiState) *ansiState {$/;"	f	package:fzf	typeref:typename:*ansiState
intersect	.vim/plugged/coc.nvim/src/util/array.ts	/^export function intersect<T>(array: T[], other: T[]): boolean {$/;"	f
interval	.vim/plugged/coc.nvim/src/extensions.ts	/^    let interval = config.get<string>('extensionUpdateCheck', 'daily')$/;"	v
interval	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let interval = setInterval(() => {$/;"	v
interval	.vim/plugged/coc.nvim/src/model/status.ts	/^  private interval: NodeJS.Timer$/;"	C
interval	.vim/plugged/coc.nvim/src/workspace.ts	/^    let interval = setInterval(() => {$/;"	v
inv	.vim/plugged/fzf/src/pattern.go	/^	inv           bool$/;"	m	struct:fzf.term	typeref:typename:bool
invalidInsertCharacters	.vim/plugged/coc.nvim/src/util/complete.ts	/^const invalidInsertCharacters = ['(', '<', '{', '[', '\\r', '\\n']$/;"	C
ipc	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  ipc,$/;"	e	enum:TransportKind
is	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  export function is(value: any): value is MessageTransports {$/;"	f	namespace:MessageTransports
is	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  export function is<T>(value: any): value is DynamicFeature<T> {$/;"	f	namespace:DynamicFeature
is	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  export function is(value: any): value is ChildProcessInfo {$/;"	f	namespace:ChildProcessInfo
is	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  export function is(value: any): value is Executable {$/;"	f	namespace:Executable
is	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  export function is(value: any): value is NodeModule {$/;"	f	namespace:NodeModule
is	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  export function is(value: any): value is StreamInfo {$/;"	f	namespace:StreamInfo
is24	.vim/plugged/fzf/src/tui/tui.go	/^func (c Color) is24() bool {$/;"	f	type:tui.Color	typeref:typename:bool
is24	.vim/plugged/fzf/src/tui/tui.go	/^func (p ColorPair) is24() bool {$/;"	f	struct:tui.ColorPair	typeref:typename:bool
isActivated	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { listOptions, isActivated } = this.manager$/;"	v
isActive	.vim/plugged/coc.nvim/src/extensions.ts	/^          isActive = false$/;"	v
isActive	.vim/plugged/coc.nvim/src/extensions.ts	/^        isActive = true$/;"	v
isActive	.vim/plugged/coc.nvim/src/extensions.ts	/^    let isActive = false$/;"	v
isActive	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    let isActive = await session.start(snippet, select, range)$/;"	v
isActive	.vim/plugged/coc.nvim/src/sources.ts	/^          isActive = true$/;"	v
isActive	.vim/plugged/coc.nvim/src/sources.ts	/^      let isActive = false$/;"	v
isActive	.vim/plugged/coc.nvim/src/types.ts	/^  readonly isActive: boolean$/;"	p	interface:Extension
isAlphabet	.vim/plugged/fzf/src/options.go	/^func isAlphabet(char uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isArrayLike	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var isArrayLike = selector.length && selector[selector.length - 1] !== undefined && !selector./;"	v
isAscii	.vim/plugged/fzf/src/algo/algo.go	/^func isAscii(runes []rune) bool {$/;"	f	package:algo	typeref:typename:bool
isAsciiLetter	.vim/plugged/coc.nvim/src/util/string.ts	/^export function isAsciiLetter(code: number): boolean {$/;"	f
isConfigured	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let isConfigured = sections.length == 1 && \/^languageserver\\..+\\.settings$\/.test(section/;"	v
isDark	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^function isDark(color: Color): boolean {$/;"	f
isDir	.vim/plugged/coc.nvim/src/workspace.ts	/^    let isDir = stat && stat.isDirectory() || filepath.endsWith('\/')$/;"	v
isDirectory	.vim/plugged/coc.nvim/src/util/fs.ts	/^export async function isDirectory(filepath: string): Promise<boolean> {$/;"	f
isDocumentEdit	.vim/plugged/coc.nvim/src/util/index.ts	/^export function isDocumentEdit(edit: any): boolean {$/;"	f
isDocumentSymbol	.vim/plugged/coc.nvim/src/handler/index.ts	/^function isDocumentSymbol(a: DocumentSymbol | SymbolInformation): a is DocumentSymbol {$/;"	f
isDocumentSymbols	.vim/plugged/coc.nvim/src/handler/index.ts	/^function isDocumentSymbols(a: DocumentSymbol[] | SymbolInformation[]): a is DocumentSymbol[] {$/;"	f
isEmpty	.vim/plugged/coc.nvim/src/handler/index.ts	/^function isEmpty(location: any): boolean {$/;"	f
isExecuteAction	.vim/plugged/fzf/src/options.go	/^func isExecuteAction(str string) actionType {$/;"	f	package:fzf	typeref:typename:actionType
isFile	.vim/plugged/coc.nvim/src/util/fs.ts	/^export function isFile(uri: string): boolean {$/;"	f
isFile	.vim/plugged/coc.nvim/src/workspace.ts	/^    let isFile = filepath && path.isAbsolute(filepath)$/;"	v
isFinalTabstop	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public get isFinalTabstop(): boolean {$/;"	m	class:Placeholder
isFinalTabstop	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^  isFinalTabstop: boolean$/;"	p	interface:CocSnippetPlaceholder
isFloat	.vim/plugged/coc.nvim/src/__tests__/modules/floatFactory.test.ts	/^      let isFloat = await win.getVar('float')$/;"	v
isGitIgnored	.vim/plugged/coc.nvim/src/util/fs.ts	/^export async function isGitIgnored(fullpath: string): Promise<boolean> {$/;"	f
isIgnored	.vim/plugged/coc.nvim/src/model/document.ts	/^  public isIgnored = false$/;"	p	class:Document
isIncomplete	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^          return { isIncomplete: true, items: [{ word: 'foo' }, { word: opt.input }] }$/;"	v
isIncomplete	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return { isIncomplete: false, items: [{ word: 'foo' }, { word: opt.input }] }$/;"	v
isIncomplete	.vim/plugged/coc.nvim/src/types.ts	/^  isIncomplete?: boolean$/;"	p	interface:CompleteResult
isKeyword	.vim/plugged/coc.nvim/src/model/document.ts	/^      let isKeyword = this.chars.isKeywordChar(ch)$/;"	v
isLinux	.vim/plugged/coc.nvim/src/util/platform.ts	/^export const isLinux = _isLinux$/;"	C
isLinux	.vim/plugged/coc.nvim/src/util/processes.ts	/^const isLinux = process.platform === 'linux'$/;"	C
isLocal	.vim/plugged/coc.nvim/src/extensions.ts	/^  isLocal: boolean$/;"	p	interface:ExtensionItem
isLocal	.vim/plugged/coc.nvim/src/types.ts	/^  isLocal: boolean$/;"	p	interface:ExtensionInfo
isMacintosh	.vim/plugged/coc.nvim/src/util/platform.ts	/^export const isMacintosh = _isMacintosh$/;"	C
isMacintosh	.vim/plugged/coc.nvim/src/util/processes.ts	/^const isMacintosh = process.platform === 'darwin'$/;"	C
isMacvim	.vim/plugged/coc.nvim/src/types.ts	/^  readonly isMacvim: boolean$/;"	p	interface:Env
isMarkdown	.vim/plugged/coc.nvim/src/util/highlight.ts	/^  isMarkdown?: boolean$/;"	p	interface:Highlight
isNative	.vim/plugged/coc.nvim/src/util/platform.ts	/^export const isNative = _isNative$/;"	C
isNumeric	.vim/plugged/fzf/src/options.go	/^func isNumeric(char uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isNvim	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let { isVim, isNvim } = workspace$/;"	v
isNvim	.vim/plugged/coc.nvim/src/types.ts	/^  readonly isNvim: boolean$/;"	p	interface:IWorkspace
isParentFolder	.vim/plugged/coc.nvim/src/util/fs.ts	/^export function isParentFolder(folder: string, filepath: string): boolean {$/;"	f
isPrefered	.vim/plugged/coc.nvim/src/types.ts	/^  isPrefered?: boolean$/;"	p	interface:CodeAction
isPreview	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let isPreview = await curr.getOption('previewwindow')$/;"	v
isPreview	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^      let isPreview = await win.getOption('previewwindow')$/;"	v
isPreviewEnabled	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) isPreviewEnabled() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
isProgress	.vim/plugged/coc.nvim/src/model/status.ts	/^      isProgress,$/;"	C
isProgress	.vim/plugged/coc.nvim/src/types.ts	/^  isProgress: boolean$/;"	p	interface:StatusBarItem
isReady	.vim/plugged/coc.nvim/src/plugin.ts	/^  public get isReady(): boolean {$/;"	m	class:Plugin
isRunning	.vim/plugged/coc.nvim/src/util/index.ts	/^export function isRunning(pid: number): boolean {$/;"	f
isSimple	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	isSimple = \/^.[^:#\\[\\.]*$\/,$/;"	v
isSingleLine	.vim/plugged/coc.nvim/src/util/position.ts	/^export function isSingleLine(range: Range): boolean {$/;"	f
isSnippet	.vim/plugged/coc.nvim/src/languages.ts	/^      isSnippet,$/;"	v
isSnippet	.vim/plugged/coc.nvim/src/languages.ts	/^    let isSnippet = item.insertTextFormat === InsertTextFormat.Snippet || hasAdditionalEdit$/;"	v
isSnippet	.vim/plugged/coc.nvim/src/languages.ts	/^    let isSnippet = item.insertTextFormat === InsertTextFormat.Snippet$/;"	v
isSnippet	.vim/plugged/coc.nvim/src/model/source.ts	/^  public readonly isSnippet: boolean$/;"	p	class:Source
isSnippet	.vim/plugged/coc.nvim/src/types.ts	/^  isSnippet?: boolean$/;"	p	interface:ISource
isSnippet	.vim/plugged/coc.nvim/src/types.ts	/^  isSnippet?: boolean$/;"	p	interface:VimCompleteItem
isSocket	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  export function isSocket(value: Transport): value is SocketTransport {$/;"	f	namespace:Transport
isTab	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let isTab = space.startsWith('\\t')$/;"	v
isTest	.vim/plugged/coc.nvim/src/attach.ts	/^const isTest = process.env.NODE_ENV == 'test'$/;"	C
isText	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let isText = \/^[\\w-\\s.,\\t]+$\/.test(info)$/;"	v
isText	.vim/plugged/coc.nvim/src/languages.ts	/^              let isText = \/^[\\w-\\s.,\\t]+$\/.test(detail)$/;"	v
isTrigger	.vim/plugged/coc.nvim/src/languages.ts	/^        let isTrigger = triggerCharacters && triggerCharacters.indexOf(triggerCharacter) != -1$/;"	v
isTriggered	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  isTriggered(): boolean {$/;"	m	class:Delayer
isTriggered	.vim/plugged/coc.nvim/src/sources.ts	/^    let isTriggered = opt.input == '' && opt.triggerCharacter$/;"	v
isUsed	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public get isUsed(): boolean {$/;"	m	class:OnReady
isVim	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let { isVim, isNvim } = workspace$/;"	v
isVim	.vim/plugged/coc.nvim/src/model/terminal.ts	/^const isVim = process.env.VIM_NODE_RPC == '1'$/;"	C
isVim	.vim/plugged/coc.nvim/src/types.ts	/^  readonly isVim: boolean$/;"	p	interface:Env
isVim	.vim/plugged/coc.nvim/src/types.ts	/^  readonly isVim: boolean$/;"	p	interface:IWorkspace
isVisual	.vim/plugged/coc.nvim/src/workspace.ts	/^    let isVisual = ['v', 'V'].indexOf(mode) != -1$/;"	v
isWeb	.vim/plugged/coc.nvim/src/util/platform.ts	/^export const isWeb = _isWeb$/;"	C
isWebpack	.vim/plugged/coc.nvim/src/configuration/util.ts	/^const isWebpack = typeof __webpack_require__ === "function"$/;"	C
isWebpack	.vim/plugged/coc.nvim/src/util/processes.ts	/^const isWebpack = typeof __webpack_require__ === "function"$/;"	C
isWindows	.vim/plugged/coc.nvim/src/model/mru.ts	/^const isWindows = process.platform == 'win32'$/;"	C
isWindows	.vim/plugged/coc.nvim/src/util/platform.ts	/^export const isWindows = _isWindows$/;"	C
isWindows	.vim/plugged/coc.nvim/src/util/processes.ts	/^const isWindows = process.platform === 'win32'$/;"	C
isWord	.vim/plugged/coc.nvim/src/util/string.ts	/^export function isWord(character: string): boolean {$/;"	f
is_async	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def is_async(self):$/;"	m	class:Child
is_async	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def is_async(self):$/;"	m	class:Default
is_async	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def is_async(self):$/;"	m	class:Child
is_async	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def is_async(self):$/;"	m	class:Default
is_buffer_changed_outside	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def is_buffer_changed_outside(self):$/;"	m	class:VimBufferProxy
is_complete_edit	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_diff.py	/^def is_complete_edit(initial_line, original, wanted, cmds):$/;"	f
is_focused	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def is_focused(self, title=None):$/;"	m	class:VimInterfaceWindows
is_ignored	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/scantree.py	/^def is_ignored(name, ignore_list):$/;"	f
is_ignored	.vim/plugged/denite.nvim/rplugin/python3/denite/scantree.py	/^def is_ignored(name, ignore_list):$/;"	f
is_killed	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_tabstop.py	/^    def is_killed(self):$/;"	m	class:TabStop
is_login	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def is_login():$/;"	f
is_process_running	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^def is_process_running(pid):$/;"	f
is_set	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def is_set(self):$/;"	m	class:_SnippetUtilCursor
iskeyword	.vim/plugged/coc.nvim/src/model/document.ts	/^      let iskeyword = chars.isKeyword(content[i])$/;"	v
iskeyword	.vim/plugged/coc.nvim/src/types.ts	/^  iskeyword: string$/;"	p	interface:BufferOption
islower	.vim/plugged/coc.nvim/src/util/fzy.ts	/^function islower(s): boolean {$/;"	f
isupper	.vim/plugged/coc.nvim/src/util/fzy.ts	/^function isupper(s): boolean {$/;"	f
isuri	.config/nvim/plugged/coc.nvim/package.json	/^    "isuri": "^2.0.3",$/;"	s	object:dependencies
isuri	.vim/plugged/coc.nvim/package.json	/^    "isuri": "^2.0.3",$/;"	s	object:dependencies
italic	.vim/plugged/coc.nvim/src/types.ts	/^  italic?: boolean$/;"	p	interface:AnsiItem
item	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    for (let item of items) {$/;"	v
item	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let item = items.find(o => o.word == 'foo')$/;"	v
item	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^    let item = items.find(o => o.word == 'vimrc')$/;"	v
item	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^        item.label = item.label.slice(0, 1)$/;"	v
item	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let item = await manager.ui.item$/;"	v
item	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    execute: async item => {$/;"	C
item	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let item = await manager.ui.item$/;"	v
item	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^    let item = await manager.ui.item$/;"	v
item	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        item.info = 'detail'$/;"	v
item	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let item = res.find(o => o.group == 'Search')$/;"	v
item	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let item = await workspace.getQuickfixItem(loc)$/;"	v
item	.vim/plugged/coc.nvim/src/commands.ts	/^    let item = this.commands.get(id)$/;"	v
item	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let item = getLocationListItem(diagnostic.source, bufnr, diagnostic)$/;"	v
item	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^      for (let item of entries) {$/;"	v
item	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      for (let item of errorItems) {$/;"	v
item	.vim/plugged/coc.nvim/src/extensions.ts	/^        for (let item of rootPatterns) {$/;"	v
item	.vim/plugged/coc.nvim/src/extensions.ts	/^    for (let item of this.list) {$/;"	v
item	.vim/plugged/coc.nvim/src/extensions.ts	/^    let item = this.list.find(o => o.id == id)$/;"	v
item	.vim/plugged/coc.nvim/src/languages.ts	/^        let completeItem = completeItems[item.index]$/;"	v
item	.vim/plugged/coc.nvim/src/languages.ts	/^        let item = completeItems[vimItem.index]$/;"	v
item	.vim/plugged/coc.nvim/src/languages.ts	/^        let resolving = completeItems[item.index]$/;"	v
item	.vim/plugged/coc.nvim/src/list/manager.ts	/^        for ( let item of items ) {$/;"	v
item	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let item = this.ui.getItem( 0 )$/;"	v
item	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let item = ui.getItem( -1 )$/;"	C
item	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let item = ui.getItem( 1 )$/;"	C
item	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let item = this.items[this.index] || { label: '' }$/;"	v
item	.vim/plugged/coc.nvim/src/list/worker.ts	/^        for (let item of filtered as ExtendedItem[]) {$/;"	v
item	.vim/plugged/coc.nvim/src/model/status.ts	/^    let item: StatusBarItem = {$/;"	C
item	.vim/plugged/coc.nvim/src/model/status.ts	/^    return item$/;"	C
item	.vim/plugged/coc.nvim/src/provider/hoverManager.ts	/^      const item = items[i]$/;"	C	method:HoverManager.provideHover
item	.vim/plugged/coc.nvim/src/provider/manager.ts	/^    for (let item of this.providers) {$/;"	v
item	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^    let item: ProviderItem = {$/;"	v
item	.vim/plugged/coc.nvim/src/provider/renameManager.ts	/^    let item = this.getProvider(document)$/;"	v
item	.vim/plugged/coc.nvim/src/sources.ts	/^    for (let item of items) {$/;"	v
item	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                let { hi_name } = item[item.length - 1][0]$/;"	C	function:getHiglights
item	.vim/plugged/coc.nvim/src/util/index.ts	/^    const item = disposables.pop()$/;"	C	function:disposeAll
item	.vim/plugged/coc.nvim/src/workspace.ts	/^    let item: QuickfixItem = {$/;"	v
item	.vim/plugged/fzf/src/result.go	/^	item   *Item$/;"	m	struct:fzf.Result	typeref:typename:*Item
item	.vim/plugged/fzf/src/terminal.go	/^	item *Item$/;"	m	struct:fzf.selectedItem	typeref:typename:*Item
itemLine	.vim/plugged/fzf/src/terminal.go	/^type itemLine struct {$/;"	s	package:fzf
item_count	.vim/plugged/fzf/test/test_go.rb	/^          def item_count$/;"	f	method:until
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerBase.properties.additionalSchemes
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerBase.properties.filetypes
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerBase.properties.ignoredRootPaths
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerBase.properties.rootPatterns
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerCommand.properties.args
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerModule.properties.args
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerModule.properties.execArgv
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.preferences.formatOnSaveFiletypes
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.preferences.rootPatterns
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.around.disableSyntaxes
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.buffer.disableSyntaxes
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.file.disableSyntaxes
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.file.ignorePatterns
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.file.triggerCharacters
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.file.trimSameExts
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.list.source.outline.ctagsFilestypes
items	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.workspace.ignoredFiletypes
items	.vim/plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerBase.properties.additionalSchemes
items	.vim/plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerBase.properties.filetypes
items	.vim/plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerBase.properties.ignoredRootPaths
items	.vim/plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerBase.properties.rootPatterns
items	.vim/plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerCommand.properties.args
items	.vim/plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerModule.properties.args
items	.vim/plugged/coc.nvim/data/schema.json	/^          "items": {$/;"	o	object:definitions.languageServerModule.properties.execArgv
items	.vim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.preferences.formatOnSaveFiletypes
items	.vim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.preferences.rootPatterns
items	.vim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.around.disableSyntaxes
items	.vim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.buffer.disableSyntaxes
items	.vim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.file.disableSyntaxes
items	.vim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.file.ignorePatterns
items	.vim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.file.triggerCharacters
items	.vim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.coc.source.file.trimSameExts
items	.vim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.list.source.outline.ctagsFilestypes
items	.vim/plugged/coc.nvim/data/schema.json	/^      "items": {$/;"	o	object:properties.workspace.ignoredFiletypes
items	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let items = await helper.getItems()$/;"	v
items	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let items = await helper.items()$/;"	v
items	.vim/plugged/coc.nvim/src/__tests__/completion/float.test.ts	/^    let items = await helper.getItems()$/;"	v
items	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^    let items = await helper.getItems()$/;"	v
items	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async items(): Promise<VimCompleteItem[]> {$/;"	m	class:Helper
items	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let items = await manager.ui.getItems()$/;"	v
items	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^          return { isIncomplete: true, items: [{ word: 'foo' }, { word: opt.input }] }$/;"	v
items	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^          return { items: [{ word: 'foo' }] }$/;"	v
items	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return { isIncomplete: false, items: [{ word: 'foo' }, { word: opt.input }] }$/;"	v
items	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let items = await helper.getItems()$/;"	v
items	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let items = await helper.items()$/;"	v
items	.vim/plugged/coc.nvim/src/completion/index.ts	/^        let items = complete.filterResults(search, Math.floor(Date.now() \/ 1000))$/;"	v
items	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let items = await this.complete.doComplete()$/;"	v
items	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      items.push(item)$/;"	v
items	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let items: LocationListItem[] = []$/;"	v
items	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        items = items.filter(s => s.severity == null || s.severity <= level)$/;"	v
items	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let items = collection.get(document.uri)$/;"	v
items	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let items = collection.get(uri)$/;"	v
items	.vim/plugged/coc.nvim/src/extensions.ts	/^  items?: any$/;"	p	interface:PropertyScheme
items	.vim/plugged/coc.nvim/src/language-client/client.ts	/^          let items = params.actions.map(o => typeof o === 'string' ? o : o.title)$/;"	v
items	.vim/plugged/coc.nvim/src/languages.ts	/^        let items: VimCompleteItem[] = completeItems.map((o, index) => {$/;"	v
items	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let items = await this.ui.getItems()$/;"	C
items	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^    let items: ListItem[] = codeActions.map(action => {$/;"	v
items	.vim/plugged/coc.nvim/src/list/source/lists.ts	/^    let items: ListItem[] = []$/;"	v
items	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { highlights, items } = this$/;"	v
items	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { items } = this$/;"	v
items	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { selected, items } = this$/;"	v
items	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { window, bufnr, items } = this$/;"	v
items	.vim/plugged/coc.nvim/src/list/worker.ts	/^            items = remain$/;"	v
items	.vim/plugged/coc.nvim/src/list/worker.ts	/^            items = res.items$/;"	v
items	.vim/plugged/coc.nvim/src/list/worker.ts	/^            items = totalItems.slice()$/;"	v
items	.vim/plugged/coc.nvim/src/list/worker.ts	/^          let items: ListItem[]$/;"	v
items	.vim/plugged/coc.nvim/src/list/worker.ts	/^        items = res.items$/;"	v
items	.vim/plugged/coc.nvim/src/list/worker.ts	/^        items: sort ? filtered.sort((a, b) => b.recentScore - a.recentScore) : filtered,$/;"	v
items	.vim/plugged/coc.nvim/src/list/worker.ts	/^      items = res.items$/;"	v
items	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let items = await list.loadItems(context, token)$/;"	v
items	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let items = totalItems$/;"	v
items	.vim/plugged/coc.nvim/src/model/status.ts	/^        items.push(item)$/;"	C
items	.vim/plugged/coc.nvim/src/model/status.ts	/^    items.sort((a, b) => a.priority - b.priority)$/;"	C
items	.vim/plugged/coc.nvim/src/model/status.ts	/^    let items: StatusBarItem[] = []$/;"	C
items	.vim/plugged/coc.nvim/src/model/status.ts	/^  private items: Map<string, StatusBarItem> = new Map()$/;"	C
items	.vim/plugged/coc.nvim/src/provider/manager.ts	/^    let items = Array.from(this.providers)$/;"	v
items	.vim/plugged/coc.nvim/src/sources.ts	/^    let items = this.sources$/;"	v
items	.vim/plugged/coc.nvim/src/types.ts	/^  items: ListItem[]$/;"	p	interface:ListItemsEvent
items	.vim/plugged/coc.nvim/src/types.ts	/^  items: VimCompleteItem[]$/;"	p	interface:CompleteResult
items	.vim/plugged/coc.nvim/src/workspace.ts	/^    let items = await Promise.all(locations.map(loc => {$/;"	v
items	.vim/plugged/fzf/src/chunklist.go	/^	items [chunkSize]Item$/;"	m	struct:fzf.Chunk	typeref:typename:[chunkSize]Item
iter	.vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) iter(pfun algo.Algo, tokens []Token, caseSensitive bool, normalize bool, forwa/;"	f	struct:fzf.Pattern	typeref:typename:(Offset, int, *[]int)
j	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> j$/;"	m
j	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  j = 106,$/;"	e	enum:CharCode
jQuery	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var jQuery = window.jQuery = window.$ = function( selector, context ) {$/;"	v
java	.config/nvim/plugged/sideways.vim/spec/plugin/regression_spec.rb	/^  describe "java" do$/;"	d
javascript	.config/nvim/plugged/sideways.vim/spec/plugin/regression_spec.rb	/^  describe "javascript" do$/;"	d
javascript definitions	.config/nvim/plugged/switch.vim/spec/plugin/javascript_spec.rb	/^describe "javascript definitions" do$/;"	d
jest	.config/nvim/plugged/coc.nvim/package.json	/^    "jest": "24.8.0",$/;"	s	object:devDependencies
jest	.config/nvim/plugged/coc.nvim/package.json	/^  "jest": {$/;"	o
jest	.vim/plugged/coc.nvim/package.json	/^    "jest": "24.8.0",$/;"	s	object:devDependencies
jest	.vim/plugged/coc.nvim/package.json	/^  "jest": {$/;"	o
joinMessageLines	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  joinMessageLines: boolean$/;"	p	interface:DiagnosticConfig
joinTokens	.vim/plugged/fzf/src/tokenizer.go	/^func joinTokens(tokens []Token) string {$/;"	f	package:fzf	typeref:typename:string
json	.vim/plugged/coc.nvim/src/attach.ts	/^    let json = require('..\/package.json')$/;"	v
json	.vim/plugged/coc.nvim/src/extensions.ts	/^    let json = this.loadJson()$/;"	v
json	.vim/plugged/coc.nvim/src/workspace.ts	/^    let json = requireFunc('..\/package.json')$/;"	v
jsonFile	.vim/plugged/coc.nvim/src/extensions.ts	/^      let jsonFile = path.join(folder, 'package.json')$/;"	v
jsonFile	.vim/plugged/coc.nvim/src/extensions.ts	/^    let jsonFile = path.join(folder, 'package.json')$/;"	v
jsonFile	.vim/plugged/coc.nvim/src/extensions.ts	/^    let jsonFile = path.join(root, 'package.json')$/;"	v
jsonc-parser	.config/nvim/plugged/coc.nvim/package.json	/^    "jsonc-parser": "^2.1.0",$/;"	s	object:dependencies
jsonc-parser	.vim/plugged/coc.nvim/package.json	/^    "jsonc-parser": "^2.1.0",$/;"	s	object:dependencies
jsonlib	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^import json as jsonlib$/;"	I
jumpAcceptEnabled	.vim/plugged/fzf/src/terminal.go	/^	jumpAcceptEnabled$/;"	c	package:fzf
jumpCommand	.vim/plugged/coc.nvim/src/workspace.ts	/^    let jumpCommand = openCommand || preferences.get<string>('jumpCommand', 'edit')$/;"	v
jumpDisabled	.vim/plugged/fzf/src/terminal.go	/^	jumpDisabled jumpMode = iota$/;"	c	package:fzf	typeref:type:jumpMode
jumpEnabled	.vim/plugged/fzf/src/terminal.go	/^	jumpEnabled$/;"	c	package:fzf
jumpLabels	.vim/plugged/fzf/src/terminal.go	/^	jumpLabels string$/;"	m	struct:fzf.Terminal	typeref:typename:string
jumpMode	.vim/plugged/fzf/src/terminal.go	/^type jumpMode int$/;"	t	package:fzf	typeref:typename:int
jumpTo	.vim/plugged/coc.nvim/src/types.ts	/^  jumpTo(uri: string, position: Position): Promise<void>$/;"	m	interface:IWorkspace
jump_backwards	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def jump_backwards(self):$/;"	m	class:SnippetManager
jump_forwards	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def jump_forwards(self):$/;"	m	class:SnippetManager
jump_left	.config/nvim/plugged/sideways.vim/spec/spec_helper.rb	/^    def vim.jump_left$/;"	S
jump_right	.config/nvim/plugged/sideways.vim/spec/spec_helper.rb	/^    def vim.jump_right$/;"	S
jumpable	.vim/plugged/coc.nvim/src/__tests__/modules/plugin.test.ts	/^    let jumpable = await helper.plugin.snippetCheck(false, true)$/;"	v
jumpable	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let jumpable = snippetManager.jumpable()$/;"	v
jumping	.config/nvim/plugged/sideways.vim/spec/plugin/jumping_spec.rb	/^describe "jumping" do$/;"	d
jumping	.vim/plugged/fzf/src/terminal.go	/^	jumping    jumpMode$/;"	m	struct:fzf.Terminal	typeref:typename:jumpMode
k	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> k$/;"	m
k	.vim/plugged/coc.nvim/src/configuration/index.ts	/^        for (let k of Object.keys(val)) {$/;"	v
k	.vim/plugged/coc.nvim/src/list/mappings.ts	/^      for (let k of key) {$/;"	v
k	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  k = 107,$/;"	e	enum:CharCode
keepCompleteopt	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let keepCompleteopt = getConfig<boolean>('keepCompleteopt', false)$/;"	v
keepCompleteopt	.vim/plugged/coc.nvim/src/types.ts	/^  keepCompleteopt: boolean$/;"	p	interface:CompleteConfig
key	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    for (let key of ['<C-p>', '<C-n>', '<C-a>', '<C-e>', '<Left>', '<Right>', '<Backspace>', '<C/;"	v
key	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^          res[key] = true$/;"	v
key	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^        for (let key of Object.keys(required)) {$/;"	v
key	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      let val = props[key]$/;"	v
key	.vim/plugged/coc.nvim/src/configuration/model.ts	/^    for (const key of Object.keys(target)) {$/;"	C
key	.vim/plugged/coc.nvim/src/configuration/util.ts	/^  for (const key of fromKeys) {$/;"	C	function:getChangedKeys
key	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^      for (let key of map.keys()) {$/;"	v
key	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        for (let key of allDiagnostics.keys()) {$/;"	v
key	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        let key = `diagnostic.${severity}Sign`$/;"	v
key	.vim/plugged/coc.nvim/src/extensions.ts	/^          if (val != null) props[key] = val$/;"	v
key	.vim/plugged/coc.nvim/src/extensions.ts	/^          let val = properties[key].default$/;"	v
key	.vim/plugged/coc.nvim/src/extensions.ts	/^      let val = json.dependencies[key]$/;"	v
key	.vim/plugged/coc.nvim/src/extensions.ts	/^    for (let key of Object.keys(json.dependencies)) {$/;"	v
key	.vim/plugged/coc.nvim/src/extensions.ts	/^    for (let key of keys) {$/;"	v
key	.vim/plugged/coc.nvim/src/extensions.ts	/^    let key = `extension.${id}.disabled`$/;"	v
key	.vim/plugged/coc.nvim/src/handler/index.ts	/^    for (let key of Object.keys(list)) {$/;"	v
key	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      let key = keys[i]$/;"	v
key	.vim/plugged/coc.nvim/src/list/configuration.ts	/^    if (validKeys.indexOf(key) !== -1) return key$/;"	C
key	.vim/plugged/coc.nvim/src/list/manager.ts	/^        let val = config[key]$/;"	v
key	.vim/plugged/coc.nvim/src/list/manager.ts	/^      for ( let key of Object.keys( config ) ) {$/;"	v
key	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    for (let [key, value] of Object.entries(mappings)) {$/;"	v
key	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    let [key, action] = expr.split(':', 2)$/;"	v
key	.vim/plugged/coc.nvim/src/list/ui.ts	/^          let backgroundColor = map[key]$/;"	v
key	.vim/plugged/coc.nvim/src/list/ui.ts	/^        for (let key of Object.keys(map)) {$/;"	v
key	.vim/plugged/coc.nvim/src/list/ui.ts	/^        let foregroundColor = map[key]$/;"	v
key	.vim/plugged/coc.nvim/src/list/ui.ts	/^      for (let key of Object.keys(map)) {$/;"	v
key	.vim/plugged/coc.nvim/src/services.ts	/^      let config: LanguageServerConfig = lspConfig[key]$/;"	v
key	.vim/plugged/coc.nvim/src/services.ts	/^    for (let key of Object.keys(lspConfig)) {$/;"	v
key	.vim/plugged/coc.nvim/src/types.ts	/^  key: string$/;"	p	interface:ConfigurationInspect
key	.vim/plugged/coc.nvim/src/types.ts	/^  key?: string$/;"	p	interface:ListArgument
key	.vim/plugged/coc.nvim/src/util/array.ts	/^    const key = keyFn(elem)$/;"	C	function:group
key	.vim/plugged/coc.nvim/src/util/lodash.ts	/^        const value = obj[key]$/;"	C	function:defaults
key	.vim/plugged/coc.nvim/src/util/lodash.ts	/^      for (const key in source) { \/\/ tslint:disable-line$/;"	C	function:defaults
key	.vim/plugged/coc.nvim/src/util/object.ts	/^    for (const key in obj) {$/;"	C	function:deepFreeze
key	.vim/plugged/coc.nvim/src/workspace.ts	/^      let config: LanguageServerConfig = lspConfig[key]$/;"	v
key	.vim/plugged/coc.nvim/src/workspace.ts	/^    for (let key of this.watchedOptions) {$/;"	v
keyMappings	vimium-options.json	/^  "keyMappings": "map << moveTabLeft\\nmap >> moveTabRight\\nmap gj previousTab\\nmap gk nextTab/;"	s
keyMatch	.vim/plugged/fzf/src/terminal.go	/^func keyMatch(key int, event tui.Event) bool {$/;"	f	package:fzf	typeref:typename:bool
keyboard.dispatch	VSCode/settings.json	/^    "keyboard.dispatch": "keyCode",$/;"	s
keymap	.vim/plugged/fzf/src/terminal.go	/^	keymap     map[int][]action$/;"	m	struct:fzf.Terminal	typeref:typename:map[int][]action
keymaps	.vim/plugged/coc.nvim/src/workspace.ts	/^  public readonly keymaps: Map<string, [Function, boolean]> = new Map()$/;"	p	class:Workspace
keys	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = ' ' + EA + 'Hello' + JF + 'World'$/;"	v	class:Anon_NoTrigger_FirstCharOfLine
keys	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = '123 abc' + EA + '123' + JF + '456'$/;"	v	class:Anon_Trigger_Multi
keys	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = 'abc ' + EA$/;"	v	class:Anon_NoTrigger_AfterSpace
keys	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = 'abc' + EA + '123' + JF + '456'$/;"	v	class:Anon_NoTrigger_Multi
keys	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = 'abc' + EA + '\\nabc' + EX$/;"	v	class:Anon_Trigger_Twice
keys	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = 'abc' + EA$/;"	v	class:Anon_NoTrigger_Simple
keys	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = 'abc' + EA$/;"	v	class:Anon_Trigger_Simple
keys	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = 'blah blah abc' + EA$/;"	v	class:Anon_Trigger_Opts
keys	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = EA + 'Hello' + JF + 'World'$/;"	v	class:Anon_NoTrigger_BeginningOfLine
keys	.config/nvim/plugged/ultisnips/test/test_Autocommands.py	/^    keys = 'test' + EX + 'test' + EX + 'bar' + JF + JF + ' done ' + ESC + \\$/;"	v	class:Autocommands
keys	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    keys = 'a'$/;"	v	class:Autotrigger_CanMatchSimpleTrigger
keys	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    keys = 'a\\na'$/;"	v	class:Autotrigger_CanMatchContext
keys	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    keys = 'abc'$/;"	v	class:Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne
keys	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    keys = 'abc'$/;"	v	class:Autotrigger_WillProduceNoExceptionWithVimLowerThan214
keys	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    keys = 'if' + EX + '=' + ESC + 'o='$/;"	v	class:Autotrigger_CanMatchPreviouslySelectedPlaceholder
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = "te'st" + EX$/;"	v	class:Snippet_With_SingleQuote
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = '\\ttest' + EX$/;"	v	class:DoNotTrimSpacesAtEndOfLinesByDefault
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = '\\ttest' + EX$/;"	v	class:TrimSpacesAtEndOfLines
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'oouu trig b' + 2 * ARR_L + EX$/;"	v	class:NoUmlautsBeforeTriggerAndCharsAfter
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'te ül' + EX + 'hello'$/;"	v	class:Snippet_With_Umlauts_Mirrors
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'te ül' + EX + 'hüüll'$/;"	v	class:Snippet_With_Umlauts_Python
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'te ül' + EX + 'more text' + JF + JF + 'end'$/;"	v	class:Snippet_With_Umlauts_OverwriteFirst
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'te ül' + EX + 'more text'$/;"	v	class:Snippet_With_Umlauts_TypeOn
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'te ül' + EX + JF + 'more text' + JF + 'end'$/;"	v	class:Snippet_With_Umlauts_OverwriteSecond
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'te ül' + EX + JF + JF + 'end'$/;"	v	class:Snippet_With_Umlauts_OverwriteNone
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'te"st' + EX$/;"	v	class:Snippet_With_DoubleQuote
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'te' + LS + '2\\n'$/;"	v	class:Snippet_With_DoubleQuote_List
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'te' + LS + '2\\n'$/;"	v	class:Snippet_With_SingleQuote_List
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'te' + LS + '2\\n'$/;"	v	class:Snippet_With_Umlauts_List
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'test' + EX + 'j' + JF + 'k'$/;"	v	class:TrailingNewline_TabStop_EndNL
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'test' + EX + 'j' + JF + 'k'$/;"	v	class:TrailingNewline_TabStop_EndStartNL
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'test' + EX + 'j' + JF + 'k'$/;"	v	class:TrailingNewline_TabStop_ExtraNL_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'test' + EX + 'j' + JF + 'k'$/;"	v	class:TrailingNewline_TabStop_JustNL
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'test' + EX + 'j' + JF + 'k'$/;"	v	class:TrailingNewline_TabStop_NLInsideStuffBehind
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'test' + EX + 'j' + JF + 'k'$/;"	v	class:TrailingNewline_TabStop_NotEndStartNL
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'test' + EX + 'j' + JF + 'k'$/;"	v	class:TrailingNewline_TabStop_StartNL
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'test' + EX + 'z' + JF + 'y'$/;"	v	class:MultiLineDefault_Type
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'test' + EX + BS + JF + 'Goodbye'$/;"	v	class:LeaveTrailingWhitespace
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'test' + EX + BS + JF + 'Goodbye'$/;"	v	class:RemoveTrailingWhitespace
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'test' + EX + BS + JF + 'y'$/;"	v	class:MultiLineDefault_BS
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'test' + EX + JF + 'y'$/;"	v	class:MultiLineDefault_Jump
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'teüst' + EX$/;"	v	class:Snippet_With_Umlauts
keys	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    keys = 'ööuu trig b' + 2 * ARR_L + EX$/;"	v	class:UmlautsBeforeTriggerAndCharsAfter
keys	.config/nvim/plugged/ultisnips/test/test_Completion.py	/^    keys = 'superkallifragilistik\\ntest' + EX + 'sup' + COMPL_KW + \\$/;"	v	class:Completion_SimpleExample_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Completion.py	/^    keys = COMPLETION_OPTIONS + 'test' + EX + 'com' + COMPL_KW + JF + 'foo'$/;"	v	class:Completion_ForwardsJumpWithoutCOMPL_ACCEPT
keys	.config/nvim/plugged/ultisnips/test/test_Completion.py	/^    keys = COMPLETION_OPTIONS + 'test' + EX + 'foo' + JF + 'com' + COMPL_KW + \\$/;"	v	class:Completion_BackwardsJumpWithoutCOMPL_ACCEPT
keys	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "123" + ESC + "vhh" + EX + "test" + EX + " zzz" + ESC + \\$/;"	v	class:ContextSnippets_ContextHasAccessToVisual
keys	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "e" + EX + " " + "e" + EX$/;"	v	class:ContextSnippets_ContextIsClearedBeforeExpand
keys	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "e" + EX$/;"	v	class:ContextSnippets_CursorIsZeroBased
keys	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = 'a' + EX$/;"	v	class:ContextSnippets_DoNotExpandOnFalse
keys	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = 'a' + EX$/;"	v	class:ContextSnippets_ExpandOnTrue
keys	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = 'a' + EX$/;"	v	class:ContextSnippets_Header_DoNotExpandOnFalse
keys	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = 'a' + EX$/;"	v	class:ContextSnippets_Header_ExpandOnTrue
keys	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = 'a' + EX$/;"	v	class:ContextSnippets_SimpleSnippet
keys	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = 'a' + EX$/;"	v	class:ContextSnippets_UseContext
keys	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = 'e' + EX$/;"	v	class:ContextSnippets_ReportError
keys	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = 'e' + EX$/;"	v	class:ContextSnippets_ReportErrorOnIndexOutOfRange
keys	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = 'i' + EX$/;"	v	class:ContextSnippets_PriorityKeyword
keys	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = r"""$/;"	v	class:ContextSnippets_SnippetPriority
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'first line\\n\\n\\n\\n\\n\\nthird line' + \\$/;"	v	class:Undo_RemoveWholeSnippet
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'hello test' + EX + 'upsi' + ESC + 'hh' + 'iabcdef' + ESC + 'u'$/;"	v	class:Undo_RemoveEditInTabstop
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'i' + EX + 'asd' + JF + 'feh' + ESC + 'uuuu'$/;"	v	class:Undo_CompletelyUndoSnippet
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'i' + EX + 'asd' + JF + ESC + 'u'$/;"	v	class:Undo_ChangesInPlaceholder
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'i' + EX + 'i' + EX + ESC + 'u'$/;"	v	class:Undo_RemoveOneSnippetByTime
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'i' + EX + 'i' + EX + ESC + 'uu'$/;"	v	class:Undo_RemoveOneSnippetByTime2
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'test' + EX + 'A' + JF + BS + 'BBB'$/;"	v	class:Backspace_TabStop_NotZero
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'test' + EX + 'A' + JF + BS + 'BBB'$/;"	v	class:Backspace_TabStop_Zero
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'test' + EX + 'a' + JF + 'test' + EX + ESC + 'u' + JF$/;"	v	class:DoNotCrashOnUndoAndJumpInNestedSnippet
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'test' + EX + 'a' + JF + BS + JF + 'Int' + JF + 'body'$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove2
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'test' + EX + 'aaaaa' + JF + BS + JF + '3333'$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove1
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'test' + EX + ESC + 'Vkx' + 'i\\nworld\\n'$/;"	v	class:DeleteSnippetInsertion0
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'test' + EX + ESC + 'ddi' + JB$/;"	v	class:DeleteCurrentTabStop1_JumpBack
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'test' + EX + ESC + 'j2dd'$/;"	v	class:DeleteLastTwoLinesInSnippet
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'test' + EX + ESC + 'u'$/;"	v	class:DeleteSnippetInsertion1
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'test' + EX + ESC + 'u'$/;"	v	class:Undo_RemoveMultilineSnippet
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'test' + EX + JF + ESC + 'ddi' + JB + 'hello'$/;"	v	class:DeleteCurrentTabStop2_JumpBack
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'test' + EX + JF + ESC + 'ddkji' + JB + 'hello' + JF + 'world'$/;"	v	class:DeleteCurrentTabStop3_JumpAround
keys	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    keys = 'test' + EX+ 'a b c' + JF + 'shallnot'$/;"	v	class:JumpForward_DefSnippet
keys	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    keys = 'Wie hallo gehts' + ESC + 'bhi' + EX + 'Huiui!'$/;"	v	class:MultilineExpandTestTyping_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    keys = 'Wie hallo gehts' + ESC + 'bhi' + EX$/;"	v	class:ExpandInTheMiddleOfLine_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    keys = 'Wie hallo gehts' + ESC + 'bhi' + EX$/;"	v	class:MultilineExpand_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    keys = 'hallo ' + EX$/;"	v	class:DoNotExpandAfterSpace_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    keys = 'hallo' + EX + '\\nAnd more'$/;"	v	class:SimpleExpandEndingWithNewline_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    keys = 'hallo' + EX + '\\nHallo Welt!\\n\\n\\b\\b\\b\\b\\b'$/;"	v	class:SimpleExpandNewLineAndBackspae_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    keys = 'hallo' + EX + '\\nhallo' + EX$/;"	v	class:SimpleExpandTwice_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    keys = 'hallo' + EX + 'and again'$/;"	v	class:SimpleExpandTypeAfterExpand_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    keys = 'hallo' + EX$/;"	v	class:SimpleExpand_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    keys = 'na du hallo' + EX + 'and again\\b\\b\\b\\b\\bblub'$/;"	v	class:SimpleExpandTypeAndDelete_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    keys = 'test' + EX + EX$/;"	v	class:ExitSnippetModeAfterTabstopZero
keys	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    keys = '  test' + EX + 'hello' + JF + 'world' + JF + 'blub'$/;"	v	class:Bug1251994
keys	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    keys = '\\t\\t\\tpd' + EX + '2'$/;"	v	class:VirtualEdit
keys	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    keys = 'blahfasel' + ESC + 'v' + 4 * ARR_L + \\$/;"	v	class:RetainsTheUnnamedRegister_ButOnlyOnce
keys	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    keys = 'test' + EX + 'foo'$/;"	v	class:ShiftWidthZero
keys	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    keys = 'test' + EX + ESC + \\$/;"	v	class:NonUnicodeDataInUnnamedRegister
keys	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    keys = 'yank' + ESC + 'by4lea test' + EX + 'HELLO' + JF + JF + ESC + 'p'$/;"	v	class:RetainsTheUnnamedRegister
keys	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^    keys = 'fold' + EX + 'hi' + ESC + 'jdd'$/;"	v	class:Fold_DeleteMiddleLine_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^    keys = 'fold' + EX + 'hi'$/;"	v	class:FoldOverwrite_Simple_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^    keys = 'test' + EX + 'Ball'$/;"	v	class:FoldingEnabled_SnippetWithFold_ExpectNoFolding
keys	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^    keys = 'test' + EX + JF + 'sub junk {}'$/;"	v	class:PerlSyntaxFold
keys	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    keys = '    test' + EX + 'Hui'$/;"	v	class:ProperIndenting_SimpleCase_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    keys = '    test' + EX + '\\n' + 'blah'$/;"	v	class:ProperIndenting_AutoIndentAndNewline_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    keys = '    test' + EX + 'blah'$/;"	v	class:ProperIndenting_SingleLineNoReindenting_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    keys = 'inc' + EX + 'cstdl'$/;"	v	class:ProperIndenting_FirstLineInFileComplete_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    keys = 'inc' + EX + 'foo'$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    keys = 'm' + EX + 'm1' + EX + '\\nHallo'$/;"	v	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    keys = 'm' + EX$/;"	v	class:RecTabStopsWithExpandtab_SimpleExample_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    keys = 'test' + EX + 'This is a longer text that should wrap'$/;"	v	class:FOTextBeforeAndAfter_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    keys = 'test' + EX + \\$/;"	v	class:FOSimple_Break_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    keys = ('test' + EX + 'This is a longer snippet that should wrap properly '$/;"	v	class:FOTextAfter_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    keys = ('test' + EX + 'This is a longersnippet that should wrap properly')$/;"	v	class:FOWrapOnLongWord_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = """    test""" + EX$/;"	v	class:PythonCode_IndentEtSwOffset
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = """   test""" + EX$/;"	v	class:PythonCode_IndentEtSw
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = """   test""" + EX$/;"	v	class:PythonCode_IndentNoetSwTs
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = """$/;"	v	class:PythonCode_MultiAppendShift
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = """$/;"	v	class:PythonCode_MultiAppendShiftMethods
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = """$/;"	v	class:PythonCode_MultiAppendSimpleIndent
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = """$/;"	v	class:PythonCode_ResetIndent
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = """$/;"	v	class:PythonCode_SimpleMkline
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = """test""" + EX + 'ups'$/;"	v	class:PythonCode_LongerTextThanSource_Chars
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = """test""" + EX + 'ups'$/;"	v	class:PythonCode_LongerTextThanSource_MultiLine
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = """test""" + EX$/;"	v	class:PythonCode_Locals
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = """test""" + EX$/;"	v	class:PythonCode_OptExists
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = """test""" + EX$/;"	v	class:PythonCode_OptNoExists
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = '    test' + EX$/;"	v	class:PythonCodeOld_IndentedMultiline
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = '    test' + EX$/;"	v	class:PythonCode_MultilineIndented
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = '    test' + EX$/;"	v	class:TabStop_VimScriptInterpolation_SimpleExample
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = ' ' * 8 + 'test' + EX  # < 8 works.$/;"	v	class:PythonCode_IndentProblem
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX$/;"	v	class:PythonVisual_SelectOneWord
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX$/;"	v	class:PythonVisual_LineSelect_Simple
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + 'Hallo Welt'$/;"	v	class:PythonCodeOld_ReferencePlaceholderBefore
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + 'Hallo Welt'$/;"	v	class:PythonCode_ReferencePlaceholderBefore
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + 'aaa'$/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteFirst
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + 'abc'$/;"	v	class:PythonVisual_NoVisualSelection_Ignore
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + 'and more'$/;"	v	class:TabStop_Shell_SimpleExample
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + 'and more'$/;"	v	class:TabStop_Shell_TextInNextLine
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + 'and more'$/;"	v	class:TabStop_Shell_WithUmlauts
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + 'blah' + ', bah'$/;"	v	class:PythonCode_CanOverwriteTabstop
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + 'ho'$/;"	v	class:PythonCodeOld_ReferencePlaceholderAfter
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + 'ho'$/;"	v	class:PythonCode_ReferencePlaceholder
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + 'overwrite' + JF + 'and more'$/;"	v	class:TabStop_Shell_InDefValue_Overwrite
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + ESC + "otest" + EX + JF + ESC$/;"	v	class:PythonVisual_HasAccessToSelectedPlaceholders
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + ESC + "otest" + EX + JF + JF + JF + JF$/;"	v	class:PythonVisual_HasAccessToZeroPlaceholders
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + JF + 'and more'$/;"	v	class:TabStop_Shell_InDefValue_Leave
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + JF + 'and more'$/;"	v	class:TabStop_Shell_ShebangPython
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX + JF + 'okay'$/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteSecond
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCodeOld_SimpleExample
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCodeOld_TransformedBeforeMultiLine
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCode_MultiAppend
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCode_SimpleAppend
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCode_SimpleExample
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCode_SimpleExample_ReturnValueIsEmptyString
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCode_TransformedBeforeMultiLine
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:PythonCode_UseNewOverOld
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:Python_WeirdScoping_Error
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_Shell_TestEscapedChars_Overwrite
keys	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    keys = 'ups test' + EX$/;"	v	class:PythonCode_TrickyReferences
keys	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^    keys = ' ' + LS + '3\\n'$/;"	v	class:ListAllAvailable_SpaceInFront_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^    keys = '' + LS + '3\\n'$/;"	v	class:ListAllAvailable_NothingTyped_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^    keys = 'hallo qualle' + LS + 'Hi'$/;"	v	class:ListAllAvailable_NonDefined_NoExpectionShouldBeRaised
keys	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^    keys = 'hallo test' + LS + '1\\n'$/;"	v	class:ListAllAvailable_testtypedSecondOpt_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^    keys = 'hallo test' + LS + '2\\n'$/;"	v	class:ListAllAvailable_testtyped_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^    keys = '} ' + LS + '3\\n'$/;"	v	class:ListAllAvailable_BraceInFront_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'for' + EX + '100' + JF + 'avar\\b\\b\\b\\ba_variable' + JF + \\$/;"	v	class:MirrorRealLifeExample_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'hallo test' + EX + 'auch' + ESC + \\$/;"	v	class:Mirror_TestKill_InsertAfter_NoKill
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'hallo test' + EX + 'auch' + ESC + \\$/;"	v	class:Mirror_TestKill_InsertBefore_NoKill
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'hallo test' + EX + 'auch' + ESC + \\$/;"	v	class:Mirror_TestKill_InsertBeginning_Kill
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'hallo test' + EX + 'auch' + ESC + \\$/;"	v	class:Mirror_TestKill_InsertEnd_Kill
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'hallo test' + EX + 'elt'$/;"	v	class:Mirror_TestKillTabstop_Kill
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'a'$/;"	v	class:MirrorBeforeTabstopOverwrite_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo Du\\nHi'$/;"	v	class:MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo Du\\nHi'$/;"	v	class:MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo Du\\nHi\\b\\bAch Blah'$/;"	v	class:MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo du'$/;"	v	class:SimpleMirrorSameLineMany_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo du\\nwie gehts'$/;"	v	class:SimpleMirrorSameLineManyMultiline_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo foo'$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo test'$/;"	v	class:TextTabStopTextSurroundedTab_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo welt'$/;"	v	class:TextTabStopAllSurrounded_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo welt'$/;"	v	class:TextTabStopSurroundMirror_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:SimpleMirrorMultilineMany_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:SimpleMirrorSameLine_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:TextTabStopAfterMirror_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:TextTabStopSimpleMirrorMultiline_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:TextTabStopTextAfterTab_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:TextTabStopTextBeforeMirror_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:TextTabStopTextBeforeTab_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo\\b\\b'$/;"	v	class:SimpleMirrorDelete_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo\\b\\bhups'$/;"	v	class:SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hallo\\nagain'$/;"	v	class:TextTabStopSimpleMirrorMultilineMirrorInFront_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'hi' + JF + 'hu' + JF + 'hub' + JF + 'hulla' + \\$/;"	v	class:TabstopWithMirrorManyFromAll_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'stdin' + JF + 'do snap'$/;"	v	class:TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'stdin' + JF + 'overwritten'$/;"	v	class:TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'stdin' + JF + 'overwritten'$/;"	v	class:TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'stdin' + JF + JF + 'end'$/;"	v	class:TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'stdin'$/;"	v	class:TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'stdin'$/;"	v	class:TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'world'$/;"	v	class:SimpleTabstopWithDefaultComplexType_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + 'world'$/;"	v	class:SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX + BS + 'hallo foo'$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX$/;"	v	class:MirrorBeforeTabstopLeave_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX$/;"	v	class:SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX$/;"	v	class:SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX$/;"	v	class:TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'test' + EX$/;"	v	class:TabstopWithMirrorInDefaultNoType_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    keys = 'ups test blah' + ESC + '02f i' + EX + 'hallo'$/;"	v	class:SimpleMirrorSameLine_InText_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    keys = '<trh' + EX + 'blah' + JF + BS + BS + JF + 'end'$/;"	v	class:CursorMovement_BS_InEditMode
keys	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    keys = 'hello test this' + ESC + '02f i' + EX + 'tab' + 1 * ARR_U + '\\n' + JF + \\$/;"	v	class:IMMoving_ExitWhenOutsideAbove_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    keys = 'hello test this' + ESC + '02f i' + EX + 'tab' + 2 * ARR_D + JF + \\$/;"	v	class:IMMoving_ExitWhenOutsideBelow_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    keys = 'hello test this' + ESC + '02f i' + EX + 'tab' + 3 * ARR_L + \\$/;"	v	class:IMMoving_NotExitingWhenBarelyOutsideLeft_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    keys = 'hello test this' + ESC + '02f i' + EX + 'tab' + 4 * ARR_L + \\$/;"	v	class:IMMoving_ExitWhenOutsideLeft_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    keys = 'hello test this' + ESC + '02f i' + EX + 'tab' + 7 * ARR_L + \\$/;"	v	class:IMMoving_NoExiting_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    keys = 'hello test this' + ESC + '02f i' + EX + 'tab' + JF + 'hallo'$/;"	v	class:IMMoving_NoExitingEventAtEnd_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    keys = 'hello test this' + ESC + '02f i' + \\$/;"	v	class:IMMoving_ExitWhenOutsideRight_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    keys = 'test' + EX + 'text' + 3 * ARR_U + 6 * ARR_D$/;"	v	class:IMMoving_CursorsKeys_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    keys = 'test' + EX + 'this is something\\nvery nice\\nnot' + JF + 'more text'$/;"	v	class:CursorMovement_Multiline_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    keys = 'test' + EX + 'this' + 2 * ARR_L + 'hallo\\nwelt'$/;"	v	class:IMMoving_AcceptInputWhenMoved_ECR
keys	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^    keys = 'test' + EX + ' ' + ESC + ESC + 'ahi'$/;"	v	class:Multiple_ManySnippetsOneTrigger_ECR
keys	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^    keys = 'test' + EX + '0\\n' + 'hi'$/;"	v	class:Multiple_SimpleCaseSelectZero_EEscape
keys	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^    keys = 'test' + EX + '1\\n'$/;"	v	class:Multiple_SimpleCaseSelectFirst_ECR
keys	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^    keys = 'test' + EX + '2\\n'$/;"	v	class:Multiple_SimpleCaseSelectSecond_ECR
keys	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^    keys = 'test' + EX + '5\\n'$/;"	v	class:Multiple_SimpleCaseSelectTooHigh_ESelectLast
keys	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^    keys = 'test' + EX + ESC + 'hi'$/;"	v	class:Multiple_SimpleCaseEscapeOut_ECR
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = '"test snip"' + EX$/;"	v	class:ParseSnippets_MultiWord_WithQuotes
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'ab' + EX + '\\nac' + EX$/;"	v	class:ParseSnippets_Global_Python
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'ab' + EX$/;"	v	class:ParseSnippets_Global_Local_Python
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'abc def' + EX$/;"	v	class:ParseSnippets_MultiWord_RE1
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'foo' + EX + ' bar' + EX + '\\nbar' + EX$/;"	v	class:ParseSnippets_MultiWord_RE2
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'inv snip' + EX$/;"	v	class:ParseSnippets_MultiWord_UnmatchedContainer
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'snip test' + EX$/;"	v	class:ParseSnippets_MultiWord_Description
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'snippet test' + EX$/;"	v	class:ParseSnippets_MultiWord_Description_Option
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'test snip' + EX$/;"	v	class:ParseSnippets_MultiWord_NoContainer
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'test snip' + EX$/;"	v	class:ParseSnippets_MultiWord_Quotes
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'test snip' + EX$/;"	v	class:ParseSnippets_MultiWord_Simple
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'test test test' + EX$/;"	v	class:ParseSnippets_MultiWord_RE3
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'test' + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippet
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'test' + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippetContext
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'test' + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippetLocation
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'test' + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippetPostAction
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'test' + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippetPreAction
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'test' + EX$/;"	v	class:ParseSnippets_PrintPythonStacktrace
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'test' + EX$/;"	v	class:ParseSnippets_PrintPythonStacktraceMultiline
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'testsnip' + EX$/;"	v	class:ParseSnippets_ClearAll
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'testsnip' + EX$/;"	v	class:ParseSnippets_ExtendsWithoutFiletype
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'testsnip' + EX$/;"	v	class:ParseSnippets_InvalidPriorityLine
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'testsnip' + EX$/;"	v	class:ParseSnippets_InvalidPriorityLine1
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'testsnip' + EX$/;"	v	class:ParseSnippets_MissingEndSnippet
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'testsnip' + EX$/;"	v	class:ParseSnippets_SimpleSnippet
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'testsnip' + EX$/;"	v	class:ParseSnippets_UnknownDirective
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'toclear' + EX + '\\n' + 'testsnip' + EX$/;"	v	class:ParseSnippets_ClearOne
keys	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = 'toclear' + EX + '\\n' + 'testsnip' + EX$/;"	v	class:ParseSnippets_ClearTwo
keys	.config/nvim/plugged/ultisnips/test/test_Plugin.py	/^    keys = ('longtextlongtext\\n' +$/;"	v	class:Plugin_SuperTab_SimpleTest
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'form_for user, namespace: some_namespace, html: {i' + EX + 'i' + EX$/;"	v	class:RecTabStops_ChildTriggerContainsParentTextObjects
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + '    hallo m' + EX + 'hi'$/;"	v	class:RecTabStops_InNewlineManualIndentTextInFront_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + '    m' + EX + 'hi'$/;"	v	class:RecTabStops_InNewlineManualIndent_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'hello m' + EX + 'hi' + JF + 'two' + JF + 'ups' + JF + 'three' + \\$/;"	v	class:RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'hello m' + EX + 'world m' + EX + 'end'$/;"	v	class:RecTabsStops_TypeInZero2_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'hello\\nhello again m' + EX + 'hi' + JF + 'two' + \\$/;"	v	class:RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'hello\\nm' + EX + 'hi' + JF + 'two' + JF + 'ups' + JF + 'three' + \\$/;"	v	class:RecTabStops_InNewlineInTabstop_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'hi' + JF + 'm' + EX + 'again' + JF + 'm1' + \\$/;"	v	class:RecTabStops_ExpandedInZeroTSTwice_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'hi' + JF + 'm' + EX + \\$/;"	v	class:RecTabStops_ExpandedInZeroTSSecondTime_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'hi' + JF + 'm1' + EX + 'CD' + JF + 'DE'$/;"	v	class:RecTabStops_ExpandedInZeroTS_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'a' + 3 * ARR_L + JF + 'hallo' + \\$/;"	v	class:RecTabStops_BarelyNotLeavingInner_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'a' + 4 * ARR_L + JF + 'hallo' + \\$/;"	v	class:RecTabStops_LeavingInner_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'hello' + JF + 'world' + JF + JF + JF + 'end'$/;"	v	class:RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'hello' + JF + JF + JF + 'world' + JF + 'end'$/;"	v	class:RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'hello' + \\$/;"	v	class:RecTabStops_SimpleCase_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'hi' + JF + 'hallo' + JF + 'end'$/;"	v	class:RecTabStops_InNewlineMultilineWithNonZeroTS_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'hi'$/;"	v	class:RecTabStops_InNewlineMultilineWithIndent_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'm' + EX + 'a' + 4 * ARR_L + JF + 'hallo' + \\$/;"	v	class:RecTabStops_LeavingInnerInner_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX + 'm' + EX + 'a' + 6 * ARR_L + JF + 'hallo' + \\$/;"	v	class:RecTabStops_LeavingInnerInnerTwo_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm' + EX$/;"	v	class:RecTabStops_InNewlineMultiline_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + ' m1' + EX + 'hi' + JF + 'two' + JF + 'end'$/;"	v	class:RecTabStops_InnerWOTabStopTwiceDirectly_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + 'CD' + JF + 'DE'$/;"	v	class:RecTabStops_OuterOnlyWithZeroTS_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + 'CD' + JF + 'DE'$/;"	v	class:RecTabStops_OuterOnlyWithZero_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + 'Hallo' + JF + 'Hi' + \\$/;"	v	class:RecTabStops_MirrorInnerSnippet_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + 'hi' + JF + 'two' + JF + 'end'$/;"	v	class:RecTabStops_InnerWOTabStop_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + 'one' + JF + 'two' + \\$/;"	v	class:RecTabStops_MirroredZeroTS_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + 'one' + JF + 'two' + \\$/;"	v	class:RecTabStops_ZeroTSisNothingSpecial_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + 'm1' + EX + JF + 'm1' + EX + 'hi' + JF + 'end'$/;"	v	class:RecTabStops_InnerWOTabStopTwice_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'm' + EX + JF + JF + BS + 'm' + EX$/;"	v	class:RecTabsStops_BackspaceZero_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    keys = 'v' + EX + 'frac' + EX + 'a' + JF + 'b' + JF + 'frac' + EX + 'aa' + JF + JF + 'cc' + /;"	v	class:RecTabsStops_TypeInZero_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    keys = 'for' + EX + 'k' + JF$/;"	v	class:ExclusiveSelection_RealWorldCase_Test
keys	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    keys = 'for' + EX + 'k' + JF$/;"	v	class:OldSelection_RealWorldCase_Test
keys	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    keys = 'test' + EX + 'Hello'$/;"	v	class:_SelectModeMappings
keys	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    keys = 'test' + EX + 'ui' + JF$/;"	v	class:ExclusiveSelection_SimpleTabstop_Test
keys	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    keys = 'test' + EX + 'ui' + JF$/;"	v	class:OldSelection_SimpleTabstop_Test
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'v' + EX$/;"	v	class:snipMate_Visual_Simple
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'def' + EX$/;"	v	class:snipMate_OverwrittenByRegExpTrigger
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'for' + EX + 'blub' + JF + 'j' + JF + 'hi'$/;"	v	class:snipMate_TestMirrors
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'hello' + EX + '2\\n'$/;"	v	class:snipMate_MultiMatches
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'hello' + EX + '\\nhello1' + EX + '\\nhello2' + EX$/;"	v	class:snipMate_SimpleSnippetInSnippetFile
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'hello' + EX + ESC + ':set ft=blubi\\nohello' + EX$/;"	v	class:snipMate_OtherFiletype
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'hello' + EX$/;"	v	class:snipMate_Disabled
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'hello' + EX$/;"	v	class:snipMate_SimpleSnippet
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'hello' + EX$/;"	v	class:snipMate_SimpleSnippetSubDirectory
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'opt' + EX + 'some' + JF + 'not' + JF + 'ende'$/;"	v	class:snipMate_TestMirrorsInPlaceholders_Overwrite
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'opt' + EX + 'some' + JF + JF + 'ende'$/;"	v	class:snipMate_TestMirrorsInPlaceholders
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'test' + EX + 'blub' + JF + 'blah'$/;"	v	class:snipMate_TestNoBraceTabstops
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'test' + EX + 'blub' + JF + 'blah'$/;"	v	class:snipMate_TestNoBraceTabstopsAndMirrors
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'test' + EX + JF + 'hi'$/;"	v	class:snipMate_NoNestedTabstops
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'test' + EX$/;"	v	class:snipMate_EmptyLinesContinueSnippets
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'test' + EX$/;"	v	class:snipMate_Interpolation
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = 'test' + EX$/;"	v	class:snipMate_InterpolationWithSystem
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = ESC + ':set fo=r\\n' + 'i\/*' + EX + '1\\n2'$/;"	v	class:snipMate_Issue658
keys	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    keys = ESC + ':set ft=a\\n' + 'itest1' + EX$/;"	v	class:snipMate_Extends
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = """$/;"	v	class:SnippetActions_CanMirrorTabStopsOutsideOfSnippet
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = """$/;"	v	class:SnippetActions_MoveVisual
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "a" + EX + "1" + JF + "b" + EX + " c" + EX + "2" + JF + "3" + JF + "4" + JF + JF$/;"	v	class:SnippetActions_UseCorrectJumpActions
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "i" + EX + "x" + JF + "1" + JF + "2" + JF + ";"$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpAction
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "i" + EX + "x" + JF + JF + "1" + JF + "2" + JF + ";"$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "i" + EX$/;"	v	class:SnippetActions_CanUseContextFromContextMatch
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "test" + EX + "1" + JF + "2" + JF + "3" + JF + " or 4" + JF + "5"$/;"	v	class:SnippetActions_CanExpandAnonSnippetOnFirstJump
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "test" + EX + "1" + JF + "2" + JF + "3" + JF + "4"$/;"	v	class:SnippetActions_CanEvenWrapSnippetInPreAction
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "test" + EX + "1" + JF + "2" + JF + "3"$/;"	v	class:SnippetActions_CanExpandAnonOnPreExpand
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "test" + EX + "1" + JF + "2"$/;"	v	class:SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = '[]' + ARR_L + 'a' + EX + '1' + JF + '2'$/;"	v	class:SnippetActions_PostActionModifiesCharAfterSnippet
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = '\\n3' + ARR_U + 'a' + EX + '1' + JF + '2'$/;"	v	class:SnippetActions_PostActionModifiesLineAfterSnippet
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = '\\ni' + EX + 'i' + EX + 'x' + JF + 'y' + JF + JF + 'z'$/;"	v	class:SnippetActions_CanModifyParentBody
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = '\\ni' + EX + 'i' + EX + 'x'$/;"	v	class:SnippetActions_EnsureIndent
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = '\\ni' + EX + 'x' + JF + 'y'$/;"	v	class:SnippetActions_PostActionCanUseSnippetRange
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = 'a' + EX + '123'$/;"	v	class:SnippetActions_DoNotBreakCursorOnSingleLikeChange
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = 'a' + EX$/;"	v	class:SnippetActions_ErrorOnBufferModificationThroughCommand
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = 'a' + EX$/;"	v	class:SnippetActions_PostActionModifiesBuffer
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = 'a' + EX$/;"	v	class:SnippetActions_PreActionModifiesBuffer
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = 'i' + EX + 'blah' + JF + 'n' + EX + JF + 'pass'$/;"	v	class:SnippetActions_CanExpandSnippetInDifferentPlace
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = 'i' + EX + 'p' + EX + JF + 'z'$/;"	v	class:SnippetActions_MoveParentSnippetFromChildInPreAction
keys	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    keys = 'i' + EX$/;"	v	class:SnippetActions_ErrorOnModificationSnippetLine
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = '   test it' + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = '   test' + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand2
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = '  test it' + EX + '1\\n'$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = '  test' + EX + '1\\n'$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = '  test' + EX$/;"	v	class:No_Tab_Expand_ET_Leading_Spaces
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = '  test' + EX$/;"	v	class:No_Tab_Expand_Leading_Spaces
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = ' .' + EX$/;"	v	class:SnippetOptions_Regex_Self_Space
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = ' .a' + EX$/;"	v	class:SnippetOptions_Regex_Self_TextAfter
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = '$test' + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = '-test' + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = '.' + EX$/;"	v	class:SnippetOptions_Regex_Self_Start
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = '[[test' + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix3
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = '\\t\\thi' + EX$/;"	v	class:No_Tab_Expand_RealWorld
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = '\\ttest' + EX$/;"	v	class:No_Tab_Expand_Leading_Tabs
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'a test it' + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'a test it' + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'a test' + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'a test' + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'a(test' + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix2
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'a-test it' + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_ExpandSuffix
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'a-test' + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'a.' + EX$/;"	v	class:SnippetOptions_Regex_Self_TextBefore
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'abc test test' + EX$/;"	v	class:SnippetOptions_Regex_SameLine_Long_Start
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'abc test test' + EX$/;"	v	class:SnippetOptions_Regex_SameLine_Simple
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'atest it' + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'atest it' + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_NoExpand
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'atest' + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippets_SimpleExpand
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'atest' + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_NoExpand
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test ' + EX$/;"	v	class:SnippetOptions_Regex_WithSpace
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test cabfed' + EX$/;"	v	class:SnippetOptions_Regex_PythonBlockMatch
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test cabfed' + EX$/;"	v	class:SnippetOptions_Regex_PythonBlockNoMatch
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test it' + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test it' + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_NormalExpand
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test it' + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test me' + EX$/;"	v	class:MultiWordSnippet_Simple
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test test abc' + EX$/;"	v	class:SnippetOptions_Regex_SameLine_Long_End
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test test test' + EX$/;"	v	class:SnippetOptions_Regex_Multiple
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:No_Tab_Expand_ET
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:No_Tab_Expand_ET_SW
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:No_Tab_Expand_ET_SW_TS
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:No_Tab_Expand_No_TS
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:No_Tab_Expand_Simple
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippets_ExpandSingle
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_NormalExpand
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'test' + EX$/;"	v	class:SnippetOptions_Regex_Expand
keys	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = 'ßßtest' + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3
keys	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = 'test me' + EX$/;"	v	class:SnippetPriorities_MultiWordTriggerOverwriteExisting
keys	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = 'test' + EX + '1\\n\\n' + 'test' + EX + '2\\n'$/;"	v	class:SnippetPriorities_OverwriteThenChoose_ECR
keys	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = 'test' + EX$/;"	v	class:SnippetPriorities_AddedHasHigherThanFile
keys	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = 'test' + EX$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded
keys	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = 'test' + EX$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded_neg_prio
keys	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = 'test' + EX$/;"	v	class:SnippetPriorities_OverwriteExisting
keys	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = 'test' + EX$/;"	v	class:SnippetPriorities_OverwriteTwice_ECR
keys	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = 'test' + EX$/;"	v	class:SnippetPriorities_SimpleClear
keys	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = 'test' + EX$/;"	v	class:SnippetPriorities_SimpleClear2
keys	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = 'test1' + EX$/;"	v	class:SnippetPriorities_DoNotCareAboutNonMatchings
keys	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = (ESC + ':set ft=p\\n' + 'itest' + EX + '\\n' +$/;"	v	class:SnippetPriorities_ClearedByChild
keys	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = ESC + ':set ft=c\\n' + 'itest' + EX$/;"	v	class:SnippetPriorities_ClearedByParent
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'echo' + EX + 'test'$/;"	v	class:TabStop_Exit_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'echo' + EX$/;"	v	class:TabStopNoReplace_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'hallo' + EX + 'Nase'$/;"	v	class:TabStopSimpleReplaceSurrounded1_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'hallo' + EX + 'Nase'$/;"	v	class:TabStopSimpleReplaceSurrounded_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'hallo' + EX + 'Somelengthy Text' + JF + 'Hi' + JB + \\$/;"	v	class:TabStopTestBackwardJumping2_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'hallo' + EX + 'Somelengthy Text' + JF + 'Hi' + JB + \\$/;"	v	class:TabStopTestBackwardJumping_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'hallo' + EX + 'Test' + JF + 'Hi' + JF + JF + 'du'$/;"	v	class:TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'hallo' + EX + 'haselnut' + 2 * ARR_L + 'hips' + JF + 'end'$/;"	v	class:TabStopNavigatingInInsertModeSimple_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'hallo' + EX + 'na' + JF + 'Du Nase'$/;"	v	class:TabStopSimpleReplaceReversed_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'hallo' + EX + 'na' + JF + 'Du Nase'$/;"	v	class:TabStopSimpleReplace_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'hallo' + EX + 'ship'$/;"	v	class:TabStopWithOneChar_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'hallo' + EX + JF + 'Test' + JF + 'Hi'$/;"	v	class:TabStopTestJumping2_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'hallo' + EX + JF + 'Test' + JF + 'Hi'$/;"	v	class:TabStopTestJumping_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'i' + EX + EX + '1' + JF + '2' + JF + ' after' + JF + '3'$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'i' + EX + EX + '1' + JF + '2' + JF + ' after' + JF + '3'$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test hallo World' + ESC + '02f i' + EX + 'world' + JF + 'try' + \\$/;"	v	class:TabStopTestMultilineExpand_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + ' blah' + JF + 'Hallo'$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + 'Hallo'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite0
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + 'Hallo'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite1
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + 'Hallo'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + 'Hello' + JF + 'World' + JF$/;"	v	class:TabStop_AdjacentTabStopAddText_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + 'Hello' + JF + 'World'$/;"	v	class:TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + 'Hi' + JF + 'Hallo' + JB + 'SomethingElse' + JF + \\$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + 'Nothing'$/;"	v	class:TabStop_Multiline_MirrorInFront_Overwrite
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + 'Nothing'$/;"	v	class:TabStop_Multiline_Overwrite
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + 'WORLD' + JF + 'End'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + '[ -u -v -d ]'$/;"	v	class:TabStop_EscapingChars_RealLife
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + 'blub' + JF + 'hello'$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + 'hello' + JF + 'world'$/;"	v	class:TabStop_EscapingChars_Backslash4
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + 'hi'$/;"	v	class:TabStop_EscapingCharsDollars
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + 'ups' + JF + 'End'$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + BS + JF + 'Hallo'$/;"	v	class:TabStop_TSInDefaultTextRLExample_DeleteFirst
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + BS + JF + 'Nothing'$/;"	v	class:TabStop_Multiline_DelFirstOverwriteSecond_Overwrite
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + ESC + '0ihi'$/;"	v	class:TabStopEscapingWhenSelectedNoCharTS_ECR
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + ESC + '0ihi'$/;"	v	class:TabStopEscapingWhenSelectedSingleCharTS_ECR
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + ESC + '0ihi'$/;"	v	class:TabStopEscapingWhenSelected_ECR
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + 'Blah'$/;"	v	class:TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + 'Hallo' + JF + 'Ende'$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + 'Hallo'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + 'Hallo'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + 'WORLD' + JF + 'End'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + '\\n' + JF + 't'$/;"	v	class:TabStop_CROnlyOnSelectedNear
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + 'hello'$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + 'longertext' + JB + 'overwrite' + JF + 'End'$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + 'longertext' + JB + JF + 'overwrite' + JF + 'End'$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + 'longertext' + JB + JF + JF + 'End'$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + 'no' + JF + 'End' + JB + 'yes' + JB + \\$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + 'no' + JF + 'End' + JB + 'yes' + JF + 'Begin' \\$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + 'no' + JF + 'End'$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecond
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + 'ups' + JF + 'End'$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + JF + 'Hallo' + JB + JB + 'Blah' + JF + 'Ende'$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpAround
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX + JF + JF + 'Hallo' + JF + 'Ende'$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpToThird
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_EscapingCharsBackticks
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_EscapingCharsDollars1
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfDefinitionText
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfLine
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_EscapingChars_Backslash
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_EscapingChars_Backslash2
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_EscapingChars_Backslash3
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_Multiline_Leave
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_Multiline_MirrorInFront_Leave
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR
keys	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    keys = 'test' + EX$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_DoNothing
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'ascii' + EX + 'éèàçôïÉÈÀÇÔÏ€'$/;"	v	class:Transformation_LowerCaseAsciiResult
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'ascii' + EX + 'éèàçôïÉÈÀÇÔÏ€'$/;"	v	class:Transformation_SimpleCaseAsciiResult
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'hallo test' + EX + 'AUCH' + ESC + \\$/;"	v	class:Transformation_TestKill_InsertAfter_NoKill
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'hallo test' + EX + 'AUCH' + ESC + \\$/;"	v	class:Transformation_TestKill_InsertBefore_NoKill
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'hallo test' + EX + 'AUCH' + ESC + \\$/;"	v	class:Transformation_TestKill_InsertBeginning_Kill
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'hallo test' + EX + 'AUCH' + ESC + \\$/;"	v	class:Transformation_TestKill_InsertEnd_Kill
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'hallo test' + EX + 'b'$/;"	v	class:Transformation_TabIsAtEndNoTextType_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'hallo test' + EX + 'some\\b\\b\\b\\b\\b'$/;"	v	class:Transformation_TabIsAtEndAndDeleted_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'hallo test' + EX + 'some\\b\\b\\b\\bmore'$/;"	v	class:Transformation_TabIsAtEndAndDeleted1_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'hallo test' + EX$/;"	v	class:Transformation_TabIsAtEndNoTextLeave_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'HALLO'$/;"	v	class:Transformation_CleverTransformLongLower_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'Hallo'$/;"	v	class:Transformation_CleverTransformLowercaseChar_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'SomE tExt '$/;"	v	class:Transformation_MultipleTransformations_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'TEST'$/;"	v	class:Transformation_OptionIgnoreCase_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'a b  c d e f ghhh h oha'$/;"	v	class:Transformation_ConditionalInsertRWEllipsis_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'a some more text'$/;"	v	class:Transformation_ConditionalInsertionSimple_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'a some'$/;"	v	class:Transformation_CIBothDefinedPositive_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'a, nice,   building'$/;"	v	class:Transformation_OptionReplaceGlobalMatchInReplace_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'a, nice, building'$/;"	v	class:Transformation_OptionReplaceGlobal_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'aa'$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'aa'$/;"	v	class:Transformation_ConditionalWithEscapedDelimiter
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'ab'$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter1
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'b some'$/;"	v	class:Transformation_CIBothDefinedNegative_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'dead parrot'$/;"	v	class:Transformation_BackreferenceTwice_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'foo boo aoo'$/;"	v	class:Transformation_Backreference_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'hallo foo boy'$/;"	v	class:Transformation_SimpleCase_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'hallo foo'$/;"	v	class:Transformation_SimpleCaseTransformInFrontDefVal_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'hallo foo'$/;"	v	class:Transformation_SimpleCaseTransformInFront_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'hallo' + ESC + '$a\\n' + \\$/;"	v	class:Transformation_ConditionalInConditional_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:Transformation_CleverTransformLongUpper_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:Transformation_CleverTransformUpercaseChar_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'hallo'$/;"	v	class:Transformation_SimpleCaseNoTransform_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'hi' + JF + BS$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'sometext' + JF + 'overwrite'$/;"	v	class:Transformation_InsideTabOvertype_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'sometext' + JF$/;"	v	class:Transformation_InsideTabLeaveAtDefault_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'test, hallo'$/;"	v	class:Transformation_CINewlines_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'test, hallo'$/;"	v	class:Transformation_CITabstop_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + 'test, halul'$/;"	v	class:Transformation_CIEscapedParensinReplace_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + BS + 'hallo'$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + BS + JF + 'hi'$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test' + EX + BS$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValue_ECR
keys	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    keys = 'test\\ntest\\ntest' + ESC + 'V2k' + EX + 'test' + EX$/;"	v	class:Transformation_OptionMultiline_ECR
keys	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = 'abc test' + EX$/;"	v	class:AddFunc_Opt
keys	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = 'abc test' + EX$/;"	v	class:AddFunc_Simple
keys	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = 'testme' + EX + 'hi1' + JF + 'hi2' + JF + 'hi3' + JF + 'hi4'$/;"	v	class:TestLangmapWithUtf8_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = 'testme' + EX + 'hi1' + JF + 'hi2' + JF + 'hi3' + JF + 'hi4'$/;"	v	class:TestNonEmptyLangmap_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = 'testme' + EX + 'hi;' + JF + 'hi2' + \\$/;"	v	class:TestNonEmptyLangmapWithSemi_ExpectCorrectResult
keys	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = ($/;"	v	class:VerifyVimDict2
keys	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = ($/;"	v	class:VerifyVimDict3
keys	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = ('blumba' + EX + ESC +$/;"	v	class:AddNewSnippetSource
keys	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = ('test=(type(UltiSnips#SnippetsInCurrentScope()) . len(UltiSnips#SnippetsInCurrentSc/;"	v	class:VerifyVimDict1
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = '    hello\\n    nice\\n\\tworld' + ESC + 'Vkk' + EX + 'test' + EX$/;"	v	class:Visual_LineSelect_CheckIndentTwice
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = '\\tblablub' + ESC + '5hv3l' + EX + 'test' + EX$/;"	v	class:Visual_SelectOneWord_ProblemAfterTab
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'bla blub\\n  helloi' + ESC + '0k4lvjll' + EX + 'test' + EX$/;"	v	class:Visual_CrossOneLine
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'blablub' + ESC + '0lv4l' + EX + 'test' + EX$/;"	v	class:Visual_SelectOneWord_Inword
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'blablub' + ESC + '0v$' + EX + 'test' + EX + ESC + 'o'$/;"	v	class:Visual_SelectOneWord_TillEndOfLine
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'blablub' + ESC + '0v$' + EX + 'test' + \\$/;"	v	class:Visual_SelectOneWordWithTabstop_TillEndOfLine
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX + '\\ntest' + EX$/;"	v	class:Visual_ExpandTwice
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX + 'hello'$/;"	v	class:Visual_InDefaultText_SelectOneWord
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX + JF + 'hello'$/;"	v	class:Visual_InDefaultText_SelectOneWord_NoOverwrite
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX$/;"	v	class:VisualTransformationWithDefault_ExpandWithVisual
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX$/;"	v	class:VisualTransformation_SelectOneWord
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX$/;"	v	class:VisualWithDefault_ExpandWithVisual
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX$/;"	v	class:Visual_SelectOneWord
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'blablub' + ESC + '0v6l' + EX + 'test' + EX$/;"	v	class:Visual_SelectOneWord_TwiceVisual
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX + JF + 'hi'$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_NoOverwrite
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX + JF + 'hi'$/;"	v	class:Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX + JF + 'hi'$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX + JF + 'hi'$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX + JF + 'hi'$/;"	v	class:Visual_InDefaultText_LineSelect_NoOverwrite
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX$/;"	v	class:VisualTransformation_LineSelect_Simple
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX$/;"	v	class:Visual_LineSelect_CheckIndentSimple
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX$/;"	v	class:Visual_LineSelect_CheckIndentWithTS_NoOverwrite
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + EX + 'test' + EX$/;"	v	class:Visual_LineSelect_Simple
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + \\$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_Overwrite
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + \\$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_Overwrite
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + \\$/;"	v	class:Visual_InDefaultText_LineSelect_Overwrite
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'hello\\nnice\\nworld' + ESC + 'Vkk' + \\$/;"	v	class:Visual_LineSelect_WithTabStop
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'if' + EX + 'one\\n\\ttwo\\n\\tthree' + ESC + \\$/;"	v	class:Visual_LineSelect_DedentLine
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'test' + EX + 'abc'$/;"	v	class:Visual_NoVisualSelection_Ignore
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'test' + EX + 'hi'$/;"	v	class:VisualTransformationWithDefault_ExpandWithoutVisual
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'test' + EX + 'hi'$/;"	v	class:VisualWithDefaultWithSlashes_ExpandWithoutVisual
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'test' + EX + 'hi'$/;"	v	class:VisualWithDefault_ExpandWithoutVisual
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'xxxyyyyxxx' + ESC + '4|vlll' + EX + 'test' + EX$/;"	v	class:Visual_SelectOneWordExclusive
keys	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    keys = 'xxxyyyyxxx' + ESC + '4|vlll' + EX + 'test' + EX$/;"	v	class:Visual_SelectOneWordInclusive
keys	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    keys = ''$/;"	v	class:VimTestCase
keys	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let keys = ['i', 'I', 'o', 'O', 'a', 'A']$/;"	v
keys	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let keys = Object.keys(config)$/;"	v
keys	.vim/plugged/coc.nvim/src/extensions.ts	/^    let keys = Object.keys(data.extension || {})$/;"	v
keyword	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "keyword": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
keyword	.vim/plugged/coc.nvim/data/schema.json	/^        "keyword": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
keyword_spacing	.config/nvim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^def keyword_spacing(snip):$/;"	f
keyword_spacing	.vim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^def keyword_spacing(snip):$/;"	f
keywords	.config/nvim/plugged/coc.nvim/package.json	/^  "keywords": [$/;"	a
keywords	.vim/plugged/coc.nvim/package.json	/^  "keywords": [$/;"	a
kill	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/process.py	/^    def kill(self):$/;"	m	class:Process
kill	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def kill(self):$/;"	m	class:Socket
kill	.vim/plugged/denite.nvim/rplugin/python3/denite/process.py	/^    def kill(self):$/;"	m	class:Process
kill	.vim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def kill(self):$/;"	m	class:Socket
kill	.vim/plugged/fzf/test/test_go.rb	/^  def kill$/;"	f
killChan	.vim/plugged/fzf/src/terminal.go	/^	killChan   chan int$/;"	m	struct:fzf.Terminal	typeref:typename:chan int
killPreview	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) killPreview(code int) {$/;"	f	struct:fzf.Terminal
kind	.vim/plugged/coc.nvim/src/handler/index.ts	/^          kind: getSymbolKind(kind),$/;"	v
kind	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let kind = sym.kind.toLowerCase()$/;"	v
kind	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let { name, kind, location, containerName } = sym as SymbolInformation$/;"	v
kind	.vim/plugged/coc.nvim/src/handler/index.ts	/^  kind: string$/;"	p	interface:SymbolInfo
kind	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  kind: TransportKind.socket$/;"	p	interface:SocketTransport
kind	.vim/plugged/coc.nvim/src/types.ts	/^  kind?: string$/;"	p	interface:VimCompleteItem
kj	.config/nvim/configs/keymap.vim	/^inoremap kj <esc>$/;"	m
kj	.config/nvim/configs/plugins.vim	/^	inoremap <silent><buffer>       kj     <Esc><C-w>p$/;"	m
kj	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer>       kj     <Esc><C-w>p$/;"	m
kj	.vim/.vimrc	/^inoremap kj <esc>$/;"	m
kj	.vim/.vimrc	/^vnoremap kj <esc>$/;"	m
kj	.vim/sessions/foo.vim	/^inoremap kj $/;"	m
kj	.vim/sessions/foo.vim	/^vnoremap kj $/;"	m
l	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> l$/;"	m
l	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let l = line('.')$/;"	v
l	.config/nvim/plugged/vim-easymotion/t/operator_pending_spec.vim	/^        let l = line('.')$/;"	v
l	.config/nvim/plugged/vim-easymotion/t/smartsign_spec.vim	/^        let l = line('.')$/;"	v
l	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let l = items.length$/;"	v
l	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^          let l = byteLength(line)$/;"	v
l	.vim/plugged/coc.nvim/src/model/document.ts	/^    for (let i = 0, l = content.length; i < l; i++) {$/;"	v
l	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let l = 0$/;"	v
l	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  l = 108,$/;"	e	enum:CharCode
label	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^          label: 'foo',$/;"	v
label	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let { textEdit, additionalTextEdits, label } = presentation$/;"	v
label	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let label = this.labels[sym.kind.toLowerCase()]$/;"	v
label	.vim/plugged/coc.nvim/src/languages.ts	/^    let label = item.label.trim()$/;"	v
label	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { label } = item$/;"	v
label	.vim/plugged/coc.nvim/src/types.ts	/^  label: string$/;"	p	interface:ListItem
label	.vim/plugged/fzf/src/terminal.go	/^	label    string$/;"	m	struct:fzf.itemLine	typeref:typename:string
labelMaxLength	.vim/plugged/coc.nvim/src/types.ts	/^  labelMaxLength: number$/;"	p	interface:CompleteConfig
labels	.vim/plugged/coc.nvim/src/languages.ts	/^    let labels = suggest.get<{ [key: string]: string }>('completionItemKindLabels', {})$/;"	v
lambda params	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "lambda params" do$/;"	d
lambdas in structs	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "lambdas in structs" do$/;"	d
landmark_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let landmark_role = [$/;"	v
landmark_role	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let landmark_role = ['application', 'banner', 'complementary', 'contentinfo', 'form', 'main'/;"	v
lang_tag	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let lang_tag = [$/;"	v
language	.vim/plugged/coc.nvim/src/util/match.ts	/^    const { language, pattern, scheme } = selector$/;"	C	function:score
language	.vim/plugged/coc.nvim/src/util/platform.ts	/^  language: string$/;"	p	interface:INavigator
language	.vim/plugged/coc.nvim/src/util/platform.ts	/^export const language = 'en'$/;"	C
languageId	.vim/plugged/coc.nvim/src/languages.ts	/^      let { languageId } = event.document$/;"	v
languageIds	.vim/plugged/coc.nvim/src/languages.ts	/^  languageIds: string[]$/;"	p	interface:CompletionSource
languageIds	.vim/plugged/coc.nvim/src/services.ts	/^  languageIds: string[]$/;"	p	interface:ServiceInfo
languageServerBase	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "languageServerBase": {$/;"	o	object:definitions
languageServerBase	.vim/plugged/coc.nvim/data/schema.json	/^    "languageServerBase": {$/;"	o	object:definitions
languageServerCommand	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "languageServerCommand": {$/;"	o	object:definitions
languageServerCommand	.vim/plugged/coc.nvim/data/schema.json	/^    "languageServerCommand": {$/;"	o	object:definitions
languageServerModule	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "languageServerModule": {$/;"	o	object:definitions
languageServerModule	.vim/plugged/coc.nvim/data/schema.json	/^    "languageServerModule": {$/;"	o	object:definitions
languageServerSocket	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "languageServerSocket": {$/;"	o	object:definitions
languageServerSocket	.vim/plugged/coc.nvim/data/schema.json	/^    "languageServerSocket": {$/;"	o	object:definitions
languageserver	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "languageserver": {$/;"	o	object:properties
languageserver	.vim/plugged/coc.nvim/data/schema.json	/^    "languageserver": {$/;"	o	object:properties
languageserver	.vim/plugged/coc.nvim/src/__tests__/client/server/testFileWatcher.js	/^const languageserver = require('vscode-languageserver')$/;"	C
last	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let last = pre.slice(-1)$/;"	v
last	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let last = search == null ? '' : search.slice(-1)$/;"	v
last	.vim/plugged/coc.nvim/src/configuration/util.ts	/^  const last = segments.pop()$/;"	C	function:addToValueTree
last	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^        let last = await this.nvim.call('getbufline', [buffer.id, '$'])$/;"	v
last	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      let last: Placeholder | undefined$/;"	v
last	.vim/plugged/coc.nvim/src/sources.ts	/^    let last = pre.length ? pre[pre.length - 1] : ''$/;"	v
last	.vim/plugged/coc.nvim/src/util/throttle.ts	/^  let last = 0$/;"	v
last	.vim/plugged/coc.nvim/src/workspace.ts	/^      let last = lines[lines.length - 1]$/;"	v
lastChunk	.vim/plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) lastChunk() *Chunk {$/;"	f	struct:fzf.ChunkList	typeref:typename:*Chunk
lastInsert	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { lastInsert } = this$/;"	v
lastInsert	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let lastInsert: number$/;"	v
lastLine	.vim/plugged/coc.nvim/src/util/position.ts	/^  let lastLine = newLines[newLines.length - 1]$/;"	v
lastOption	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        lastOption = opt$/;"	v
lastOption	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let lastOption: CompleteOption$/;"	v
lastTs	.vim/plugged/coc.nvim/src/list/worker.ts	/^        lastTs = Date.now()$/;"	v
lastTs	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let lastTs: number$/;"	v
lastX	.vim/plugged/fzf/src/tui/tcell.go	/^	lastX       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
lastY	.vim/plugged/fzf/src/tui/tcell.go	/^	lastY       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
latestInsert	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { latestInsert } = this$/;"	v
latestInsertChar	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let { latestInsertChar } = this$/;"	v
latestInsertChar	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { nvim, latestInsertChar } = this$/;"	v
launch	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def launch(self, text_before, visual_content, parent, start, end):$/;"	m	class:SnippetDefinition
launch	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def launch(self, config=[]):$/;"	m	class:VimInterface
launch	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def launch(self, config=[]):$/;"	m	class:VimInterfaceTmuxNeovim
layout	.vim/plugged/fzf/src/terminal.go	/^	layout     layoutType$/;"	m	struct:fzf.Terminal	typeref:typename:layoutType
layoutDefault	.vim/plugged/fzf/src/options.go	/^	layoutDefault layoutType = iota$/;"	c	package:fzf	typeref:type:layoutType
layoutReverse	.vim/plugged/fzf/src/options.go	/^	layoutReverse$/;"	c	package:fzf
layoutReverseList	.vim/plugged/fzf/src/options.go	/^	layoutReverseList$/;"	c	package:fzf
layoutType	.vim/plugged/fzf/src/options.go	/^type layoutType int$/;"	t	package:fzf	typeref:typename:int
leave_with_wait	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def leave_with_wait(self):$/;"	m	class:VimInterface
leetcode#CheckSignIn	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#CheckSignIn()$/;"	f
leetcode#CheckTask	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#CheckTask(timer)$/;"	f
leetcode#CloseAnyPreview	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#CloseAnyPreview()$/;"	f
leetcode#CommentEnd	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#CommentEnd(ft)$/;"	f
leetcode#CommentLine	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#CommentLine(ft, line)$/;"	f
leetcode#CommentStart	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#CommentStart(ft, title)$/;"	f
leetcode#FormatResult	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#FormatResult(result_)$/;"	f
leetcode#GoToProblem	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#GoToProblem()$/;"	f
leetcode#GoToSubmissions	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#GoToSubmissions()$/;"	f
leetcode#GuessFileType	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#GuessFileType()$/;"	f
leetcode#ListProblems	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#ListProblems()$/;"	f
leetcode#MultiLineIfExists	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#MultiLineIfExists(title, block, level)$/;"	f
leetcode#ResetSolution	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#ResetSolution(latest_submission)$/;"	f
leetcode#ShowResult	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#ShowResult(result_)$/;"	f
leetcode#ShowSubmissions	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#ShowSubmissions(slug)$/;"	f
leetcode#SignIn	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#SignIn(ask)$/;"	f
leetcode#SolutionFileExt	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#SolutionFileExt(ft_)$/;"	f
leetcode#SubmitSolution	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#SubmitSolution()$/;"	f
leetcode#TestCasePassText	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#TestCasePassText(pass_all)$/;"	f
leetcode#TestSolution	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#TestSolution()$/;"	f
leetcode#ViewSubmission	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#ViewSubmission()$/;"	f
leetcode#ViewSubmissions	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^function! leetcode#ViewSubmissions()$/;"	f
leetcode.vim	.vim/plugged/leetcode.vim/README.md	/^# leetcode.vim$/;"	c
left	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		results = { top: top, left: left };$/;"	p	class:results
left	.config/nvim/plugged/sideways.vim/spec/spec_helper.rb	/^    def vim.left$/;"	S
left	.vim/plugged/fzf/src/tui/light.go	/^	left     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
left	.vim/plugged/fzf/src/tui/tcell.go	/^	left        int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
len	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let len = manager.ui.length$/;"	v
len	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^    let len = manager.ui.length$/;"	v
len	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let len = locations.length$/;"	v
len	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let len = '.settings'.length$/;"	v
len	.vim/plugged/coc.nvim/src/model/document.ts	/^    let len = content.length$/;"	v
len	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let len = 0$/;"	v
len	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  len: number$/;"	p	interface:Token
len	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public len(): number {$/;"	m	class:Text
len	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    const len = end.character - start.character$/;"	C
len	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let len = textDocument.offsetAt(end) - textDocument.offsetAt(start)$/;"	v
len1	.vim/plugged/coc.nvim/src/util/string.ts	/^  const len1 = a ? a.length : 0$/;"	C	function:equalsIgnoreCase
len2	.vim/plugged/coc.nvim/src/util/string.ts	/^  const len2 = b ? b.length : 0$/;"	C	function:equalsIgnoreCase
length	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/column.py	/^    def length(self, context: Context) -> int:$/;"	m	class:Base
length	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/filename.py	/^    def length(self, context: Context) -> int:$/;"	m	class:Column
length	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/icon.py	/^    def length(self, context: Context) -> int:$/;"	m	class:Column
length	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/indent.py	/^    def length(self, context: Context) -> int:$/;"	m	class:Column
length	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/mark.py	/^    def length(self, context: Context) -> int:$/;"	m	class:Column
length	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/size.py	/^    def length(self, context: Context) -> int:$/;"	m	class:Column
length	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/time.py	/^    def length(self, context: Context) -> int:$/;"	m	class:Column
length	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/type.py	/^    def length(self, context: Context) -> int:$/;"	m	class:Column
length	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	var target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, options;$/;"	v
length	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { length } = this$/;"	v
length	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { nvim, signOffset, bufnr, length } = this$/;"	v
length	.vim/plugged/coc.nvim/src/types.ts	/^  length: number \/\/ or 0$/;"	p	interface:PopupProps
let	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^        let result: CompleteResult = {$/;"	v
let	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^        let result: CompleteResult = {$/;"	v
let	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^      let mode = manager.prompt.mode$/;"	v
let	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let lines = []$/;"	C
let	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^  let doc = await helper.createDocument()$/;"	C
let	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let s = sources.getSource(source)$/;"	v
let	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        let [, id, name] = ms$/;"	v
let	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let buffer = nvim.createBuffer(bufnr)$/;"	v
let	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let content = await this.nvim.call('execute', [`sign place buffer=${bufnr}`])$/;"	v
let	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let ids = []$/;"	v
let	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let item = getLocationListItem(diagnostic.source, bufnr, diagnostic)$/;"	v
let	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let lines: string[] = content.split('\\n')$/;"	v
let	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let items = collection.get(document.uri)$/;"	v
let	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let items = collection.get(uri)$/;"	v
let	.vim/plugged/coc.nvim/src/extensions.ts	/^          let u = URI.parse(doc.uri)$/;"	v
let	.vim/plugged/coc.nvim/src/extensions.ts	/^          let val = properties[key].default$/;"	v
let	.vim/plugged/coc.nvim/src/extensions.ts	/^        let check = () => {$/;"	v
let	.vim/plugged/coc.nvim/src/extensions.ts	/^        let context: ExtensionContext = {$/;"	v
let	.vim/plugged/coc.nvim/src/extensions.ts	/^      let ev = parts[0]$/;"	v
let	.vim/plugged/coc.nvim/src/extensions.ts	/^      let parts = eventName.split(':')$/;"	v
let	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^      let hlGroup = hl.kind == DocumentHighlightKind.Text$/;"	v
let	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^        let r = res[idx]$/;"	v
let	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^      let hex = toHexString(color)$/;"	v
let	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^      let idx = res.findIndex(o => {$/;"	v
let	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^      let { color, range } = info$/;"	v
let	.vim/plugged/coc.nvim/src/handler/index.ts	/^            let content = item.value.trim()$/;"	v
let	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let content = contents.value.trim()$/;"	v
let	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let actions = codeActionsMap.get(clientId)$/;"	v
let	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let arr = await this.nvim.call('getcurpos') as number[]$/;"	v
let	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let { contents } = hover$/;"	v
let	.vim/plugged/coc.nvim/src/language-client/client.ts	/^            let { textDocument } = workspace.getDocument(event.textDocument.uri)$/;"	v
let	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      let watchCreate: boolean = true,$/;"	v
let	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^        let { workspaceFolders } = workspace$/;"	v
let	.vim/plugged/coc.nvim/src/languages.ts	/^              let isText = \/^[\\w-\\s.,\\t]+$\/.test(detail)$/;"	v
let	.vim/plugged/coc.nvim/src/languages.ts	/^          let options = await workspace.getFormatOptions(event.document.uri)$/;"	v
let	.vim/plugged/coc.nvim/src/languages.ts	/^          let textEdits = await this.provideDocumentFormattingEdits(event.document, options)$/;"	v
let	.vim/plugged/coc.nvim/src/languages.ts	/^        let isTrigger = triggerCharacters && triggerCharacters.indexOf(triggerCharacter) != -1$/;"	v
let	.vim/plugged/coc.nvim/src/languages.ts	/^        let { triggerCharacter, bufnr } = opt$/;"	v
let	.vim/plugged/coc.nvim/src/languages.ts	/^      let detail = item.detail.replace(\/\\n\\s*\/g, ' ')$/;"	v
let	.vim/plugged/coc.nvim/src/list/configuration.ts	/^    let find = validKeys.find(s => s.toLowerCase() == key.toLowerCase())$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^      let msg = e instanceof Error ? e.message : e.toString()$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^      let resolved = await list.resolveItem( item )$/;"	v
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let action = currList.actions.find( o => o.name == name )$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let autoPreview = false$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let choices: string[] = []$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let idx = names.indexOf( defaultAction )$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let input = ''$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let items = await this.ui.getItems()$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let list = this.listMap.get( name )$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let n = await nvim.call( 'confirm', ['Choose action:', choices.join( '\\n' )] ) as number$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let name: string$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let names: string[] = actions.map( o => o.name )$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let numberSelect = false$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let options: string[] = []$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let res = this.parseArgs( args )$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let shortcuts: Set<string> = new Set()$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { actions, defaultAction } = currList$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { currList } = this$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { list, options, listArgs } = res$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { matcher, interactive } = this.listOptions$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { name, ui, currList, nvim } = this$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { nvim } = this$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { nvim, currList } = this$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { nvim, ui, savedHeight } = this$/;"	C
let	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { ui } = this$/;"	C
let	.vim/plugged/coc.nvim/src/list/prompt.ts	/^        let post = input.slice(cusorIndex + 1)$/;"	v
let	.vim/plugged/coc.nvim/src/list/prompt.ts	/^        let pre = input.slice(0, cusorIndex)$/;"	v
let	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^      let actions = codeActionsMap.get(clientId)$/;"	v
let	.vim/plugged/coc.nvim/src/list/worker.ts	/^            let res = this.filterItems(remain)$/;"	v
let	.vim/plugged/coc.nvim/src/list/worker.ts	/^            let res = this.filterItems(totalItems)$/;"	v
let	.vim/plugged/coc.nvim/src/list/worker.ts	/^        let hlGroup = ''$/;"	v
let	.vim/plugged/coc.nvim/src/list/worker.ts	/^        let inputChanged = this.input != currInput$/;"	v
let	.vim/plugged/coc.nvim/src/list/worker.ts	/^        let res = this.filterItems(items)$/;"	v
let	.vim/plugged/coc.nvim/src/list/worker.ts	/^        let span: [number, number] = [byteLength(old), byteLength(newLabel)]$/;"	v
let	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let curr = start$/;"	v
let	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let next = matches.shift()$/;"	v
let	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let old = newLabel$/;"	v
let	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let res = this.filterItems(totalItems)$/;"	v
let	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let start = matches.shift()$/;"	v
let	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let { foreground, background } = item$/;"	v
let	.vim/plugged/coc.nvim/src/model/document.ts	/^        let line = this.getline(start.line)$/;"	v
let	.vim/plugged/coc.nvim/src/model/document.ts	/^        let { start, end } = range$/;"	v
let	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^          let after = line[characterIndex(line, highlight.colEnd) - 1]$/;"	v
let	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^          let before = line[characterIndex(line, highlight.colStart)]$/;"	v
let	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^          let line = lines[highlight.line]$/;"	v
let	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^        let valid = await floatBuffer.valid$/;"	v
let	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^        let win = this.window = nvim.createWindow(this.popup.id)$/;"	v
let	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      let buf = await this.nvim.createNewBuffer(false, true)$/;"	v
let	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      let buffer = this.nvim.createBuffer(this.popup.bufferId)$/;"	v
let	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      let valid = await this.activated()$/;"	v
let	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^      let loaded = await nvim.call('bufloaded', buffer.id)$/;"	v
let	.vim/plugged/coc.nvim/src/model/status.ts	/^    let d = new Date()$/;"	C
let	.vim/plugged/coc.nvim/src/model/status.ts	/^    let idx = Math.floor(d.getMilliseconds() \/ 100)$/;"	C
let	.vim/plugged/coc.nvim/src/model/status.ts	/^    let item: StatusBarItem = {$/;"	C
let	.vim/plugged/coc.nvim/src/model/status.ts	/^    let text = ''$/;"	C
let	.vim/plugged/coc.nvim/src/model/status.ts	/^    let text = this.getText()$/;"	C
let	.vim/plugged/coc.nvim/src/model/status.ts	/^    let uid = uuidv1()$/;"	C
let	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^      let { nvim, workspace } = this$/;"	v
let	.vim/plugged/coc.nvim/src/provider/manager.ts	/^          let idx = res.findIndex(l => l.uri == uri && l.range.start.line == range.start.line)$/;"	v
let	.vim/plugged/coc.nvim/src/provider/manager.ts	/^          let { uri, range } = d$/;"	v
let	.vim/plugged/coc.nvim/src/provider/manager.ts	/^        let idx = res.findIndex(l => l.uri == uri && l.range.start.line == range.start.line)$/;"	v
let	.vim/plugged/coc.nvim/src/provider/manager.ts	/^        let { uri, range } = def$/;"	v
let	.vim/plugged/coc.nvim/src/services.ts	/^        let disposable = client.start()$/;"	v
let	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      let value: string$/;"	C
let	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^    let text$/;"	C
let	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^  let matchingControl = null$/;"	C
let	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^  let matchingData = null$/;"	C
let	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^  let matchingText = ''$/;"	C
let	.vim/plugged/coc.nvim/src/util/complete.ts	/^  let part = byteSlice(line, 0, colnr - 1)$/;"	C
let	.vim/plugged/coc.nvim/src/util/complete.ts	/^  let { line, linenr, colnr } = opt$/;"	C
let	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                let [, line, col, cells] = def$/;"	C	function:getHiglights
let	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                let colStart = 0$/;"	C	function:getHiglights
let	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                let id = item[0]$/;"	C	function:getHiglights
let	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                let { hi_name } = item[item.length - 1][0]$/;"	C	function:getHiglights
let	.vim/plugged/coc.nvim/src/util/highlight.ts	/^            let [name, ...list] = arr$/;"	C	function:getHiglights
let	.vim/plugged/coc.nvim/src/workspace.ts	/^        let channel = this.outputChannels.get(uri.path.slice(1))$/;"	v
let	.vim/plugged/coc.nvim/src/workspace.ts	/^        let documentEdit = documentEdits.find(o => o.textDocument.uri == textDocument.uri && o.t/;"	v
let	.vim/plugged/coc.nvim/src/workspace.ts	/^        let { edits, textDocument } = change as TextDocumentEdit$/;"	v
let	.vim/plugged/coc.nvim/src/workspace.ts	/^      let config: LanguageServerConfig = lspConfig[key]$/;"	v
let	.vim/plugged/coc.nvim/src/workspace.ts	/^      let doc = this.getDocument(bufnr)$/;"	C
let	.vim/plugged/coc.nvim/src/workspace.ts	/^      let document = this.getDocument(bufnr)$/;"	v
let	.vim/plugged/coc.nvim/src/workspace.ts	/^      let { filetypes, rootPatterns } = config$/;"	v
level	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let level = severity ? severityLevel(severity) : 0$/;"	v
level	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let { level } = this.config$/;"	v
level	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  level: number$/;"	p	interface:DiagnosticConfig
level	.vim/plugged/coc.nvim/src/handler/index.ts	/^          level,$/;"	v
level	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let level = 0$/;"	v
level	.vim/plugged/coc.nvim/src/handler/index.ts	/^  level?: number$/;"	p	interface:SymbolInfo
level	.vim/plugged/coc.nvim/src/types.ts	/^  level: number$/;"	p	interface:DiagnosticItem
level	.vim/plugged/coc.nvim/src/util/logger.ts	/^const level = process.env.NVIM_COC_LOG_LEVEL || 'info'$/;"	C
level	.vim/plugged/coc.nvim/src/workspace.ts	/^    let level = MessageLevel.Error$/;"	v
level	.vim/plugged/coc.nvim/src/workspace.ts	/^    let level = config.get<string>('messageLevel', 'more')$/;"	v
li	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.selectors-4:current(p, li, dt, dd),$/;"	s
li a	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^li a, h3 a {$/;"	s
li a:active	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^li a:hover, li a:active, h3 a:hover, li a:active {$/;"	s
li a:hover	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^li a:hover, li a:active, h3 a:hover, li a:active {$/;"	s
lib	.vim/plugged/coc.nvim/tsconfig.json	/^    "lib": ["es2017", "es2018"],$/;"	a	object:compilerOptions
libuv	.vim/plugged/omnisharp-vim/README.md	/^##### libuv$/;"	T
license	.config/nvim/plugged/coc.nvim/package.json	/^  "license": "MIT",$/;"	s
license	.config/nvim/plugged/emmet-vim/docs/index.html	/^			<article id="license">$/;"	I
license	.config/nvim/plugged/gruvbox/package.json	/^  "license": "MIT",$/;"	s
license	.vim/plugged/coc.nvim/package.json	/^  "license": "MIT",$/;"	s
lifetimes in a function declaration	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "lifetimes in a function declaration" do$/;"	d
limitLines	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let limitLines = config.get<number>('limitLines', 1000)$/;"	v
limitLines	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let limitLines = this.config.get<number>('limitLines', 1000)$/;"	v
line	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^line,$/;"	s
line	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let line = await helper.getCmdline()$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let line = await nvim.call('line', '.')$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let line = await nvim.getLine()$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let line = await nvim.line$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let line = await helper.getCmdline()$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let line = await nvim.call('line', '.')$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let line = await nvim.eval('line(".")')$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let line = await nvim.line$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^      let line = await nvim.line$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/modules/colors.test.ts	/^    let line = await nvim.getLine()$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let line = await nvim.line$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let line = lines.find(s => s.indexOf('CocError') != -1)$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let line = await helper.getCmdline()$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let line = doc.getline(0, false)$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let line = doc.getline(1, true)$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/modules/plugin.test.ts	/^    let line = await nvim.line$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let line = await nvim.getLine()$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let line = await nvim.line$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let line = await workspace.getLine(doc.uri, 0)$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let line = await workspace.getLine(uri, 0)$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let line = await workspace.readFile(doc.uri)$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let line = await nvim.getLine()$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let line = await nvim.line$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let line = await nvim.getLine()$/;"	v
line	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let line = await nvim.line$/;"	v
line	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let { colnr, line } = this.option$/;"	v
line	.vim/plugged/coc.nvim/src/completion/index.ts	/^        let { linenr, col, line, colnr } = this.option$/;"	v
line	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let line = doc.getline(cursor[0] - 1)$/;"	v
line	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let line = document.getline(lnum - 1)$/;"	v
line	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        let line = document.getline(i)$/;"	v
line	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let line = document.getline(i)$/;"	v
line	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let line = range.start.line$/;"	v
line	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let { line } = diagnostic.range.start$/;"	v
line	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^      let { line } = range.start$/;"	v
line	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let line = (await nvim.call('line', '.') as number) - 1$/;"	v
line	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^    let line = document.getline(position.line)$/;"	v
line	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let line = (await nvim.call('line', '.') as number) - 1$/;"	v
line	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let line = doc.getline(res.start.line)$/;"	v
line	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let [pos, line] = await nvim.eval('[coc#util#cursor(), getline(".")]') as [[number, number/;"	v
line	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let line = doc.getline(start.line + 1)$/;"	v
line	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let pos: Position = insertLeave ? { line: position.line + 1, character: 0 } : position$/;"	v
line	.vim/plugged/coc.nvim/src/languages.ts	/^        let line = opt.linenr - 1$/;"	v
line	.vim/plugged/coc.nvim/src/languages.ts	/^      let line = linenr - 1 + newLines.length - 1$/;"	v
line	.vim/plugged/coc.nvim/src/languages.ts	/^    let { line, bufnr, linenr } = option$/;"	v
line	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let line = await workspace.getLine(uri, r.start.line)$/;"	v
line	.vim/plugged/coc.nvim/src/list/basic.ts	/^      let character = location.text ? line.indexOf(location.text) : 0$/;"	v
line	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let line = await new Promise<string>(resolve => {$/;"	v
line	.vim/plugged/coc.nvim/src/model/document.ts	/^        let line = this.getline(start.line)$/;"	v
line	.vim/plugged/coc.nvim/src/model/document.ts	/^      let line = this.getline(start.line)$/;"	v
line	.vim/plugged/coc.nvim/src/model/document.ts	/^    let line = this.getline(lnum - 1)$/;"	v
line	.vim/plugged/coc.nvim/src/model/document.ts	/^    let line = this.getline(position.line)$/;"	v
line	.vim/plugged/coc.nvim/src/model/document.ts	/^    let line = this.getline(position.line, current)$/;"	v
line	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { lnum, line, changedtick } = change$/;"	v
line	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^          let line = lines[highlight.line]$/;"	v
line	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^      for (let line of lines) {$/;"	v
line	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    for (let line of fragment.lines) {$/;"	v
line	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let [mode, line, col] = await this.nvim.eval('[mode(),line("."),col(".")]') as [string, numb/;"	v
line	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let line = document.getline(start.line)$/;"	v
line	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let { line, character } = this.position$/;"	v
line	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^  line: number$/;"	p	interface:CocSnippetPlaceholder
line	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^    let line = document.getline(lnum - 1)$/;"	v
line	.vim/plugged/coc.nvim/src/types.ts	/^  line: string$/;"	p	interface:ChangeInfo
line	.vim/plugged/coc.nvim/src/types.ts	/^  line: string$/;"	p	interface:LocationWithLine
line	.vim/plugged/coc.nvim/src/types.ts	/^  line?: number | string$/;"	p	interface:PopupOptions
line	.vim/plugged/coc.nvim/src/types.ts	/^  line?: string$/;"	p	interface:VimCompleteItem
line	.vim/plugged/coc.nvim/src/types.ts	/^  readonly line: string$/;"	p	interface:CompleteOption
line	.vim/plugged/coc.nvim/src/util/complete.ts	/^    line: linenr - 1,$/;"	C
line	.vim/plugged/coc.nvim/src/util/complete.ts	/^  let { line, linenr, colnr } = opt$/;"	C
line	.vim/plugged/coc.nvim/src/util/highlight.ts	/^                let [, line, col, cells] = def$/;"	C	function:getHiglights
line	.vim/plugged/coc.nvim/src/util/highlight.ts	/^  line: number$/;"	p	interface:Highlight
line	.vim/plugged/coc.nvim/src/util/position.ts	/^  let line = pos.line - delta$/;"	v
line	.vim/plugged/coc.nvim/src/workspace.ts	/^      let pos = position ? [line + 1, col] : []$/;"	v
line	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [line, character] = await this.nvim.call('coc#util#cursor')$/;"	v
line	.vim/plugged/coc.nvim/src/workspace.ts	/^    let line = document.getline(start.line)$/;"	v
line	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { line, character } = position || { line: 0, character: 0 }$/;"	v
line	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { line, character } = range.start$/;"	v
line	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^    def line(self):$/;"	m	class:VimUtilCtx
lineCount	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let lineCount = Infinity$/;"	v
lineInRange	.vim/plugged/coc.nvim/src/util/position.ts	/^export function lineInRange(line: number, range: Range): boolean {$/;"	f
lineList	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^const lineList: IList = {$/;"	C
line_index	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text.py	/^    def line_index(self):$/;"	m	class:LineIterator
line_till_cursor	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^    def line_till_cursor(self):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
linearGradient	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^linearGradient,$/;"	s
linenr	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let { input, colnr, linenr } = this.option$/;"	v
linenr	.vim/plugged/coc.nvim/src/completion/index.ts	/^        let { linenr, col, line, colnr } = this.option$/;"	v
linenr	.vim/plugged/coc.nvim/src/languages.ts	/^    let { line, bufnr, linenr } = option$/;"	v
linenr	.vim/plugged/coc.nvim/src/types.ts	/^  readonly linenr: number$/;"	p	interface:CompleteOption
linenr	.vim/plugged/coc.nvim/src/util/complete.ts	/^  let { line, linenr, colnr } = opt$/;"	C
lines	.vim/plugged/coc.nvim/src/__tests__/completion/float.test.ts	/^    let lines = await buf.lines$/;"	v
lines	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let lines = []$/;"	C
lines	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let lines: string[] = content.split('\\n')$/;"	v
lines	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let lines = await buf.lines$/;"	v
lines	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let lines = [$/;"	v
lines	.vim/plugged/coc.nvim/src/__tests__/modules/floatBuffer.test.ts	/^    let lines = await buf.buffer.lines$/;"	v
lines	.vim/plugged/coc.nvim/src/__tests__/modules/outputChannel.test.ts	/^    let lines = await buf.getLines({ start: 0, end: -1, strictIndexing: false })$/;"	v
lines	.vim/plugged/coc.nvim/src/__tests__/modules/outputChannel.test.ts	/^    let lines = await buf.lines$/;"	v
lines	.vim/plugged/coc.nvim/src/__tests__/modules/terminal.test.ts	/^    let lines = await buf.lines$/;"	v
lines	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let lines = await buf.lines$/;"	v
lines	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let lines = await buf.lines$/;"	v
lines	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let lines = await buf.lines$/;"	v
lines	.vim/plugged/coc.nvim/src/commands.ts	/^        let lines = document.content.split('\\n')$/;"	v
lines	.vim/plugged/coc.nvim/src/commands.ts	/^        let lines = folders.map(folder => URI.parse(folder.uri).fsPath)$/;"	v
lines	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let lines: string[] = content.split('\\n')$/;"	v
lines	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let lines: Set<number> = new Set()$/;"	v
lines	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let lines: string[] = []$/;"	v
lines	.vim/plugged/coc.nvim/src/handler/index.ts	/^              lines.push(...item.split('\\n'))$/;"	v
lines	.vim/plugged/coc.nvim/src/handler/index.ts	/^        lines.push(...contents.split('\\n'))$/;"	v
lines	.vim/plugged/coc.nvim/src/handler/index.ts	/^        lines.push(...contents.value.split('\\n'))$/;"	v
lines	.vim/plugged/coc.nvim/src/handler/index.ts	/^      if (i > 0) lines.push('---')$/;"	v
lines	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let lines: string[] = []$/;"	v
lines	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let lines = await nvim.call('getbufline', [bufnr, 1, '$'])$/;"	v
lines	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let { bufname, filetype, sketch, lines, lnum } = options$/;"	v
lines	.vim/plugged/coc.nvim/src/list/manager.ts	/^      let lines = list.detail.split( '\\n' ).map( s => '  ' + s )$/;"	v
lines	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let lines = this.items.map(item => item.label)$/;"	v
lines	.vim/plugged/coc.nvim/src/model/document.ts	/^    let lines = this.lines.slice(0, firstline)$/;"	v
lines	.vim/plugged/coc.nvim/src/model/document.ts	/^    let lines = this.textDocument.getText().split(\/\\r?\\n\/)$/;"	v
lines	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { lines } = this$/;"	v
lines	.vim/plugged/coc.nvim/src/model/document.ts	/^  private lines: string[] = []$/;"	p	class:Document
lines	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^      let lines = doc.content.split(\/\\r?\\n\/)$/;"	v
lines	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let lines: string[] = []$/;"	v
lines	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let { buffer, lines, nvim, highlights } = this$/;"	v
lines	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^  private lines: string[] = []$/;"	p	class:FloatBuffer
lines	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let { columns, lines } = this$/;"	v
lines	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^      const lines = value.split('\\n')$/;"	C
lines	.vim/plugged/coc.nvim/src/types.ts	/^  lines: string[]$/;"	p	interface:Fragment
lines	.vim/plugged/coc.nvim/src/types.ts	/^  lines?: string[]$/;"	p	interface:PreiewOptions
lines	.vim/plugged/coc.nvim/src/types.ts	/^  readonly lines: number$/;"	p	interface:Env
lines	.vim/plugged/coc.nvim/src/workspace.ts	/^      let last = lines[lines.length - 1]$/;"	v
lines	.vim/plugged/coc.nvim/src/workspace.ts	/^    let lines = await doc.buffer.lines$/;"	v
lines	.vim/plugged/fzf/src/history.go	/^	lines    []string$/;"	m	struct:fzf.History	typeref:typename:[]string
lines	.vim/plugged/fzf/src/terminal.go	/^	lines   int$/;"	m	struct:fzf.previewer	typeref:typename:int
link	.config/nvim/plugged/html5.vim/Makefile	/^link: init-runtime$/;"	t
link	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let link = definition[0] as LocationLink$/;"	v
link	.vim/plugged/coc.nvim/src/handler/index.ts	/^        link = await languages.resolveDocumentLink(link)$/;"	v
link	.vim/plugged/coc.nvim/src/handler/index.ts	/^    for (let link of links) {$/;"	v
linkHintCharacters	vimium-options.json	/^  "linkHintCharacters": "sadfjklewcmpgh",$/;"	s
linkHintNumbers	vimium-options.json	/^  "linkHintNumbers": "0123456789",$/;"	s
link_file	.config/nvim/plugged/html5.vim/Makefile	/^link_file = \\$/;"	m
link_fzf_in_path	.vim/plugged/fzf/install	/^link_fzf_in_path() {$/;"	f
linkreltypes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['amphtml']$/;"	v
linkreltypes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['apple-touch-icon', 'apple-touch-icon-precomposed', 'apple-to/;"	v
linkreltypes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['canonical']$/;"	v
linkreltypes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['chrome-webstore-item']$/;"	v
linkreltypes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['hub']$/;"	v
linkreltypes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['import']$/;"	v
linkreltypes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['manifest']$/;"	v
linkreltypes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['pgpkey']$/;"	v
linkreltypes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['search']$/;"	v
linkreltypes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['sitemap']$/;"	v
linkreltypes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linkreltypes + ['webmention']$/;"	v
linkreltypes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linkreltypes = linktypes$/;"	v
links	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let links = await languages.getDocumentLinks(doc.textDocument)$/;"	v
links	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let links = await languages.getDocumentLinks(document)$/;"	v
linktypes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let linktypes = ['alternate', 'author', 'bookmark', 'dns-prefetch', 'external', 'help', 'icon', /;"	v
lint	.config/nvim/plugged/coc.nvim/package.json	/^    "lint": "tslint -c tslint.json -p .",$/;"	s	object:scripts
lint	.config/nvim/plugged/defx.nvim/Makefile	/^lint:$/;"	t
lint	.config/nvim/plugged/denite.nvim/Makefile	/^lint:$/;"	t
lint	.vim/plugged/coc.nvim/package.json	/^    "lint": "tslint -c tslint.json -p .",$/;"	s	object:scripts
lint	.vim/plugged/denite.nvim/Makefile	/^lint:$/;"	t
linterOptions	.vim/plugged/coc.nvim/tslint.json	/^  "linterOptions": {$/;"	o
list	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let list: IList = {$/;"	v
list	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let list = new TestList(nvim)$/;"	v
list	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^      let list = new OptionList(nvim)$/;"	v
list	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let list = manager.getDiagnosticList()$/;"	v
list	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let list = extensions.all$/;"	v
list	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let list: any[] = []$/;"	v
list	.vim/plugged/coc.nvim/src/extensions.ts	/^  private list: ExtensionItem[] = []$/;"	p	class:Extensions
list	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let list: Map<number, CodeLens[]> = new Map()$/;"	v
list	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let list = commandManager.commandList$/;"	v
list	.vim/plugged/coc.nvim/src/list/manager.ts	/^      list,$/;"	C
list	.vim/plugged/coc.nvim/src/list/manager.ts	/^    const list: Matcher[] = ['fuzzy', 'strict', 'regex']$/;"	C
list	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let list = this.listMap.get( name )$/;"	C
list	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { list } = this$/;"	v
list	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { list, options, listArgs } = res$/;"	C
list	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public get list(): IList {$/;"	C
list	.vim/plugged/coc.nvim/src/list/source/lists.ts	/^    for (let list of this.listMap.values()) {$/;"	v
list	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { context, list, listOptions } = this.manager$/;"	v
list.autoResize	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.autoResize": {$/;"	o	object:properties
list.autoResize	.vim/plugged/coc.nvim/data/schema.json	/^    "list.autoResize": {$/;"	o	object:properties
list.extendedSearchMode	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.extendedSearchMode": {$/;"	o	object:properties
list.extendedSearchMode	.vim/plugged/coc.nvim/data/schema.json	/^    "list.extendedSearchMode": {$/;"	o	object:properties
list.indicator	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.indicator": {$/;"	o	object:properties
list.indicator	.vim/plugged/coc.nvim/data/schema.json	/^    "list.indicator": {$/;"	o	object:properties
list.insertMappings	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.insertMappings": {$/;"	o	object:properties
list.insertMappings	.vim/plugged/coc.nvim/data/schema.json	/^    "list.insertMappings": {$/;"	o	object:properties
list.limitLines	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.limitLines": {$/;"	o	object:properties
list.limitLines	.vim/plugged/coc.nvim/data/schema.json	/^    "list.limitLines": {$/;"	o	object:properties
list.maxHeight	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.maxHeight": {$/;"	o	object:properties
list.maxHeight	.vim/plugged/coc.nvim/data/schema.json	/^    "list.maxHeight": {$/;"	o	object:properties
list.maxPreviewHeight	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.maxPreviewHeight": {$/;"	o	object:properties
list.maxPreviewHeight	.vim/plugged/coc.nvim/data/schema.json	/^    "list.maxPreviewHeight": {$/;"	o	object:properties
list.nextKeymap	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.nextKeymap": {$/;"	o	object:properties
list.nextKeymap	.vim/plugged/coc.nvim/data/schema.json	/^    "list.nextKeymap": {$/;"	o	object:properties
list.normalMappings	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.normalMappings": {$/;"	o	object:properties
list.normalMappings	.vim/plugged/coc.nvim/data/schema.json	/^    "list.normalMappings": {$/;"	o	object:properties
list.previewHighlightGroup	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.previewHighlightGroup": {$/;"	o	object:properties
list.previewHighlightGroup	.vim/plugged/coc.nvim/data/schema.json	/^    "list.previewHighlightGroup": {$/;"	o	object:properties
list.previewSplitRight	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.previewSplitRight": {$/;"	o	object:properties
list.previewSplitRight	.vim/plugged/coc.nvim/data/schema.json	/^    "list.previewSplitRight": {$/;"	o	object:properties
list.previousKeymap	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.previousKeymap": {$/;"	o	object:properties
list.previousKeymap	.vim/plugged/coc.nvim/data/schema.json	/^    "list.previousKeymap": {$/;"	o	object:properties
list.selectedSignText	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.selectedSignText": {$/;"	o	object:properties
list.selectedSignText	.vim/plugged/coc.nvim/data/schema.json	/^    "list.selectedSignText": {$/;"	o	object:properties
list.signOffset	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.signOffset": {$/;"	o	object:properties
list.signOffset	.vim/plugged/coc.nvim/data/schema.json	/^    "list.signOffset": {$/;"	o	object:properties
list.source.outline.ctagsFilestypes	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "list.source.outline.ctagsFilestypes": {$/;"	o	object:properties
list.source.outline.ctagsFilestypes	.vim/plugged/coc.nvim/data/schema.json	/^    "list.source.outline.ctagsFilestypes": {$/;"	o	object:properties
listArgs	.vim/plugged/coc.nvim/src/handler/index.ts	/^      listArgs.push('-quickfix')$/;"	v
listArgs	.vim/plugged/coc.nvim/src/handler/index.ts	/^      listArgs.push('-source')$/;"	v
listArgs	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let listArgs = ['--normal', '--number-select', 'actions', `-start`, start + '', `-end`, end /;"	v
listArgs	.vim/plugged/coc.nvim/src/list/manager.ts	/^        listArgs.push( arg )$/;"	C
listArgs	.vim/plugged/coc.nvim/src/list/manager.ts	/^      listArgs,$/;"	C
listArgs	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( !listArgs.length ) listArgs = config.get<string[]>( 'defaultArgs', [] )$/;"	C
listArgs	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let listArgs: string[] = []$/;"	C
listArgs	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { list, options, listArgs } = res$/;"	C
listArgs	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private listArgs: string[] = []$/;"	C
listArgs	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public parseArgs( args: string[] ): { list: IList, options: ListOptions, listOptions: string[]/;"	C
listItems	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^let listItems: ListItem[] = []$/;"	v
listMap	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private listMap: Map<string, IList> = new Map()$/;"	C
listOptions	.vim/plugged/coc.nvim/src/list/manager.ts	/^        listOptions.push( arg )$/;"	C
listOptions	.vim/plugged/coc.nvim/src/list/manager.ts	/^      listOptions,$/;"	C
listOptions	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( !listOptions.length && !listArgs.length ) listOptions = config.get<string[]>( 'defaultO/;"	C
listOptions	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let listOptions: string[] = []$/;"	C
listOptions	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public listOptions: ListOptions$/;"	C
listOptions	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public parseArgs( args: string[] ): { list: IList, options: ListOptions, listOptions: string[]/;"	C
listOptions	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let { listOptions } = manager$/;"	v
listOptions	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { context, list, listOptions } = this.manager$/;"	v
listOptions	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { listOptions, isActivated } = this.manager$/;"	v
listWindow	.vim/plugged/coc.nvim/src/types.ts	/^  listWindow: Window$/;"	p	interface:ListContext
list_snippets	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def list_snippets(self):$/;"	m	class:SnippetManager
listed	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    listed: bool = False$/;"	v	class:Context
listen	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  listen(): void$/;"	m	interface:IConnection
listener	.vim/plugged/coc.nvim/src/services.ts	/^      let listener = clientId => {$/;"	v
lists	.config/nvim/plugged/sideways.vim/spec/plugin/ruby_spec.rb	/^  describe "lists" do$/;"	d
lists	.vim/plugged/fzf/src/merger.go	/^	lists   [][]Result$/;"	m	struct:fzf.Merger	typeref:typename:[][]Result
lists within declarations	.config/nvim/plugged/sideways.vim/spec/plugin/css_declarations_spec.rb	/^  describe "lists within declarations" do$/;"	d
live_region_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let live_region_attributes = {$/;"	v
lnum	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  lnum: number$/;"	p	interface:CursorPosition
lnum	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let lnum = locations[1].lnum$/;"	v
lnum	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let [, lnum, col] = await nvim.call('getcurpos')$/;"	v
lnum	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let [, lnum, col] = await this.nvim.call('getcurpos')$/;"	v
lnum	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^          let lnum = o.range.start.line + 1$/;"	v
lnum	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let lnum = await this.nvim.call('line', ['.'])$/;"	v
lnum	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let lnum = await this.nvim.getVvar('lnum') as number$/;"	v
lnum	.vim/plugged/coc.nvim/src/handler/index.ts	/^  lnum: number$/;"	p	interface:SymbolInfo
lnum	.vim/plugged/coc.nvim/src/list/basic.ts	/^      let lnum = location.range.start.line + 1$/;"	v
lnum	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let lnum = range.start.line + 1$/;"	v
lnum	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let { bufname, filetype, sketch, lines, lnum } = options$/;"	v
lnum	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let lnum = cursor[0]$/;"	v
lnum	.vim/plugged/coc.nvim/src/list/ui.ts	/^  lnum: number$/;"	p	interface:MousePosition
lnum	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { lnum, line, changedtick } = change$/;"	v
lnum	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^    let lnum = await nvim.call('line', '.') as number$/;"	v
lnum	.vim/plugged/coc.nvim/src/types.ts	/^  lnum: number$/;"	p	interface:ChangeInfo
lnum	.vim/plugged/coc.nvim/src/types.ts	/^  lnum: number$/;"	p	interface:DiagnosticItem
lnum	.vim/plugged/coc.nvim/src/types.ts	/^  lnum: number$/;"	p	interface:LocationListItem
lnum	.vim/plugged/coc.nvim/src/types.ts	/^  lnum?: number$/;"	p	interface:PreiewOptions
lnum	.vim/plugged/coc.nvim/src/types.ts	/^  lnum?: number$/;"	p	interface:QuickfixItem
lnum	.vim/plugged/coc.nvim/src/workspace.ts	/^      lnum: line + 1,$/;"	v
load	.vim/plugged/coc.nvim/src/model/db.ts	/^  private async load(): Promise<any> {$/;"	m	class:DB
load	.vim/plugged/coc.nvim/src/model/mru.ts	/^  public async load(): Promise<string[]> {$/;"	m	class:Mru
loadCtagsSymbols	.vim/plugged/coc.nvim/src/list/source/outline.ts	/^  public async loadCtagsSymbols(document: Document): Promise<ListItem[]> {$/;"	m	class:Outline
loadDefaultConfigurations	.vim/plugged/coc.nvim/src/configuration/util.ts	/^export function loadDefaultConfigurations(): IConfigurationModel {$/;"	f
loadItems	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^  async loadItems(_context, _token): Promise<ListItem[]> {$/;"	C
loadItems	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^  public loadItems(_context: ListContext, token: CancellationToken): Promise<ListItem[]> {$/;"	m	class:TestList
loadItems	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^  public loadItems(_context: ListContext, _token: CancellationToken): Promise<ListItem[]> {$/;"	v
loadItems	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public loadItems(_context: ListContext, _token: CancellationToken): Promise<ListItem[]> {$/;"	m	class:ErrorList
loadItems	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public loadItems(_context: ListContext, _token: CancellationToken): Promise<ListTask> {$/;"	m	class:ErrorTaskList
loadItems	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public loadItems(_context: ListContext, token: CancellationToken): Promise<ListTask> {$/;"	m	class:TaskList
loadItems	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public loadItems(context: ListContext, _token: CancellationToken): Promise<ListItem[]> {$/;"	m	class:InteractiveList
loadItems	.vim/plugged/coc.nvim/src/list/source/commands.ts	/^  public async loadItems(_context: ListContext): Promise<ListItem[]> {$/;"	m	class:CommandsList
loadItems	.vim/plugged/coc.nvim/src/list/source/diagnostics.ts	/^  public async loadItems(context: ListContext): Promise<ListItem[]> {$/;"	m	class:DiagnosticsList
loadItems	.vim/plugged/coc.nvim/src/list/source/extensions.ts	/^  public async loadItems(_context: ListContext): Promise<ListItem[]> {$/;"	m	class:ExtensionList
loadItems	.vim/plugged/coc.nvim/src/list/source/folders.ts	/^  public async loadItems(_context: ListContext): Promise<ListItem[]> {$/;"	m	class:FoldList
loadItems	.vim/plugged/coc.nvim/src/list/source/links.ts	/^  public async loadItems(context: ListContext): Promise<ListItem[]> {$/;"	m	class:LinksList
loadItems	.vim/plugged/coc.nvim/src/list/source/location.ts	/^  public async loadItems(context: ListContext): Promise<ListItem[]> {$/;"	m	class:LocationList
loadItems	.vim/plugged/coc.nvim/src/list/source/outline.ts	/^  public async loadItems(context: ListContext): Promise<ListItem[]> {$/;"	m	class:Outline
loadItems	.vim/plugged/coc.nvim/src/list/source/output.ts	/^  public async loadItems(_context: ListContext): Promise<ListItem[]> {$/;"	m	class:OutputList
loadItems	.vim/plugged/coc.nvim/src/list/source/services.ts	/^  public async loadItems(_context: ListContext): Promise<ListItem[]> {$/;"	m	class:ServicesList
loadItems	.vim/plugged/coc.nvim/src/list/source/sources.ts	/^  public async loadItems(_context: ListContext): Promise<ListItem[]> {$/;"	m	class:SourcesList
loadItems	.vim/plugged/coc.nvim/src/list/source/symbols.ts	/^  public async loadItems(context: ListContext): Promise<ListItem[]> {$/;"	m	class:Symbols
loadItems	.vim/plugged/coc.nvim/src/types.ts	/^  loadItems(context: ListContext, token: CancellationToken): Promise<ListItem[] | ListTask | nul/;"	m	interface:IList
loadJson	.vim/plugged/coc.nvim/src/extensions.ts	/^function loadJson(file: string): any {$/;"	f
load_external_module	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def load_external_module(base, module):$/;"	f
load_external_module	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def load_external_module(base, module):$/;"	f
loaded	.vim/plugged/coc.nvim/src/list/history.ts	/^    let { loaded, db } = this$/;"	v
loaded	.vim/plugged/coc.nvim/src/list/history.ts	/^  private loaded: string[] = []$/;"	p	class:History
loaded	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^      let loaded = await nvim.call('bufloaded', buffer.id)$/;"	v
loc	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let loc = Location.create(uri, Range.create(p, p))$/;"	v
loc	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let loc = await this.convertLocation(item.location)$/;"	v
localBonus	.vim/plugged/coc.nvim/src/types.ts	/^  localBonus?: number$/;"	p	interface:VimCompleteItem
localStats	.vim/plugged/coc.nvim/src/extensions.ts	/^    let localStats = await this.localExtensionStats(globalStats)$/;"	v
localStats	.vim/plugged/coc.nvim/src/extensions.ts	/^    let localStats = await this.localExtensionStats(stats)$/;"	v
localityBonus	.vim/plugged/coc.nvim/src/types.ts	/^  localityBonus: boolean$/;"	p	interface:CompleteConfig
location	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def location(self):$/;"	m	class:SnippetDefinition
location	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let { name, kind, location, containerName } = sym as SymbolInformation$/;"	v
location	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let location = definition[0] as Location$/;"	v
location	.vim/plugged/coc.nvim/src/types.ts	/^  location: Location$/;"	p	interface:DiagnosticItem
location	.vim/plugged/coc.nvim/src/types.ts	/^  location: Location$/;"	p	interface:ErrorItem
location	.vim/plugged/coc.nvim/src/types.ts	/^  location?: Location | LocationWithLine | string$/;"	p	interface:ListItem
locationlist	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^  locationlist: true,$/;"	C
locationlist	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  locationlist: boolean$/;"	p	interface:DiagnosticConfig
locationlist	.vim/plugged/coc.nvim/src/types.ts	/^  readonly locationlist: boolean$/;"	p	interface:Env
locations	.vim/plugged/coc.nvim/src/__tests__/list/location.test.ts	/^const locations: any[] = [{$/;"	C
locations	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^const locations: ReadonlyArray<QuickfixItem> = [{$/;"	C
locations	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^const locations: ReadonlyArray<QuickfixItem> = [{$/;"	C
locations	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let locations: Location[] = Array.isArray(definition) ? definition as Location[] : [definiti/;"	v
locs	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let locs = await languages.getReferences(document, { includeDeclaration: false }, position)$/;"	v
log	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public log(message: string): void {$/;"	m	class:ConsoleLogger
log	.vim/plugged/ghost-text.vim/README.md	/^# log$/;"	c
log	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^log = logging.getLogger(__name__)$/;"	v
log4js	.config/nvim/plugged/coc.nvim/package.json	/^    "log4js": "^4.3.2",$/;"	s	object:dependencies
log4js	.vim/plugged/coc.nvim/package.json	/^    "log4js": "^4.3.2",$/;"	s	object:dependencies
logError	.vim/plugged/coc.nvim/src/list/worker.ts	/^function logError(e): void {$/;"	f
logError	.vim/plugged/coc.nvim/src/util/extensions.ts	/^  logError(): void$/;"	m	interface:Promise
logObjectTrace	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private logObjectTrace(data: any): void {$/;"	m	class:BaseLanguageClient
log_file	.vim/plugged/ghost-text.vim/python3/ghost_log.py	/^log_file = None$/;"	v
logfile	.vim/plugged/coc.nvim/src/util/logger.ts	/^const logfile = getLogFile()$/;"	C
logger	.config/nvim/plugged/coc.nvim/bin/server.js	/^const logger = require('..\/lib\/util\/logger')('server')$/;"	C
logger	.vim/plugged/coc.nvim/bin/server.js	/^const logger = require('..\/lib\/util\/logger')('server')$/;"	C
logger	.vim/plugged/coc.nvim/src/attach.ts	/^const logger = require('.\/util\/logger')('attach')$/;"	C
logger	.vim/plugged/coc.nvim/src/commands.ts	/^const logger = require('.\/util\/logger')('commands')$/;"	C
logger	.vim/plugged/coc.nvim/src/completion/complete.ts	/^const logger = require('..\/util\/logger')('completion-complete')$/;"	C
logger	.vim/plugged/coc.nvim/src/completion/floating.ts	/^const logger = require('..\/util\/logger')('floating')$/;"	C
logger	.vim/plugged/coc.nvim/src/completion/index.ts	/^const logger = require('..\/util\/logger')('completion')$/;"	C
logger	.vim/plugged/coc.nvim/src/configuration/index.ts	/^const logger = require('..\/util\/logger')('configurations')$/;"	C
logger	.vim/plugged/coc.nvim/src/configuration/shape.ts	/^const logger = require('..\/util\/logger')('configuration-shape')$/;"	C
logger	.vim/plugged/coc.nvim/src/configuration/util.ts	/^const logger = require('..\/util\/logger')('configuration-util')$/;"	C
logger	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^const logger = require('..\/util\/logger')('diagnostic-buffer')$/;"	C
logger	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^const logger = require('..\/util\/logger')('diagnostic-collection')$/;"	C
logger	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^const logger = require('..\/util\/logger')('diagnostic-manager')$/;"	C
logger	.vim/plugged/coc.nvim/src/events.ts	/^const logger = require('.\/util\/logger')('events')$/;"	C
logger	.vim/plugged/coc.nvim/src/extensions.ts	/^            logger.error(e)$/;"	v
logger	.vim/plugged/coc.nvim/src/extensions.ts	/^          logger.error(e)$/;"	v
logger	.vim/plugged/coc.nvim/src/extensions.ts	/^          logger: createLogger(id)$/;"	v
logger	.vim/plugged/coc.nvim/src/extensions.ts	/^const logger = createLogger('extensions')$/;"	C
logger	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^const logger = require('..\/util\/logger')('codelens')$/;"	C
logger	.vim/plugged/coc.nvim/src/handler/colors.ts	/^const logger = require('..\/util\/logger')('colors')$/;"	C
logger	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^const logger = require('..\/util\/logger')('documentHighlight')$/;"	C
logger	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^const logger = require('..\/util\/logger')('highlighter')$/;"	C
logger	.vim/plugged/coc.nvim/src/handler/index.ts	/^const logger = require('..\/util\/logger')('Handler')$/;"	C
logger	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      logger.error('connection error:', error, message)$/;"	v
logger	.vim/plugged/coc.nvim/src/language-client/client.ts	/^const logger = require('..\/util\/logger')('language-client-client')$/;"	C
logger	.vim/plugged/coc.nvim/src/language-client/configuration.ts	/^const logger = require('..\/util\/logger')('languageclient-configuration')$/;"	C
logger	.vim/plugged/coc.nvim/src/language-client/index.ts	/^const logger = require('..\/util\/logger')('language-client-index')$/;"	C
logger	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^const logger = require('..\/util\/logger')('language-client-workspaceFolder')$/;"	C
logger	.vim/plugged/coc.nvim/src/languages.ts	/^const logger = require('.\/util\/logger')('languages')$/;"	C
logger	.vim/plugged/coc.nvim/src/list/basic.ts	/^const logger = require('..\/util\/logger')('list-basic')$/;"	C
logger	.vim/plugged/coc.nvim/src/list/history.ts	/^const logger = require('..\/util\/logger')('list-history')$/;"	C
logger	.vim/plugged/coc.nvim/src/list/manager.ts	/^      logger.error( e )$/;"	C
logger	.vim/plugged/coc.nvim/src/list/manager.ts	/^const logger = require( '..\/util\/logger' )( 'list-manager' )$/;"	C
logger	.vim/plugged/coc.nvim/src/list/mappings.ts	/^const logger = require('..\/util\/logger')('list-mappings')$/;"	C
logger	.vim/plugged/coc.nvim/src/list/prompt.ts	/^const logger = require('..\/util\/logger')('list-prompt')$/;"	C
logger	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^const logger = require('..\/..\/util\/logger')('list-actions')$/;"	C
logger	.vim/plugged/coc.nvim/src/list/source/diagnostics.ts	/^const logger = require('..\/..\/util\/logger')('list-symbols')$/;"	C
logger	.vim/plugged/coc.nvim/src/list/source/extensions.ts	/^const logger = require('..\/..\/util\/logger')('list-extensions')$/;"	C
logger	.vim/plugged/coc.nvim/src/list/source/location.ts	/^const logger = require('..\/..\/util\/logger')('list-location')$/;"	C
logger	.vim/plugged/coc.nvim/src/list/source/outline.ts	/^const logger = require('..\/..\/util\/logger')('list-symbols')$/;"	C
logger	.vim/plugged/coc.nvim/src/list/source/symbols.ts	/^const logger = require('..\/..\/util\/logger')('list-symbols')$/;"	C
logger	.vim/plugged/coc.nvim/src/list/ui.ts	/^const logger = require('..\/util\/logger')('list-ui')$/;"	C
logger	.vim/plugged/coc.nvim/src/list/worker.ts	/^const logger = require('..\/util\/logger')('list-worker')$/;"	C
logger	.vim/plugged/coc.nvim/src/model/chars.ts	/^const logger = require('..\/util\/logger')('model-chars')$/;"	C
logger	.vim/plugged/coc.nvim/src/model/document.ts	/^const logger = require('..\/util\/logger')('model-document')$/;"	C
logger	.vim/plugged/coc.nvim/src/model/fileSystemWatcher.ts	/^const logger = require('..\/util\/logger')('filesystem-watcher')$/;"	C
logger	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^const logger = require('..\/util\/logger')('model-floatBuffer')$/;"	C
logger	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^const logger = require('..\/util\/logger')('model-float')$/;"	C
logger	.vim/plugged/coc.nvim/src/model/memos.ts	/^const logger = require('..\/util\/logger')('model-memos')$/;"	C
logger	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^const logger = require('..\/util\/logger')("outpubChannel")$/;"	C
logger	.vim/plugged/coc.nvim/src/model/resolver.ts	/^const logger = require('..\/util\/logger')('model-resolver')$/;"	C
logger	.vim/plugged/coc.nvim/src/model/source-vim.ts	/^const logger = require('..\/util\/logger')('model-source-vim')$/;"	C
logger	.vim/plugged/coc.nvim/src/model/source.ts	/^const logger = require('..\/util\/logger')('model-source')$/;"	C
logger	.vim/plugged/coc.nvim/src/model/status.ts	/^const logger = require('..\/util\/logger')('model-status')$/;"	C
logger	.vim/plugged/coc.nvim/src/model/terminal.ts	/^const logger = require('..\/util\/logger')('model-terminal')$/;"	C
logger	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^const logger = require('..\/util\/logger')('willSaveHandler')$/;"	C
logger	.vim/plugged/coc.nvim/src/plugin.ts	/^const logger = require('.\/util\/logger')('plugin')$/;"	C
logger	.vim/plugged/coc.nvim/src/provider/codeActionmanager.ts	/^const logger = require('..\/util\/logger')('codeActionManager')$/;"	C
logger	.vim/plugged/coc.nvim/src/provider/declarationManager.ts	/^const logger = require('..\/util\/logger')('definitionManager')$/;"	C
logger	.vim/plugged/coc.nvim/src/provider/definitionManager.ts	/^const logger = require('..\/util\/logger')('definitionManager')$/;"	C
logger	.vim/plugged/coc.nvim/src/provider/manager.ts	/^const logger = require('..\/util\/logger')('provider-manager')$/;"	C
logger	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^const logger = require('..\/util\/logger')('onTypeFormatManager')$/;"	C
logger	.vim/plugged/coc.nvim/src/services.ts	/^        logger.debug(`starting service: ${client.name}`)$/;"	v
logger	.vim/plugged/coc.nvim/src/services.ts	/^const logger = require('.\/util\/logger')('services')$/;"	C
logger	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^const logger = require('..\/util\/logger')('snippets-manager')$/;"	C
logger	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^const logger = require('..\/util\/logger')('snippets-parser')$/;"	C
logger	.vim/plugged/coc.nvim/src/snippets/session.ts	/^const logger = require('..\/util\/logger')('snippets-session')$/;"	C
logger	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^const logger = require('..\/util\/logger')('snippets-snipet')$/;"	C
logger	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^const logger = require('..\/util\/logger')('snippets-variable')$/;"	C
logger	.vim/plugged/coc.nvim/src/source/around.ts	/^const logger = require('..\/util\/logger')('source-around')$/;"	C
logger	.vim/plugged/coc.nvim/src/source/buffer.ts	/^const logger = require('..\/util\/logger')('source-buffer')$/;"	C
logger	.vim/plugged/coc.nvim/src/source/file.ts	/^const logger = require('..\/util\/logger')('source-file')$/;"	C
logger	.vim/plugged/coc.nvim/src/sources.ts	/^const logger = require('.\/util\/logger')('sources')$/;"	C
logger	.vim/plugged/coc.nvim/src/types.ts	/^  logger: log4js.Logger$/;"	p	interface:ExtensionContext
logger	.vim/plugged/coc.nvim/src/util/complete.ts	/^const logger = require('.\/logger')('util-complete')$/;"	C
logger	.vim/plugged/coc.nvim/src/util/decorator.ts	/^const logger = require('.\/logger')('util-decorator')$/;"	C
logger	.vim/plugged/coc.nvim/src/util/diff.ts	/^const logger = require('.\/logger')('util-diff')$/;"	C
logger	.vim/plugged/coc.nvim/src/util/extensions.ts	/^const logger = require('.\/logger')('extensions')$/;"	C
logger	.vim/plugged/coc.nvim/src/util/factory.ts	/^const logger = createLogger('util-factoroy')$/;"	C
logger	.vim/plugged/coc.nvim/src/util/fs.ts	/^const logger = require('.\/logger')('util-fs')$/;"	C
logger	.vim/plugged/coc.nvim/src/util/highlight.ts	/^const logger = require('.\/logger')('util-highlights')$/;"	C
logger	.vim/plugged/coc.nvim/src/util/index.ts	/^const logger = require('.\/logger')('util-index')$/;"	C
logger	.vim/plugged/coc.nvim/src/util/logger.ts	/^  let logger = log4js.getLogger(name)$/;"	v
logger	.vim/plugged/coc.nvim/src/watchman.ts	/^const logger = require('.\/util\/logger')('watchman')$/;"	C
logger	.vim/plugged/coc.nvim/src/workspace.ts	/^const logger = require('.\/util\/logger')('workspace')$/;"	C
logger	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^logger = logging.getLogger('omnisharp')$/;"	v
logger	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^logger = logging.getLogger('omnisharp.util')$/;"	v
logger	.vim/plugged/omnisharp-vim/python/omnisharp/vimcmd.py	/^logger = logging.getLogger('omnisharp')$/;"	v
logger	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^logger = logging.getLogger(__name__)$/;"	v
logo	.config/nvim/plugged/emmet-vim/docs/index.html	/^	<img id="logo" src="static\/images\/emmet-vim-logo.png" title="禅" alt="禅" \/>$/;"	I
lookUp	.vim/plugged/coc.nvim/src/configuration/index.ts	/^function lookUp(tree: any, key: string): any {$/;"	f
loop	.vim/plugged/ghost-text.vim/python3/test/test_channel_server.py	/^loop = asyncio.get_event_loop()$/;"	v
loop	.vim/plugged/ghost-text.vim/python3/test/test_http_server.py	/^loop = asyncio.get_event_loop()$/;"	v
loop	.vim/plugged/ghost-text.vim/python3/test/test_websocket_server.py	/^loop = asyncio.get_event_loop()$/;"	v
lowPrioritySourceLimit	.vim/plugged/coc.nvim/src/types.ts	/^  lowPrioritySourceLimit: number$/;"	p	interface:CompleteConfig
lspConfig	.vim/plugged/coc.nvim/src/services.ts	/^    let lspConfig = workspace.getConfiguration().get<{ string: LanguageServerConfig }>(base, {} /;"	v
lspConfig	.vim/plugged/coc.nvim/src/workspace.ts	/^    let lspConfig = this.getConfiguration().get<{ string: LanguageServerConfig }>('languageserve/;"	v
m	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> m$/;"	m
m	.vim/plugged/coc.nvim/src/__tests__/modules/colors.test.ts	/^    let m = await nvim.mode$/;"	v
m	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let m = await nvim.mode$/;"	v
m	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let m = await nvim.mode$/;"	v
m	.vim/plugged/coc.nvim/src/attach.ts	/^        const m = method[0].toLowerCase() + method.slice(1)$/;"	C
m	.vim/plugged/coc.nvim/src/attach.ts	/^      let m = method[0].toLowerCase() + method.slice(1)$/;"	v
m	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  m = 109,$/;"	e	enum:CharCode
m	.vim/plugged/coc.nvim/src/workspace.ts	/^      for (let m of modes) {$/;"	v
m	.vim/plugged/coc.nvim/src/workspace.ts	/^    for (let m of modes) {$/;"	v
main	.config/nvim/plugged/coc.nvim/package.json	/^  "main": ".\/lib\/index.js",$/;"	s
main	.config/nvim/plugged/denite.nvim/autoload/denite/_main.py	/^def main(serveraddr):$/;"	f
main	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def main(self, name, args, queue_id):$/;"	m	class:Child
main	.config/nvim/plugged/oceanic-next/test/style-components.js	/^    main: 'palevioletred',$/;"	p	class:Button.defaultProps.theme
main	.config/nvim/plugged/switch.vim/examples/example.cpp	/^int main(int argc, const char *args[]) {$/;"	f	typeref:typename:int
main	.config/nvim/plugged/ultisnips/test_all.py	/^    def main():$/;"	f
main	.vim/plugged/coc.nvim/package.json	/^  "main": ".\/lib\/index.js",$/;"	s
main	.vim/plugged/coc.nvim/src/extensions.ts	/^      main: filename,$/;"	v
main	.vim/plugged/denite.nvim/autoload/denite/_main.py	/^def main(serveraddr):$/;"	f
main	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def main(self, name, args, queue_id):$/;"	m	class:Child
main	.vim/plugged/fzf/main.go	/^func main() {$/;"	f	package:main
main	.vim/plugged/fzf/main.go	/^package main$/;"	p
main	.vim/plugged/omnisharp-vim/python/ale_lint.py	/^def main():$/;"	f
main_loop	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def main_loop(self, stdout):$/;"	m	class:Child
main_loop	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def main_loop(self, stdout):$/;"	m	class:Child
main_syntax	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let main_syntax = 'eruby'$/;"	v
maintainer	.config/nvim/plugged/vim-snippets/addon-info.json	/^  "maintainer" : "honza @ github & others",$/;"	s
maintainer	.vim/plugged/vim-snippets/addon-info.json	/^  "maintainer" : "honza @ github & others",$/;"	s
major	.vim/plugged/coc.nvim/src/attach.ts	/^    let { major, minor, patch } = semver.parse(json.version)$/;"	v
makeRequireFunction	.vim/plugged/coc.nvim/src/util/factory.ts	/^function makeRequireFunction(this: any): any {$/;"	f
makeSpace	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) makeSpace() {$/;"	f	struct:tui.LightRenderer
make_box	.config/nvim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def make_box(twidth, bwidth=None):$/;"	f
make_box	.vim/plugged/vim-snippets/pythonx/vimsnippets.py	/^def make_box(twidth, bwidth=None):$/;"	f
manager	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    let { manager } = this$/;"	v
map	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^      let map: Map<string, Diagnostic[]> = new Map()$/;"	v
map	.vim/plugged/coc.nvim/src/model/document.ts	/^    let map = this.env.filetypeMap$/;"	v
map	.vim/plugged/vim-airline/t/themes.vim	/^    let map = airline#themes#generate_color_map($/;"	v
mapleader	.config/nvim/configs/keymap.vim	/^let mapleader=" "$/;"	v
mapleader	.vim/.vimrc	/^let mapleader=" "$/;"	v
maplocalleader	.config/nvim/configs/keymap.vim	/^let maplocalleader="s"$/;"	v
mapped	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let mapped = this.charMap.get( ch )$/;"	v
mappings	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private mappings: Mappings$/;"	C
mappings	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    let mappings = mode == 'insert' ? this.insertMappings : this.normalMappings$/;"	v
maps	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    maps = ('', '')$/;"	v	class:_SelectModeMappings
maps	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    maps = ('H', 'x')$/;"	v	class:SelectModeMappings_DisableRemoveBeforeSelecting_ECR
maps	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    maps = ('H', 'x')$/;"	v	class:SelectModeMappings_RemoveBeforeSelecting_ECR
maps	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    maps = ('H', 'x'), ('e', 'l')$/;"	v	class:SelectModeMappings_IgnoreMappings1_ECR
maps	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    maps = ('H', 'x'), ('e', 'l')$/;"	v	class:SelectModeMappings_IgnoreMappings_ECR
maps	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    maps = ('e', 'l'), ('H', 'x')$/;"	v	class:SelectModeMappings_IgnoreMappings2_ECR
margin	.vim/plugged/fzf/src/terminal.go	/^	margin     [4]sizeSpec$/;"	m	struct:fzf.Terminal	typeref:typename:[4]sizeSpec
marker	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^marker,$/;"	s
marker	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let marker = new SnippetParser().parse('console.warn(${1: $TM_SELECTED_TEXT })').children$/;"	v
marker	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^          let marker = child.clone()$/;"	v
marker	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const marker = stack.shift()!$/;"	C	function:walk
marker	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    for (const marker of this._children) {$/;"	C	method:Transform._replace
mask	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^mask {$/;"	s
match	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var match = quickExpr.exec( selector );$/;"	v
match	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let match = location.line$/;"	v
match	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const match = this._accept(TokenType.Dollar)$/;"	C
match	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const match = value.match(\/[a-z]+\/gi)$/;"	C	method:FormatString._toPascalCase
match	.vim/plugged/coc.nvim/src/types.ts	/^  match(selector: DocumentSelector, document: TextDocument): number$/;"	m	interface:IWorkspace
matchChunk	.vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) matchChunk(chunk *Chunk, space []Result, slab *util.Slab) []Result {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Result
matchIds	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let { matchIds } = buf as any$/;"	v
matchIds	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { bufnr, nvim, matchIds } = this$/;"	v
matchIds	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { matchIds } = this$/;"	v
matchIds	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^  private matchIds: Set<number> = new Set()$/;"	p	class:DiagnosticBuffer
matchIds	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^    let { matchIds } = this$/;"	v
matchIds	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    let { matchIds, srcId } = this$/;"	v
matchIds	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^  private matchIds: number[] = []$/;"	p	class:Highlighter
matchKeywords	.vim/plugged/coc.nvim/src/model/chars.ts	/^  public matchKeywords(content: string, min = 3): string[] {$/;"	m	class:Range
matchScore	.vim/plugged/coc.nvim/src/completion/match.ts	/^export function matchScore(word: string, input: number[]): number {$/;"	f
matchScore	.vim/plugged/coc.nvim/src/list/worker.ts	/^            matchScore += score(input, filterLabel)$/;"	v
matchScore	.vim/plugged/coc.nvim/src/list/worker.ts	/^          let matchScore = 0$/;"	v
matchScore	.vim/plugged/coc.nvim/src/types.ts	/^  matchScore?: number$/;"	p	interface:VimCompleteItem
match_count	.vim/plugged/fzf/test/test_go.rb	/^          def match_count$/;"	f	method:until
matched	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def matched(self):$/;"	m	class:SnippetDefinition
matcher	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let matcher = manager.listOptions.matcher$/;"	v
matcher	.vim/plugged/coc.nvim/src/list/manager.ts	/^        matcher = 'regex'$/;"	C
matcher	.vim/plugged/coc.nvim/src/list/manager.ts	/^        matcher = 'strict'$/;"	C
matcher	.vim/plugged/coc.nvim/src/list/manager.ts	/^        matcher,$/;"	C
matcher	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let matcher: Matcher = 'fuzzy'$/;"	C
matcher	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { matcher, interactive } = this.listOptions$/;"	C
matcher	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { sort, matcher, ignorecase } = this.manager.listOptions$/;"	v
matcher	.vim/plugged/coc.nvim/src/types.ts	/^  matcher: Matcher$/;"	p	interface:ListOptions
matches	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def matches(self, before, visual_content=None):$/;"	m	class:SnippetDefinition
matches	.vim/plugged/coc.nvim/src/__tests__/list/location.test.ts	/^    let matches = await nvim.call('getmatches')$/;"	v
matches	.vim/plugged/coc.nvim/src/list/worker.ts	/^            matches.push(...positions(input, filterLabel))$/;"	v
matches	.vim/plugged/coc.nvim/src/list/worker.ts	/^          let matches: number[] = []$/;"	v
matches	.vim/plugged/coc.nvim/src/list/worker.ts	/^  matches: number[]$/;"	p	interface:ExtendedItem
matches	.vim/plugged/coc.nvim/src/util/score.ts	/^  matches?: number[] \/\/ character indexes$/;"	p	interface:MatchResult
matches	.vim/plugged/fzf/src/matcher.go	/^	matches []Result$/;"	m	struct:fzf.partialResult	typeref:typename:[]Result
matchingControl	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^  let matchingControl = null$/;"	C
matchingData	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^  let matchingData = null$/;"	C
matchingText	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^      matchingText = matchingText.substr(0, matchingText.length - 1)$/;"	C
matchingText	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^  let matchingText = ''$/;"	C
max	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let max = items.length == 0 ? 1 : items.length$/;"	v
max	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let max = limitLines - curr$/;"	v
max	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let max = this.tmSnippet.maxIndexNumber$/;"	v
maxDiff	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    maxDiff = None  # Show all diff output, always.$/;"	v	class:VimTestCase
maxDisplayWidthCalc	.vim/plugged/fzf/src/terminal.go	/^	maxDisplayWidthCalc = 1024$/;"	c	package:fzf
maxHeight	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let maxHeight = config.get<number>('maxHeight', 12)$/;"	v
maxHeight	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let maxHeight = config.get<number>('maxHeight', 12)$/;"	v
maxHeightFunc	.vim/plugged/fzf/src/tui/light.go	/^	maxHeightFunc func(int) int$/;"	m	struct:tui.LightRenderer	typeref:typename:func(int) int
maxIndexAdded	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let maxIndexAdded = nested.maxIndexNumber$/;"	v
maxItemCount	.vim/plugged/coc.nvim/src/types.ts	/^  maxItemCount: number$/;"	p	interface:CompleteConfig
maxItems	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) maxItems() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
maxLen	.vim/plugged/coc.nvim/src/workspace.ts	/^    let maxLen = this.env.columns - 12$/;"	v
maxPartitions	.vim/plugged/fzf/src/constants.go	/^	maxPartitions           = 32$/;"	c	package:fzf
maxPatternLength	.vim/plugged/fzf/src/constants.go	/^	maxPatternLength  = 300$/;"	c	package:fzf
maxPreviewWidth	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  maxPreviewWidth: number$/;"	p	interface:FloatingConfig
maxPreviewWidth	.vim/plugged/coc.nvim/src/types.ts	/^  maxPreviewWidth: number$/;"	p	interface:CompleteConfig
maxSize	.vim/plugged/fzf/src/history.go	/^	maxSize  int$/;"	m	struct:fzf.History	typeref:typename:int
maxWidth	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let maxWidth = this.maxWidth || Math.min(columns - 10, 82)$/;"	v
maxWindowHeight	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^  maxWindowHeight: 8,$/;"	C
maxWindowHeight	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let { maxWindowHeight } = this.config$/;"	v
maxWindowHeight	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  maxWindowHeight: number$/;"	p	interface:DiagnosticConfig
maxheight	.vim/plugged/coc.nvim/src/types.ts	/^  maxheight?: number$/;"	p	interface:PopupOptions
maximum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "maximum": 100,$/;"	n	object:properties.suggest.highPrioritySourceLimit
maximum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "maximum": 100,$/;"	n	object:properties.suggest.lowPrioritySourceLimit
maximum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "maximum": 300,$/;"	n	object:properties.suggest.triggerCompletionWait
maximum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "maximum": 500,$/;"	n	object:properties.signature.triggerSignatureWait
maximum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "maximum": 5000,$/;"	n	object:properties.suggest.timeout
maximum	.vim/plugged/coc.nvim/data/schema.json	/^      "maximum": 100,$/;"	n	object:properties.suggest.highPrioritySourceLimit
maximum	.vim/plugged/coc.nvim/data/schema.json	/^      "maximum": 100,$/;"	n	object:properties.suggest.lowPrioritySourceLimit
maximum	.vim/plugged/coc.nvim/data/schema.json	/^      "maximum": 300,$/;"	n	object:properties.suggest.triggerCompletionWait
maximum	.vim/plugged/coc.nvim/data/schema.json	/^      "maximum": 500,$/;"	n	object:properties.signature.triggerSignatureWait
maximum	.vim/plugged/coc.nvim/data/schema.json	/^      "maximum": 5000,$/;"	n	object:properties.suggest.timeout
maxwidth	.vim/plugged/coc.nvim/src/types.ts	/^  maxwidth?: number$/;"	p	interface:PopupOptions
memo	.vim/plugged/coc.nvim/src/__tests__/modules/memos.test.ts	/^    let memo = memos.createMemento('x')$/;"	v
memo	.vim/plugged/coc.nvim/src/__tests__/modules/memos.test.ts	/^    let memo = memos.createMemento('y')$/;"	v
memorize	.vim/plugged/coc.nvim/src/util/decorator.ts	/^export function memorize<R extends (...args: any[]) => Promise<R>>(_target: any, key: string, de/;"	f
memory	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^      memory: _memoryConfiguration.freeze().getValue(key),$/;"	C
memos	.vim/plugged/coc.nvim/src/__tests__/modules/memos.test.ts	/^let memos: Memos$/;"	v
menu	.vim/plugged/coc.nvim/src/languages.ts	/^      menu: `[${shortcut}]`,$/;"	v
menu	.vim/plugged/coc.nvim/src/model/source.ts	/^  public get menu(): string {$/;"	m	class:Source
menu	.vim/plugged/coc.nvim/src/types.ts	/^  menu?: string$/;"	p	interface:VimCompleteItem
merged	.vim/plugged/fzf/src/merger.go	/^	merged  []Result$/;"	m	struct:fzf.Merger	typeref:typename:[]Result
mergedGet	.vim/plugged/fzf/src/merger.go	/^func (mg *Merger) mergedGet(idx int) Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
merger	.vim/plugged/fzf/src/terminal.go	/^	merger     *Merger$/;"	m	struct:fzf.Terminal	typeref:typename:*Merger
mergerCache	.vim/plugged/fzf/src/matcher.go	/^	mergerCache    map[string]*Merger$/;"	m	struct:fzf.Matcher	typeref:typename:map[string]*Merger
mergerCacheMax	.vim/plugged/fzf/src/constants.go	/^	mergerCacheMax int = 100000$/;"	c	package:fzf	typeref:typename:int
mesh	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^mesh,$/;"	s
meshgradient	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^meshgradient,$/;"	s
meshpatch	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^meshpatch,$/;"	s
meshrow	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^meshrow,$/;"	s
message	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        for (let message of messages) {$/;"	v
message	.vim/plugged/coc.nvim/src/types.ts	/^  message: string$/;"	p	interface:DiagnosticItem
message	.vim/plugged/coc.nvim/src/types.ts	/^  message: string$/;"	p	interface:ErrorItem
messageLevel	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { messageLevel } = this$/;"	v
messageTarget	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let messageTarget = getConfig<string>('messageTarget', 'float')$/;"	v
messageTarget	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  messageTarget: string$/;"	p	interface:DiagnosticConfig
messages	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      let messages = feature.messages$/;"	v
messages	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  messages: RPCMessageType | RPCMessageType[]$/;"	p	interface:DynamicFeature
messages	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public get messages(): RPCMessageType {$/;"	m	class:DidSaveTextDocumentFeature
messages	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public get messages(): RPCMessageType {$/;"	m	class:WillSaveFeature
messages	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public get messages(): typeof DidCloseTextDocumentNotification.type {$/;"	m	class:DidCloseTextDocumentFeature
messages	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public get messages(): typeof DidOpenTextDocumentNotification.type {$/;"	m	class:DidOpenTextDocumentFeature
metadata	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^metadata,$/;"	s
metadata_elements	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let metadata_elements = ['link', 'style', 'meta', 'script', 'noscript', 'command']$/;"	v
method	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "method": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
method	.config/nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^            def method; end$/;"	f	class:OuterClass.InnerClass
method	.config/nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass
method	.config/nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^          def method; end$/;"	f	class:OuterClass.InnerClass
method	.config/nvim/plugged/vim-ruby/spec/indent/indent_access_modifier_spec.rb	/^        def method; end$/;"	f	class:OuterClass
method	.vim/plugged/coc.nvim/data/schema.json	/^        "method": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
method	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let method = workspace.isVim ? 'coc#list#prompt_start' : 'coc#list#start_prompt'$/;"	v
method	.vim/plugged/coc.nvim/src/model/document.ts	/^    let method = this.env.isVim ? 'callTimer' : 'call'$/;"	v
method	.vim/plugged/coc.nvim/src/workspace.ts	/^      let method = isDir ? 'rmdir' : 'unlink'$/;"	v
method	.vim/plugged/coc.nvim/src/workspace.ts	/^    let method = echoErr$/;"	v
method	.vim/plugged/coc.nvim/src/workspace.ts	/^    let method = opts.sync ? 'request' : 'notify'$/;"	v
methods	.config/nvim/plugged/sideways.vim/spec/plugin/ruby_spec.rb	/^  describe "methods" do$/;"	d
microdata_attributes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let microdata_attributes = {'itemid': [], 'itemscope': ['itemscope', ''], 'itemtype': [], 'i/;"	v
microdata_attributes_value	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let microdata_attributes_value = {$/;"	v
middleware	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        let middleware = this._client.clientOptions.middleware!$/;"	v
middleware	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      let middleware = this._client.clientOptions.middleware!$/;"	v
middleware	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let middleware = this._client.clientOptions.middleware!$/;"	v
middleware	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let middleware = this.clientOptions.middleware!.handleDiagnostics$/;"	v
middleware	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let middleware = this.getMiddleware()$/;"	v
middleware	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  middleware: Middleware$/;"	p	interface:ResolvedClientOptions
middleware	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^      let middleware = client.clientOptions.middleware!.workspace$/;"	v
minHeight	.vim/plugged/fzf/src/terminal.go	/^	minHeight = 4$/;"	c	package:fzf
minItem	.vim/plugged/fzf/src/item.go	/^var minItem = Item{text: util.Chars{Index: -1}}$/;"	v	package:fzf
minLength	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let minLength = this.config.minTriggerInputLength$/;"	v
minRank	.vim/plugged/fzf/src/result.go	/^func minRank() Result {$/;"	f	package:fzf	typeref:typename:Result
minTriggerInputLength	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let minTriggerInputLength = completion.config.minTriggerInputLength$/;"	v
minTriggerInputLength	.vim/plugged/coc.nvim/src/types.ts	/^  minTriggerInputLength: number$/;"	p	interface:CompleteConfig
minWidth	.vim/plugged/fzf/src/terminal.go	/^	minWidth  = 16$/;"	c	package:fzf
minheight	.vim/plugged/coc.nvim/src/types.ts	/^  minheight?: number$/;"	p	interface:PopupOptions
minimatch	.config/nvim/plugged/coc.nvim/package.json	/^    "minimatch": "^3.0.4",$/;"	s	object:dependencies
minimatch	.vim/plugged/coc.nvim/package.json	/^    "minimatch": "^3.0.4",$/;"	s	object:dependencies
minimum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "minimum": 1,$/;"	n	object:properties.suggest.highPrioritySourceLimit
minimum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "minimum": 1,$/;"	n	object:properties.suggest.lowPrioritySourceLimit
minimum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "minimum": 50,$/;"	n	object:properties.signature.triggerSignatureWait
minimum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "minimum": 50,$/;"	n	object:properties.suggest.triggerCompletionWait
minimum	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "minimum": 500,$/;"	n	object:properties.suggest.timeout
minimum	.vim/plugged/coc.nvim/data/schema.json	/^      "minimum": 1,$/;"	n	object:properties.suggest.highPrioritySourceLimit
minimum	.vim/plugged/coc.nvim/data/schema.json	/^      "minimum": 1,$/;"	n	object:properties.suggest.lowPrioritySourceLimit
minimum	.vim/plugged/coc.nvim/data/schema.json	/^      "minimum": 50,$/;"	n	object:properties.signature.triggerSignatureWait
minimum	.vim/plugged/coc.nvim/data/schema.json	/^      "minimum": 50,$/;"	n	object:properties.suggest.triggerCompletionWait
minimum	.vim/plugged/coc.nvim/data/schema.json	/^      "minimum": 500,$/;"	n	object:properties.suggest.timeout
minor	.vim/plugged/coc.nvim/src/attach.ts	/^    let { major, minor, patch } = semver.parse(json.version)$/;"	v
minwidth	.vim/plugged/coc.nvim/src/types.ts	/^  minwidth?: number$/;"	p	interface:PopupOptions
mixin	.vim/plugged/coc.nvim/src/util/object.ts	/^export function mixin($/;"	f
mkdir	.vim/plugged/coc.nvim/src/util/index.ts	/^  const mkdir = async () => {$/;"	C	function:mkdirp
mkdirp	.vim/plugged/coc.nvim/src/util/index.ts	/^export async function mkdirp(path: string, mode?: number): Promise<boolean> {$/;"	f
mkfilelist	.config/nvim/plugged/html5.vim/Makefile	/^mkfilelist:$/;"	t
mkline	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def mkline(self, line='', indent=None):$/;"	m	class:SnippetUtil
mkrecordscript	.config/nvim/plugged/html5.vim/Makefile	/^mkrecordscript:$/;"	t
mockFunction	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async mockFunction(name: string, result: string | number | any): Promise<void> {$/;"	m	class:Helper
mod	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^        def mod(self, *args, **kwargs):$/;"	f	function:build_proxy.bind	file:
mod	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let mod = context.options.position == 'top' ? 'below' : 'above'$/;"	v
mod	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^        def mod(self, *args, **kwargs):$/;"	f	function:build_proxy.bind	file:
mode	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def mode(self):$/;"	m	class:VimPosition
mode	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def mode(self):$/;"	m	class:VisualContentPreserver
mode	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^    let { mode } = await nvim.mode$/;"	v
mode	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^      let mode = manager.prompt.mode$/;"	v
mode	.vim/plugged/coc.nvim/src/__tests__/modules/floatFactory.test.ts	/^    let { mode } = await nvim.mode$/;"	v
mode	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let { mode } = await nvim.mode$/;"	v
mode	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let mode = await nvim.mode$/;"	v
mode	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let { mode } = await nvim.mode$/;"	v
mode	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let mode = await this.nvim.call('mode')$/;"	v
mode	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let [bufnr, mode] = await nvim.eval(`[bufnr('%'), mode()]`) as [number, string]$/;"	v
mode	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let mode = await nvim.eval('mode()')$/;"	v
mode	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { mode } = this.prompt$/;"	v
mode	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let [mode, line, col] = await this.nvim.eval('[mode(),line("."),col(".")]') as [string, numb/;"	v
mode	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let [ve, selection, pumvisible, mode] = await nvim.eval('[&virtualedit, &selection, pumvisib/;"	v
mode	.vim/plugged/coc.nvim/src/types.ts	/^  mode: ListMode$/;"	p	interface:ListOptions
mode	.vim/plugged/coc.nvim/src/types.ts	/^  readonly mode: string$/;"	p	interface:Env
mode	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [bufnr, ve, selection, mode] = await nvim.eval(`[bufnr('%'), &virtualedit, &selection, m/;"	v
mode	.vim/plugged/coc.nvim/webpack.config.js	/^  mode: 'none',$/;"	p	class:module.exports
model	.vim/plugged/coc.nvim/src/configuration/index.ts	/^        let model = target == ConfigurationTarget.User ? this.user.clone() : this.workspace.clon/;"	v
model	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      defaults: target == ConfigurationTarget.Global ? model : defaults,$/;"	v
model	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      user: target == ConfigurationTarget.User ? model : user,$/;"	v
model	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      workspace: target == ConfigurationTarget.Workspace ? model : workspace,$/;"	v
model	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    for (let [configFile, model] of this.foldConfigurations) {$/;"	v
model	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let model = this.parseContentFromFile(filepath)$/;"	v
model	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let model = user.clone()$/;"	v
modified	.vim/plugged/coc.nvim/src/workspace.ts	/^      let modified = await nvim.eval('&modified')$/;"	v
modified	.vim/plugged/fzf/src/history.go	/^	modified map[int]string$/;"	m	struct:fzf.History	typeref:typename:map[int]string
modify	.vim/plugged/coc.nvim/src/workspace.ts	/^        let modify = this.isNvim ? '<Cmd>' : getKeymapModifier(m)$/;"	v
modifyConfiguration	.vim/plugged/coc.nvim/src/configuration/shape.ts	/^  private async modifyConfiguration(target: ConfigurationTarget, key: string, value?: any): Prom/;"	m	class:ConfigurationProxy
module	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "module": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
module	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "module": {$/;"	o	object:definitions.languageServerModule.properties
module	.vim/plugged/coc.nvim/data/schema.json	/^        "module": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
module	.vim/plugged/coc.nvim/data/schema.json	/^        "module": {$/;"	o	object:definitions.languageServerModule.properties
module	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  module: string$/;"	p	interface:NodeModule
module	.vim/plugged/coc.nvim/src/types.ts	/^  module?: string | ModuleResolve$/;"	p	interface:LanguageServerConfig
module	.vim/plugged/coc.nvim/src/util/factory.ts	/^  const module = new Module(filename)$/;"	C	function:createSandbox
module	.vim/plugged/coc.nvim/src/util/factory.ts	/^  module: NodeModule$/;"	p	interface:ISandbox
module	.vim/plugged/coc.nvim/tsconfig.json	/^    "module": "commonjs",$/;"	s	object:compilerOptions
module	.vim/plugged/nvim-yarp/pythonx/yarp.py	/^module = sys.argv[3]$/;"	v
module	tsconfig.json	/^    "module": "commonjs",$/;"	s	object:compilerOptions
module.is_no_insert	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/NoInsert.vim	/^	function! module.is_no_insert(char)$/;"	f
moduleExports	.vim/plugged/coc.nvim/src/util/factory.ts	/^    const moduleExports = sandbox.module.require(p)$/;"	C	function:createSandbox
moduleFileExtensions	.config/nvim/plugged/coc.nvim/package.json	/^    "moduleFileExtensions": [$/;"	a	object:jest
moduleFileExtensions	.vim/plugged/coc.nvim/package.json	/^    "moduleFileExtensions": [$/;"	a	object:jest
moduleResolution	.vim/plugged/coc.nvim/tsconfig.json	/^    "moduleResolution": "node",$/;"	s	object:compilerOptions
module_obj	.vim/plugged/nvim-yarp/pythonx/yarp.py	/^    module_obj = importlib.import_module(module)$/;"	v
module_obj	.vim/plugged/nvim-yarp/pythonx/yarp.py	/^module_obj = None$/;"	v
more	.vim/plugged/fzf/src/terminal.go	/^	more    bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
mouse	.vim/plugged/fzf/src/tui/light.go	/^	mouse         bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
mouse	.vim/plugged/fzf/src/tui/tui.go	/^	mouse        bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
mouseKeys	.vim/plugged/coc.nvim/src/list/manager.ts	/^const mouseKeys = ['<LeftMouse>', '<LeftDrag>', '<LeftRelease>', '<2-LeftMouse>']$/;"	C
mouseSequence	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) mouseSequence(sz *int) Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
move	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def move(self, pivot, delta):$/;"	m	class:Position
move	.vim/plugged/coc.nvim/src/model/popup.ts	/^  public move(options: Partial<PopupOptions>): void {$/;"	m	class:Popup
move	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) move(y int, x int, clear bool) {$/;"	f	struct:fzf.Terminal
move	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) move(y int, x int) {$/;"	f	struct:tui.LightRenderer
moveCmd	.vim/plugged/coc.nvim/src/workspace.ts	/^      let moveCmd = position ? `+call\\\\ cursor(${line + 1},${col})` : ''$/;"	v
moveCursor	.vim/plugged/fzf/src/tui/tcell.go	/^	moveCursor  bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
move_cmd	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let move_cmd = ''$/;"	v
move_cmd	.vim/plugged/coc.nvim/src/workspace.ts	/^    let move_cmd = ''$/;"	v
moved	.vim/plugged/coc.nvim/src/types.ts	/^  moved?: string | [number, number]$/;"	p	interface:PopupOptions
mozilla	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	mozilla: \/mozilla\/.test( userAgent ) && !\/(compatible|webkit)\/.test( userAgent )$/;"	p	class:jQuery.browser
mpath	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^mpath,$/;"	s
mru	.vim/plugged/coc.nvim/src/__tests__/modules/mru.test.ts	/^    let mru = new Mru('test', root)$/;"	v
mru	.vim/plugged/coc.nvim/src/commands.ts	/^    let mru = workspace.createMru('commands')$/;"	v
mru	.vim/plugged/coc.nvim/src/list/source/commands.ts	/^  private mru: Mru$/;"	p	class:CommandsList
mru	.vim/plugged/coc.nvim/src/list/source/lists.ts	/^  private mru: Mru = new Mru('lists')$/;"	p	class:LinksList
mruList	.vim/plugged/coc.nvim/src/commands.ts	/^    let mruList = await mru.load()$/;"	v
mruList	.vim/plugged/coc.nvim/src/list/source/lists.ts	/^    let mruList = await this.mru.load()$/;"	v
ms	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        let ms = line.match(\/^\\s*line=\\d+\\s+id=(\\d+)\\s+name=(\\w+)\/)$/;"	v
ms	.vim/plugged/coc.nvim/src/handler/index.ts	/^                let idx = ms ? ms.index : str.indexOf(active.label)$/;"	v
ms	.vim/plugged/coc.nvim/src/handler/index.ts	/^                let ms = str.match(new RegExp('\\\\b' + active.label.replace(\/[.*+?^${}()|[\\]\\/;"	v
ms	.vim/plugged/coc.nvim/src/list/worker.ts	/^            let ms = filterLabel.match(regex)$/;"	v
ms	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^      let ms = line.match(\/^\\s*```\\s*(\\w+)?\/)$/;"	v
msg	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  let msg = 'Uncaught exception: ' + err.stack$/;"	v
msg	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let msg =$/;"	v
msg	.vim/plugged/coc.nvim/src/handler/index.ts	/^      const msg = lines.join('\\n').trim()$/;"	v
msg	.vim/plugged/coc.nvim/src/list/manager.ts	/^      let msg = e instanceof Error ? e.message : e.toString()$/;"	C
msg	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let msg = `[${idx + 1}\/${items.length}] ${item.label || ''}`$/;"	v
msgType	.vim/plugged/coc.nvim/src/language-client/client.ts	/^            let msgType = params.type == MessageType.Error$/;"	v
msgs	.vim/plugged/coc.nvim/src/workspace.ts	/^    let msgs = [placeholder + ':']$/;"	v
msie	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	msie: \/msie\/.test( userAgent ) && !\/opera\/.test( userAgent ),$/;"	p	class:jQuery.browser
mtime_ms	.vim/plugged/coc.nvim/src/watchman.ts	/^  mtime_ms: number$/;"	p	interface:FileChangeItem
multi	.vim/plugged/fzf/src/terminal.go	/^	multi      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
multi-line args	.config/nvim/plugged/sideways.vim/spec/plugin/multi_line_args_spec.rb	/^describe "multi-line args" do$/;"	d
multibyte support	.config/nvim/plugged/switch.vim/spec/plugin/multibyte_spec.rb	/^describe "multibyte support" do$/;"	d
multiline	.config/nvim/plugged/sideways.vim/spec/plugin/html_attributes_spec.rb	/^  describe "multiline" do$/;"	d
multiline	.config/nvim/plugged/sideways.vim/spec/plugin/textobj_spec.rb	/^  describe "multiline" do$/;"	d
multiline lambdas as function call arguments	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "multiline lambdas as function call arguments" do$/;"	d
multiple	.vim/plugged/coc.nvim/src/types.ts	/^  multiple?: boolean$/;"	p	interface:ListAction
mutex	.vim/plugged/fzf/src/cache.go	/^	mutex sync.Mutex$/;"	m	struct:fzf.ChunkCache	typeref:typename:sync.Mutex
mutex	.vim/plugged/fzf/src/chunklist.go	/^	mutex  sync.Mutex$/;"	m	struct:fzf.ChunkList	typeref:typename:sync.Mutex
mutex	.vim/plugged/fzf/src/terminal.go	/^	mutex      sync.Mutex$/;"	m	struct:fzf.Terminal	typeref:typename:sync.Mutex
mutex	.vim/plugged/fzf/src/util/atomicbool.go	/^	mutex sync.Mutex$/;"	m	struct:util.AtomicBool	typeref:typename:sync.Mutex
n	.config/nvim/plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.n = function(module) {$/;"	f	function:__webpack_require__
n	.vim/plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.n = function(module) {$/;"	f	function:__webpack_require__
n	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let n = manager.ui.length$/;"	v
n	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let n = curr.get<number>('bar')$/;"	v
n	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let n = await workspace.getOffset()$/;"	v
n	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let ind = option.line.match(\/^\\s*\/)[0]$/;"	v
n	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let n = 0$/;"	v
n	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let n = await nvim.call( 'confirm', ['Choose action:', choices.join( '\\n' )] ) as number$/;"	C
n	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  n = 110,$/;"	e	enum:CharCode
n	.vim/plugged/coc.nvim/src/workspace.ts	/^        let n = documentChanges.length$/;"	v
n	.vim/plugged/coc.nvim/src/workspace.ts	/^    let n = parseInt(res, 10)$/;"	v
n-character search motion	.config/nvim/plugged/vim-easymotion/README.md	/^### n-character search motion$/;"	S
name	.config/nvim/plugged/coc.nvim/package.json	/^  "name": "coc.nvim",$/;"	s
name	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/session.py	/^    name: str = ''$/;"	v	class:Session
name	.config/nvim/plugged/gruvbox/package.json	/^  "name": "gruvbox",$/;"	s
name	.config/nvim/plugged/ultisnips/utils/get_tm_snippets.py	/^        name = bundle.lower()$/;"	v
name	.config/nvim/plugged/ultisnips/utils/get_tm_snippets.py	/^        name = sys.argv[2]$/;"	v
name	.config/nvim/plugged/vim-snippets/addon-info.json	/^  "name" : "snipmate-snippets",$/;"	s
name	.vim/plugged/coc.nvim/package.json	/^  "name": "coc.nvim",$/;"	s
name	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^      name: 'trigger',$/;"	v
name	.vim/plugged/coc.nvim/src/__tests__/extensions/coc-json/package.json	/^  "name": "coc-json",$/;"	s
name	.vim/plugged/coc.nvim/src/__tests__/extensions/global/package.json	/^  "name": "global",$/;"	s
name	.vim/plugged/coc.nvim/src/__tests__/extensions/local/package.json	/^  "name": "local",$/;"	s
name	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^  "name": "test",$/;"	s
name	.vim/plugged/coc.nvim/src/__tests__/list/location.test.ts	/^    let name = await nvim.eval('bufname("%")')$/;"	v
name	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let name = await buf.name$/;"	v
name	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^  public name = 'test'$/;"	p	class:TestList
name	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^  public name = 'option'$/;"	v
name	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public name = 'error'$/;"	p	class:ErrorList
name	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public name = 'task'$/;"	p	class:ErrorTaskList
name	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public name = 'task'$/;"	p	class:TaskList
name	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public name = 'test'$/;"	p	class:InteractiveList
name	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^      name: 'empty',$/;"	v
name	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^      name: 'inComplete',$/;"	v
name	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^      name: 'resolve',$/;"	v
name	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^      name: 'slow',$/;"	v
name	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^      name: 'source',$/;"	v
name	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^      name: 'temp',$/;"	v
name	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^      name: 'trigger',$/;"	v
name	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let name = extensions.packageNameFromUrl('https:\/\/github.com\/neoclide\/coc-tsserver')$/;"	v
name	.vim/plugged/coc.nvim/src/__tests__/modules/terminal.test.ts	/^    let name = terminal.name$/;"	v
name	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let name = await buf.name$/;"	v
name	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let name = await nvim.eval('bufname("%")') as string$/;"	v
name	.vim/plugged/coc.nvim/src/commands.ts	/^            let name = names[idx]$/;"	v
name	.vim/plugged/coc.nvim/src/completion/complete.ts	/^        let { name } = source$/;"	v
name	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^        let [, id, name] = ms$/;"	v
name	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let name = getNameFromSeverity(severity)$/;"	v
name	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^          let name = severity[0].toUpperCase() + severity.slice(1)$/;"	v
name	.vim/plugged/coc.nvim/src/extensions.ts	/^      for (let name of watchExtensions) {$/;"	v
name	.vim/plugged/coc.nvim/src/extensions.ts	/^    let name = path.basename(filepath, 'js')$/;"	v
name	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let { name, kind, location, containerName } = sym as SymbolInformation$/;"	v
name	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  constructor(private name: string) {$/;"	p	class:DefaultErrorHandler
name	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public get name(): string {$/;"	m	class:BaseLanguageClient
name	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let name = await nvim.call('bufname', [bufnr])$/;"	v
name	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let name = opt.key ? opt.key : parts[parts.length - 1].replace(\/^-\/, '')$/;"	v
name	.vim/plugged/coc.nvim/src/list/basic.ts	/^    for (let name of ['open', 'tabe', 'drop', 'vsplit', 'split']) {$/;"	v
name	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let { name } = action$/;"	v
name	.vim/plugged/coc.nvim/src/list/basic.ts	/^  name: string$/;"	p	interface:ArgumentItem
name	.vim/plugged/coc.nvim/src/list/history.ts	/^    let { name } = this.manager$/;"	v
name	.vim/plugged/coc.nvim/src/list/history.ts	/^    let { name, prompt } = this.manager$/;"	v
name	.vim/plugged/coc.nvim/src/list/manager.ts	/^        let description = props[name] && props[name].description ? props[name].description : ''$/;"	v
name	.vim/plugged/coc.nvim/src/list/manager.ts	/^        let name = `list.source.${list.name}.${key}`$/;"	v
name	.vim/plugged/coc.nvim/src/list/manager.ts	/^        name = arg$/;"	C
name	.vim/plugged/coc.nvim/src/list/manager.ts	/^      name: currList.name,$/;"	v
name	.vim/plugged/coc.nvim/src/list/manager.ts	/^    const { name } = list$/;"	C
name	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let name: string$/;"	C
name	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { name, ui, currList, nvim } = this$/;"	C
name	.vim/plugged/coc.nvim/src/list/manager.ts	/^    name = name || 'lists'$/;"	C
name	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public get name(): string {$/;"	C
name	.vim/plugged/coc.nvim/src/list/mappings.ts	/^      let name = await manager.call(action)$/;"	v
name	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^  public name = 'actions'$/;"	p	class:ActionsList
name	.vim/plugged/coc.nvim/src/list/source/commands.ts	/^  public readonly name = 'commands'$/;"	p	class:CommandsList
name	.vim/plugged/coc.nvim/src/list/source/diagnostics.ts	/^  public name = 'diagnostics'$/;"	p	class:DiagnosticsList
name	.vim/plugged/coc.nvim/src/list/source/extensions.ts	/^  public name = 'extensions'$/;"	p	class:ExtensionList
name	.vim/plugged/coc.nvim/src/list/source/folders.ts	/^  public name = 'folders'$/;"	p	class:FoldList
name	.vim/plugged/coc.nvim/src/list/source/links.ts	/^  public name = 'links'$/;"	p	class:LinksList
name	.vim/plugged/coc.nvim/src/list/source/lists.ts	/^      let { name } = item.data$/;"	v
name	.vim/plugged/coc.nvim/src/list/source/lists.ts	/^  public readonly name = 'lists'$/;"	p	class:LinksList
name	.vim/plugged/coc.nvim/src/list/source/location.ts	/^  public name = 'location'$/;"	p	class:LocationList
name	.vim/plugged/coc.nvim/src/list/source/outline.ts	/^  public name = 'outline'$/;"	p	class:Outline
name	.vim/plugged/coc.nvim/src/list/source/output.ts	/^  public name = 'output'$/;"	p	class:OutputList
name	.vim/plugged/coc.nvim/src/list/source/services.ts	/^  public name = 'services'$/;"	p	class:ServicesList
name	.vim/plugged/coc.nvim/src/list/source/sources.ts	/^  public readonly name = 'sources'$/;"	p	class:SourcesList
name	.vim/plugged/coc.nvim/src/list/source/symbols.ts	/^  public name = 'symbols'$/;"	p	class:Symbols
name	.vim/plugged/coc.nvim/src/model/mru.ts	/^  constructor(private name: string, base?: string) {$/;"	p	class:Mru
name	.vim/plugged/coc.nvim/src/model/source.ts	/^  public readonly name: string$/;"	p	class:Source
name	.vim/plugged/coc.nvim/src/model/terminal.ts	/^  public get name(): string {$/;"	m	class:TerminalModel
name	.vim/plugged/coc.nvim/src/services.ts	/^      name: client.name,$/;"	v
name	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let name: string$/;"	v
name	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  constructor(public name: string) {$/;"	p	class:Variable
name	.vim/plugged/coc.nvim/src/sources.ts	/^    let name = path.basename(filepath, '.vim')$/;"	v
name	.vim/plugged/coc.nvim/src/sources.ts	/^    let name = typeof source == 'string' ? source : source.name$/;"	v
name	.vim/plugged/coc.nvim/src/sources.ts	/^    let { name } = source$/;"	v
name	.vim/plugged/coc.nvim/src/types.ts	/^  name: string$/;"	p	interface:IList
name	.vim/plugged/coc.nvim/src/types.ts	/^  name: string$/;"	p	interface:IServiceProvider
name	.vim/plugged/coc.nvim/src/types.ts	/^  name: string$/;"	p	interface:ISource
name	.vim/plugged/coc.nvim/src/types.ts	/^  name: string$/;"	p	interface:ListAction
name	.vim/plugged/coc.nvim/src/types.ts	/^  name: string$/;"	p	interface:ListArgument
name	.vim/plugged/coc.nvim/src/types.ts	/^  name: string$/;"	p	interface:SourceStat
name	.vim/plugged/coc.nvim/src/types.ts	/^  name?: string$/;"	p	interface:TerminalOptions
name	.vim/plugged/coc.nvim/src/types.ts	/^  readonly name: string$/;"	p	interface:DiagnosticCollection
name	.vim/plugged/coc.nvim/src/types.ts	/^  readonly name: string$/;"	p	interface:OutputChannel
name	.vim/plugged/coc.nvim/src/types.ts	/^  readonly name: string$/;"	p	interface:Terminal
name	.vim/plugged/coc.nvim/src/util/highlight.ts	/^            let [name, ...list] = arr$/;"	C	function:getHiglights
name	.vim/plugged/coc.nvim/src/util/string.ts	/^    const newValue = variables[name]$/;"	C	function:isWord
name	.vim/plugged/coc.nvim/src/watchman.ts	/^  name: string$/;"	p	interface:FileChangeItem
name	.vim/plugged/coc.nvim/src/workspace.ts	/^      name: path.dirname(newPath)$/;"	v
name	.vim/plugged/coc.nvim/src/workspace.ts	/^    let workspaceFolder: WorkspaceFolder = { uri, name: path.basename(rootPath) }$/;"	v
name	.vim/plugged/vim-snippets/addon-info.json	/^  "name" : "snipmate-snippets",$/;"	s
name	tsconfig.json	/^      { "name": "typescript-tslint-plugin" }$/;"	s	object:compilerOptions.plugins.0
nameIndex	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let nameIndex = label.indexOf('(')$/;"	v
name_temp	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def name_temp(self, file_path):$/;"	m	class:TempFileManager
names	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let names = manager.names$/;"	v
names	.vim/plugged/coc.nvim/src/commands.ts	/^          let names = workspace.channelNames$/;"	v
names	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let names = arr.map(o => o.source)$/;"	v
names	.vim/plugged/coc.nvim/src/extensions.ts	/^    let names = exclude.map(o => o.id)$/;"	v
names	.vim/plugged/coc.nvim/src/list/manager.ts	/^      names.splice( idx, 1 )$/;"	C
names	.vim/plugged/coc.nvim/src/list/manager.ts	/^      names.unshift( defaultAction )$/;"	C
names	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let names: string[] = actions.map( o => o.name )$/;"	C
namespace	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var val, ret, namespace, all, handlers;$/;"	v
navigateDown	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def navigateDown():$/;"	f
navigateUp	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def navigateUp():$/;"	f
needle	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let needle = 'aBc'$/;"	v
neocomplete#sources#ultisnips#define	.config/nvim/plugged/ultisnips/autoload/neocomplete/sources/ultisnips.vim	/^function! neocomplete#sources#ultisnips#define() abort$/;"	f
neovim_rpc#_callback	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_callback()$/;"	f
neovim_rpc#_error	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_error(msg)$/;"	f
neovim_rpc#_nvim_err_write	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_nvim_err_write(msg)$/;"	f
neovim_rpc#_nvim_out_write	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_nvim_out_write(msg)$/;"	f
neovim_rpc#_on_close	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_on_close(job)$/;"	f
neovim_rpc#_on_exit	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_on_exit(job,status)$/;"	f
neovim_rpc#_on_stderr	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_on_stderr(job,data)$/;"	f
neovim_rpc#_on_stdout	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#_on_stdout(job,data)$/;"	f
neovim_rpc#jobstart	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#jobstart(cmd,...)$/;"	f
neovim_rpc#jobstop	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#jobstop(jobid)$/;"	f
neovim_rpc#pyxcall	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#pyxcall(func,...)$/;"	f
neovim_rpc#rpcnotify	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#rpcnotify(channel,event,...)$/;"	f
neovim_rpc#rpcrequest	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#rpcrequest(channel, event, ...)$/;"	f
neovim_rpc#serveraddr	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! neovim_rpc#serveraddr()$/;"	f
nested	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let nested = new SnippetParser().parse('ddd$1eee$0', true)$/;"	v
nested	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let nested = new SnippetParser().parse('dddeee$0', true)$/;"	v
nested	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let nested = new SnippetParser().parse(snippet, false)$/;"	v
nestedVariable	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const nestedVariable = <Variable>placeholder.children[1]$/;"	C
new	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    new: bool = False$/;"	v	class:Context
new	.vim/plugged/coc.nvim/src/util/factory.ts	/^  new(name: string): any$/;"	m	interface:IModule
newChildren	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const newChildren = parent.children.slice(0)$/;"	C
newContent	.vim/plugged/coc.nvim/src/util/factory.ts	/^    const newContent = content.replace(\/^\\#\\!.*\/, '')$/;"	C	function:compileInSandbox
newEnclosing	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const newEnclosing = snippet.enclosingPlaceholders(snippet.placeholders[1])$/;"	C
newFile	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let newFile = URI.file(path.join(__dirname, 'abc')).toString()$/;"	v
newFile	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let newFile = path.join(__dirname, 'bar')$/;"	v
newFile	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let newFile = path.join(__dirname, 'new')$/;"	v
newItem	.vim/plugged/fzf/src/terminal_test.go	/^func newItem(str string) *Item {$/;"	f	package:fzf	typeref:typename:*Item
newLabel	.vim/plugged/coc.nvim/src/list/worker.ts	/^      newLabel = newLabel + item.text$/;"	v
newLabel	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let newLabel = ''$/;"	v
newLine	.vim/plugged/coc.nvim/src/completion/index.ts	/^        let newLine = `${line.slice(0, col)}${word}${latestInsertChar}${line.slice(colnr - 1)}`$/;"	v
newLines	.vim/plugged/coc.nvim/src/languages.ts	/^      let character = newLines[newLines.length - 1].length - end.length$/;"	v
newLines	.vim/plugged/coc.nvim/src/languages.ts	/^    let newLines = `${start}${newText}${end}`.split('\\n')$/;"	v
newLines	.vim/plugged/coc.nvim/src/model/document.ts	/^    let newLines: string[] = content.split('\\n')$/;"	v
newLines	.vim/plugged/coc.nvim/src/util/position.ts	/^  let delta = (end.line - start.line) - newLines.length + 1$/;"	v
newLines	.vim/plugged/coc.nvim/src/util/position.ts	/^  let lastLine = newLines[newLines.length - 1]$/;"	v
newLines	.vim/plugged/coc.nvim/src/util/position.ts	/^  let newLines = newText.split('\\n')$/;"	v
newPath	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let newPath = path.join(__dirname, 'bar')$/;"	v
newPath	.vim/plugged/coc.nvim/src/workspace.ts	/^    let newPath = await nvim.call('input', ['new path:', oldPath, 'file'])$/;"	v
newRange	.vim/plugged/fzf/src/tokenizer.go	/^func newRange(begin int, end int) Range {$/;"	f	package:fzf	typeref:typename:Range
newState	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  newState: State$/;"	p	interface:StateChangeEvent
newState	.vim/plugged/coc.nvim/src/services.ts	/^      let { oldState, newState } = changeEvent$/;"	v
newStr	.vim/plugged/coc.nvim/src/services.ts	/^      let newStr = stateString(newState)$/;"	v
newTabUrl	vimium-options.json	/^  "newTabUrl": "pages\/blank.html",$/;"	s
newText	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^      newText: ''$/;"	v
newText	.vim/plugged/coc.nvim/src/handler/index.ts	/^              let newText = doc.filetype == 'vim' ? '  \\\\ ' + preIndent : preIndent$/;"	v
newText	.vim/plugged/coc.nvim/src/handler/index.ts	/^            let newText = '\\n' + preIndent + space$/;"	v
newText	.vim/plugged/coc.nvim/src/languages.ts	/^    let { range, newText } = textEdit$/;"	v
newText	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        let newText = p.transform ? p.transform.resolve(val) : val$/;"	v
newText	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let edit: TextEdit = { range: change.range, newText: change.text }$/;"	v
newText	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let newText = editRange(placeholder.range, value, edit)$/;"	v
newText	.vim/plugged/coc.nvim/src/util/diff.ts	/^  newText: string$/;"	p	interface:Change
newText	.vim/plugged/coc.nvim/src/util/position.ts	/^  let { range, newText } = edit$/;"	v
newUri	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let newUri = URI.file(newFile).toString()$/;"	v
newUri	.vim/plugged/coc.nvim/src/types.ts	/^  newUri: URI$/;"	p	interface:RenameEvent
newValue	.vim/plugged/coc.nvim/src/util/string.ts	/^    const newValue = variables[name]$/;"	C	function:isWord
new_result	.config/nvim/plugged/vim-textobj-user/t/old-property-names.vim	/^    let new_result = @0$/;"	v
new_scratch_buffer	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def new_scratch_buffer(text):$/;"	f
new_shell	.vim/plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestBash
new_shell	.vim/plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestFish
new_shell	.vim/plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestZsh
next	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    next = __next__  # for python2$/;"	v	class:_TextIterator
next	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text.py	/^    next = __next__  # for python2$/;"	v	class:LineIterator
next	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^          next(uri, diagnostics)$/;"	v
next	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async next(): Promise<void> {$/;"	C
next	.vim/plugged/coc.nvim/src/list/worker.ts	/^          next = matches.shift()$/;"	v
next	.vim/plugged/coc.nvim/src/list/worker.ts	/^        next = matches.shift()$/;"	v
next	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let next = matches.shift()$/;"	v
next	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let next = this.snippet.getNextPlaceholder(curr.index)$/;"	v
next	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let next = this.getPlaceholder(index + 1)$/;"	v
next	.vim/plugged/fzf/src/history.go	/^func (h *History) next() string {$/;"	f	struct:fzf.History	typeref:typename:string
nextChar	.vim/plugged/coc.nvim/src/handler/index.ts	/^          let nextChar = curr.trim()[0]$/;"	v
nextInt	.vim/plugged/fzf/src/options.go	/^func nextInt(args []string, i *int, message string) int {$/;"	f	package:fzf	typeref:typename:int
nextKey	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  public get nextKey(): string {$/;"	C
nextKey	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    let nextKey = this.config.nextKey$/;"	v
nextPatterns	vimium-options.json	/^  "nextPatterns": "next,more,newer,>,›,→,»,≫,>>",$/;"	s
nextPlaceholder	.vim/plugged/coc.nvim/src/types.ts	/^  nextPlaceholder(): Promise<void>$/;"	m	interface:SnippetManager
nextResult	.vim/plugged/coc.nvim/src/util/score.ts	/^function nextResult(codes: number[], text: string, idx: number, curr: MatchResult): MatchResult /;"	f
nextScore	.vim/plugged/coc.nvim/src/completion/match.ts	/^function nextScore(codes: number[], index: number, inputCodes: number[], allowFuzzy = true): num/;"	f
nextString	.vim/plugged/fzf/src/options.go	/^func nextString(args []string, i *int, message string) string {$/;"	f	package:fzf	typeref:typename:string
nextTick	.vim/plugged/coc.nvim/src/util/platform.ts	/^  nextTick: Function$/;"	p	interface:INodeProcess
nextWordIndex	.vim/plugged/coc.nvim/src/completion/match.ts	/^function nextWordIndex(start = 0, codes: number[]): number {$/;"	f
nfcall	.vim/plugged/coc.nvim/src/util/index.ts	/^function nfcall<R>(fn: Function, ...args: any[]): Promise<R> {$/;"	f
ninja-feet.vim	.config/nvim/plugged/vim-ninja-feet/README.md	/^ninja-feet.vim$/;"	c
no-console	.vim/plugged/coc.nvim/tslint.json	/^    "no-console": true$/;"	b	object:rules
no-invalid-template-strings	.vim/plugged/coc.nvim/tslint.json	/^    "no-invalid-template-strings": false,$/;"	b	object:rules
no-unused-expression	.vim/plugged/coc.nvim/tslint.json	/^    "no-unused-expression": false,$/;"	b	object:rules
noImplicitAny	.vim/plugged/coc.nvim/tsconfig.json	/^    "noImplicitAny": false,$/;"	b	object:compilerOptions
noImplicitAny	tsconfig.json	/^    "noImplicitAny": true,$/;"	b	object:compilerOptions
noImplicitThis	.vim/plugged/coc.nvim/tsconfig.json	/^    "noImplicitThis": true,$/;"	b	object:compilerOptions
noUnusedLocals	.vim/plugged/coc.nvim/tsconfig.json	/^    "noUnusedLocals": false,$/;"	b	object:compilerOptions
noUnusedParameters	.vim/plugged/coc.nvim/tsconfig.json	/^    "noUnusedParameters": false,$/;"	b	object:compilerOptions
no_unidecode_available	.config/nvim/plugged/ultisnips/test/util.py	/^def no_unidecode_available():$/;"	f
node	.eslintrc.json	/^ "node": true,$/;"	b	object:env
node	.vim/plugged/coc.nvim/webpack.config.js	/^  node: {$/;"	c	class:module.exports
nodeFolder	.vim/plugged/coc.nvim/src/model/resolver.ts	/^  private get nodeFolder(): Promise<string> {$/;"	m	class:Resolver
normalMappings	.vim/plugged/coc.nvim/src/list/mappings.ts	/^        let normalMappings = config.get<any>('normalMappings', {})$/;"	v
normalMappings	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    let normalMappings = this.manager.getConfig<any>('normalMappings', {})$/;"	v
normalize	.vim/plugged/fzf/src/pattern.go	/^	normalize     bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
normalizeRune	.vim/plugged/fzf/src/algo/algo.go	/^func normalizeRune(r rune) rune {$/;"	f	package:algo	typeref:typename:rune
normalized	.vim/plugged/fzf/src/algo/normalize.go	/^var normalized map[rune]rune = map[rune]rune{$/;"	v	package:algo	typeref:typename:map[rune]rune
noselect	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { noselect, enablePreview } = this.config$/;"	v
noselect	.vim/plugged/coc.nvim/src/types.ts	/^  noselect: boolean$/;"	p	interface:CompleteConfig
notVisible	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async notVisible(word: string): Promise<boolean> {$/;"	m	class:Helper
notificationSent	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected notificationSent(textDocument: TextDocument): void {$/;"	m	class:DidCloseTextDocumentFeature
notificationSent	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected notificationSent(textDocument: TextDocument): void {$/;"	m	class:DidOpenTextDocumentFeature
notify	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def notify(cls, channel, event, args):$/;"	m	class:NvimHandler
notify	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def notify(cls, cmd=None):$/;"	m	class:VimHandler
notifyOnCont	.vim/plugged/fzf/src/terminal_unix.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnCont	.vim/plugged/fzf/src/terminal_windows.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	.vim/plugged/fzf/src/terminal_unix.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	.vim/plugged/fzf/src/terminal_windows.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyStop	.vim/plugged/fzf/src/terminal_unix.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
notifyStop	.vim/plugged/fzf/src/terminal_windows.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
notify_exited	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def notify_exited(cls, channel):$/;"	m	class:VimHandler
now	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^function now(){$/;"	f
now	.vim/plugged/coc.nvim/src/extensions.ts	/^    let now = new Date()$/;"	v
now	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let now = Date.now()$/;"	v
now	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^    let now = Date.now()$/;"	v
npm-run-all	.config/nvim/plugged/coc.nvim/package.json	/^    "npm-run-all": "^4.1.5",$/;"	s	object:devDependencies
npm-run-all	.vim/plugged/coc.nvim/package.json	/^    "npm-run-all": "^4.1.5",$/;"	s	object:devDependencies
nr	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let nr = await nvim.call('winnr')$/;"	v
nr	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let nr = await nvim.call('tabpagenr')$/;"	v
nr	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let nr = await nvim.call('winnr')$/;"	v
nr	.vim/plugged/coc.nvim/src/__tests__/modules/outputChannel.test.ts	/^    let nr = (await nvim.buffer).id$/;"	v
nr	.vim/plugged/coc.nvim/src/types.ts	/^  nr?: number$/;"	p	interface:QuickfixItem
ntabs_to_proper_indent	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/indent_util.py	/^    def ntabs_to_proper_indent(self, ntabs):$/;"	m	class:IndentUtil
nth	.vim/plugged/fzf/src/pattern.go	/^	nth           []Range$/;"	m	struct:fzf.Pattern	typeref:typename:[]Range
null	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        if (!opt.input.startsWith('EM')) return null$/;"	v
null	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return null$/;"	v
null	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    if (!results || !item.user_data) return null$/;"	v
null	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let ch = i == 0 ? null : pre[i - 1]$/;"	v
null	.vim/plugged/coc.nvim/src/completion/index.ts	/^    if (!activted) return null$/;"	v
null	.vim/plugged/coc.nvim/src/completion/index.ts	/^    }$/;"	v
null	.vim/plugged/coc.nvim/src/extensions.ts	/^    let directory = idx == -1 ? null : this.list[idx].directory$/;"	v
null	.vim/plugged/coc.nvim/src/languages.ts	/^        if (!doc) return null$/;"	v
null	.vim/plugged/coc.nvim/src/list/configuration.ts	/^    return null$/;"	C
null	.vim/plugged/coc.nvim/src/list/manager.ts	/^          return null$/;"	C
null	.vim/plugged/coc.nvim/src/list/manager.ts	/^        return null$/;"	C
null	.vim/plugged/coc.nvim/src/list/manager.ts	/^      return null$/;"	C
null	.vim/plugged/coc.nvim/src/workspace.ts	/^      return null$/;"	v
null	.vim/plugged/coc.nvim/src/workspace.ts	/^    if (bufnr == null) return null$/;"	v
null	.vim/plugged/coc.nvim/src/workspace.ts	/^    if (rootPath == os.homedir()) return null$/;"	v
null	.vim/plugged/coc.nvim/src/workspace.ts	/^    let watchmanPath = process.env.NODE_ENV == 'test' ? null : this.getWatchmanPath()$/;"	v
num	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^function num(elem, prop) {$/;"	f
numLinesMax	.vim/plugged/fzf/src/terminal.go	/^func numLinesMax(str string, max int) int {$/;"	f	package:fzf	typeref:typename:int
numPartitionsMultiplier	.vim/plugged/fzf/src/constants.go	/^	numPartitionsMultiplier = 8$/;"	c	package:fzf
number	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^    def number(self):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
number	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_tabstop.py	/^    def number(self):$/;"	m	class:TabStop
number	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let winid = await nvim.call('bufwinid', buf.bufnr) as number$/;"	v
number	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let bufnr = await nvim.call('nvim_win_get_buf', winid) as number$/;"	v
number	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let winid = await this.nvim.call('bufwinid', this.bufnr) as number$/;"	v
number	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      winid = await nvim.call('bufwinid', bufnr) as number$/;"	v
number	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        let winid = await nvim.call('win_getid') as number$/;"	v
number	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let [pos, line] = await nvim.eval('[coc#util#cursor(), getline(".")]') as [[number, number/;"	v
number	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let arr = await this.nvim.call('getcurpos') as number[]$/;"	v
number	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let count = await this.nvim.getVvar('count') as number$/;"	v
number	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let lnum = await this.nvim.getVvar('lnum') as number$/;"	v
number	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let [bufnr, mode] = await nvim.eval(`[bufnr('%'), mode()]`) as [number, string]$/;"	v
number	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let bufnr = await this.nvim.call('bufnr', '%') as number$/;"	v
number	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let n = await nvim.call( 'confirm', ['Choose action:', choices.join( '\\n' )] ) as number$/;"	C
number	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let [start, end] = await nvim.eval('[line("w0"),line("w$")]') as number[]$/;"	v
number	.vim/plugged/coc.nvim/src/list/worker.ts	/^          let spans: [number, number][] = []$/;"	v
number	.vim/plugged/coc.nvim/src/list/worker.ts	/^        let span: [number, number] = [byteLength(old), byteLength(newLabel)]$/;"	v
number	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let spans: [number, number][] = []$/;"	v
number	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^      let positions: [number, number, number?][] = []$/;"	v
number	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let [mode, line, col] = await this.nvim.eval('[mode(),line("."),col(".")]') as [string, numb/;"	v
number	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let [row, col] = await nvim.call('coc#util#win_position') as [number, number]$/;"	v
number	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let [ve, selection, pumvisible, mode] = await nvim.eval('[&virtualedit, &selection, pumvisib/;"	v
number	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^    let lnum = await nvim.call('line', '.') as number$/;"	v
number	.vim/plugged/coc.nvim/src/util/is.ts	/^export function number(value: any): value is number {$/;"	f
number	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [, el, ec] = await nvim.call('getpos', isVisual ? `'>` : `']`) as [number, number, numbe/;"	v
number	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [, sl, sc] = await nvim.call('getpos', isVisual ? `'<` : `'[`) as [number, number, numbe/;"	v
number	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [bufnr, ve, selection, mode] = await nvim.eval(`[bufnr('%'), &virtualedit, &selection, m/;"	v
number	.vim/plugged/coc.nvim/src/workspace.ts	/^    let bufnr = await nvim.eval('bufnr("%")') as number$/;"	v
number	.vim/plugged/coc.nvim/src/workspace.ts	/^    let tabSize = await this.getDocumentOption('shiftwidth', doc) as number$/;"	v
number	.vim/plugged/fzf/src/terminal.go	/^	number        bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
numberSelect	.vim/plugged/coc.nvim/src/list/manager.ts	/^        numberSelect = true$/;"	C
numberSelect	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let numberSelect = false$/;"	C
numberSelect	.vim/plugged/coc.nvim/src/types.ts	/^  numberSelect: boolean$/;"	p	interface:CompleteConfig
numberSelect	.vim/plugged/coc.nvim/src/types.ts	/^  numberSelect: boolean$/;"	p	interface:ListOptions
numeric_key	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/sort.py	/^    def numeric_key(v: str) -> typing.List[typing.Any]:$/;"	f	function:_filename	file:
nums	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let nums = placeholders.map(p => p.index)$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/completion/float.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public nvim: Neovim$/;"	p	class:Helper
nvim	.vim/plugged/coc.nvim/src/__tests__/list/location.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/attach.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/colors.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/floatBuffer.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/floatFactory.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/outputChannel.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/plugin.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/sources.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/task.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/terminal.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let { nvim, workspaceFolders, channelNames, rootPath, cwd, documents, initialized, textDocum/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^let nvim: Neovim$/;"	v
nvim	.vim/plugged/coc.nvim/src/attach.ts	/^  const nvim: NeovimClient = attach(opts, log4js.getLogger('node-client'), requestApi)$/;"	C
nvim	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  constructor(private nvim: Neovim) {$/;"	p	class:Floating
nvim	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { nvim, config, document } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { nvim, latestInsertChar } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/configuration/shape.ts	/^  private get nvim(): Neovim {$/;"	m	class:ConfigurationProxy
nvim	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let { nvim, bufnr } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      nvim.call('coc#util#clearmatches', [Array.from(matchIds)], true)$/;"	v
nvim	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      nvim.call('coc#util#unplace_signs', [bufnr, Array.from(signIds)], true)$/;"	v
nvim	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { bufnr, nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { bufnr, nvim, matchIds } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { nvim, bufnr } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { nvim, bufnr, signIds } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { nvim, signIds, bufnr } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let { nvim } = workspace$/;"	v
nvim	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^    let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^    let { nvim } = workspace$/;"	v
nvim	.vim/plugged/coc.nvim/src/handler/index.ts	/^        nvim.command('setfiletype markdown', true)$/;"	v
nvim	.vim/plugged/coc.nvim/src/handler/index.ts	/^        nvim.command('setlocal bufhidden=wipe nobuflisted', true)$/;"	v
nvim	.vim/plugged/coc.nvim/src/handler/index.ts	/^        nvim.command('setlocal conceallevel=2 nospell nofoldenable wrap', true)$/;"	v
nvim	.vim/plugged/coc.nvim/src/handler/index.ts	/^        nvim.command(`exe "normal! z${this.documentLines.length}\\\\<cr>"`, true)$/;"	v
nvim	.vim/plugged/coc.nvim/src/handler/index.ts	/^        nvim.pauseNotification()$/;"	v
nvim	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/languages.ts	/^    let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/list/manager.ts	/^        nvim.call( 'coc#list#restore', [this.window.id, savedHeight], true )$/;"	C
nvim	.vim/plugged/coc.nvim/src/list/manager.ts	/^      nvim.call( 'coc#list#stop_prompt', [], true )$/;"	C
nvim	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { name, ui, currList, nvim } = this$/;"	C
nvim	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { nvim } = this$/;"	C
nvim	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { nvim, currList } = this$/;"	C
nvim	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { nvim, ui, savedHeight } = this$/;"	C
nvim	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { ui, currList, activated, nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/list/manager.ts	/^    nvim.command( 'pclose', true )$/;"	C
nvim	.vim/plugged/coc.nvim/src/list/manager.ts	/^    nvim.pauseNotification()$/;"	C
nvim	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private nvim: Neovim$/;"	C
nvim	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^    let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/list/source/lists.ts	/^    let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { bufnr, config, nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { nvim } = workspace$/;"	v
nvim	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { nvim, bufnr, window, config } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { nvim, signOffset, bufnr, length } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { selected, nvim, signOffset, bufnr } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { nvim, buffer } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/model/document.ts	/^  private nvim: Neovim$/;"	p	class:Document
nvim	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^      nvim.call('clearmatches', [], true)$/;"	v
nvim	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^      nvim.call('win_execute', [this.window.id, 'call clearmatches([])'], true)$/;"	v
nvim	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let { buffer, lines, nvim, highlights } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^        nvim.pauseNotification()$/;"	v
nvim	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      let { nvim, alignTop } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let { floatBuffer, nvim, window } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let { nvim, preferTop } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^    if (buffer) nvim.command(`silent! bd! ${buffer.id}`, true)$/;"	v
nvim	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^    let { nvim, buffer } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/model/popup.ts	/^  constructor(private nvim: Neovim) {$/;"	p	class:Popup
nvim	.vim/plugged/coc.nvim/src/model/source.ts	/^  protected readonly nvim: Neovim$/;"	p	class:Source
nvim	.vim/plugged/coc.nvim/src/model/task.ts	/^    let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/model/task.ts	/^    return nvim.call('coc#task#running', [this.id])$/;"	v
nvim	.vim/plugged/coc.nvim/src/model/terminal.ts	/^    private nvim: Neovim,$/;"	p	class:TerminalModel
nvim	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^      let { nvim, workspace } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/plugin.ts	/^  constructor(public nvim: Neovim) {$/;"	p	class:Plugin
nvim	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    let { nvim } = workspace$/;"	v
nvim	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    const { document, nvim } = this$/;"	C
nvim	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let { document, nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let { nvim, document } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^    let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/types.ts	/^  readonly nvim: Neovim$/;"	p	interface:IWorkspace
nvim	.vim/plugged/coc.nvim/src/util/highlight.ts	/^        nvim.command('qa!').catch(() => {$/;"	C	function:getHiglights
nvim	.vim/plugged/coc.nvim/src/util/highlight.ts	/^  let nvim: NeovimClient$/;"	C	function:getHiglights
nvim	.vim/plugged/coc.nvim/src/workspace.ts	/^        nvim.command('setfiletype log', true)$/;"	v
nvim	.vim/plugged/coc.nvim/src/workspace.ts	/^        nvim.command('setlocal buftype=nofile bufhidden=hide', true)$/;"	v
nvim	.vim/plugged/coc.nvim/src/workspace.ts	/^        nvim.command('setlocal nospell nofoldenable wrap noswapfile', true)$/;"	v
nvim	.vim/plugged/coc.nvim/src/workspace.ts	/^        nvim.pauseNotification()$/;"	v
nvim	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { nvim } = this$/;"	v
nvim	.vim/plugged/coc.nvim/src/workspace.ts	/^  public readonly nvim: Neovim$/;"	p	class:Workspace
nvim	.vim/plugged/nvim-yarp/pythonx/yarp.py	/^        nvim = attach('tcp', address=serveraddr, port=port)$/;"	v
nvim	.vim/plugged/nvim-yarp/pythonx/yarp.py	/^nvim = None$/;"	v
nvim_buf_add_highlight	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_add_highlight(buf, src_id, *args):$/;"	f
nvim_buf_clear_highlight	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_clear_highlight(*args):$/;"	f
nvim_buf_get_lines	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_get_lines(buffer, start, end, *args):$/;"	f
nvim_buf_get_name	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_get_name(buffer):$/;"	f
nvim_buf_get_number	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_get_number(buf):$/;"	f
nvim_buf_get_option	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_get_option(buf, name):$/;"	f
nvim_buf_get_var	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_get_var(buffer, name):$/;"	f
nvim_buf_line_count	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_line_count(buffer):$/;"	f
nvim_buf_set_lines	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_set_lines(buffer, start, end, err, lines):$/;"	f
nvim_buf_set_option	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_set_option(buf, name, val):$/;"	f
nvim_buf_set_var	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_buf_set_var(buffer, name, val):$/;"	f
nvim_call_function	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_call_function(method, args):$/;"	f
nvim_command	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_command(cmd):$/;"	f
nvim_err_write	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_err_write(s):$/;"	f
nvim_eval	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_eval(expr):$/;"	f
nvim_get_current_buf	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_get_current_buf():$/;"	f
nvim_get_current_win	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_get_current_win():$/;"	f
nvim_get_option	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_get_option(name):$/;"	f
nvim_get_var	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_get_var(name):$/;"	f
nvim_get_vvar	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_get_vvar(name):$/;"	f
nvim_list_bufs	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_list_bufs():$/;"	f
nvim_out_write	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_out_write(s):$/;"	f
nvim_set_option	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_set_option(name, val):$/;"	f
nvim_set_var	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_set_var(name, val):$/;"	f
nvim_win_get_buf	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_buf(window):$/;"	f
nvim_win_get_cursor	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_cursor(window):$/;"	f
nvim_win_get_height	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_height(window):$/;"	f
nvim_win_get_number	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_number(window):$/;"	f
nvim_win_get_option	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_option(window, name):$/;"	f
nvim_win_get_position	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_position(window):$/;"	f
nvim_win_get_var	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_var(window, name):$/;"	f
nvim_win_get_width	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_get_width(window):$/;"	f
nvim_win_is_valid	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_is_valid(window):$/;"	f
nvim_win_set_height	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_set_height(window, height):$/;"	f
nvim_win_set_option	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_set_option(window, name, val):$/;"	f
nvim_win_set_var	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_set_var(window, name, val):$/;"	f
nvim_win_set_width	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_methods.py	/^def nvim_win_set_width(window, width):$/;"	f
o	.config/nvim/autoload/plug.vim	/^      nmap <buffer> o <plug>(plug-preview)$/;"	m
o	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> o$/;"	m
o	.config/nvim/plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnP/;"	f	function:__webpack_require__
o	.config/nvim/plugged/vim-textobj-user/t/plugin.vim	/^    let o = '<Plug>(textobj-fruit)'$/;"	v
o	.config/nvim/plugged/vim-textobj-user/t/plugin.vim	/^    let o = '<Plug>(textobj-fruit-apple)'$/;"	v
o	.config/nvim/plugged/vim-textobj-user/t/plugin.vim	/^    let o = '<Plug>(textobj-fruit-apple-n)'$/;"	v
o	.config/nvim/plugged/vim-textobj-user/t/plugin.vim	/^    let o = '<Plug>(textobj-fruit-apple-p)'$/;"	v
o	.config/nvim/plugged/vim-textobj-user/t/plugin.vim	/^    let o = '<Plug>(textobj-fruit-banana-a)'$/;"	v
o	.config/nvim/plugged/vim-textobj-user/t/plugin.vim	/^    let o = '<Plug>(textobj-fruit-banana-i)'$/;"	v
o	.vim/autoload/plug.vim	/^      nmap <buffer> o <plug>(plug-preview)$/;"	m
o	.vim/plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnP/;"	f	function:__webpack_require__
o	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let o = config.get<number>('bar')$/;"	v
o	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let o = configurations.configuration.workspace.contents$/;"	v
o	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let o = configurations.defaults.contents$/;"	v
o	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let o = { 'x.y': 'foo' }$/;"	v
o	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^      for (let o of colorRanges) {$/;"	v
o	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let o: SymbolInfo = {$/;"	v
o	.vim/plugged/coc.nvim/src/model/document.ts	/^    let o = (await nvim.call('coc#util#get_content', id)) as any$/;"	v
o	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^    for (let o of this.providers) {$/;"	v
o	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  o = 111,$/;"	e	enum:CharCode
obj	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    obj = (0, 3)$/;"	v	class:MovePosition_DelSameLine1
obj	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    obj = (0, 3)$/;"	v	class:MovePosition_InsSameLine1
obj	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    obj = (0, 9)$/;"	v	class:MovePosition_DelSameLine
obj	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    obj = (0, 9)$/;"	v	class:MovePosition_InsSameLine2
obj	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    obj = (1, 0)$/;"	v	class:MovePosition_DelSecondLine
obj	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    obj = (1, 3)$/;"	v	class:MovePosition_DelSecondLine1
obj	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let [, obj] = parseConfiguration(JSON.stringify(schema))$/;"	v
obj	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^      let obj = bser.loadFromBuffer(data)$/;"	v
obj	.vim/plugged/coc.nvim/src/extensions.ts	/^      let obj = loadJson(file)$/;"	v
obj	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let obj = this.highlighters.get(bufnr)$/;"	v
obj	.vim/plugged/coc.nvim/src/languages.ts	/^          obj.abbr = `${obj.abbr} - ${detail}`$/;"	v
obj	.vim/plugged/coc.nvim/src/languages.ts	/^          obj.menu = `${detail} ${obj.menu}`$/;"	v
obj	.vim/plugged/coc.nvim/src/languages.ts	/^      let fields = [item.detail || '', obj.abbr, obj.word]$/;"	v
obj	.vim/plugged/coc.nvim/src/languages.ts	/^      obj.info = typeof item.documentation == 'string' ? item.documentation : item.documentation/;"	v
obj	.vim/plugged/coc.nvim/src/languages.ts	/^    let obj: VimCompleteItem = {$/;"	v
obj	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let obj: ListItem = Object.assign({ resolved: true }, item)$/;"	v
objectLiteral	.vim/plugged/coc.nvim/src/util/is.ts	/^export function objectLiteral(obj: any): obj is object {$/;"	f
objectProto	.vim/plugged/coc.nvim/src/util/lodash.ts	/^const objectProto = Object.prototype$/;"	C
objs	.vim/plugged/coc.nvim/src/__tests__/modules/array.test.ts	/^    let objs: { [key: string]: number[] }[] = [{ x: [1, 2] }, { y: [3, 4] }, { z: [5, 6] }]$/;"	v
ocaml lists	.config/nvim/plugged/sideways.vim/spec/plugin/ocaml_spec.rb	/^describe "ocaml lists" do$/;"	d
off	.config/nvim/plugged/oceanic-next/test/test.js	/^  off(e, fn) {$/;"	m	class:SoundCloudAudio
offset	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^jQuery.fn.offset = function() {$/;"	f	function:jQuery.fn
offset	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let offset = await workspace.getOffset()$/;"	v
offset	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let offset = 0$/;"	v
offset	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^      const offset = snippet.offset(p)$/;"	C
offset	.vim/plugged/coc.nvim/src/types.ts	/^  offset: number$/;"	p	interface:ChangeItem
offset	.vim/plugged/fzf/src/ansi.go	/^	offset [2]int32$/;"	m	struct:fzf.ansiOffset	typeref:typename:[2]int32
offset	.vim/plugged/fzf/src/result.go	/^	offset [2]int32$/;"	m	struct:fzf.colorOffset	typeref:typename:[2]int32
offset	.vim/plugged/fzf/src/terminal.go	/^	offset     int$/;"	m	struct:fzf.Terminal	typeref:typename:int
offset	.vim/plugged/fzf/src/terminal.go	/^	offset  int$/;"	m	struct:fzf.previewer	typeref:typename:int
offsetChild	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		    offsetChild  = elem,$/;"	v
offsetParent	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		    offsetParent = elem.offsetParent,$/;"	v
offsetPollTries	.vim/plugged/fzf/src/tui/light.go	/^	offsetPollTries = 10$/;"	c	package:tui
offsetRegexp	.vim/plugged/fzf/src/tui/light.go	/^var offsetRegexp *regexp.Regexp = regexp.MustCompile("(.*)\\x1b\\\\[([0-9]+);([0-9]+)R")$/;"	v	package:tui	typeref:typename:*regexp.Regexp
old	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let old = workspace.getDocument(uri)$/;"	v
old	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let old = newLabel$/;"	v
oldCompile	.vim/plugged/coc.nvim/src/util/factory.ts	/^    const oldCompile = Module.prototype._compile$/;"	C	function:createSandbox
oldPath	.vim/plugged/coc.nvim/src/workspace.ts	/^    let oldPath = URI.parse(doc.uri).fsPath$/;"	v
oldSource	.vim/plugged/coc.nvim/src/completion/complete.ts	/^      let oldSource = this.tokenSources.get(source.name)$/;"	v
oldState	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  oldState: State$/;"	p	interface:StateChangeEvent
oldState	.vim/plugged/coc.nvim/src/services.ts	/^      let { oldState, newState } = changeEvent$/;"	v
oldStr	.vim/plugged/coc.nvim/src/services.ts	/^      let oldStr = stateString(oldState)$/;"	v
oldUri	.vim/plugged/coc.nvim/src/types.ts	/^  oldUri: URI$/;"	p	interface:RenameEvent
old_result	.config/nvim/plugged/vim-textobj-user/t/old-property-names.vim	/^    let old_result = @0$/;"	v
omit	.vim/plugged/coc.nvim/src/util/lodash.ts	/^export function omit<T>(obj: T, properties: string[]): T {$/;"	f
ommand	.vim/plugged/coc.nvim/src/list/worker.ts	/^        nvim.command('redraws', true)$/;"	v
omnisharp-manager PowerShell script	.vim/plugged/omnisharp-vim/installer/README.md	/^## omnisharp-manager PowerShell script$/;"	s
omnisharp_commands	.vim/.vimrc	/^augroup omnisharp_commands$/;"	a
omnisharpdir	.vim/plugged/omnisharp-vim/test/vimrc	/^let omnisharpdir = expand("\\<sfile>:h:h")$/;"	v
on	.config/nvim/plugged/oceanic-next/test/test.js	/^  on(e, fn) {$/;"	m	class:SoundCloudAudio
on	.vim/plugged/coc.nvim/src/types.ts	/^  on(event: 'data', callback: (item: ListItem) => void): void$/;"	m	interface:ListTask
on	.vim/plugged/coc.nvim/src/types.ts	/^  on(event: 'end', callback: () => void): void$/;"	m	interface:ListTask
on	.vim/plugged/coc.nvim/src/types.ts	/^  on(event: 'error', callback: (msg: string | Error) => void): void$/;"	m	interface:ListTask
onChange	.vim/plugged/coc.nvim/src/workspace.ts	/^    const onChange = async (bufnr: number) => {$/;"	C
onCompleteDone	.vim/plugged/coc.nvim/src/model/source-vim.ts	/^  public async onCompleteDone(item: VimCompleteItem, opt: CompleteOption): Promise<void> {$/;"	m	class:VimSource
onCompleteDone	.vim/plugged/coc.nvim/src/model/source.ts	/^  public async onCompleteDone(item: VimCompleteItem, opt: CompleteOption): Promise<void> {$/;"	m	class:Source
onCompleteDone	.vim/plugged/coc.nvim/src/types.ts	/^  onCompleteDone?(item: VimCompleteItem, opt: CompleteOption): ProviderResult<void>$/;"	m	interface:ISource
onCompleteResolve	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^      onCompleteResolve: item => {$/;"	v
onCompleteResolve	.vim/plugged/coc.nvim/src/types.ts	/^  onCompleteResolve?(item: VimCompleteItem, token: CancellationToken): ProviderResult<void> | vo/;"	m	interface:ISource
onCursorMoved	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let onCursorMoved = debounce(this.onCursorMoved.bind(this), 100)$/;"	v
onDiagnostics	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  onDiagnostics(handler: NotificationHandler<PublishDiagnosticsParams>): void$/;"	m	interface:IConnection
onDidChange	.vim/plugged/coc.nvim/src/provider/index.ts	/^  onDidChange?: Event<URI>$/;"	p	interface:TextDocumentContentProvider
onDidChangeConfiguration	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  private onDidChangeConfiguration(): void {$/;"	m	class:SettingMonitor
onDidChangeConfiguration	.vim/plugged/coc.nvim/src/types.ts	/^  onDidChangeConfiguration: Event<ConfigurationChangeEvent>$/;"	p	interface:IWorkspace
onDidChangeState	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public get onDidChangeState(): Event<StateChangeEvent> {$/;"	m	class:BaseLanguageClient
onDidChangeTextDocument	.vim/plugged/coc.nvim/src/types.ts	/^  onDidChangeTextDocument: Event<DidChangeTextDocumentParams>$/;"	p	interface:IWorkspace
onDidCloseTextDocument	.vim/plugged/coc.nvim/src/types.ts	/^  onDidCloseTextDocument: Event<TextDocument>$/;"	p	interface:IWorkspace
onDidOpenTextDocument	.vim/plugged/coc.nvim/src/types.ts	/^  onDidOpenTextDocument: Event<TextDocument>$/;"	p	interface:IWorkspace
onDidSaveTextDocument	.vim/plugged/coc.nvim/src/types.ts	/^  onDidSaveTextDocument: Event<TextDocument>$/;"	p	interface:IWorkspace
onDidServiceReady	.vim/plugged/coc.nvim/src/services.ts	/^        onDidServiceReady.dispose()$/;"	v
onDidServiceReady	.vim/plugged/coc.nvim/src/services.ts	/^    let onDidServiceReady = new Emitter<void>()$/;"	v
onDidWorkspaceInitialized	.vim/plugged/coc.nvim/src/types.ts	/^  onDidWorkspaceInitialized: Event<void>$/;"	p	interface:IWorkspace
onEnter	.vim/plugged/coc.nvim/src/__tests__/modules/sources.test.ts	/^      onEnter: fn$/;"	v
onEnter	.vim/plugged/coc.nvim/src/model/source-vim.ts	/^  public onEnter(bufnr: number): void {$/;"	m	class:VimSource
onEnter	.vim/plugged/coc.nvim/src/types.ts	/^  onEnter?(bufnr: number): void$/;"	m	interface:ISource
onFinished	.vim/plugged/coc.nvim/src/completion/complete.ts	/^        let onFinished = () => {$/;"	v
onLogMessage	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  onLogMessage(handle: NotificationHandler<LogMessageParams>): void$/;"	m	interface:IConnection
onNotification	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  onNotification($/;"	m	interface:IConnection
onNotification	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  onNotification(method: string, handler: GenericNotificationHandler): void$/;"	m	interface:IConnection
onNotification	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  onNotification<P, RO>($/;"	m	interface:IConnection
onNotification	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  onNotification<RO>($/;"	m	interface:IConnection
onNotification	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public onNotification<RO>(type: NotificationType0<RO>, handler: NotificationHandler0): void$/;"	m	class:BaseLanguageClient
onRequest	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  onRequest<P, R, E, RO>($/;"	m	interface:IConnection
onRequest	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  onRequest<R, E, RO>($/;"	m	interface:IConnection
onRequest	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  onRequest<R, E>($/;"	m	interface:IConnection
onRequest	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  onRequest<R, E>(method: string, handler: GenericRequestHandler<R, E>): void$/;"	m	interface:IConnection
onRequest	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public onRequest<R, E, RO>($/;"	m	class:BaseLanguageClient
onServiceReady	.vim/plugged/coc.nvim/src/services.ts	/^      onServiceReady: onDidServiceReady.event,$/;"	v
onServiceReady	.vim/plugged/coc.nvim/src/types.ts	/^  onServiceReady: Event<void>$/;"	p	interface:IServiceProvider
onShowMessage	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  onShowMessage(handler: NotificationHandler<ShowMessageParams>): void$/;"	m	interface:IConnection
onTelemetry	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  onTelemetry(handler: NotificationHandler<any>): void$/;"	m	interface:IConnection
onTypeFormatManager	.vim/plugged/coc.nvim/src/languages.ts	/^  private onTypeFormatManager = new OnTypeFormatManager()$/;"	p	class:Languages
onWillSaveTextDocument	.vim/plugged/coc.nvim/src/types.ts	/^  onWillSaveTextDocument: Event<TextDocumentWillSaveEvent>$/;"	p	interface:IWorkspace
onWillSaveUntil	.vim/plugged/coc.nvim/src/types.ts	/^  onWillSaveUntil(callback: (event: TextDocumentWillSaveEvent) => void, thisArg: any, clientId: /;"	m	interface:IWorkspace
on_close	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def on_close(self, context):$/;"	m	class:Child
on_close	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def on_close(self, context):$/;"	m	class:_Parent
on_close	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^    def on_close(self, context):$/;"	m	class:Source
on_close	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^    def on_close(self, context):$/;"	m	class:Source
on_close	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def on_close(self, context):$/;"	m	class:Source
on_close	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def on_close(self, context):$/;"	m	class:Child
on_close	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def on_close(self, context):$/;"	m	class:_Parent
on_close	.vim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^    def on_close(self, context):$/;"	m	class:Source
on_close	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^    def on_close(self, context):$/;"	m	class:Source
on_close	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def on_close(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/column.py	/^    def on_init(self, context: Context) -> None:$/;"	m	class:Base
on_init	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/filename.py	/^    def on_init(self, context: Context) -> None:$/;"	m	class:Column
on_init	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/time.py	/^    def on_init(self, context: Context) -> None:$/;"	m	class:Column
on_init	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/type.py	/^    def on_init(self, context: Context) -> None:$/;"	m	class:Column
on_init	.config/nvim/plugged/defx.nvim/rplugin/python3/denite/source/defx/history.py	/^    def on_init(self, context: dict):$/;"	m	class:Source
on_init	.config/nvim/plugged/defx.nvim/rplugin/python3/denite/source/defx/session.py	/^    def on_init(self, context: dict):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def on_init(self, context):$/;"	m	class:Child
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def on_init(self, context):$/;"	m	class:_Parent
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/command.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/directory_rec.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/point.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/menu.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/outline.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/spell.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def on_init(self, context):$/;"	m	class:Child
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def on_init(self, context):$/;"	m	class:_Parent
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/command.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/directory_rec.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/point.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/menu.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/outline.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/spell.py	/^    def on_init(self, context):$/;"	m	class:Source
on_init	.vim/plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^    def on_init(self, context):$/;"	m	class:Source
on_notification	.vim/plugged/nvim-yarp/pythonx/yarp.py	/^def on_notification(method, args):$/;"	f
on_redraw	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/column.py	/^    def on_redraw(self, context: Context) -> None:$/;"	m	class:Base
on_request	.vim/plugged/nvim-yarp/pythonx/yarp.py	/^def on_request(method, args):$/;"	f
on_setup	.vim/plugged/nvim-yarp/pythonx/yarp.py	/^def on_setup():$/;"	f
one	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^						one = elem.type == "select-one";$/;"	v
one	.config/nvim/plugged/vim-ruby/spec/indent/basic_spec.rb	/^      def one$/;"	f
one	.config/nvim/plugged/vim-ruby/spec/indent/method_definitions_spec.rb	/^        def one(x)$/;"	f
one	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const [one, two, three] = snippet.placeholders$/;"	C
oneKeys	.vim/plugged/coc.nvim/src/util/object.ts	/^      oneKeys.push(key)$/;"	C	function:equals
oneKeys	.vim/plugged/coc.nvim/src/util/object.ts	/^    const oneKeys: string[] = []$/;"	C	function:equals
oneOf	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "oneOf": [$/;"	a	object:properties.languageserver.patternProperties.^[_a-zA-Z]+$
oneOf	.vim/plugged/coc.nvim/data/schema.json	/^          "oneOf": [$/;"	a	object:properties.languageserver.patternProperties.^[_a-zA-Z]+$
onreadystatechange	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var onreadystatechange = function(isTimeout){$/;"	f	function:AnonymousFunctiond47633f8a100
openFile	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def openFile(filename, line=0, column=0, noautocmd=0):$/;"	f
openResource	.vim/plugged/coc.nvim/src/types.ts	/^  openResource(uri: string): Promise<void>$/;"	m	interface:IWorkspace
openTtyIn	.vim/plugged/fzf/src/tui/light.go	/^func openTtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
open_ascii_file	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/compatibility.py	/^    def open_ascii_file(filename, mode):$/;"	f
open_tree	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def open_tree(self, path: Path, index: int, max_level: int = 0) -> None:$/;"	m	class:View
opened_candidates	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/session.py	/^    opened_candidates: typing.List[str] = []$/;"	v	class:Session
opera	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	opera: \/opera\/.test( userAgent ),$/;"	p	class:jQuery.browser
operator	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "operator": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
operator	.vim/plugged/coc.nvim/data/schema.json	/^        "operator": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
operator#user#_define	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^function! operator#user#_define(operator_keyseq, function_name, ...)$/;"	f
operator#user#_do_ex_command	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^function! operator#user#_do_ex_command(motion_wiseness)$/;"	f
operator#user#_set_ex_command	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^function! operator#user#_set_ex_command(ex_command)$/;"	f
operator#user#_set_up	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^function! operator#user#_set_up(operator_function_name)$/;"	f
operator#user#_sid_prefix	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^function! operator#user#_sid_prefix()$/;"	f
operator#user#define	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^function! operator#user#define(name, function_name, ...)  "{{{2$/;"	f
operator#user#define_ex_command	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^function! operator#user#define_ex_command(name, ex_command)  "{{{2$/;"	f
operator#user#register	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^function! operator#user#register()  "{{{2$/;"	f
operator#user#visual_command_from_wise_name	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^function! operator#user#visual_command_from_wise_name(wise_name)  "{{{2$/;"	f
opt	.config/nvim/plugged/gruvbox/package.json	/^    "opt": true$/;"	b	object:vim
opt	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def opt(self, option, default=None):  # pylint:disable=no-self-use$/;"	m	class:SnippetUtil
opt	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let opt = await nvim.getOption('iskeyword')$/;"	v
opt	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let opt = workspace.completeOpt$/;"	v
opt	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let opt = Object.assign({}, this.option)$/;"	v
opt	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let opt = Object.assign({}, this.option)$/;"	v
opt	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let name = opt.key ? opt.key : parts[parts.length - 1].replace(\/^-\/, '')$/;"	v
opt	.vim/plugged/coc.nvim/src/list/basic.ts	/^      for (let opt of this.options) {$/;"	v
opt	.vim/plugged/coc.nvim/src/list/manager.ts	/^      for ( let opt of list.options ) {$/;"	v
opt	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    for (let opt of this.options) {$/;"	v
optString	.vim/plugged/fzf/src/options.go	/^func optString(arg string, prefixes ...string) (bool, string) {$/;"	f	package:fzf	typeref:typename:(bool, string)
option	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^						var option = options[ i ];$/;"	v
option	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let option: CompleteOption = await nvim.call('coc#util#get_complete_option')$/;"	v
option	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let option = await this.nvim.call('coc#util#get_complete_option')$/;"	v
option	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let option: CompleteOption = await this.nvim.call('coc#util#get_complete_option')$/;"	v
option	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { option } = this$/;"	v
option	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { option, activted } = this$/;"	v
option	.vim/plugged/coc.nvim/src/completion/index.ts	/^    return option ? option.bufnr : null$/;"	v
option	.vim/plugged/coc.nvim/src/languages.ts	/^        let context: CompletionContext = { triggerKind, option: opt }$/;"	v
option	.vim/plugged/coc.nvim/src/languages.ts	/^        let option: CompleteOption = Object.assign({}, opt)$/;"	v
option	.vim/plugged/coc.nvim/src/types.ts	/^  option?: CompleteOption$/;"	p	interface:CompletionContext
option_set_to	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def option_set_to(name, new_value):$/;"	f
optional	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^        let { optional, required } = obj[1]$/;"	v
optionalFns	.vim/plugged/coc.nvim/src/model/source.ts	/^  public get optionalFns(): string[] {$/;"	m	class:Source
optionalFns	.vim/plugged/coc.nvim/src/types.ts	/^  optionalFns?: string[]$/;"	p	interface:SourceConfig
optionalNextString	.vim/plugged/fzf/src/options.go	/^func optionalNextString(args []string, i *int) string {$/;"	f	package:fzf	typeref:typename:string
optionalNumeric	.vim/plugged/fzf/src/options.go	/^func optionalNumeric(args []string, i *int) int {$/;"	f	package:fzf	typeref:typename:int
optionalRunes	.vim/plugged/fzf/src/util/chars.go	/^func (chars *Chars) optionalRunes() []rune {$/;"	f	struct:util.Chars	typeref:typename:[]rune
options	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^						options = elem.options,$/;"	v
options	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var options = name;$/;"	v
options	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	var target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, options;$/;"	v
options	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^      debug: { module: serverModule, transport: lsclient.TransportKind.ipc, options: { execArgv:/;"	v
options	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^  public options: ListArgument[] = [{$/;"	v
options	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let options = await workspace.getFormatOptions(document.uri)$/;"	v
options	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        const options = registration.registerOptions || {}$/;"	C
options	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  options?: ForkOptions$/;"	p	interface:NodeModule
options	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  options?: SpawnOptions$/;"	p	interface:Executable
options	.vim/plugged/coc.nvim/src/languages.ts	/^          let options = await workspace.getFormatOptions(event.document.uri)$/;"	v
options	.vim/plugged/coc.nvim/src/list/manager.ts	/^        options.push( opt.slice( 2 ) )$/;"	C
options	.vim/plugged/coc.nvim/src/list/manager.ts	/^      options: {$/;"	C
options	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let options: string[] = []$/;"	C
options	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { list, options, listArgs } = res$/;"	C
options	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public parseArgs( args: string[] ): { list: IList, options: ListOptions, listOptions: string[]/;"	C
options	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^  public options: ListArgument[] = [{$/;"	p	class:ActionsList
options	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public readonly options: Text[] = []$/;"	p	class:Choice
options	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^        let { options } = p.choice$/;"	v
options	.vim/plugged/coc.nvim/src/types.ts	/^  options: ListOptions$/;"	p	interface:ListContext
options	.vim/plugged/coc.nvim/src/types.ts	/^  options?: ListArgument[]$/;"	p	interface:IList
opts	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let opts = manager.listOptions$/;"	v
opts	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let opts = await workspace.getFormatOptions()$/;"	v
opts	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let opts = await workspace.getFormatOptions(doc.uri)$/;"	v
opts	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let opts = await workspace.getFormatOptions(uri)$/;"	v
opts	.vim/plugged/coc.nvim/src/handler/index.ts	/^            let opts = await workspace.getFormatOptions(doc.uri)$/;"	v
opts	.vim/plugged/coc.nvim/src/model/document.ts	/^    let opts: BufferOption = await nvim.call('coc#util#get_bufoptions', buffer.id)$/;"	v
opts	.vim/plugged/coc.nvim/src/services.ts	/^      let opts = getLanguageServerOptions(id, key, config)$/;"	v
opts.sink	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! opts.sink(lines)$/;"	f
opts.sink	.vim/plugged/fzf/plugin/fzf.vim	/^    function! opts.sink(lines) abort$/;"	f
optsFor	.vim/plugged/fzf/src/options_test.go	/^func optsFor(words ...string) *Options {$/;"	f	package:fzf	typeref:typename:*Options
orig	.vim/plugged/coc.nvim/src/model/document.ts	/^    let orig = this.lines.join('\\n') + (this.eol ? '\\n' : '')$/;"	v
origLine	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let origLine = doc.getline(position.line)$/;"	v
origState	.vim/plugged/fzf/src/tui/light.go	/^	origState     *terminal.State$/;"	m	struct:tui.LightRenderer	typeref:typename:*terminal.State
origText	.vim/plugged/fzf/src/item.go	/^	origText    *[]byte       \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]byte
origin	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        let origin = CursorPos()$/;"	v
origin	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) origin() {$/;"	f	struct:tui.LightRenderer
originalEvent	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		event = { originalEvent: originalEvent };$/;"	p	class:event
originalEvent	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var originalEvent = event;$/;"	v
other	.config/nvim/plugged/tagalong.vim/spec/plugin/filetype_support_spec.rb	/^  describe "other" do$/;"	d
other	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^      [other, [diagnostic]],$/;"	v
other	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^    let other = 'file:\/\/\/2'$/;"	v
other	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^    let other = await Watchman.createClient(null, '\/tmp')$/;"	v
other	.vim/plugged/coc.nvim/src/configuration/model.ts	/^    for (const other of others) {$/;"	C
otherKeys	.vim/plugged/coc.nvim/src/util/object.ts	/^      otherKeys.push(key)$/;"	C	function:equals
otherKeys	.vim/plugged/coc.nvim/src/util/object.ts	/^    const otherKeys: string[] = []$/;"	C	function:equals
outDir	.vim/plugged/coc.nvim/tsconfig.json	/^    "outDir": "lib",$/;"	s	object:compilerOptions
outdated	.vim/plugged/coc.nvim/src/extensions.ts	/^    let outdated: string[] = []$/;"	v
output	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    output = ''$/;"	v	class:VimTestCase
output	.vim/plugged/coc.nvim/webpack.config.js	/^  output: {$/;"	c	class:module.exports
output	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) output() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
outputChannel	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public get outputChannel(): OutputChannel {$/;"	m	class:BaseLanguageClient
outputChannelName	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  outputChannelName: string$/;"	p	interface:ResolvedClientOptions
output_files	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/scantree.py	/^def output_files():$/;"	f
output_files	.vim/plugged/denite.nvim/rplugin/python3/denite/scantree.py	/^def output_files():$/;"	f
output_lines	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/scantree.py	/^def output_lines(lines):$/;"	f
output_lines	.vim/plugged/denite.nvim/rplugin/python3/denite/scantree.py	/^def output_lines(lines):$/;"	f
overflow	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) overflow(runes []rune, max int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
overflow32	.vim/plugged/fzf/src/util/chars.go	/^	overflow32 uint32 = 0x80808080$/;"	c	package:util	typeref:typename:uint32
overflow64	.vim/plugged/fzf/src/util/chars.go	/^	overflow64 uint64 = 0x8080808080808080$/;"	c	package:util	typeref:typename:uint64
override	.vim/plugged/fzf/src/history.go	/^func (h *History) override(str string) {$/;"	f	struct:fzf.History
overwrite	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def overwrite(self, buf, gtext):$/;"	m	class:TextObject
overwrite	.vim/plugged/coc.nvim/src/workspace.ts	/^        let overwrite = await this.showPrompt(`${newPath} exists, overwrite?`)$/;"	v
overwrite	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { overwrite, ignoreIfExists } = opts$/;"	v
overwrite_with_initial_text	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def overwrite_with_initial_text(self, buf):$/;"	m	class:TextObject
p	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> p    denite#do_map('do_action', 'preview')$/;"	m
p	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> p$/;"	m
p	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def p(self):$/;"	m	class:SnippetUtil
p	.config/nvim/plugged/vista.vim/ftplugin/vista.vim	/^nnoremap <buffer> <silent> p     :<c-u>call vista#cursor#TogglePreview()<CR>$/;"	m
p	.config/nvim/plugged/vista.vim/ftplugin/vista_kind.vim	/^nnoremap <buffer> <silent> p    :<c-u>call vista#cursor#TogglePreview()<CR>$/;"	m
p	.vim/plugged/coc.nvim/src/__tests__/client/delayer.test.ts	/^  const p = Promise.all(promises).then(() => {$/;"	C
p	.vim/plugged/coc.nvim/src/__tests__/client/delayer.test.ts	/^  const p = delayer.trigger(factory).then(() => {$/;"	C
p	.vim/plugged/coc.nvim/src/__tests__/client/delayer.test.ts	/^  const p = delayer.trigger(factory).then((result) => {$/;"	C
p	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let p = manager.start(['--normal', 'test'])$/;"	v
p	.vim/plugged/coc.nvim/src/__tests__/modules/colors.test.ts	/^    let p = colors.pickPresentation()$/;"	v
p	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let p = ext.extension.extensionPath$/;"	v
p	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let p: string = await extensions.call('test', 'asAbsolutePath', ['..'])$/;"	v
p	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let p = Position.create(0, 0)$/;"	v
p	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let p = workspace.ready$/;"	v
p	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let p = workspace.renameCurrent()$/;"	v
p	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let p = workspace.requestInput('name')$/;"	v
p	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let p = workspace.showPrompt('prompt')$/;"	v
p	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let p = workspace.showQuickpick(['a', 'b'])$/;"	v
p	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^      const p = new SnippetParser()$/;"	C	function:assertMarker
p	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const p = new SnippetParser()$/;"	C
p	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const p = new SnippetParser()$/;"	C	function:assertText
p	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let p = snippet.placeholders[0]$/;"	v
p	.vim/plugged/coc.nvim/src/extensions.ts	/^          for (let p of paths) {$/;"	v
p	.vim/plugged/coc.nvim/src/list/basic.ts	/^        for (let p of parts) {$/;"	v
p	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        let newText = p.transform ? p.transform.resolve(val) : val$/;"	v
p	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    for (let p of nested.placeholders) {$/;"	v
p	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    for (let p of this.placeholders) {$/;"	v
p	.vim/plugged/coc.nvim/src/snippets/session.ts	/^        let p = this.snippet.getPlaceholder(index)$/;"	v
p	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^      for (let p of this._placeholders) {$/;"	v
p	.vim/plugged/coc.nvim/src/sources.ts	/^          for (let p of paths) {$/;"	v
p	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  p = 112,$/;"	e	enum:CharCode
p	.vim/plugged/ghost-text.vim/python3/ghost_log.py	/^def p(*args):$/;"	f
p1	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const [, p1, , p2] = new SnippetParser().parse('errorContext: `${1:err}`, error:$1').childre/;"	C
p2	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const [, p1, , p2] = new SnippetParser().parse('errorContext: `${1:err}`, error:$1').childre/;"	C
p2	.vim/plugged/ghost-text.vim/python3/ghost_log.py	/^def p2(*args):$/;"	f
p3	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const [, p3, , p4] = new SnippetParser().parse('errorContext: `${1:err}`, error:${1\/err\/ok/;"	C
p4	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const [, p3, , p4] = new SnippetParser().parse('errorContext: `${1:err}`, error:${1\/err\/ok/;"	C
packageJSON	.vim/plugged/coc.nvim/src/extensions.ts	/^      let packageJSON = JSON.parse(content)$/;"	v
packageJSON	.vim/plugged/coc.nvim/src/extensions.ts	/^      let { id, packageJSON } = item.extension$/;"	v
packageJSON	.vim/plugged/coc.nvim/src/extensions.ts	/^    let packageJSON = JSON.parse(content)$/;"	v
packageJSON	.vim/plugged/coc.nvim/src/extensions.ts	/^    let packageJSON = {$/;"	v
packageJSON	.vim/plugged/coc.nvim/src/extensions.ts	/^    let { id, packageJSON } = extension$/;"	v
packageJSON	.vim/plugged/coc.nvim/src/sources.ts	/^        packageJSON,$/;"	v
packageJSON	.vim/plugged/coc.nvim/src/sources.ts	/^      let packageJSON = {$/;"	v
packageJSON	.vim/plugged/coc.nvim/src/types.ts	/^  readonly packageJSON: any$/;"	p	interface:Extension
pad	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^function pad(str: string): string {$/;"	f
padding	.vim/plugged/coc.nvim/src/types.ts	/^  padding?: [number, number, number, number]$/;"	p	interface:PopupOptions
pairs	.vim/plugged/coc.nvim/src/handler/index.ts	/^const pairs: Map<string, string> = new Map([$/;"	C
parallel	.vim/plugged/coc.nvim/src/list/basic.ts	/^  parallel?: boolean$/;"	p	interface:ActionOptions
parallel	.vim/plugged/coc.nvim/src/types.ts	/^  parallel?: boolean$/;"	p	interface:ListAction
paramDoc	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let paramDoc: string | MarkupContent = null$/;"	v
params	.vim/plugged/coc.nvim/src/__tests__/client/converter.test.ts	/^    let params = cv.asCompletionParams(createDocument(), Position.create(0, 0), { triggerKind: C/;"	v
params	.vim/plugged/coc.nvim/src/__tests__/client/converter.test.ts	/^    let params = cv.asReferenceParams(createDocument(), Position.create(0, 0), { includeDeclarat/;"	v
params	.vim/plugged/coc.nvim/src/__tests__/client/converter.test.ts	/^    let params = cv.asTextDocumentPositionParams(createDocument(), Position.create(0, 0))$/;"	v
params	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let params: ExecuteCommandParams = {$/;"	v
params	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^          let params: ExecuteCommandParams = {$/;"	v
parent	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var parent       = elem.parentNode,$/;"	v
parent	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const { parent } = child$/;"	C
parent	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let { parent } = placeholder$/;"	v
parent	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let { parent } = this$/;"	v
parent	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public parent: Marker$/;"	p	class:Marker
parentDirs	.vim/plugged/coc.nvim/src/util/fs.ts	/^export function parentDirs(pth: string): string[] {$/;"	f
parent_path	.vim/plugged/ghost-text.vim/python3/test/test_channel_server.py	/^parent_path = os.path.abspath(os.path.join(dir_path, '..'))$/;"	v
parent_path	.vim/plugged/ghost-text.vim/python3/test/test_http_server.py	/^parent_path = os.path.abspath(os.path.join(dir_path, '..'))$/;"	v
parent_path	.vim/plugged/ghost-text.vim/python3/test/test_server_thread.py	/^parent_path = os.path.abspath(os.path.join(dir_path, '..'))$/;"	v
parent_path	.vim/plugged/ghost-text.vim/python3/test/test_websocket_server.py	/^parent_path = os.path.abspath(os.path.join(dir_path, '..'))$/;"	v
parseAlgo	.vim/plugged/fzf/src/options.go	/^func parseAlgo(str string) algo.Algo {$/;"	f	package:fzf	typeref:typename:algo.Algo
parseArgs	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public parseArgs( args: string[] ): { list: IList, options: ListOptions, listOptions: string[]/;"	C
parseConfiguration	.vim/plugged/coc.nvim/src/configuration/util.ts	/^export function parseConfiguration(content: string): [ParseError[], any] {$/;"	f
parseContentFromFile	.vim/plugged/coc.nvim/src/configuration/util.ts	/^export function parseContentFromFile(filepath: string | null, onError?: ShowError): IConfigurati/;"	f
parseHeight	.vim/plugged/fzf/src/options.go	/^func parseHeight(str string) sizeSpec {$/;"	f	package:fzf	typeref:typename:sizeSpec
parseKeyChords	.vim/plugged/fzf/src/options.go	/^func parseKeyChords(str string, message string) map[int]string {$/;"	f	package:fzf	typeref:typename:map[int]string
parseKeymap	.vim/plugged/fzf/src/options.go	/^func parseKeymap(keymap map[int][]action, str string) {$/;"	f	package:fzf
parseLayout	.vim/plugged/fzf/src/options.go	/^func parseLayout(str string) layoutType {$/;"	f	package:fzf	typeref:typename:layoutType
parseMargin	.vim/plugged/fzf/src/options.go	/^func parseMargin(margin string) [4]sizeSpec {$/;"	f	package:fzf	typeref:typename:[4]sizeSpec
parseOptions	.vim/plugged/fzf/src/options.go	/^func parseOptions(opts *Options, allArgs []string) {$/;"	f	package:fzf
parsePlaceholder	.vim/plugged/fzf/src/terminal.go	/^func parsePlaceholder(match string) (bool, string, placeholderFlags) {$/;"	f	package:fzf	typeref:typename:(bool, string, placeholderFlags)
parsePreviewWindow	.vim/plugged/fzf/src/options.go	/^func parsePreviewWindow(opts *previewOpts, input string) {$/;"	f	package:fzf
parseSize	.vim/plugged/fzf/src/options.go	/^func parseSize(str string, maxPercent float64, label string) sizeSpec {$/;"	f	package:fzf	typeref:typename:sizeSpec
parseTerms	.vim/plugged/fzf/src/pattern.go	/^func parseTerms(fuzzy bool, caseMode Case, normalize bool, str string) []termSet {$/;"	f	package:fzf	typeref:typename:[]termSet
parseTheme	.vim/plugged/fzf/src/options.go	/^func parseTheme(defaultTheme *tui.ColorTheme, str string) *tui.ColorTheme {$/;"	f	package:fzf	typeref:typename:*tui.ColorTheme
parseTiebreak	.vim/plugged/fzf/src/options.go	/^func parseTiebreak(str string) []criterion {$/;"	f	package:fzf	typeref:typename:[]criterion
parseToggleSort	.vim/plugged/fzf/src/options.go	/^func parseToggleSort(keymap map[int][]action, str string) {$/;"	f	package:fzf
parse_and_instantiate	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/snipmate.py	/^def parse_and_instantiate(parent_to, text, indent):$/;"	f
parse_and_instantiate	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/ulti_snips.py	/^def parse_and_instantiate(parent_to, text, indent):$/;"	f
parse_arg	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^    def parse_arg(arg):$/;"	f	function:parse_command	file:
parse_arg	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^    def parse_arg(arg):$/;"	f	function:parse_command	file:
parse_args	.config/nvim/plugged/ultisnips/test_all.py	/^    def parse_args():$/;"	f
parse_command	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def parse_command(array, **kwargs):$/;"	f
parse_command	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def parse_command(array, **kwargs):$/;"	f
parse_command_for_scantree	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^    def parse_command_for_scantree(self, cmd):$/;"	m	class:Source
parse_command_for_scantree	.vim/plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^    def parse_command_for_scantree(self, cmd):$/;"	m	class:Source
parse_content	.config/nvim/plugged/ultisnips/utils/get_tm_snippets.py	/^def parse_content(c):$/;"	f
parse_jump_line	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def parse_jump_line(path_head, line):$/;"	f
parse_jump_line	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def parse_jump_line(path_head, line):$/;"	f
parse_tagline	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def parse_tagline(line, tagpath):$/;"	f
parse_tagline	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def parse_tagline(line, tagpath):$/;"	f
parser	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    let parser = new Snippets.SnippetParser()$/;"	v
part	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let part = line.slice(idx - line.length)$/;"	v
part	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let part = document.getline(position.line).slice(0, position.character)$/;"	v
part	.vim/plugged/coc.nvim/src/model/document.ts	/^        for (let part of parts) {$/;"	v
part	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^          let part = str.slice(doc.active[0], doc.active[1])$/;"	v
part	.vim/plugged/coc.nvim/src/source/file.ts	/^  part: string$/;"	p	interface:PathOption
part	.vim/plugged/coc.nvim/src/util/complete.ts	/^  let part = byteSlice(line, 0, colnr - 1)$/;"	C
partialResult	.vim/plugged/fzf/src/matcher.go	/^type partialResult struct {$/;"	s	package:fzf
partitions	.vim/plugged/fzf/src/matcher.go	/^	partitions     int$/;"	m	struct:fzf.Matcher	typeref:typename:int
parts	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var parts = key.split(".");$/;"	v
parts	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    const parts = key.split('.')$/;"	C	function:lookUp
parts	.vim/plugged/coc.nvim/src/extensions.ts	/^      let parts = eventName.split(':')$/;"	v
parts	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let name = opt.key ? opt.key : parts[parts.length - 1].replace(\/^-\/, '')$/;"	v
parts	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let parts = opt.name.split(\/,\\s*\/g).map(s => s.replace(\/\\s+.*\/g, ''))$/;"	v
parts	.vim/plugged/coc.nvim/src/model/document.ts	/^        let parts = word.split('-')$/;"	v
parts	.vim/plugged/coc.nvim/src/util/fs.ts	/^  const parts = dir.slice(root.length).split(path.sep)$/;"	C	function:parentDirs
passKeys	vimium-options.json	/^      "passKeys": ""$/;"	s	object:exclusionRules.0
paste	.vim/plugged/fzf/test/test_go.rb	/^  def paste(str)$/;"	f
patch	.vim/plugged/coc.nvim/src/attach.ts	/^    let { major, minor, patch } = semver.parse(json.version)$/;"	v
patchLine	.vim/plugged/coc.nvim/src/util/diff.ts	/^export function patchLine(from: string, to: string, fill = ' '): string {$/;"	f
path	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/session.py	/^    path: str = ''$/;"	v	class:Session
path	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^path,$/;"	s
path	.vim/plugged/coc.nvim/src/configuration/index.ts	/^        let preRoot = workspaceConfigFile ? path.resolve(workspaceConfigFile, '..\/..') : ''$/;"	v
path	.vim/plugged/coc.nvim/src/configuration/util.ts	/^  const path = settingPath.split('.')$/;"	C	function:getConfigurationValue
path	.vim/plugged/coc.nvim/src/configuration/util.ts	/^const pluginRoot = isWebpack ? path.dirname(__dirname) : path.resolve(__dirname, '..\/..')$/;"	C
path	.vim/plugged/coc.nvim/src/extensions.ts	/^            return path.join(root, relativePath)$/;"	v
path	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        let path = keys[i].split('.')$/;"	v
path	.vim/plugged/coc.nvim/src/model/mru.ts	/^const root = isWindows ? path.join(os.homedir(), 'AppData\/Local\/coc') : path.join(os.homedir()/;"	C
path	.vim/plugged/coc.nvim/src/sources.ts	/^    for (let path of paths) {$/;"	v
path	.vim/plugged/coc.nvim/src/workspace.ts	/^      let bufname = uri.startsWith('file:') ? path.normalize(URI.parse(uri).fsPath) : uri$/;"	v
path	.vim/plugged/coc.nvim/src/workspace.ts	/^    let filepath = isParentFolder(cwd, newPath) ? path.relative(cwd, newPath) : newPath$/;"	v
path	.vim/plugged/coc.nvim/webpack.config.js	/^    path: path.resolve(__dirname, 'build'),$/;"	p	class:module.exports.output
path	.vim/plugged/coc.nvim/webpack.config.js	/^const path = require('path')$/;"	C
path	.vim/plugged/fzf/src/history.go	/^	path     string$/;"	m	struct:fzf.History	typeref:typename:string
path2dir	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def path2dir(path):$/;"	f
path2dir	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def path2dir(path):$/;"	f
path2project	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def path2project(vim: Nvim, path, root_markers):$/;"	f
path2project	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def path2project(vim: Nvim, path, root_markers):$/;"	f
pathRe	.vim/plugged/coc.nvim/src/source/file.ts	/^const pathRe = \/(?:\\.{0,2}|~|([\\w]+)|)\\\/(?:[\\w.@()-]+\\\/)*(?:[\\w.@()-])*$\/$/;"	C
path_replace	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^        def path_replace(matchobj):$/;"	f	function:formatPathForClient	file:
pathogen.vim	.config/nvim/plugged/vim-css3-syntax/README.md	/^### pathogen.vim$/;"	S
paths	.vim/plugged/coc.nvim/src/extensions.ts	/^          let paths = value.replace(\/,$\/, '').split(',')$/;"	v
paths	.vim/plugged/coc.nvim/src/extensions.ts	/^    let paths = runtimepath.split(',')$/;"	v
paths	.vim/plugged/coc.nvim/src/sources.ts	/^          let paths = value.replace(\/,$\/, '').split(',')$/;"	v
paths	.vim/plugged/coc.nvim/src/sources.ts	/^    let paths = runtimepath.split(',')$/;"	v
paths	.vim/plugged/nvim-yarp/pythonx/yarp.py	/^    paths = nvim.eval(r'globpath(&rtp,"pythonx",1) . "\\n" .'$/;"	v
pathstr	.vim/plugged/coc.nvim/src/source/file.ts	/^  pathstr: string$/;"	p	interface:PathOption
pattern	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^pattern,$/;"	s
pattern	.vim/plugged/coc.nvim/src/util/match.ts	/^    const { language, pattern, scheme } = selector$/;"	C	function:score
pattern	.vim/plugged/fzf/src/matcher.go	/^	pattern *Pattern$/;"	m	struct:fzf.MatchRequest	typeref:typename:*Pattern
pattern	.vim/plugged/fzf/src/merger.go	/^	pattern *Pattern$/;"	m	struct:fzf.Merger	typeref:typename:*Pattern
pattern	vimium-options.json	/^      "pattern": "https?:\/\/mail.google.com\/*",$/;"	s	object:exclusionRules.0
patternBuilder	.vim/plugged/fzf/src/matcher.go	/^	patternBuilder func([]rune) *Pattern$/;"	m	struct:fzf.Matcher	typeref:typename:func([]rune) *Pattern
patternProperties	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "patternProperties": {$/;"	o	object:properties.languageserver
patternProperties	.vim/plugged/coc.nvim/data/schema.json	/^      "patternProperties": {$/;"	o	object:properties.languageserver
patternType	.vim/plugged/coc.nvim/src/workspace.ts	/^    for (let patternType of types) {$/;"	v
patterns	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^        "patterns": [$/;"	a	object:contributes.rootPatterns.0
patterns	.vim/plugged/coc.nvim/src/workspace.ts	/^        patterns.push(...rootPatterns)$/;"	v
patterns	.vim/plugged/coc.nvim/src/workspace.ts	/^        patterns.push(p)$/;"	v
patterns	.vim/plugged/coc.nvim/src/workspace.ts	/^      let patterns = this.getRootPatterns(document, patternType)$/;"	v
patterns	.vim/plugged/coc.nvim/src/workspace.ts	/^    let patterns = this.rootPatterns.get(filetype) || []$/;"	v
patterns	.vim/plugged/coc.nvim/src/workspace.ts	/^    let patterns: string[] = []$/;"	v
paused	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { paused, textDocument } = this$/;"	v
paused	.vim/plugged/coc.nvim/src/model/document.ts	/^  public paused = false$/;"	p	class:Document
pborder	.vim/plugged/fzf/src/terminal.go	/^	pborder    tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
peek	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def peek(self, count=1):$/;"	m	class:_TextIterator
peek	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text.py	/^    def peek(self):$/;"	m	class:LineIterator
percent	.vim/plugged/fzf/src/options.go	/^	percent bool$/;"	m	struct:fzf.sizeSpec	typeref:typename:bool
persist	.vim/plugged/coc.nvim/src/list/basic.ts	/^  persist?: boolean$/;"	p	interface:ActionOptions
persist	.vim/plugged/coc.nvim/src/types.ts	/^  persist?: boolean$/;"	p	interface:ListAction
php	.config/nvim/plugged/switch.vim/spec/plugin/php_spec.rb	/^describe "php" do$/;"	d
phrasing_elements	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let phrasing_elements = ['a', 'em', 'strong', 'small', 'mark', 'abbr', 'dfn', 'i', 'b', 'u', 'co/;"	v
picture	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^picture,$/;"	s
pid	.vim/plugged/coc.nvim/src/__tests__/modules/terminal.test.ts	/^    let pid = await terminal.processId$/;"	v
pid	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let pid = await terminal.processId$/;"	v
pid	.vim/plugged/coc.nvim/src/types.ts	/^  readonly pid: number$/;"	p	interface:Env
pid	.vim/plugged/coc.nvim/src/workspace.ts	/^    let pid = this._env.pid$/;"	v
pipe	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  pipe,$/;"	e	enum:TransportKind
pipe_data_received	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/aprocess.py	/^    def pipe_data_received(self, fd, data):$/;"	m	class:Process
pipe_data_received	.vim/plugged/denite.nvim/rplugin/python3/denite/aprocess.py	/^    def pipe_data_received(self, fd, data):$/;"	m	class:Process
placeCursor	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) placeCursor() {$/;"	f	struct:fzf.Terminal
placeholder	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def placeholder(self):$/;"	m	class:VisualContentPreserver
placeholder	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const placeholder = <Placeholder>marker[1]$/;"	C
placeholder	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let [, placeholder] = new SnippetParser().parse('foo${1:bar\\\\}${2:foo}}').children$/;"	v
placeholder	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let placeholder = session.findPlaceholder(Range.create(0, 3, 0, 3))$/;"	v
placeholder	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let placeholder = session.findPlaceholder(Range.create(0, 4, 0, 4))$/;"	v
placeholder	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let { placeholder } = session$/;"	v
placeholder	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    let placeholder = session.placeholder$/;"	v
placeholder	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const placeholder = new Placeholder(Number(index!))$/;"	C
placeholder	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const placeholder = this.placeholders[id]$/;"	C
placeholder	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    for (const placeholder of incompletePlaceholders) {$/;"	C
placeholder	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let placeholder = this.placeholders[id]$/;"	v
placeholder	.vim/plugged/coc.nvim/src/snippets/session.ts	/^      let placeholder = snippet.finalPlaceholder$/;"	v
placeholder	.vim/plugged/coc.nvim/src/snippets/session.ts	/^      let placeholder = this.findPlaceholder(range)$/;"	v
placeholder	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let placeholder = this.findPlaceholder(edit.range)$/;"	v
placeholder	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let placeholder = this.snippet.getPlaceholderById(this._currId)$/;"	v
placeholder	.vim/plugged/fzf/src/terminal.go	/^var placeholder *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
placeholderDefaultValues	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const placeholderDefaultValues = new Map<number, Marker[]>()$/;"	C
placeholderFlags	.vim/plugged/fzf/src/terminal.go	/^type placeholderFlags struct {$/;"	s	package:fzf
placeholders	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const { placeholders } = new SnippetParser().parse('${1|\\\\,,},$,\\\\|,\\\\\\\\|}')$/;"	C
placeholders	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const { placeholders } = new SnippetParser().parse('${1|one,two,three|}')$/;"	C
placeholders	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const { placeholders } = new SnippetParser().parse('src="$1"', true)$/;"	C
placeholders	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let placeholders = snippet.placeholders$/;"	v
placeholders	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let { placeholders } = this$/;"	v
placeholders	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let placeholders = this._placeholders.filter(o => o.index == index)$/;"	v
platform	.vim/plugged/coc.nvim/src/util/platform.ts	/^  platform: string$/;"	p	interface:INodeProcess
platform	.vim/plugged/coc.nvim/src/util/platform.ts	/^export const platform = _platform$/;"	C
plug#	.config/nvim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#	.vim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	.config/nvim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#begin	.vim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	.config/nvim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#end	.vim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	.config/nvim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#helptags	.vim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	.config/nvim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#load	.vim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
plugTs	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private plugTs = 0$/;"	C
plugin	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^    augroup plugin-easymotion-active$/;"	a
plugin	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^    augroup plugin-easymotion$/;"	a
plugin	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public plugin: Plugin$/;"	p	class:Helper
plugin	.vim/plugged/coc.nvim/src/attach.ts	/^  const plugin = new Plugin(nvim)$/;"	C
plugin	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    augroup plugin-xtabline$/;"	a
plugin/textobj/rubyblock.vim	.config/nvim/plugged/vim-textobj-rubyblock/textobj-rubyblock.vba	/^plugin\/textobj\/rubyblock.vim	[[[1$/;"	n
pluginRoot	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let { pluginRoot } = workspace$/;"	v
pluginRoot	.vim/plugged/coc.nvim/src/configuration/util.ts	/^const pluginRoot = isWebpack ? path.dirname(__dirname) : path.resolve(__dirname, '..\/..')$/;"	C
pluginRoot	.vim/plugged/coc.nvim/src/types.ts	/^  readonly pluginRoot: string$/;"	p	interface:IWorkspace
pluginRoot	.vim/plugged/coc.nvim/src/util/processes.ts	/^const pluginRoot = isWebpack ? dirname(__dirname) : resolve(__dirname, '..\/..')$/;"	C
plugin_cache_dir	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^def plugin_cache_dir():$/;"	f
plugin_cache_dir	.config/nvim/plugged/ultisnips/test_all.py	/^def plugin_cache_dir():$/;"	f
plugindir	.vim/plugged/omnisharp-vim/test/vimrc	/^let plugindir = fnamemodify(omnisharpdir, ':h')$/;"	v
plugins	.config/nvim/plugged/ultisnips/test/test_Plugin.py	/^    plugins = ['ervandew\/supertab']$/;"	v	class:Plugin_SuperTab_SimpleTest
plugins	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    plugins = []$/;"	v	class:VimTestCase
plugins	.vim/plugged/coc.nvim/tsconfig.json	/^    "plugins": []$/;"	a	object:compilerOptions
plugins	.vim/plugged/coc.nvim/webpack.config.js	/^  plugins: [$/;"	p	class:module.exports
plugins	tsconfig.json	/^    "plugins": [$/;"	a	object:compilerOptions
plus	.vim/plugged/fzf/src/terminal.go	/^	plus          bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
points	.vim/plugged/fzf/src/result.go	/^	points [4]uint16$/;"	m	struct:fzf.Result	typeref:typename:[4]uint16
polygon	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^polygon,$/;"	s
polyline	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^polyline,$/;"	s
popup	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  private popup: Popup$/;"	p	class:Floating
popup	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      let { popup, window } = this$/;"	v
port	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "port": {$/;"	o	object:definitions.languageServerSocket.properties
port	.vim/plugged/coc.nvim/data/schema.json	/^        "port": {$/;"	o	object:definitions.languageServerSocket.properties
port	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^        port: 8088$/;"	v
port	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  port: number$/;"	p	interface:SocketTransport
port	.vim/plugged/coc.nvim/src/types.ts	/^  port?: number$/;"	p	interface:LanguageServerConfig
port	.vim/plugged/nvim-yarp/pythonx/yarp.py	/^        port = int(port)$/;"	v
port	.vim/plugged/nvim-yarp/pythonx/yarp.py	/^        serveraddr, port = serveraddr.split(':')$/;"	v
pos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def pos(self):$/;"	m	class:_TextIterator
pos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 5), (0, 5)$/;"	v	class:TestGuessing_DeleteOneChar
pos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 6), (0, 7)$/;"	v	class:TestGuessing_InsertOneChar
pos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 6), (0, 7)$/;"	v	class:TestGuessing_Noop0
pos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 7), (0, 6)$/;"	v	class:TestGuessing_BackspaceOneChar
pos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 7), (0, 8)$/;"	v	class:TestGuessing_InsertOneChar1
pos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def pos(self):$/;"	m	class:VimState
pos	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^      let pos = await workspace.getCursorPosition()$/;"	v
pos	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let pos: Position = { line: 1, character: 0 }$/;"	v
pos	.vim/plugged/coc.nvim/src/__tests__/modules/position.test.ts	/^    let pos = Position.create(0, 0)$/;"	v
pos	.vim/plugged/coc.nvim/src/__tests__/modules/position.test.ts	/^    let pos = Position.create(0, 1)$/;"	v
pos	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let pos = await nvim.call('getcurpos')$/;"	v
pos	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let pos = await workspace.getCursorPosition()$/;"	v
pos	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let pos = await workspace.getCursorPosition()$/;"	v
pos	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let pos = await workspace.getCursorPosition()$/;"	v
pos	.vim/plugged/coc.nvim/src/handler/index.ts	/^            let pos: Position = Position.create(line - 1, pre.length)$/;"	v
pos	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let [pos, line] = await nvim.eval('[coc#util#cursor(), getline(".")]') as [[number, number/;"	v
pos	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let pos = await workspace.getCursorPosition()$/;"	v
pos	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let pos: Position = insertLeave ? { line: position.line + 1, character: 0 } : position$/;"	v
pos	.vim/plugged/coc.nvim/src/languages.ts	/^      let pos = Position.create(linenr - 1, range.start.character)$/;"	v
pos	.vim/plugged/coc.nvim/src/languages.ts	/^    let pos = await workspace.getCursorPosition()$/;"	v
pos	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let pos = 0$/;"	v
pos	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let pos = this.pos$/;"	v
pos	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  pos: number$/;"	p	interface:Token
pos	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    const pos = doc.positionAt(content.length)$/;"	C
pos	.vim/plugged/coc.nvim/src/types.ts	/^  pos?: 'topleft' | 'topright' | 'botleft' | 'botright' | 'center'$/;"	p	interface:PopupOptions
pos	.vim/plugged/coc.nvim/src/workspace.ts	/^      let pos = position ? [line + 1, col] : []$/;"	v
pos	.vim/plugged/coc.nvim/src/workspace.ts	/^    let pos = await this.getCursorPosition()$/;"	v
posArray	.vim/plugged/fzf/src/algo/algo.go	/^func posArray(withPos bool, len int) *[]int {$/;"	f	package:algo	typeref:typename:*[]int
posDown	.vim/plugged/fzf/src/options.go	/^	posDown$/;"	c	package:fzf
posLeft	.vim/plugged/fzf/src/options.go	/^	posLeft$/;"	c	package:fzf
posRight	.vim/plugged/fzf/src/options.go	/^	posRight$/;"	c	package:fzf
posUp	.vim/plugged/fzf/src/options.go	/^	posUp windowPosition = iota$/;"	c	package:fzf	typeref:type:windowPosition
position	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, props = { position: "absolute", visibility: "hidden", display:"block" }, which = nam/;"	p	class:AnonymousFunctiond47633f82700.props
position	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let position = await workspace.getCursorPosition()$/;"	v
position	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^    let ch = line[position.character]$/;"	v
position	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^    let position = await workspace.getCursorPosition()$/;"	v
position	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let position = await workspace.getCursorPosition()$/;"	v
position	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let position = await workspace.getCursorPosition()$/;"	v
position	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let { document, position } = await workspace.getCurrentState()$/;"	v
position	.vim/plugged/coc.nvim/src/languages.ts	/^        let position = complete.getPosition(opt)$/;"	v
position	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let position = range.start$/;"	v
position	.vim/plugged/coc.nvim/src/snippets/session.ts	/^      let position = await workspace.getCursorPosition()$/;"	v
position	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let position = range.start$/;"	v
position	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^      const position = document.positionAt(offset)$/;"	C
position	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    const end = pos.line == 0 ? position.character + pos.character : pos.character$/;"	C
position	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let { position } = this$/;"	v
position	.vim/plugged/coc.nvim/src/types.ts	/^  position: Position$/;"	p	interface:EditerState
position	.vim/plugged/coc.nvim/src/types.ts	/^  position: string$/;"	p	interface:ListOptions
position	.vim/plugged/coc.nvim/src/workspace.ts	/^    let position = await this.getCursorPosition()$/;"	v
position	.vim/plugged/fzf/src/options.go	/^	position windowPosition$/;"	m	struct:fzf.previewOpts	typeref:typename:windowPosition
positionToOffset	.vim/plugged/coc.nvim/src/util/position.ts	/^export function positionToOffset(lines: string[], line: number, character: number): number {$/;"	f
positions	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let positions: Position[] = []$/;"	v
positions	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^            positions.push([highlight.line + 1, highlight.colEnd])$/;"	v
positions	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^            positions.push([highlight.line + 1, highlight.colStart + 1])$/;"	v
positions	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^      let positions: [number, number, number?][] = []$/;"	v
positions	.vim/plugged/coc.nvim/src/util/fzy.ts	/^export function positions(needle: string, haystack: string): number[] {$/;"	f
post	.vim/plugged/coc.nvim/src/list/prompt.ts	/^        let post = input.slice(cusorIndex + 1)$/;"	v
post	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let post = input.slice(cusorIndex + 1)$/;"	v
post	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let post = input.slice(cusorIndex)$/;"	v
postProcessOptions	.vim/plugged/fzf/src/options.go	/^func postProcessOptions(opts *Options) {$/;"	f	package:fzf
posx	.vim/plugged/fzf/src/tui/light.go	/^	posx     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
posy	.vim/plugged/fzf/src/tui/light.go	/^	posy     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
ppos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 5), (0, 5)$/;"	v	class:TestGuessing_DeleteOneChar
ppos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 6), (0, 7)$/;"	v	class:TestGuessing_InsertOneChar
ppos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 6), (0, 7)$/;"	v	class:TestGuessing_Noop0
ppos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 7), (0, 6)$/;"	v	class:TestGuessing_BackspaceOneChar
ppos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 7), (0, 8)$/;"	v	class:TestGuessing_InsertOneChar1
ppos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def ppos(self):$/;"	m	class:VimState
pre	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let pre = await this.getPreviousContent(document)$/;"	v
pre	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let pre = byteSlice(line, 0, cursor[1] - 1)$/;"	v
pre	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let pre = byteSlice(line, 0, col - 1)$/;"	v
pre	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let pre = doc.getline(line - 1)$/;"	v
pre	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let prevChar = pre[pre.length - 1]$/;"	v
pre	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let pre = pos[1] == 0 ? '' : line.slice(pos[1] - 1, pos[1])$/;"	v
pre	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let pre = null$/;"	v
pre	.vim/plugged/coc.nvim/src/list/prompt.ts	/^        let pre = input.slice(0, cusorIndex)$/;"	v
pre	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let pre = input.slice(0, cusorIndex)$/;"	v
pre	.vim/plugged/coc.nvim/src/model/document.ts	/^    let pre = byteSlice(line, 0, col - 1)$/;"	v
pre	.vim/plugged/coc.nvim/src/snippets/session.ts	/^      let pre = completion.hasSelected() ? '' : '\\\\<C-n>'$/;"	v
pre	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let pre = space$/;"	v
pre	.vim/plugged/coc.nvim/src/sources.ts	/^    let character = pre.length ? pre[pre.length - 1] : ''$/;"	v
pre	.vim/plugged/coc.nvim/src/sources.ts	/^    let last = pre.length ? pre[pre.length - 1] : ''$/;"	v
pre	.vim/plugged/coc.nvim/src/sources.ts	/^    let pre = byteSlice(opt.line, 0, opt.colnr - 1)$/;"	v
pre	.vim/plugged/coc.nvim/src/util/position.ts	/^  let pre = newLines.length == 1 && start.line != end.line ? start.character : 0$/;"	v
pre.code	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^pre.code {$/;"	c
preIndent	.vim/plugged/coc.nvim/src/handler/index.ts	/^            let preIndent = pre.match(\/^\\s*\/)[0]$/;"	v
preKeyword	.vim/plugged/coc.nvim/src/model/document.ts	/^    let preKeyword = false$/;"	v
preRoot	.vim/plugged/coc.nvim/src/configuration/index.ts	/^        let preRoot = workspaceConfigFile ? path.resolve(workspaceConfigFile, '..\/..') : ''$/;"	v
precompute_bonus	.vim/plugged/coc.nvim/src/util/fzy.ts	/^function precompute_bonus(haystack): number[] {$/;"	f
preferComplete	.vim/plugged/coc.nvim/src/snippets/session.ts	/^  private preferComplete = false$/;"	p	class:SnippetSession
preferTop	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let { nvim, preferTop } = this$/;"	v
preferences	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let preferences = workspace.getConfiguration('coc.preferences.diagnostic')$/;"	v
preferences	.vim/plugged/coc.nvim/src/handler/index.ts	/^  private preferences: Preferences$/;"	p	class:Handler
preferences	.vim/plugged/coc.nvim/src/workspace.ts	/^    const preferences = this.getConfiguration('coc.preferences')$/;"	C
preferences	.vim/plugged/coc.nvim/src/workspace.ts	/^    const preferences = this.getConfiguration('coc.preferences')$/;"	v
preferences	.vim/plugged/coc.nvim/src/workspace.ts	/^    const preferences = this.getConfiguration('coc.preferences', uri)$/;"	C
prefix	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let prefix = this.config.virtualTextPrefix$/;"	v
prefix	.vim/plugged/coc.nvim/src/types.ts	/^  prefix: string$/;"	p	interface:Snippet
prefix	.vim/plugged/coc.nvim/src/util/index.ts	/^const prefix = '[coc.nvim] '$/;"	C
prefixLength	.vim/plugged/fzf/src/tokenizer.go	/^	prefixLength int32$/;"	m	struct:fzf.Token	typeref:typename:int32
preload	.config/nvim/plugged/oceanic-next/test/test.js	/^  preload(streamUrl) {$/;"	m	class:SoundCloudAudio
prepare	.config/nvim/plugged/coc.nvim/package.json	/^    "prepare": "npm-run-all clean build"$/;"	s	object:scripts
prepare	.vim/plugged/coc.nvim/package.json	/^    "prepare": "npm-run-all clean build"$/;"	s	object:scripts
prepare	.vim/plugged/fzf/test/test_go.rb	/^  def prepare$/;"	f
prepareRename	.vim/plugged/coc.nvim/src/provider/index.ts	/^  prepareRename?($/;"	m	interface:RenameProvider
prepareRename	.vim/plugged/coc.nvim/src/provider/renameManager.ts	/^  public async prepareRename($/;"	m	class:RenameManager
preselect	.vim/plugged/coc.nvim/src/types.ts	/^  preselect?: boolean$/;"	p	interface:VimCompleteItem
presentation	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let presentation = presentations[res]$/;"	v
presentations	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let presentations = await languages.provideColorPresentations(info, document.textDocument)$/;"	v
preserve	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def preserve(self):$/;"	m	class:_SnippetUtilCursor
preserveConstEnums	tsconfig.json	/^    "preserveConstEnums": true,$/;"	b	object:compilerOptions
preserveSpace	.vim/plugged/fzf/src/terminal.go	/^	preserveSpace bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
pressed	.vim/plugged/fzf/src/terminal.go	/^	pressed    string$/;"	m	struct:fzf.Terminal	typeref:typename:string
prev	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let prev = this.snippet.getPrevPlaceholder(curr.index)$/;"	v
prev	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let prev = this.getPlaceholder(index - 1)$/;"	v
prevChar	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let prevChar = pre[pre.length - 1]$/;"	v
prevDownTime	.vim/plugged/fzf/src/tui/light.go	/^	prevDownTime  time.Time$/;"	m	struct:tui.LightRenderer	typeref:typename:time.Time
prevDownTime	.vim/plugged/fzf/src/tui/tui.go	/^	prevDownTime time.Time$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:time.Time
prevLines	.vim/plugged/fzf/src/terminal.go	/^	prevLines  []itemLine$/;"	m	struct:fzf.Terminal	typeref:typename:[]itemLine
prev_bufnr	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    prev_bufnr: int = 0$/;"	v	class:Context
prev_winid	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    prev_winid: int = 0$/;"	v	class:Context
preventDefault	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		event.preventDefault = function() {$/;"	f	function:event
preview	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let preview = enablePreview && !workspace.env.pumevent ? ',preview' : ''$/;"	v
preview	.vim/plugged/fzf/src/terminal.go	/^	preview    previewOpts$/;"	m	struct:fzf.Terminal	typeref:typename:previewOpts
previewAutoClose	.vim/plugged/coc.nvim/src/handler/index.ts	/^  previewAutoClose: boolean$/;"	p	interface:Preferences
previewBox	.vim/plugged/fzf/src/terminal.go	/^	previewBox *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
previewCancelWait	.vim/plugged/fzf/src/constants.go	/^	previewCancelWait = 500 * time.Millisecond$/;"	c	package:fzf
previewIsKeyword	.vim/plugged/coc.nvim/src/types.ts	/^  previewIsKeyword: string$/;"	p	interface:CompleteConfig
previewOpts	.vim/plugged/fzf/src/options.go	/^type previewOpts struct {$/;"	s	package:fzf
previewWinnr	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let previewWinnr = await nvim.call('coc#util#has_preview')$/;"	v
previewer	.vim/plugged/fzf/src/terminal.go	/^	previewer  previewer$/;"	m	struct:fzf.Terminal	typeref:typename:previewer
previewer	.vim/plugged/fzf/src/terminal.go	/^type previewer struct {$/;"	s	package:fzf
previous	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async previous(): Promise<void> {$/;"	C
previous	.vim/plugged/fzf/src/history.go	/^func (h *History) previous() string {$/;"	f	struct:fzf.History	typeref:typename:string
previousKey	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  public get previousKey(): string {$/;"	C
previousKey	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    let previousKey = this.config.previousKey$/;"	v
previousPatterns	vimium-options.json	/^  "previousPatterns": "prev,previous,back,older,<,‹,←,«,≪,<<",$/;"	s
previousPlaceholder	.vim/plugged/coc.nvim/src/types.ts	/^  previousPlaceholder(): Promise<void>$/;"	m	interface:SnippetManager
printAll	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printAll() {$/;"	f	struct:fzf.Terminal
printHeader	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printHeader() {$/;"	f	struct:fzf.Terminal
printHighlighted	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printHighlighted(result Result, attr tui.Attr, col1 tui.ColorPair, col2 tui.C/;"	f	struct:fzf.Terminal	typeref:typename:int
printInfo	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printInfo() {$/;"	f	struct:fzf.Terminal
printItem	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printItem(result Result, line int, i int, current bool) {$/;"	f	struct:fzf.Terminal
printList	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printList() {$/;"	f	struct:fzf.Terminal
printPreview	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printPreview() {$/;"	f	struct:fzf.Terminal
printPrompt	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) printPrompt() {$/;"	f	struct:fzf.Terminal
printQuery	.vim/plugged/fzf/src/terminal.go	/^	printQuery bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
printString	.vim/plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) printString(text string, pair ColorPair, a Attr) {$/;"	f	struct:tui.TcellWindow
print_help	.vim/plugged/omnisharp-vim/installer/omnisharp-manager.sh	/^print_help() {$/;"	f
print_message	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/filter.py	/^    def print_message(self, context, expr):$/;"	m	class:Base
print_message	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def print_message(self, context, expr):$/;"	m	class:Base
print_message	.vim/plugged/denite.nvim/rplugin/python3/denite/base/filter.py	/^    def print_message(self, context, expr):$/;"	m	class:Base
print_message	.vim/plugged/denite.nvim/rplugin/python3/denite/base/source.py	/^    def print_message(self, context, expr):$/;"	m	class:Base
print_msg	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def print_msg(self, expr: typing.Any) -> None:$/;"	m	class:View
print_stack	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/debug.py	/^def print_stack():$/;"	f
print_usage	.vim/plugged/ghost-text.vim/python3/test/test_server_thread.py	/^def print_usage():$/;"	f
printer	.vim/plugged/fzf/src/terminal.go	/^	printer    func(string)$/;"	m	struct:fzf.Terminal	typeref:typename:func(string)
priority	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def priority(self):$/;"	m	class:SnippetDefinition
priority	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^      priority: 10,$/;"	v
priority	.vim/plugged/coc.nvim/src/__tests__/modules/sources.test.ts	/^      priority: 0,$/;"	v
priority	.vim/plugged/coc.nvim/src/languages.ts	/^      priority,$/;"	v
priority	.vim/plugged/coc.nvim/src/languages.ts	/^  priority: number$/;"	p	interface:CompleteConfig
priority	.vim/plugged/coc.nvim/src/model/source.ts	/^  public get priority(): number {$/;"	m	class:Source
priority	.vim/plugged/coc.nvim/src/provider/manager.ts	/^      let { selector, priority } = item$/;"	v
priority	.vim/plugged/coc.nvim/src/types.ts	/^  priority?: number$/;"	p	interface:CompleteResult
priority	.vim/plugged/coc.nvim/src/types.ts	/^  priority?: number$/;"	p	interface:ISource
priority	.vim/plugged/coc.nvim/src/types.ts	/^  priority?: number$/;"	p	interface:VimCompleteItem
priority	.vim/plugged/coc.nvim/src/types.ts	/^  readonly priority: number$/;"	p	interface:StatusBarItem
private	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  private configuration: WorkspaceConfiguration$/;"	C
private	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  private disposable: Disposable$/;"	C
private	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private activated = false$/;"	C
private	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private args: string[] = []$/;"	C
private	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private currList: IList$/;"	C
private	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private cwd: string$/;"	C
private	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private executing = false$/;"	C
private	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private listMap: Map<string, IList> = new Map()$/;"	C
private	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private mappings: Mappings$/;"	C
private	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private nvim: Neovim$/;"	C
private	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private plugTs = 0$/;"	C
private	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private window: Window$/;"	C
private	.vim/plugged/coc.nvim/src/model/status.ts	/^  private _text = ''$/;"	C
private	.vim/plugged/coc.nvim/src/model/status.ts	/^  private async setStatusText(): Promise<void> {$/;"	C
private	.vim/plugged/coc.nvim/src/model/status.ts	/^  private getText(): string {$/;"	C
private	.vim/plugged/coc.nvim/src/model/status.ts	/^  private items: Map<string, StatusBarItem> = new Map()$/;"	C
private	.vim/plugged/coc.nvim/src/model/status.ts	/^  private shownIds: Set<string> = new Set()$/;"	C
proc	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public proc: cp.ChildProcess$/;"	p	class:Helper
proc operators	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^  context "proc operators" do$/;"	c
procFun	.vim/plugged/fzf/src/pattern.go	/^	procFun       map[termType]algo.Algo$/;"	m	struct:fzf.Pattern	typeref:typename:map[termType]algo.Algo
process	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  process: ChildProcess$/;"	p	interface:ChildProcessInfo
process	.vim/plugged/coc.nvim/src/util/factory.ts	/^  process: NodeJS.Process$/;"	p	interface:ISandbox
process	.vim/plugged/coc.nvim/src/util/platform.ts	/^declare let process: INodeProcess$/;"	v
processId	.vim/plugged/coc.nvim/src/model/terminal.ts	/^  public get processId(): Promise<number> {$/;"	m	class:TerminalModel
processId	.vim/plugged/coc.nvim/src/types.ts	/^  readonly processId: Promise<number>$/;"	p	interface:Terminal
processTabs	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) processTabs(runes []rune, prefixWidth int) (string, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(string, int)
process_exited	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/aprocess.py	/^    def process_exited(self):$/;"	m	class:Process
process_exited	.vim/plugged/denite.nvim/rplugin/python3/denite/aprocess.py	/^    def process_exited(self):$/;"	m	class:Process
process_pending_requests	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^def process_pending_requests():$/;"	f
profile	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    profile: bool = False$/;"	v	class:Context
progpath	.vim/plugged/coc.nvim/src/types.ts	/^  readonly progpath: string$/;"	p	interface:Env
progress	.vim/plugged/coc.nvim/src/types.ts	/^  progress?: boolean$/;"	p	interface:StatusItemOption
progress	.vim/plugged/fzf/src/terminal.go	/^	progress   int$/;"	m	struct:fzf.Terminal	typeref:typename:int
progressMinDuration	.vim/plugged/fzf/src/constants.go	/^	progressMinDuration     = 200 * time.Millisecond$/;"	c	package:fzf
projectionist	.config/nvim/plugged/vim-projectionist/plugin/projectionist.vim	/^augroup projectionist$/;"	a
projectionist#activate	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#activate() abort$/;"	f
projectionist#append	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#append(root, ...) abort$/;"	f
projectionist#apply_template	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#apply_template() abort$/;"	f
projectionist#completion_filter	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#completion_filter(results, query, sep, ...) abort$/;"	f
projectionist#define_navigation_command	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#define_navigation_command(command, patterns) abort$/;"	f
projectionist#filereadable	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#filereadable(...) abort$/;"	f
projectionist#getftime	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#getftime(...) abort$/;"	f
projectionist#glob	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#glob(file, ...) abort$/;"	f
projectionist#isdirectory	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#isdirectory(...) abort$/;"	f
projectionist#json_parse	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#json_parse(string) abort$/;"	f
projectionist#lencmp	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#lencmp(i1, i2) abort$/;"	f
projectionist#navigation_commands	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#navigation_commands() abort$/;"	f
projectionist#path	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#path(...) abort$/;"	f
projectionist#query	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#query(key, ...) abort$/;"	f
projectionist#query_exec	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#query_exec(key, ...) abort$/;"	f
projectionist#query_file	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#query_file(key, ...) abort$/;"	f
projectionist#query_raw	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#query_raw(key, ...) abort$/;"	f
projectionist#query_scalar	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#query_scalar(key) abort$/;"	f
projectionist#readfile	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#readfile(path, ...) abort$/;"	f
projectionist#real	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#real(...) abort$/;"	f
projectionist#shellescape	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#shellescape(arg) abort$/;"	f
projectionist#shellpath	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#shellpath(arg) abort$/;"	f
projectionist#slash	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! projectionist#slash(...) abort$/;"	f
projectionist.vim	.config/nvim/plugged/vim-projectionist/README.markdown	/^# projectionist.vim$/;"	c
projectionist_make	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^augroup projectionist_make$/;"	a
projectionist_transformations.backslash	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.backslash(input, o) abort$/;"	f
projectionist_transformations.basename	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.basename(input, o) abort$/;"	f
projectionist_transformations.blank	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.blank(input, o) abort$/;"	f
projectionist_transformations.camelcase	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.camelcase(input, o) abort$/;"	f
projectionist_transformations.capitalize	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.capitalize(input, o) abort$/;"	f
projectionist_transformations.close	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.close(input, o) abort$/;"	f
projectionist_transformations.colons	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.colons(input, o) abort$/;"	f
projectionist_transformations.dirname	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.dirname(input, o) abort$/;"	f
projectionist_transformations.dot	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.dot(input, o) abort$/;"	f
projectionist_transformations.hyphenate	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.hyphenate(input, o) abort$/;"	f
projectionist_transformations.nothing	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.nothing(input, o) abort$/;"	f
projectionist_transformations.open	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.open(input, o) abort$/;"	f
projectionist_transformations.plural	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.plural(input, o) abort$/;"	f
projectionist_transformations.singular	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.singular(input, o) abort$/;"	f
projectionist_transformations.snakecase	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.snakecase(input, o) abort$/;"	f
projectionist_transformations.underscore	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.underscore(input, o) abort$/;"	f
projectionist_transformations.uppercase	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.uppercase(input, o) abort$/;"	f
projectionist_transformations.vim	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! g:projectionist_transformations.vim(input, o) abort$/;"	f
promise	.vim/plugged/coc.nvim/src/workspace.ts	/^    let promise = watchmanPath ? Watchman.createClient(watchmanPath, this.root, channel) : Promi/;"	v
promises	.vim/plugged/coc.nvim/src/__tests__/client/delayer.test.ts	/^  let promises: Thenable<any>[] = []$/;"	v
prompt	.vim/plugged/coc.nvim/src/list/history.ts	/^    let { name, prompt } = this.manager$/;"	v
prompt	.vim/plugged/coc.nvim/src/list/history.ts	/^    let { prompt } = manager$/;"	v
prompt	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public prompt: Prompt$/;"	C
prompt	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    let { prompt } = manager$/;"	v
prompt	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { prompt } = manager$/;"	v
prompt	.vim/plugged/fzf/src/terminal.go	/^	prompt     string$/;"	m	struct:fzf.Terminal	typeref:typename:string
promptLen	.vim/plugged/fzf/src/terminal.go	/^	promptLen  int$/;"	m	struct:fzf.Terminal	typeref:typename:int
properties	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:definitions.languageServerBase
properties	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:definitions.languageServerCommand
properties	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:definitions.languageServerModule
properties	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:definitions.languageServerSocket
properties	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:properties.suggest.completionItemKindLabels
properties	.config/nvim/plugged/coc.nvim/data/schema.json	/^  "properties": {$/;"	o
properties	.vim/plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:definitions.languageServerBase
properties	.vim/plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:definitions.languageServerCommand
properties	.vim/plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:definitions.languageServerModule
properties	.vim/plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:definitions.languageServerSocket
properties	.vim/plugged/coc.nvim/data/schema.json	/^      "properties": {$/;"	o	object:properties.suggest.completionItemKindLabels
properties	.vim/plugged/coc.nvim/data/schema.json	/^  "properties": {$/;"	o
properties	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^      "properties": {$/;"	o	object:contributes.configuration
properties	.vim/plugged/coc.nvim/src/extensions.ts	/^        let { properties } = configuration$/;"	v
properties	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let properties = symbols.filter(s => s.kind == 'Property')$/;"	v
property	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "property": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
property	.vim/plugged/coc.nvim/data/schema.json	/^        "property": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
props	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, props = { position: "absolute", visibility: "hidden", display:"block" }, which = nam/;"	c	class:AnonymousFunctiond47633f82700
props	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var props = "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctr/;"	v
props	.vim/plugged/coc.nvim/src/extensions.ts	/^          if (val != null) props[key] = val$/;"	v
props	.vim/plugged/coc.nvim/src/extensions.ts	/^        let props = {}$/;"	v
props	.vim/plugged/coc.nvim/src/list/manager.ts	/^        let description = props[name] && props[name].description ? props[name].description : ''$/;"	v
props	.vim/plugged/coc.nvim/src/list/manager.ts	/^      let props = {}$/;"	v
props	.vim/plugged/coc.nvim/src/sources.ts	/^        activationEvents: props.filetypes ? props.filetypes.map(f => `onLanguage:${f}`) : ['*'],$/;"	v
props	.vim/plugged/coc.nvim/src/sources.ts	/^      let props = await nvim.call(`coc#source#${name}#init`, [])$/;"	v
props	.vim/plugged/coc.nvim/src/types.ts	/^  props?: PopupProps$/;"	p	interface:TextItem
provideCodeActions	.vim/plugged/coc.nvim/src/provider/codeActionmanager.ts	/^  public async provideCodeActions($/;"	m	class:CodeActionManager
provideCodeActions	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideCodeActions($/;"	m	interface:CodeActionProvider
provideCodeLenses	.vim/plugged/coc.nvim/src/provider/codeLensManager.ts	/^  public async provideCodeLenses($/;"	m	class:CodeLensManager
provideCodeLenses	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideCodeLenses(document: TextDocument, token: CancellationToken): ProviderResult<CodeLens[]/;"	m	interface:CodeLensProvider
provideColorPresentations	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^  provideColorPresentations?: ($/;"	p	interface:ColorProviderMiddleware
provideColorPresentations	.vim/plugged/coc.nvim/src/provider/documentColorManager.ts	/^  public async provideColorPresentations(colorInformation: ColorInformation, document: TextDocum/;"	m	class:DocumentColorManager
provideColorPresentations	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideColorPresentations(color: Color, context: { document: TextDocument, range: Range }, tok/;"	m	interface:DocumentColorProvider
provideCompletionItems	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideCompletionItems($/;"	m	interface:CompletionItemProvider
provideDeclaration	.vim/plugged/coc.nvim/src/language-client/declaration.ts	/^  provideDeclaration?: (this: void, document: TextDocument, position: Position, token: Cancellat/;"	p	interface:DeclarationMiddleware
provideDeclaration	.vim/plugged/coc.nvim/src/provider/declarationManager.ts	/^  public async provideDeclaration($/;"	m	class:DeclarationManager
provideDeclaration	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideDeclaration(document: TextDocument, position: Position, token: CancellationToken): Prov/;"	m	interface:DeclarationProvider
provideDefinition	.vim/plugged/coc.nvim/src/provider/definitionManager.ts	/^  public async provideDefinition($/;"	m	class:DefinitionManager
provideDefinition	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideDefinition($/;"	m	interface:DefinitionProvider
provideDocumentColors	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^  provideDocumentColors?: ($/;"	p	interface:ColorProviderMiddleware
provideDocumentColors	.vim/plugged/coc.nvim/src/provider/documentColorManager.ts	/^  public async provideDocumentColors(document: TextDocument, token: CancellationToken): Promise</;"	m	class:DocumentColorManager
provideDocumentColors	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideDocumentColors(document: TextDocument, token: CancellationToken): ProviderResult<ColorI/;"	m	interface:DocumentColorProvider
provideDocumentFormattingEdits	.vim/plugged/coc.nvim/src/provider/formatManager.ts	/^  public async provideDocumentFormattingEdits($/;"	m	class:FormatManager
provideDocumentFormattingEdits	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideDocumentFormattingEdits($/;"	m	interface:DocumentFormattingEditProvider
provideDocumentHighlights	.vim/plugged/coc.nvim/src/provider/documentHighlightManager.ts	/^  public async provideDocumentHighlights($/;"	m	class:DocumentHighlightManager
provideDocumentHighlights	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideDocumentHighlights($/;"	m	interface:DocumentHighlightProvider
provideDocumentLinks	.vim/plugged/coc.nvim/src/provider/documentLinkManager.ts	/^  public async provideDocumentLinks(document: TextDocument, token: CancellationToken): Promise<D/;"	m	class:DocumentLinkManager
provideDocumentLinks	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideDocumentLinks(document: TextDocument, token: CancellationToken): ProviderResult<Documen/;"	m	interface:DocumentLinkProvider
provideDocumentRangeFormattingEdits	.vim/plugged/coc.nvim/src/provider/formatRangeManager.ts	/^  public async provideDocumentRangeFormattingEdits($/;"	m	class:FormatRangeManager
provideDocumentRangeFormattingEdits	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideDocumentRangeFormattingEdits($/;"	m	interface:DocumentRangeFormattingEditProvider
provideDocumentSymbols	.vim/plugged/coc.nvim/src/provider/documentSymbolManager.ts	/^  public async provideDocumentSymbols($/;"	m	class:DocumentSymbolManager
provideDocumentSymbols	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideDocumentSymbols($/;"	m	interface:DocumentSymbolProvider
provideFoldingRanges	.vim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^  provideFoldingRanges?: ($/;"	p	interface:FoldingRangeProviderMiddleware
provideFoldingRanges	.vim/plugged/coc.nvim/src/provider/foldingRangeManager.ts	/^  public async provideFoldingRanges(document: TextDocument, context: FoldingContext, token: Canc/;"	m	class:FoldingRangeManager
provideFoldingRanges	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideFoldingRanges($/;"	m	interface:FoldingRangeProvider
provideHover	.vim/plugged/coc.nvim/src/provider/hoverManager.ts	/^  public async provideHover($/;"	m	class:HoverManager
provideHover	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideHover($/;"	m	interface:HoverProvider
provideImplementation	.vim/plugged/coc.nvim/src/language-client/implementation.ts	/^  provideImplementation?: (this: void, document: TextDocument, position: Position, token: Cancel/;"	p	interface:ImplementationMiddleware
provideImplementation	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideImplementation($/;"	m	interface:ImplementationProvider
provideOnTypeFormattingEdits	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideOnTypeFormattingEdits(document: TextDocument, position: Position, ch: string, options: /;"	m	interface:OnTypeFormattingEditProvider
provideReferences	.vim/plugged/coc.nvim/src/provider/implementatioinManager.ts	/^  public async provideReferences($/;"	m	class:ImplementationManager
provideReferences	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideReferences($/;"	m	interface:ReferenceProvider
provideReferences	.vim/plugged/coc.nvim/src/provider/referenceManager.ts	/^  public async provideReferences($/;"	m	class:ReferenceManager
provideRenameEdits	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideRenameEdits($/;"	m	interface:RenameProvider
provideRenameEdits	.vim/plugged/coc.nvim/src/provider/renameManager.ts	/^  public async provideRenameEdits($/;"	m	class:RenameManager
provideSelectionRanges	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^  provideSelectionRanges?: (this: void, document: TextDocument, positions: Position[], token: Ca/;"	p	interface:SelectionRangeProviderMiddleware
provideSelectionRanges	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideSelectionRanges(document: TextDocument, positions: Position[], token: CancellationToken/;"	m	interface:SelectionRangeProvider
provideSelectionRanges	.vim/plugged/coc.nvim/src/provider/rangeManager.ts	/^  public async provideSelectionRanges($/;"	m	class:SelectionRangeManager
provideSignatureHelp	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideSignatureHelp($/;"	m	interface:SignatureHelpProvider
provideSignatureHelp	.vim/plugged/coc.nvim/src/provider/signatureManager.ts	/^  public async provideSignatureHelp($/;"	m	class:SignatureManager
provideTextDocumentContent	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^      provideTextDocumentContent: (_uri, _token): string => {$/;"	v
provideTextDocumentContent	.vim/plugged/coc.nvim/src/handler/index.ts	/^      provideTextDocumentContent: async () => {$/;"	v
provideTextDocumentContent	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideTextDocumentContent(uri: URI, token: CancellationToken): ProviderResult<string>$/;"	m	interface:TextDocumentContentProvider
provideTextDocumentContent	.vim/plugged/coc.nvim/src/workspace.ts	/^      provideTextDocumentContent: async (uri: URI) => {$/;"	v
provideTypeDefinition	.vim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^  provideTypeDefinition?: ($/;"	p	interface:TypeDefinitionMiddleware
provideTypeDefinition	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideTypeDefinition($/;"	m	interface:TypeDefinitionProvider
provideTypeDefinition	.vim/plugged/coc.nvim/src/provider/typeDefinitionManager.ts	/^  public async provideTypeDefinition($/;"	m	class:TypeDefinitionManager
provideWorkspaceSymbols	.vim/plugged/coc.nvim/src/provider/index.ts	/^  provideWorkspaceSymbols($/;"	m	interface:WorkspaceSymbolProvider
provideWorkspaceSymbols	.vim/plugged/coc.nvim/src/provider/workspaceSymbolsManager.ts	/^  public async provideWorkspaceSymbols($/;"	m	class:WorkspaceSymbolManager
providedCodeActionKinds	.vim/plugged/coc.nvim/src/provider/index.ts	/^  readonly providedCodeActionKinds?: ReadonlyArray<CodeActionKind>$/;"	p	interface:CodeActionProviderMetadata
provider	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let provider: CompletionItemProvider = {$/;"	v
provider	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let provider: TextDocumentContentProvider = {$/;"	v
provider	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let provider: TextDocumentContentProvider = {$/;"	v
provider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let provider = this._providers.get(id)$/;"	v
provider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let provider = this.registerLanguageProvider(data.registerOptions)$/;"	v
provider	.vim/plugged/coc.nvim/src/provider/manager.ts	/^  provider: T$/;"	p	interface:ProviderItem
provider	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^      provider$/;"	v
provider	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^    let provider = this.getProvider(document, character)$/;"	v
provider	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^  provider: OnTypeFormattingEditProvider$/;"	p	interface:ProviderItem
provider	.vim/plugged/coc.nvim/src/provider/renameManager.ts	/^    let { provider } = item$/;"	v
provider	.vim/plugged/coc.nvim/src/workspace.ts	/^      provider.onDidChange(async uri => {$/;"	v
provider	.vim/plugged/coc.nvim/src/workspace.ts	/^    let provider = this.schemeProviderMap.get(scheme)$/;"	v
provider	.vim/plugged/coc.nvim/src/workspace.ts	/^    let provider: TextDocumentContentProvider = {$/;"	v
providerItem	.vim/plugged/coc.nvim/src/provider/manager.ts	/^    let providerItem: ProviderItem<T>$/;"	v
providers	.vim/plugged/coc.nvim/src/provider/manager.ts	/^  protected providers: Set<ProviderItem<T>> = new Set()$/;"	p	class:Manager
providers	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^  private providers: Set<ProviderItem> = new Set()$/;"	p	class:OnTypeFormatManager
pty	.vim/plugged/coc.nvim/src/types.ts	/^  pty?: boolean$/;"	p	interface:TaskOptions
public	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^  public loadItems(_context: ListContext, _token: CancellationToken): Promise<ListItem[]> {$/;"	v
public	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^  public name = 'option'$/;"	v
public	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  public dispose(): void {$/;"	C
public	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  public fixKey(key: string): string {$/;"	C
public	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  public get nextKey(): string {$/;"	C
public	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  public get previousKey(): string {$/;"	C
public	.vim/plugged/coc.nvim/src/list/configuration.ts	/^  public get<T>(key: string, defaultValue?: T): T {$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async cancel( close = true ): Promise<void> {$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async chooseAction(): Promise<void> {$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async doAction( name?: string ): Promise<void> {$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async next(): Promise<void> {$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async previous(): Promise<void> {$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async resume(): Promise<void> {$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async start( args: string[] ): Promise<void> {$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async switchMatcher(): Promise<void> {$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async togglePreview(): Promise<void> {$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public config: ListConfiguration$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public get name(): string {$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public history: History$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public init( nvim: Neovim ): void {$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public listOptions: ListOptions$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public parseArgs( args: string[] ): { list: IList, options: ListOptions, listOptions: string[]/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public prompt: Prompt$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public ui: UI$/;"	C
public	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public worker: Worker$/;"	C
public	.vim/plugged/coc.nvim/src/model/status.ts	/^  public createStatusBarItem(priority = 0, isProgress = false): StatusBarItem {$/;"	C
public	.vim/plugged/coc.nvim/src/model/status.ts	/^  public dispose(): void {$/;"	C
pumevent	.vim/plugged/coc.nvim/src/types.ts	/^  readonly pumevent: boolean$/;"	p	interface:Env
pumvisible	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let pumvisible = await nvim.call('pumvisible')$/;"	v
pumvisible	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async pumvisible(): Promise<boolean> {$/;"	m	class:Helper
pumvisible	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let pumvisible = await nvim.call('pumvisible')$/;"	v
pumvisible	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let [ve, selection, pumvisible, mode] = await nvim.eval('[&virtualedit, &selection, pumvisib/;"	v
pure-install	.config/nvim/plugged/html5.vim/Makefile	/^pure-install:$/;"	t
push	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		Array.prototype.push.apply( this, elems );$/;"	m	class:Array
push	.vim/plugged/coc.nvim/src/model/db.ts	/^  public async push(key: string, data: number | null | boolean | string | { [index: string]: any/;"	m	class:DB
push	.vim/plugged/fzf/src/chunklist.go	/^func (c *Chunk) push(trans ItemBuilder, data []byte) bool {$/;"	f	struct:fzf.Chunk	typeref:typename:bool
pusher	.vim/plugged/fzf/src/reader.go	/^	pusher   func([]byte) bool$/;"	m	struct:fzf.Reader	typeref:typename:func([]byte) bool
pwindow	.vim/plugged/fzf/src/terminal.go	/^	pwindow    tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
python	.config/nvim/plugged/sideways.vim/spec/plugin/regression_spec.rb	/^  describe "python" do$/;"	d
python functions	.config/nvim/plugged/sideways.vim/spec/plugin/python_functions_spec.rb	/^describe "python functions" do$/;"	d
python imports	.config/nvim/plugged/sideways.vim/spec/plugin/python_imports_spec.rb	/^describe "python imports" do$/;"	d
python.jediEnabled	.config/nvim/coc-settings.json	/^    "python.jediEnabled": true,$/;"	b
python.jediEnabled	.vim/coc-settings.json	/^"python.jediEnabled": true,$/;"	b
python.jediPath	.config/nvim/coc-settings.json	/^    "python.jediPath": "\/home\/evakuator\/.local\/lib\/python3.6\/site-packages",$/;"	s
python.jediPath	.vim/coc-settings.json	/^"python.jediPath": "\/home\/evakuator\/.local\/lib\/python3.6\/site-packages"$/;"	s
python.venvPath	.config/nvim/coc-settings.json	/^    "python.venvPath": "\/home\/evakuator\/Documents\/.virtualenvs",$/;"	s
python3	.config/nvim/plugged/ultisnips/test/test_Plugin.py	/^def python3():$/;"	f
q	.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q  :if b:plug_preview==1<bar>pc<bar>endif<bar>bd<cr>$/;"	m
q	.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
q	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> q      denite#do_map('quit')$/;"	m
q	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> q    denite#do_map('quit')$/;"	m
q	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> q$/;"	m
q	.config/nvim/plugged/defx.nvim/autoload/defx/exrename.vim	/^  nnoremap <buffer><silent> q :<C-u>call <SID>exit(bufnr('%'))<CR>$/;"	m
q	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^  nmap <buffer> q    <Plug>(denite_filter_quit)$/;"	m
q	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^    map <buffer> <silent> q :bwipe<CR>$/;"	m
q	.config/nvim/plugged/vim-rails/ftplugin/railslog.vim	/^nnoremap <buffer> <silent> q :bwipe<CR>$/;"	m
q	.config/nvim/plugged/vista.vim/ftplugin/vista.vim	/^nnoremap <buffer> <silent> q     :close<CR>$/;"	m
q	.config/nvim/plugged/vista.vim/ftplugin/vista_kind.vim	/^nnoremap <buffer> <silent> q    :close<CR>$/;"	m
q	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q  :if b:plug_preview==1<bar>pc<bar>endif<bar>bd<cr>$/;"	m
q	.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
q	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  q = 113,$/;"	e	enum:CharCode
q	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^  nmap <buffer> q    <Plug>(denite_filter_quit)$/;"	m
query	.vim/plugged/fzf/src/terminal.go	/^	query         bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
queryCache	.vim/plugged/fzf/src/cache.go	/^type queryCache map[string][]Result$/;"	t	package:fzf	typeref:typename:map[string][]Result
queryCacheMax	.vim/plugged/fzf/src/constants.go	/^	queryCacheMax int = chunkSize \/ 5$/;"	c	package:fzf	typeref:typename:int
queryLen	.vim/plugged/fzf/src/terminal.go	/^	queryLen   [2]int$/;"	m	struct:fzf.Terminal	typeref:typename:[2]int
queryLen	.vim/plugged/fzf/src/terminal.go	/^	queryLen int$/;"	m	struct:fzf.itemLine	typeref:typename:int
queue	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var queue = function( elem, type, array ) {$/;"	f
queued	.vim/plugged/fzf/src/tui/light.go	/^	queued        string$/;"	m	struct:tui.LightRenderer	typeref:typename:string
quickClass	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	quickClass = new RegExp("^([#.]?)(" + chars + "*)");$/;"	v
quickExpr	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var quickExpr = \/^[^<]*(<(.|\\s)+>)[^>]*$|^#(\\w+)$\/,$/;"	v
quick_move_redraw	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^    def quick_move_redraw(table, is_define):$/;"	f	function:_quick_move	file:
quick_move_redraw	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/map.py	/^    def quick_move_redraw(table, is_define):$/;"	f	function:_quick_move	file:
quickfixes_from_response	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^def quickfixes_from_response(ctx, response):$/;"	f
quit	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def quit(self) -> None:$/;"	m	class:View
quit	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def quit(self):$/;"	m	class:Default
quit	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def quit(self):$/;"	m	class:Default
quoteEntry	.vim/plugged/fzf/src/terminal.go	/^func quoteEntry(entry string) string {$/;"	f	package:fzf	typeref:typename:string
quoteEntryCmd	.vim/plugged/fzf/src/terminal.go	/^func quoteEntryCmd(entry string) string {$/;"	f	package:fzf	typeref:typename:string
r	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> r    denite#do_map('redraw')$/;"	m
r	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> r$/;"	m
r	.config/nvim/plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.r = function(exports) {$/;"	f	function:__webpack_require__
r	.vim/plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.r = function(exports) {$/;"	f	function:__webpack_require__
r	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let r = Range.create(0, 1, 0, 2)$/;"	v
r	.vim/plugged/coc.nvim/src/__tests__/modules/position.test.ts	/^    let r = Range.create(0, 0, 0, 0)$/;"	v
r	.vim/plugged/coc.nvim/src/__tests__/modules/position.test.ts	/^    let r = Range.create(addPosition(pos, 0, -1), pos)$/;"	v
r	.vim/plugged/coc.nvim/src/__tests__/modules/position.test.ts	/^    let r = Range.create(pos, pos)$/;"	v
r	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^        let r = res[idx]$/;"	v
r	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^        r.ranges.push(range)$/;"	v
r	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let r = Range.create(positions[0], positions[1])$/;"	v
r	.vim/plugged/coc.nvim/src/languages.ts	/^          let r = item.textEdit.range$/;"	v
r	.vim/plugged/coc.nvim/src/list/basic.ts	/^      for (let r of arr) {$/;"	v
r	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  r = 114,$/;"	e	enum:CharCode
radialGradient	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^radialGradient,$/;"	s
rails#app	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#app(...) abort$/;"	f
rails#buffer	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#buffer(...)$/;"	f
rails#buffer_setup	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#buffer_setup() abort$/;"	f
rails#cache_clear	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#cache_clear(...)$/;"	f
rails#camelize	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#camelize(str) abort$/;"	f
rails#command	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#command(bang, mods, count, arg) abort$/;"	f
rails#complete_rails	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#complete_rails(ArgLead, CmdLine, P, ...) abort$/;"	f
rails#complete_rake	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#complete_rake(A,L,P) abort$/;"	f
rails#db_canonicalize	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#db_canonicalize(url) abort$/;"	f
rails#db_complete_fragment	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#db_complete_fragment(url, ...) abort$/;"	f
rails#db_test_directory	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#db_test_directory(path) abort$/;"	f
rails#get_binding_for	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#get_binding_for(pid) abort$/;"	f
rails#json_parse	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#json_parse(string) abort$/;"	f
rails#lencmp	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#lencmp(i1, i2) abort$/;"	f
rails#pack_suffixes	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#pack_suffixes(type) abort$/;"	f
rails#pluralize	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#pluralize(word, ...) abort$/;"	f
rails#revision	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#revision() abort$/;"	f
rails#ruby_cfile	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#ruby_cfile(...) abort$/;"	f
rails#ruby_setup	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#ruby_setup() abort$/;"	f
rails#singularize	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#singularize(word) abort$/;"	f
rails#sprockets_cfile	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#sprockets_cfile(...) abort$/;"	f
rails#sprockets_setup	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#sprockets_setup(type) abort$/;"	f
rails#sprockets_syntax	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#sprockets_syntax() abort$/;"	f
rails#underscore	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#underscore(str, ...) abort$/;"	f
rails#update_path	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#update_path(before, after) abort$/;"	f
rails#webpacker_setup	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#webpacker_setup(type) abort$/;"	f
rails#yaml_parse_file	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! rails#yaml_parse_file(file) abort$/;"	f
rails.vim	.config/nvim/plugged/vim-rails/README.markdown	/^# rails.vim$/;"	c
railsPluginAbolish	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^augroup railsPluginAbolish$/;"	a
railsPluginAuto	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^augroup railsPluginAuto$/;"	a
railsPluginDetect	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^augroup railsPluginDetect$/;"	a
railsPluginMake	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^augroup railsPluginMake$/;"	a
rake	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^augroup rake$/;"	a
rake#project	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! rake#project(...) abort$/;"	f
rake.vim	.config/nvim/plugged/vim-rake/README.markdown	/^# rake.vim$/;"	c
rake_command	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^augroup rake_command$/;"	a
rake_path	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^augroup rake_path$/;"	a
rake_projectionist	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^augroup rake_projectionist$/;"	a
randResult	.vim/plugged/fzf/src/merger_test.go	/^func randResult() Result {$/;"	f	package:fzf	typeref:typename:Result
range	.vim/plugged/coc.nvim/src/__tests__/list/location.test.ts	/^  range: Range.create(0, 0, 0, 6),$/;"	C
range	.vim/plugged/coc.nvim/src/__tests__/list/location.test.ts	/^  range: Range.create(2, 0, 2, 6),$/;"	C
range	.vim/plugged/coc.nvim/src/__tests__/list/location.test.ts	/^  range: Range.create(3, 0, 4, 6),$/;"	C
range	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let range = doc.getWordRangeAtPosition({ line: 0, character: 0 })$/;"	v
range	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let range = await workspace.getSelectedRange('v', doc)$/;"	v
range	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let { range, severity } = diagnostic$/;"	v
range	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^      let { range, command } = codeLens$/;"	v
range	.vim/plugged/coc.nvim/src/handler/colors.ts	/^        let { range, text } = contentChanges[0]$/;"	v
range	.vim/plugged/coc.nvim/src/handler/colors.ts	/^      let { range } = info$/;"	v
range	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^      let { color, range } = info$/;"	v
range	.vim/plugged/coc.nvim/src/handler/index.ts	/^          range: location.range,$/;"	v
range	.vim/plugged/coc.nvim/src/handler/index.ts	/^      for (let range of ranges.reverse()) {$/;"	v
range	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let range = await workspace.getSelectedRange(visualmode, doc)$/;"	v
range	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let range = doc.getWordRangeAtPosition(position)$/;"	v
range	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let range: Range = Range.create(0, 0, doc.lineCount, 0)$/;"	v
range	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let { uri, range } = location$/;"	v
range	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let range: Range$/;"	v
range	.vim/plugged/coc.nvim/src/handler/index.ts	/^  range: Range$/;"	p	interface:SymbolInfo
range	.vim/plugged/coc.nvim/src/languages.ts	/^      let range = Range.create(Position.create(0, 0), end)$/;"	v
range	.vim/plugged/coc.nvim/src/languages.ts	/^      let range = doc.getWordRangeAtPosition(position)$/;"	v
range	.vim/plugged/coc.nvim/src/languages.ts	/^    let { range, newText } = textEdit$/;"	v
range	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let ec = i == range.end.line ? range.end.character : curr.length$/;"	v
range	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let sc = i == range.start.line ? range.start.character : 0$/;"	v
range	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let { range, uri } = await this.convertLocation(location)$/;"	v
range	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let { uri, range } = location$/;"	v
range	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^    let range: Range$/;"	v
range	.vim/plugged/coc.nvim/src/model/document.ts	/^    for (let range of splited) {$/;"	v
range	.vim/plugged/coc.nvim/src/provider/manager.ts	/^          let { uri, range } = d$/;"	v
range	.vim/plugged/coc.nvim/src/provider/manager.ts	/^        let { uri, range } = def$/;"	v
range	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let { range } = edit$/;"	v
range	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let { range } = this$/;"	v
range	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^  range: Range$/;"	p	interface:CocSnippetPlaceholder
range	.vim/plugged/coc.nvim/src/types.ts	/^  range?: Range$/;"	p	interface:QuickfixItem
range	.vim/plugged/coc.nvim/src/util/position.ts	/^  let { range, newText } = edit$/;"	v
range	.vim/plugged/coc.nvim/src/workspace.ts	/^    let range = Range.create(document.getPosition(sl, sc), document.getPosition(el, ec))$/;"	v
range	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { uri, range } = loc$/;"	v
rangeEllipsis	.vim/plugged/fzf/src/tokenizer.go	/^const rangeEllipsis = 0$/;"	c	package:fzf
rangeInRange	.vim/plugged/coc.nvim/src/util/position.ts	/^export function rangeInRange(r: Range, range: Range): boolean {$/;"	f
rangeIntersect	.vim/plugged/coc.nvim/src/util/position.ts	/^export function rangeIntersect(r: Range, range: Range): boolean {$/;"	f
rangeLength	.vim/plugged/coc.nvim/src/model/document.ts	/^        rangeLength: change.end - change.start,$/;"	v
rangeOverlap	.vim/plugged/coc.nvim/src/util/position.ts	/^export function rangeOverlap(r: Range, range: Range): boolean {$/;"	f
ranges	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let ranges = manager.getSortedRanges(doc.uri)$/;"	v
ranges	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let ranges = doc.getSymbolRanges('foo')$/;"	v
ranges	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let ranges: Range[] = [$/;"	v
ranges	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let ranges = diagnostics.map(o => o.range)$/;"	v
ranges	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let ranges = this.getSortedRanges(document.uri, severity)$/;"	v
ranges	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^  ranges: Range[]$/;"	p	interface:ColorRanges
ranges	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let ranges = await languages.provideFoldingRanges(document.textDocument, {})$/;"	v
ranges	.vim/plugged/coc.nvim/src/languages.ts	/^      let ranges = doc.getSymbolRanges(word)$/;"	v
rb	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^rb,$/;"	s
rdfa_attributes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let rdfa_attributes = {'about': [], 'content': [], 'datatype': [], 'prefix': [], 'profile': /;"	v
rdfa_attributes_value	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let rdfa_attributes_value = {$/;"	v
read	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def read(self, cnt):$/;"	m	class:SocketToStream
readFile	.vim/plugged/coc.nvim/src/types.ts	/^  readFile(uri: string): Promise<string>$/;"	m	interface:IWorkspace
readFile	.vim/plugged/coc.nvim/src/util/fs.ts	/^export function readFile(fullpath: string, encoding: string): Promise<string> {$/;"	f
readFileLine	.vim/plugged/coc.nvim/src/util/fs.ts	/^export function readFileLine(fullpath: string, count: number): Promise<string> {$/;"	f
readFromCommand	.vim/plugged/fzf/src/reader.go	/^func (r *Reader) readFromCommand(shell string, cmd string) bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readFromStdin	.vim/plugged/fzf/src/reader.go	/^func (r *Reader) readFromStdin() bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
read_text_file	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^def read_text_file(filename):$/;"	f
readable	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/util.py	/^def readable(path: Path) -> bool:$/;"	f
readdirAsync	.vim/plugged/coc.nvim/src/util/fs.ts	/^export const readdirAsync = util.promisify(fs.readdir)$/;"	C
reader	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  reader: MessageReader$/;"	p	interface:MessageTransports
reader	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  reader: NodeJS.ReadableStream$/;"	p	interface:StreamInfo
readerBufferSize	.vim/plugged/fzf/src/constants.go	/^	readerBufferSize       = 64 * 1024$/;"	c	package:fzf
readerPollIntervalMax	.vim/plugged/fzf/src/constants.go	/^	readerPollIntervalMax  = 50 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalMin	.vim/plugged/fzf/src/constants.go	/^	readerPollIntervalMin  = 10 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalStep	.vim/plugged/fzf/src/constants.go	/^	readerPollIntervalStep = 5 * time.Millisecond$/;"	c	package:fzf
reading	.vim/plugged/fzf/src/terminal.go	/^	reading    bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
readonce	.vim/plugged/fzf/test/test_go.rb	/^  def readonce$/;"	f	class:TestBase
ready	.vim/plugged/coc.nvim/src/plugin.ts	/^  public get ready(): Promise<void> {$/;"	m	class:Plugin
readyBound	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var readyBound = false;$/;"	v
realpathAsync	.vim/plugged/coc.nvim/src/util/fs.ts	/^export const realpathAsync = util.promisify(fs.realpath)$/;"	C
reason	.vim/plugged/coc.nvim/src/types.ts	/^  reason: TextDocumentSaveReason$/;"	p	interface:TextDocumentWillSaveEvent
reason	.vim/plugged/coc.nvim/src/workspace.ts	/^      reason: TextDocumentSaveReason.Manual$/;"	v
receive	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def receive(self, bytes=1024):$/;"	m	class:Socket
receive	.vim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def receive(self, bytes=1024):$/;"	m	class:Socket
recentFiles	.vim/plugged/coc.nvim/src/list/worker.ts	/^  private recentFiles: string[] = []$/;"	p	class:Worker
recentScore	.vim/plugged/coc.nvim/src/list/worker.ts	/^          let { recentScore } = item$/;"	v
recentScore	.vim/plugged/coc.nvim/src/types.ts	/^  recentScore?: number$/;"	p	interface:ListItem
recentScore	.vim/plugged/coc.nvim/src/types.ts	/^  recentScore?: number$/;"	p	interface:VimCompleteItem
record	.config/nvim/plugged/html5.vim/Makefile	/^record: mkfilelist mkrecordscript$/;"	t
record_file	.config/nvim/plugged/html5.vim/Makefile	/^record_file = \\$/;"	m
rect	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^rect,$/;"	s
recurse	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const recurse = visitor(marker)$/;"	C	function:walk
recursive	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { ignoreIfNotExists, recursive } = opts$/;"	v
red	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    let { red, green, blue } = toHexColor(color)$/;"	v
red	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^  let { red, green, blue } = color$/;"	v
redraw	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def redraw(self, is_force: bool = False) -> None:$/;"	m	class:View
redraw	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def redraw(self, is_force=True):$/;"	m	class:Default
redraw	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def redraw(self, is_force=True):$/;"	m	class:Default
redraw	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) redraw() {$/;"	f	struct:fzf.Terminal
reference	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "reference": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
reference	.vim/plugged/coc.nvim/data/schema.json	/^        "reference": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
referrerpolicy	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let referrerpolicy = ['no-referrer', 'no-referrer-when-downgrade', 'same-origin', 'origin', 'str/;"	v
reform_bytes	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^def reform_bytes(value):$/;"	f
reform_bytes	.vim/plugged/denite.nvim/rplugin/python3/denite/vim.py	/^def reform_bytes(value):$/;"	f
refresh	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_base.py	/^    def refresh(self):$/;"	m	class:SnippetSource
refresh	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/_base.py	/^    def refresh(self):$/;"	m	class:SnippetFileSource
refresh	.vim/plugged/coc.nvim/src/__tests__/modules/sources.test.ts	/^      refresh: fn$/;"	v
refresh	.vim/plugged/coc.nvim/src/model/source-vim.ts	/^  public async refresh(): Promise<void> {$/;"	m	class:VimSource
refresh	.vim/plugged/coc.nvim/src/model/source.ts	/^  public async refresh(): Promise<void> {$/;"	m	class:Source
refresh	.vim/plugged/coc.nvim/src/types.ts	/^  refresh?(): Promise<void>$/;"	m	interface:ISource
refresh	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) refresh() {$/;"	f	struct:fzf.Terminal
refreshAfterSave	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let { refreshOnInsertMode, refreshAfterSave } = this.config$/;"	v
refreshAfterSave	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  refreshAfterSave: boolean$/;"	p	interface:DiagnosticConfig
refreshOnInsertMode	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let { refreshOnInsertMode, refreshAfterSave } = this.config$/;"	v
refreshOnInsertMode	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  refreshOnInsertMode: boolean$/;"	p	interface:DiagnosticConfig
refreshed	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      let refreshed = this.refreshBuffer(doc.uri)$/;"	v
regex	.vim/plugged/coc.nvim/src/list/worker.ts	/^          for (let regex of regexes) {$/;"	v
regex	.vim/plugged/fzf/src/tokenizer.go	/^	regex *regexp.Regexp$/;"	m	struct:fzf.Delimiter	typeref:typename:*regexp.Regexp
regexFindMode	vimium-options.json	/^  "regexFindMode": false,$/;"	b
regexOptions	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let regexOptions = ''$/;"	v
regexValue	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let regexValue = ''$/;"	v
regex_convert_py_vim	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def regex_convert_py_vim(expr):$/;"	f
regex_convert_py_vim	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def regex_convert_py_vim(expr):$/;"	f
regex_convert_str_vim	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def regex_convert_str_vim(string):$/;"	f
regex_convert_str_vim	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def regex_convert_str_vim(string):$/;"	f
regexes	.vim/plugged/coc.nvim/src/list/worker.ts	/^        let regexes = inputs.reduce((p, c) => {$/;"	v
regexp	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public regexp: RegExp$/;"	p	class:Transform
regist	.vim/plugged/coc.nvim/src/source/around.ts	/^export function regist(sourceMap: Map<string, ISource>): Disposable {$/;"	f
regist	.vim/plugged/coc.nvim/src/source/buffer.ts	/^export function regist(sourceMap: Map<string, ISource>): Disposable {$/;"	f
regist	.vim/plugged/coc.nvim/src/source/file.ts	/^export function regist(sourceMap: Map<string, ISource>): Disposable {$/;"	f
registed	.vim/plugged/coc.nvim/src/services.ts	/^  private readonly registed: Map<string, IServiceProvider> = new Map()$/;"	p	class:ServiceManager
register	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public register($/;"	m	class:DidOpenTextDocumentFeature
register	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public register($/;"	m	class:DidSaveTextDocumentFeature
register	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  register(message: RPCMessageType, data: RegistrationData<T>): void$/;"	m	interface:DynamicFeature
register	.vim/plugged/coc.nvim/src/provider/codeActionmanager.ts	/^  public register(selector: DocumentSelector, provider: CodeActionProvider, clientId: string, co/;"	m	class:CodeActionManager
register	.vim/plugged/coc.nvim/src/provider/codeLensManager.ts	/^  public register(selector: DocumentSelector, provider: CodeLensProvider): Disposable {$/;"	m	class:CodeLensManager
register	.vim/plugged/coc.nvim/src/provider/declarationManager.ts	/^  public register(selector: DocumentSelector, provider: DeclarationProvider): Disposable {$/;"	m	class:DeclarationManager
register	.vim/plugged/coc.nvim/src/provider/definitionManager.ts	/^  public register(selector: DocumentSelector, provider: DefinitionProvider): Disposable {$/;"	m	class:DefinitionManager
register	.vim/plugged/coc.nvim/src/provider/documentColorManager.ts	/^  public register(selector: DocumentSelector, provider: DocumentColorProvider): Disposable {$/;"	m	class:DocumentColorManager
register	.vim/plugged/coc.nvim/src/provider/documentHighlightManager.ts	/^  public register(selector: DocumentSelector, provider: DocumentHighlightProvider): Disposable {$/;"	m	class:DocumentHighlightManager
register	.vim/plugged/coc.nvim/src/provider/documentLinkManager.ts	/^  public register(selector: DocumentSelector, provider: DocumentLinkProvider): Disposable {$/;"	m	class:DocumentLinkManager
register	.vim/plugged/coc.nvim/src/provider/documentSymbolManager.ts	/^  public register(selector: DocumentSelector, provider: DocumentSymbolProvider): Disposable {$/;"	m	class:DocumentSymbolManager
register	.vim/plugged/coc.nvim/src/provider/foldingRangeManager.ts	/^  public register(selector: DocumentSelector, provider: FoldingRangeProvider): Disposable {$/;"	m	class:FoldingRangeManager
register	.vim/plugged/coc.nvim/src/provider/formatManager.ts	/^  public register(selector: DocumentSelector,$/;"	m	class:FormatManager
register	.vim/plugged/coc.nvim/src/provider/formatRangeManager.ts	/^  public register(selector: DocumentSelector,$/;"	m	class:FormatRangeManager
register	.vim/plugged/coc.nvim/src/provider/hoverManager.ts	/^  public register(selector: DocumentSelector, provider: HoverProvider): Disposable {$/;"	m	class:HoverManager
register	.vim/plugged/coc.nvim/src/provider/implementatioinManager.ts	/^  public register(selector: DocumentSelector, provider: ImplementationProvider): Disposable {$/;"	m	class:ImplementationManager
register	.vim/plugged/coc.nvim/src/provider/rangeManager.ts	/^  public register(selector: DocumentSelector, provider: SelectionRangeProvider): Disposable {$/;"	m	class:SelectionRangeManager
register	.vim/plugged/coc.nvim/src/provider/referenceManager.ts	/^  public register(selector: DocumentSelector, provider: ReferenceProvider): Disposable {$/;"	m	class:ReferenceManager
register	.vim/plugged/coc.nvim/src/provider/renameManager.ts	/^  public register(selector: DocumentSelector, provider: RenameProvider): Disposable {$/;"	m	class:RenameManager
register	.vim/plugged/coc.nvim/src/provider/signatureManager.ts	/^  public register(selector: DocumentSelector, provider: SignatureHelpProvider, triggerCharacters/;"	m	class:SignatureManager
register	.vim/plugged/coc.nvim/src/provider/typeDefinitionManager.ts	/^  public register(selector: DocumentSelector, provider: TypeDefinitionProvider): Disposable {$/;"	m	class:TypeDefinitionManager
register	.vim/plugged/coc.nvim/src/provider/workspaceSymbolsManager.ts	/^  public register(selector: DocumentSelector, provider: WorkspaceSymbolProvider): Disposable {$/;"	m	class:WorkspaceSymbolManager
registerBuiltinFeatures	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  protected registerBuiltinFeatures(): void {$/;"	m	class:LanguageClient
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider($/;"	m	class:CodeActionFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider($/;"	m	class:CodeLensFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider($/;"	m	class:CompletionItemFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider($/;"	m	class:DefinitionFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider($/;"	m	class:DocumentFormattingFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider($/;"	m	class:DocumentHighlightFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider($/;"	m	class:DocumentLinkFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider($/;"	m	class:DocumentRangeFormattingFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider($/;"	m	class:DocumentSymbolFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider($/;"	m	class:HoverFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider($/;"	m	class:ReferencesFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider($/;"	m	class:SignatureHelpFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider(options: DocumentOnTypeFormattingRegistrationOptions): Disp/;"	m	class:DocumentOnTypeFormattingFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider(options: RenameRegistrationOptions): Disposable {$/;"	m	class:RenameFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  protected registerLanguageProvider(options: TextDocumentRegistrationOptions): Disposable {$/;"	m	class:WorkspaceSymbolFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^  protected registerLanguageProvider($/;"	m	class:ColorProviderFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/declaration.ts	/^  protected registerLanguageProvider(options: TextDocumentRegistrationOptions): Disposable {$/;"	m	class:DeclarationFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^  protected registerLanguageProvider($/;"	m	class:FoldingRangeFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/implementation.ts	/^  protected registerLanguageProvider(options: TextDocumentRegistrationOptions): Disposable {$/;"	m	class:ImplementationFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^  protected registerLanguageProvider(options: TextDocumentRegistrationOptions): Disposable {$/;"	m	class:SelectionRangeFeature
registerLanguageProvider	.vim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^  protected registerLanguageProvider(options: TextDocumentRegistrationOptions): Disposable {$/;"	m	class:TypeDefinitionFeature
registerOptions	.vim/plugged/coc.nvim/src/language-client/client.ts	/^          registerOptions: options$/;"	C
registerOptions	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  registerOptions: T$/;"	p	interface:RegistrationData
registerProposedFeatures	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  public registerProposedFeatures(): void {$/;"	m	class:LanguageClient
registerTextDocumentContentProvider	.vim/plugged/coc.nvim/src/types.ts	/^  registerTextDocumentContentProvider(scheme: string, provider: TextDocumentContentProvider): Di/;"	m	interface:IWorkspace
register_snippet_source	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def register_snippet_source(self, name, snippet_source):$/;"	m	class:SnippetManager
registration	.vim/plugged/coc.nvim/src/commands.ts	/^    for (const registration of this.commands.values()) {$/;"	C
registration	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      for (let registration of params.registrations) {$/;"	v
regression fixes	.config/nvim/plugged/switch.vim/spec/plugin/regression_spec.rb	/^describe "regression fixes" do$/;"	d
regression tests	.config/nvim/plugged/sideways.vim/spec/plugin/regression_spec.rb	/^describe "regression tests" do$/;"	d
reject	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public reject(error: any): void {$/;"	m	class:OnReady
rel	.vim/plugged/coc.nvim/src/workspace.ts	/^    let rel = path.relative(cwd, filepath)$/;"	v
relationship_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let relationship_attributes = {$/;"	v
relative	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^  relative: 'cursor' | 'win' | 'editor'$/;"	p	interface:WindowConfig
relative_path	.vim/plugged/coc.nvim/src/watchman.ts	/^  private relative_path: string | undefined$/;"	p	class:Watchman
relative_path	.vim/plugged/coc.nvim/src/watchman.ts	/^  relative_path?: string$/;"	C
release	.config/nvim/plugged/emmet-vim/Makefile	/^release: emmet-vim.zip$/;"	t
release	.config/nvim/plugged/html5.vim/Makefile	/^release:$/;"	t
release	.vim/plugged/fzf/Makefile	/^release: target\/$(BINARY32) target\/$(BINARY64) target\/$(BINARYARM5) target\/$(BINARYARM6) tar/;"	t
release	.vim/plugged/fzf/Makefile	/^release: target\/$(BINARY32) target\/$(BINARY64)$/;"	t
release-all	.vim/plugged/fzf/Makefile	/^release-all: clean test$/;"	t
reload	.vim/plugged/coc.nvim/src/list/basic.ts	/^  reload?: boolean$/;"	p	interface:ActionOptions
reload	.vim/plugged/coc.nvim/src/types.ts	/^  reload?: boolean$/;"	p	interface:ListAction
reload	.vim/plugged/coc.nvim/src/types.ts	/^  reload?: boolean$/;"	p	interface:ListItemsEvent
relpath	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def relpath(vim: Nvim, path):$/;"	f
relpath	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def relpath(vim: Nvim, path):$/;"	f
relrev	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let relrev = ['chapter', 'contents', 'copyright', 'first', 'glossary', 'help', 'icon', 'inde/;"	v
remain	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let remain = pre.replace(\/[\\w$]+([^\\w$]+)?$\/, '')$/;"	v
remain	.vim/plugged/coc.nvim/src/list/worker.ts	/^          let remain = totalItems.slice(count)$/;"	v
remains	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let remains = results.filter(res => res.isIncomplete != true)$/;"	v
remember_buffer	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def remember_buffer(self, to):$/;"	m	class:VimState
remember_position	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def remember_position(self):$/;"	m	class:VimState
remember_unnamed_register	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def remember_unnamed_register(self, text_to_expect):$/;"	m	class:VimState
remembered_buffer	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def remembered_buffer(self):$/;"	m	class:VimState
remove	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	remove: function(elem, types, handler) {$/;"	m	class:jQuery.event
remove	.vim/plugged/coc.nvim/src/model/mru.ts	/^  public async remove(item: string): Promise<void> {$/;"	m	class:Mru
remove	.vim/plugged/fzf/uninstall	/^remove() {$/;"	f
remove-zip	.config/nvim/plugged/emmet-vim/Makefile	/^remove-zip:$/;"	t
removeComments	tsconfig.json	/^    "removeComments": true,$/;"	b	object:compilerOptions
removeFromValueTree	.vim/plugged/coc.nvim/src/configuration/util.ts	/^export function removeFromValueTree(valueTree: any, key: string): void {$/;"	f
remove_line	.vim/plugged/fzf/uninstall	/^remove_line() {$/;"	f
removed	.vim/plugged/coc.nvim/src/configuration/util.ts	/^  const removed = fromKeys.filter(key => toKeys.indexOf(key) === -1)$/;"	C	function:getChangedKeys
removed	.vim/plugged/coc.nvim/src/types.ts	/^  removed: string$/;"	p	interface:ChangeItem
removed	.vim/plugged/coc.nvim/src/util/position.ts	/^  let character = pre + pos.character + lastLine.length - removed$/;"	v
removed	.vim/plugged/coc.nvim/src/util/position.ts	/^  let removed = start.line == end.line && newLines.length == 1 ? end.character - start.character/;"	v
removed	.vim/plugged/coc.nvim/src/workspace.ts	/^    let removed = this._workspaceFolders[idx]$/;"	v
removedGlobalStub	.vim/plugged/coc.nvim/src/util/factory.ts	/^function removedGlobalStub(name: string): Function {$/;"	C
renameAsync	.vim/plugged/coc.nvim/src/util/fs.ts	/^export function renameAsync(oldPath: string, newPath: string): Promise<void> {$/;"	f
renameFile	.vim/plugged/coc.nvim/src/types.ts	/^  renameFile(oldPath: string, newPath: string, opts?: RenameFileOptions): Promise<void>$/;"	m	interface:IWorkspace
renameProvider	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^            renameProvider: {$/;"	v
renameTo	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def renameTo(name):$/;"	f
renderer	.vim/plugged/fzf/src/tui/light.go	/^	renderer *LightRenderer$/;"	m	struct:tui.LightWindow	typeref:typename:*LightRenderer
repeat	.vim/plugged/coc.nvim/src/types.ts	/^  repeat: boolean$/;"	p	interface:KeymapOption
repeat	.vim/plugged/fzf/src/tui/light.go	/^func repeat(r rune, times int) string {$/;"	f	package:tui	typeref:typename:string
repeat#invalidate	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#invalidate()$/;"	f
repeat#run	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#run(count)$/;"	f
repeat#set	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#set(sequence,...)$/;"	f
repeat#setreg	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#setreg(sequence,register)$/;"	f
repeat#wrap	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#wrap(command,count)$/;"	f
repeat.vim	.config/nvim/plugged/vim-repeat/README.markdown	/^# repeat.vim$/;"	c
repeatPlugin	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^augroup repeatPlugin$/;"	a
repeat_custom_motion	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^    augroup repeat_custom_motion$/;"	a
replace	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_transformation.py	/^    def replace(self, match):$/;"	m	class:_CleverReplace
replacePlaceholder	.vim/plugged/fzf/src/terminal.go	/^func replacePlaceholder(template string, stripAnsi bool, delimiter Delimiter, forcePlus bool, qu/;"	f	package:fzf	typeref:typename:string
replace_initial_text	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_snippet_instance.py	/^    def replace_initial_text(self, buf):$/;"	m	class:SnippetInstance
replace_vars	.config/nvim/plugged/ultisnips/utils/get_tm_snippets.py	/^def replace_vars(m):$/;"	f
replacement	.vim/plugged/coc.nvim/src/types.ts	/^  replacement: string[]$/;"	p	interface:ChangedLines
replay_user_edits	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_snippet_instance.py	/^    def replay_user_edits(self, cmds, ctab=None):$/;"	m	class:SnippetInstance
repo	.config/nvim/plugged/emmet-vim/docs/index.html	/^			<article id="repo">$/;"	I
repository	.config/nvim/plugged/coc.nvim/package.json	/^  "repository": {$/;"	o
repository	.config/nvim/plugged/gruvbox/package.json	/^  "repository": "git@github.com:morhetz\/gruvbox.git",$/;"	s
repository	.config/nvim/plugged/vim-snippets/addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/snipmate-snippets.git"},$/;"	o
repository	.vim/plugged/coc.nvim/package.json	/^  "repository": {$/;"	o
repository	.vim/plugged/vim-snippets/addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/snipmate-snippets.git"},$/;"	o
repro	.config/nvim/plugged/ultisnips/Makefile	/^repro:$/;"	t
req	.vim/plugged/coc.nvim/src/plugin.ts	/^      const req = https.request('https:\/\/api.github.com\/repos\/neoclide\/coc.nvim\/releases\//;"	C	method:Plugin.updateExtension
req	.vim/plugged/coc.nvim/src/util/factory.ts	/^  const req: any = (p: string) => {$/;"	C	function:makeRequireFunction
reqBox	.vim/plugged/fzf/src/matcher.go	/^	reqBox         *util.EventBox$/;"	m	struct:fzf.Matcher	typeref:typename:*util.EventBox
reqBox	.vim/plugged/fzf/src/terminal.go	/^	reqBox     *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
reqClose	.vim/plugged/fzf/src/terminal.go	/^	reqClose$/;"	c	package:fzf
reqHeader	.vim/plugged/fzf/src/terminal.go	/^	reqHeader$/;"	c	package:fzf
reqInfo	.vim/plugged/fzf/src/terminal.go	/^	reqInfo$/;"	c	package:fzf
reqJump	.vim/plugged/fzf/src/terminal.go	/^	reqJump$/;"	c	package:fzf
reqList	.vim/plugged/fzf/src/terminal.go	/^	reqList$/;"	c	package:fzf
reqPreviewDisplay	.vim/plugged/fzf/src/terminal.go	/^	reqPreviewDisplay$/;"	c	package:fzf
reqPreviewEnqueue	.vim/plugged/fzf/src/terminal.go	/^	reqPreviewEnqueue$/;"	c	package:fzf
reqPreviewRefresh	.vim/plugged/fzf/src/terminal.go	/^	reqPreviewRefresh$/;"	c	package:fzf
reqPrintQuery	.vim/plugged/fzf/src/terminal.go	/^	reqPrintQuery$/;"	c	package:fzf
reqPrompt	.vim/plugged/fzf/src/terminal.go	/^	reqPrompt util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
reqQuit	.vim/plugged/fzf/src/terminal.go	/^	reqQuit$/;"	c	package:fzf
reqRedraw	.vim/plugged/fzf/src/terminal.go	/^	reqRedraw$/;"	c	package:fzf
reqRefresh	.vim/plugged/fzf/src/terminal.go	/^	reqRefresh$/;"	c	package:fzf
reqReinit	.vim/plugged/fzf/src/terminal.go	/^	reqReinit$/;"	c	package:fzf
reqReset	.vim/plugged/fzf/src/matcher.go	/^	reqReset$/;"	c	package:fzf
reqRetry	.vim/plugged/fzf/src/matcher.go	/^	reqRetry util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
request	.vim/plugged/coc.nvim/src/types.ts	/^  request?: boolean$/;"	p	interface:Autocmd
request	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^    import urllib2 as request$/;"	I
request	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def request(cls, vimsock, channel, reqid, event, args, rspid):$/;"	m	class:NvimHandler
requestInput	.vim/plugged/coc.nvim/src/types.ts	/^  requestInput(title: string, defaultValue?: string): Promise<string>$/;"	m	interface:IWorkspace
request_queue	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^request_queue = Queue()$/;"	v
require	.vim/plugged/coc.nvim/src/util/factory.ts	/^      return require('..\/index')$/;"	C	function:makeRequireFunction
require	.vim/plugged/coc.nvim/src/util/factory.ts	/^    const args = [this.exports, require, this, filename, dirname]$/;"	C	function:compileInSandbox
require	.vim/plugged/coc.nvim/src/util/factory.ts	/^    const require = makeRequireFunction.call(this)$/;"	C	function:compileInSandbox
require	.vim/plugged/coc.nvim/src/util/factory.ts	/^  require: (file: string) => NodeModule$/;"	p	interface:IModule
require	.vim/plugged/coc.nvim/src/util/factory.ts	/^  require: (p: string) => any$/;"	p	interface:ISandbox
requireFunc	.vim/plugged/coc.nvim/src/util/factory.ts	/^const requireFunc = typeof __webpack_require__ === "function" ? __non_webpack_require__ : requir/;"	C
requireFunc	.vim/plugged/coc.nvim/src/workspace.ts	/^const requireFunc = typeof __webpack_require__ === "function" ? __non_webpack_require__ : requir/;"	C
requireRootPattern	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "requireRootPattern": {$/;"	o	object:definitions.languageServerBase.properties
requireRootPattern	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "requireRootPattern": {},$/;"	o	object:definitions.languageServerCommand.properties
requireRootPattern	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "requireRootPattern": {},$/;"	o	object:definitions.languageServerModule.properties
requireRootPattern	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "requireRootPattern": {},$/;"	o	object:definitions.languageServerSocket.properties
requireRootPattern	.vim/plugged/coc.nvim/data/schema.json	/^        "requireRootPattern": {$/;"	o	object:definitions.languageServerBase.properties
requireRootPattern	.vim/plugged/coc.nvim/data/schema.json	/^        "requireRootPattern": {},$/;"	o	object:definitions.languageServerCommand.properties
requireRootPattern	.vim/plugged/coc.nvim/data/schema.json	/^        "requireRootPattern": {},$/;"	o	object:definitions.languageServerModule.properties
requireRootPattern	.vim/plugged/coc.nvim/data/schema.json	/^        "requireRootPattern": {},$/;"	o	object:definitions.languageServerSocket.properties
required	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "required": ["command", "filetypes"],$/;"	a	object:definitions.languageServerCommand
required	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "required": ["module", "filetypes"],$/;"	a	object:definitions.languageServerModule
required	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "required": ["port", "filetypes"],$/;"	a	object:definitions.languageServerSocket
required	.vim/plugged/coc.nvim/data/schema.json	/^      "required": ["command", "filetypes"],$/;"	a	object:definitions.languageServerCommand
required	.vim/plugged/coc.nvim/data/schema.json	/^      "required": ["module", "filetypes"],$/;"	a	object:definitions.languageServerModule
required	.vim/plugged/coc.nvim/data/schema.json	/^      "required": ["port", "filetypes"],$/;"	a	object:definitions.languageServerSocket
required	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^        let { optional, required } = obj[1]$/;"	v
required	.vim/plugged/coc.nvim/src/extensions.ts	/^      let required = engines.coc.replace(\/^\\^\/, '>=')$/;"	v
required	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let required = config.get<boolean>('requireRootPattern', false)$/;"	v
requiredCapabilities	.vim/plugged/coc.nvim/src/watchman.ts	/^const requiredCapabilities = ['relative_root', 'cmd-watch-project', 'wildmatch']$/;"	C
res	.vim/plugged/coc.nvim/src/__tests__/client/changedFiles.test.ts	/^        let res = await client.sendRequest('custom\/received')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/client/converter.test.ts	/^    let res = cv.asSaveTextDocumentParams(createDocument(), true)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/client/converter.test.ts	/^    let res = cv.asVersionedTextDocumentIdentifier(createDocument())$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/client/converter.test.ts	/^    let res = cv.asWillSaveTextDocumentParams({ document: createDocument(), reason: TextDocument/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/client/processes.test.ts	/^    let res = terminate(child, cwd)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let res = await helper.visible('foo', 'around')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let res = await helper.visible('foo', 'float')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let res = await helper.visible('foo', 'pattern')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let res = await helper.visible('foo', 'trigger')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^    let res = await helper.visible('foo', 'around')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^    let res = await helper.visible('other', 'buffer')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^    let res = await helper.visible(items[0].word, 'file')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^      let res = list.parseArguments(['-input', 'foo'])$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^      let res = list.parseArguments(['-w'])$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^      let res = list.parseArguments(['-word'])$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/array.test.ts	/^    let res = arrays.flatMap(objs, values)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/array.test.ts	/^    let res = arrays.lastIndex([1, 2, 3], x => x < 3)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/chars.test.ts	/^    let res = chars.matchKeywords('blackкофе')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/chars.test.ts	/^    let res = chars.matchKeywords('foo bar')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/colors.test.ts	/^    let res = colors.hasColor(doc.bufnr)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let res = conf.get<string>('trace.server', '')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let res = convertErrors('file:\/\/\/1', 'abc', errors)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let res = getChangedKeys({ x: 1, c: { d: 4 } }, { x: 1, b: { x: 5 } })$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let res = getChangedKeys({ y: 2 }, { x: 1 })$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let res = getConfigurationValue(root, 'foo.from.to', 1)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let res = getKeys({$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/db.test.ts	/^    let res = await db.fetch('foo')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/db.test.ts	/^    let res = await db.fetch('x')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let res = await buffer.getVar('coc_diagnostic_info')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let res = manager.getDiagnosticsInRange(doc.textDocument, Range.create(0, 0, 0, 3))$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/diff.test.ts	/^    let res = diffLines('a\\n', 'a\\nb\\n')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/diff.test.ts	/^    let res = diffLines('a\\n', 'b\\n')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/diff.test.ts	/^    let res = diffLines('a\\n\\n', 'a\\n')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/diff.test.ts	/^    let res = diffLines('a\\n\\n\\n', 'a\\n')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/diff.test.ts	/^    let res = diffLines('a\\n\\n\\nb', 'a\\n\\nb')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/diff.test.ts	/^    let res = patchLine('foo', 'bar foo bar')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let res = await nvim.call('getmatches')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let res = doc.getLocalifyBonus(pos, pos)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let res = await extensions.call('test', 'echo', ['5'])$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let res = extensions.getExtensionApi('test') as any$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let res = extensions.has('test')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/floatBuffer.test.ts	/^    let res = buf.splitFragment(fragment, 'js')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/floatBuffer.test.ts	/^    let res = buf.splitFragment(fragment, 'typescript')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/floatFactory.test.ts	/^    let res = await floatFactory.getBoundings(docs)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/memos.test.ts	/^    let res = memo.get<any>('f.o.o', 'default')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/memos.test.ts	/^    let res = memo.get<any>('xyz')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/memos.test.ts	/^    let res = memo.get<string>('foo.bar')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/mru.test.ts	/^    let res = await mru.load()$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/plugin.test.ts	/^    let res = await nvim.call('execute', `helptags ${dir}`) as string$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/position.test.ts	/^    let res = getChangedPosition(pos, edit)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/score.test.ts	/^    let res = getMatchResult('LICENSES\/preferred\/MIT', 'lsit')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/score.test.ts	/^    let res = getMatchResult('\/coc.nvim\/Coc.txt', 'coc', 'Coc.txt')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/score.test.ts	/^    let res = getMatchResult('\/coc.nvim\/cdoxc.txt', 'coc', 'cdoxc.txt')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/score.test.ts	/^    let res = getMatchResult('\/coc.nvim\/coc.txt', 'coc', 'coc.txt')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/score.test.ts	/^    let res = getMatchResult('\/foob\/baxr\/xyz', 'fbx')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/score.test.ts	/^    let res = getMatchResult('foobarzyx', 'fbx')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^      let res = await getHiglights(['foo'], filetype)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let res = ansiparse(str)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let res = await getHiglights([$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let res = await isGitIgnored(__filename)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let res = await isGitIgnored(path.resolve(__dirname, '..\/lib\/index.js.map'))$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let res = await mkdirp(dir)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let res = await statAsync(__filename)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let res = await statAsync(path.join(__dirname, 'file_not_exist'))$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let res = mixin({ a: { b: 1 } }, { a: { c: 2 }, d: 3 })$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let res = resolveRoot(__dirname, ['.config'])$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let res = resolveRoot(__dirname, ['.git'])$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let res = resolveRoot(root, ['package.json'])$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let res = resolveVariables('${workspace}\/foo', { workspace: '\/home' })$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^          res[key] = true$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^        let res = {}$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^    let res = await client.checkCapability()$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^    let res = await client.watchProject('\/tmp\/coc')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let res = await db.exists('xyz')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let res = await p$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let res = await workspace.applyEdit(workspaceEdit)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let res = await workspace.applyEdit({ changes })$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let res = await workspace.applyEdit({ documentChanges })$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let res = await workspace.resolveModule('foo')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let res = await workspace.resolveModule('typescript')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let res = await workspace.resolveRootFolder(uri, ['.git'])$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let res = await workspace.runCommand('ls', __dirname, 1)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let res = await workspace.runTerminalCommand('ls', __dirname)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start(' ${1:aa} ', false)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start(' ${1:aa} bb $1')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('${1:a} ${2:b} c')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('${1:a} ${2:b}')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('${1:a} ${2:b}', false)$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('${1:a}bc')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('${1:foo} $0 ')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('${1:foo} ${2:bar}')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('${1:foo} bar$0')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('${1:foo}')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('${1\/..*\/ -> \/}xy$1')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('${1} ${2\/^_(.*)\/$2\/}bar$2')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('${TM_LINE_NUMBER}')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('${TM_SELECTION}')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('a${1:a}b')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('bar$0')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('bar$0', true, Range.create(0, 0, 0, 3))$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('foo ${1:foo}')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('foo\\n')$/;"	v
res	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let res = await session.start('x\\n')$/;"	v
res	.vim/plugged/coc.nvim/src/attach.ts	/^      let res = await Promise.resolve(plugin[m].apply(plugin, args))$/;"	v
res	.vim/plugged/coc.nvim/src/commands.ts	/^      if (!item.internal) res.push(item)$/;"	v
res	.vim/plugged/coc.nvim/src/commands.ts	/^    let res: CommandItem[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      res.push(path.resolve(folder, '..\/..'))$/;"	v
res	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let res = parseContentFromFile(filepath, errors => {$/;"	v
res	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let res: string[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/configuration/model.ts	/^    let res = section$/;"	v
res	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^          res.push(item)$/;"	v
res	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      res.push(...items)$/;"	v
res	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let res: DiagnosticItem[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let res: Diagnostic[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let res: Range[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/extensions.ts	/^    let res: ExtensionInfo[] = await Promise.all(Object.keys(json.dependencies).map(key => {$/;"	v
res	.vim/plugged/coc.nvim/src/extensions.ts	/^    let res: ExtensionInfo[] = await Promise.all(paths.map(root => {$/;"	v
res	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^      let res = await workspace.showQuickpick(commands.map(c => c.title))$/;"	v
res	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let presentation = presentations[res]$/;"	v
res	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let res = await this.nvim.call('coc#util#pick_color', [colorArr])$/;"	v
res	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let res = await workspace.showQuickpick(presentations.map(o => o.label), 'choose a color pre/;"	v
res	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^        res.push({$/;"	v
res	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    let res: ColorRanges[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/handler/index.ts	/^        res.push(link)$/;"	v
res	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let res = await commandManager.executeCommand(id, ...args)$/;"	v
res	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let res = await languages.prepareRename(doc.textDocument, position)$/;"	v
res	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let res: CommandItem[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let res: DocumentLink[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let res: SymbolInfo[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let res: { [key: string]: string | boolean } = {}$/;"	v
res	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let res = this.parseArgs( args )$/;"	C
res	.vim/plugged/coc.nvim/src/list/manager.ts	/^    this.args = [...res.listOptions, res.list.name, ...res.listArgs]$/;"	C
res	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    let res: Map<string, string> = new Map()$/;"	v
res	.vim/plugged/coc.nvim/src/list/ui.ts	/^      if (items[i - 1]) res.push(items[i - 1])$/;"	v
res	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let res: ListItem[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/list/worker.ts	/^            let res = this.filterItems(remain)$/;"	v
res	.vim/plugged/coc.nvim/src/list/worker.ts	/^            let res = this.filterItems(totalItems)$/;"	v
res	.vim/plugged/coc.nvim/src/list/worker.ts	/^        let res = this.filterItems(items)$/;"	v
res	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let res = getMatchResult(filterLabel, input)$/;"	v
res	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let res = this.filterItems(totalItems)$/;"	v
res	.vim/plugged/coc.nvim/src/model/document.ts	/^        let res = await this.attach()$/;"	v
res	.vim/plugged/coc.nvim/src/model/document.ts	/^        res.push(srcId)$/;"	v
res	.vim/plugged/coc.nvim/src/model/document.ts	/^      res = this.matchAddRanges(ranges, hlGroup, 10)$/;"	v
res	.vim/plugged/coc.nvim/src/model/document.ts	/^    if (!chars.isKeywordChar('-')) return res$/;"	v
res	.vim/plugged/coc.nvim/src/model/document.ts	/^    let res = []$/;"	v
res	.vim/plugged/coc.nvim/src/model/document.ts	/^    let res: Map<string, number> = new Map()$/;"	v
res	.vim/plugged/coc.nvim/src/model/document.ts	/^    let res: Range[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/model/document.ts	/^    let res: number[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let res: Fragment[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      let [res, err] = await nvim.resumeNotification()$/;"	v
res	.vim/plugged/coc.nvim/src/provider/manager.ts	/^            res.push(d)$/;"	v
res	.vim/plugged/coc.nvim/src/provider/manager.ts	/^          res.push(def)$/;"	v
res	.vim/plugged/coc.nvim/src/provider/manager.ts	/^    let res: Location[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/provider/renameManager.ts	/^    let res = await Promise.resolve(provider.prepareRename(document, position, token))$/;"	v
res	.vim/plugged/coc.nvim/src/services.ts	/^        res.push(service)$/;"	v
res	.vim/plugged/coc.nvim/src/services.ts	/^      res.push({$/;"	v
res	.vim/plugged/coc.nvim/src/services.ts	/^    let res: IServiceProvider[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/services.ts	/^    let res: ServiceInfo[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^      let res: CocSnippetPlaceholder = {$/;"	v
res	.vim/plugged/coc.nvim/src/sources.ts	/^    let res: SourceStat[] = []$/;"	v
res	.vim/plugged/coc.nvim/src/util/highlight.ts	/^  const res: Highlight[] = []$/;"	C	function:getHiglights
res	.vim/plugged/coc.nvim/src/workspace.ts	/^        res.push(change)$/;"	v
res	.vim/plugged/coc.nvim/src/workspace.ts	/^    let res = await this.callAsync<string>('input', [title + ':', defaultValue || ''])$/;"	v
res	.vim/plugged/coc.nvim/src/workspace.ts	/^    let res = await this.callAsync<string>('inputlist', [msgs])$/;"	v
res	.vim/plugged/coc.nvim/src/workspace.ts	/^    let res = await this.nvim.callAsync('coc#util#with_callback', ['coc#util#prompt_confirm', [t/;"	v
res	.vim/plugged/coc.nvim/src/workspace.ts	/^    let res = findUp(filename, cwd)$/;"	v
res	.vim/plugged/coc.nvim/src/workspace.ts	/^    let res = new Set() as Set<string>$/;"	v
res	.vim/plugged/coc.nvim/src/workspace.ts	/^    let res: any[] = []$/;"	v
res	.vim/plugged/coc.nvim/webpack.config.js	/^let res = cp.execSync('git rev-parse HEAD', {encoding: 'utf8'})$/;"	v
reset	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/indent_util.py	/^    def reset(self):$/;"	m	class:IndentUtil
reset	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def reset(self):$/;"	m	class:VisualContentPreserver
reset	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async reset(): Promise<void> {$/;"	m	class:Helper
resetVirtualEdit	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let resetVirtualEdit = false$/;"	v
resetVirtualEdit	.vim/plugged/coc.nvim/src/workspace.ts	/^    let resetVirtualEdit = false$/;"	v
reset_indent	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def reset_indent(self):$/;"	m	class:SnippetUtil
resize	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let resize = config.get<boolean>('autoResize', true)$/;"	v
resizeWindows	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) resizeWindows() {$/;"	f	struct:fzf.Terminal
resolve	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public resolve(): void {$/;"	m	class:OnReady
resolve	.vim/plugged/coc.nvim/src/services.ts	/^          resolve()$/;"	v
resolve	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public resolve(resolver: VariableResolver): boolean {$/;"	m	class:Variable
resolve	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public resolve(value: string): string {$/;"	m	class:FormatString
resolve	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public resolve(value: string): string {$/;"	m	class:Transform
resolve	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  resolve(variable: Variable): string | undefined$/;"	m	interface:VariableResolver
resolveCodeLens	.vim/plugged/coc.nvim/src/provider/codeLensManager.ts	/^  public async resolveCodeLens($/;"	m	class:CodeLensManager
resolveCodeLens	.vim/plugged/coc.nvim/src/provider/index.ts	/^  resolveCodeLens?(codeLens: CodeLens, token: CancellationToken): ProviderResult<CodeLens>$/;"	m	interface:CodeLensProvider
resolveCompletionItem	.vim/plugged/coc.nvim/src/provider/index.ts	/^  resolveCompletionItem?($/;"	m	interface:CompletionItemProvider
resolveDocumentLink	.vim/plugged/coc.nvim/src/provider/documentLinkManager.ts	/^  public async resolveDocumentLink(link: DocumentLink, token: CancellationToken): Promise<Docume/;"	m	class:DocumentLinkManager
resolveDocumentLink	.vim/plugged/coc.nvim/src/provider/index.ts	/^  resolveDocumentLink?(link: DocumentLink, token: CancellationToken): ProviderResult<DocumentLin/;"	m	interface:DocumentLinkProvider
resolveItem	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^      resolveItem: item => {$/;"	v
resolveItem	.vim/plugged/coc.nvim/src/list/source/symbols.ts	/^  public async resolveItem(item: ListItem): Promise<ListItem> {$/;"	m	class:Symbols
resolveItem	.vim/plugged/coc.nvim/src/types.ts	/^  resolveItem?(item: ListItem): Promise<ListItem | null>$/;"	m	interface:IList
resolveJsonModule	.vim/plugged/coc.nvim/tsconfig.json	/^    "resolveJsonModule": true,$/;"	b	object:compilerOptions
resolveModule	.vim/plugged/coc.nvim/src/model/resolver.ts	/^  public async resolveModule(mod: string): Promise<string> {$/;"	m	class:Resolver
resolveModule	.vim/plugged/coc.nvim/src/types.ts	/^  resolveModule(name: string): Promise<string>$/;"	m	interface:IWorkspace
resolveRoot	.vim/plugged/coc.nvim/src/util/fs.ts	/^export function resolveRoot(dir: string, subs: string[], cwd?: string): string | null {$/;"	f
resolveWorkspaceSymbol	.vim/plugged/coc.nvim/src/provider/index.ts	/^  resolveWorkspaceSymbol?($/;"	m	interface:WorkspaceSymbolProvider
resolveWorkspaceSymbol	.vim/plugged/coc.nvim/src/provider/workspaceSymbolsManager.ts	/^  public async resolveWorkspaceSymbol($/;"	m	class:WorkspaceSymbolManager
resolve_ambiguity	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_base.py	/^def resolve_ambiguity(all_tokens, seen_ts):$/;"	f
resolved	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let resolved: string$/;"	v
resolved	.vim/plugged/coc.nvim/src/languages.ts	/^          let resolved = await Promise.resolve(provider.resolveCompletionItem(resolving, token))$/;"	v
resolved	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let resolved = false$/;"	v
resolved	.vim/plugged/coc.nvim/src/list/manager.ts	/^      let resolved = await list.resolveItem( item )$/;"	v
resolved	.vim/plugged/coc.nvim/src/types.ts	/^  resolved?: boolean$/;"	p	interface:ListItem
resolvedIndexes	.vim/plugged/coc.nvim/src/languages.ts	/^        resolvedIndexes = new Set()$/;"	v
resolvedIndexes	.vim/plugged/coc.nvim/src/languages.ts	/^    let resolvedIndexes: Set<number> = new Set()$/;"	v
resolvedItem	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let resolvedItem = this.getCompleteItem(this.currItem)$/;"	v
resolvedItem	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let resolvedItem = this.getCompleteItem(completed_item)$/;"	v
resolvedItem	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let resolvedItem = this.getCompleteItem(item)$/;"	v
resolvedTextDocumentSync	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  resolvedTextDocumentSync?: TextDocumentSyncOptions$/;"	p	interface:ResolvedTextDocumentSyncCapabilities
resolver	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    const resolver = new SnippetVariableResolver()$/;"	C
resolver	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    const resolver = new SnippetVariableResolver()$/;"	C
resolving	.vim/plugged/coc.nvim/src/languages.ts	/^        let resolving = completeItems[item.index]$/;"	v
responseError	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      const responseError = data as ResponseError<any>$/;"	C	method:BaseLanguageClient.data2String
responses	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^responses = {}$/;"	v
restart	.vim/plugged/coc.nvim/src/services.ts	/^      restart: async (): Promise<void> => {$/;"	v
restart	.vim/plugged/coc.nvim/src/types.ts	/^  restart(): Promise<void> | void$/;"	m	interface:IServiceProvider
restarts	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private restarts: number[]$/;"	p	class:DefaultErrorHandler
restore_unnamed_register	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def restore_unnamed_register(self):$/;"	m	class:VimState
result	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^        let result: CompleteResult = {$/;"	v
result	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^        let result: CompleteResult = {$/;"	v
result	.vim/plugged/coc.nvim/src/completion/complete.ts	/^      let result = results.find(res => res.source == source)$/;"	v
result	.vim/plugged/coc.nvim/src/configuration/index.ts	/^        let result: T = lookUp(config, key)$/;"	v
result	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    const result: WorkspaceConfiguration = {$/;"	C
result	.vim/plugged/coc.nvim/src/configuration/util.ts	/^  const result = accessSetting(config, path)$/;"	C	function:getConfigurationValue
result	.vim/plugged/coc.nvim/src/extensions.ts	/^      let result = fastDiff(oldValue, newValue)$/;"	v
result	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let result = Object.create(null)$/;"	v
result	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let result: ClientCapabilities = {}$/;"	v
result	.vim/plugged/coc.nvim/src/languages.ts	/^        let result$/;"	v
result	.vim/plugged/coc.nvim/src/sources.ts	/^      let result = fastDiff(oldValue, newValue)$/;"	v
result	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^        result.pop()$/;"	C
result	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^        result[index].text = text.substr(0, text.length - 1)$/;"	C
result	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^  let result = []$/;"	C
result	.vim/plugged/coc.nvim/src/util/object.ts	/^  const result: any = Array.isArray(obj) ? [] : {}$/;"	C	function:deepClone
result	.vim/plugged/fzf/src/terminal.go	/^	result   Result$/;"	m	struct:fzf.itemLine	typeref:typename:Result
results	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		results = { top: top, left: left };$/;"	c
results	.vim/plugged/coc.nvim/src/completion/complete.ts	/^              let { results } = this$/;"	v
results	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let { results } = this$/;"	v
results	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let { results, document } = this$/;"	v
results	.vim/plugged/coc.nvim/src/completion/complete.ts	/^  public results: CompleteResult[] = []$/;"	p	class:Complete
resume	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    resume: bool = False$/;"	v	class:Context
resume	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async resume(): Promise<void> {$/;"	C
ret	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, ret, fn = jQuery.isFunction( elem[ type ] || null ),$/;"	v
ret	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = "";$/;"	v
ret	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = -1;$/;"	v
ret	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var ret = jQuery( elems );$/;"	v
ret	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var val, ret, namespace, all, handlers;$/;"	v
ret	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      let ret = !value ? true : this._scanner.tokenText(this._token)$/;"	v
ret	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const ret = new Variable(this.name)$/;"	C	method:Variable.clone
ret	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let ret = 0$/;"	v
ret	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let ret = new Choice()$/;"	v
ret	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let ret = new TextmateSnippet()$/;"	v
ret	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let ret: Placeholder[] = []$/;"	v
retries	.vim/plugged/fzf/test/test_go.rb	/^  def retries(times = 3)$/;"	f	module:TestShell
return	.vim/plugged/coc.nvim/src/__tests__/client/delayer.test.ts	/^    return Promise.resolve(++count)$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/client/delayer.test.ts	/^    return Promise.resolve(n)$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^          return new Promise<CompleteResult>((resolve, reject) => {$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^        return Promise.resolve({$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^        return Promise.resolve(item)$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^    return Promise.resolve(listItems)$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/array.test.ts	/^      return Object.keys(item).reduce((p, c) => p.concat(item[c]), [])$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^          return Promise.resolve({ items: [{ word: 'bar' }] })$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^          return { isIncomplete: true, items: [{ word: 'foo' }, { word: opt.input }] }$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^          return { items: [{ word: 'foo' }] }$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        if (!opt.input.startsWith('EM')) return null$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return Promise.resolve({ items: [{ word: 'foo#abc' }] })$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return Promise.resolve({ items: [{ word: 'foo#bar' }] })$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return Promise.resolve({ items: [{ word: 'foo' }] })$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return Promise.resolve({$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return [{$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return new Promise(resolve => {$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^        return { isIncomplete: false, items: [{ word: 'foo' }, { word: opt.input }] }$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^  return new DiagnosticBuffer(doc, config)$/;"	C
return	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^        return 'sample text'$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^        return text$/;"	v
return	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^      return '""'$/;"	v
return	.vim/plugged/coc.nvim/src/completion/complete.ts	/^          if (called) return$/;"	v
return	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    if (!results || !item.user_data) return null$/;"	v
return	.vim/plugged/coc.nvim/src/completion/index.ts	/^      return null$/;"	v
return	.vim/plugged/coc.nvim/src/completion/index.ts	/^    if (!activted || !complete.results) return$/;"	v
return	.vim/plugged/coc.nvim/src/completion/index.ts	/^    if (!activted) return null$/;"	v
return	.vim/plugged/coc.nvim/src/completion/index.ts	/^    if (!latestInsert) return ''$/;"	v
return	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let opt = Object.assign({}, this.option)$/;"	v
return	.vim/plugged/coc.nvim/src/completion/index.ts	/^    this.cancel()$/;"	v
return	.vim/plugged/coc.nvim/src/configuration/index.ts	/^        return typeof lookUp(config, key) !== 'undefined'$/;"	C
return	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    if (_folderConfigurations.has(filepath)) return$/;"	v
return	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    if (!this.config.virtualText) return$/;"	v
return	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    if (winid == -1) return$/;"	v
return	.vim/plugged/coc.nvim/src/extensions.ts	/^            return active()$/;"	v
return	.vim/plugged/coc.nvim/src/extensions.ts	/^            return path.join(root, relativePath)$/;"	v
return	.vim/plugged/coc.nvim/src/extensions.ts	/^            return$/;"	v
return	.vim/plugged/coc.nvim/src/extensions.ts	/^          return$/;"	v
return	.vim/plugged/coc.nvim/src/extensions.ts	/^        if (isActive) return$/;"	v
return	.vim/plugged/coc.nvim/src/extensions.ts	/^        return exports as API$/;"	v
return	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    if (!this.document) return$/;"	v
return	.vim/plugged/coc.nvim/src/handler/index.ts	/^        return this.documentLines.join('\\n')$/;"	v
return	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        return this._client$/;"	v
return	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        return$/;"	v
return	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^        return workspaceFolders.length ? workspaceFolders : null$/;"	v
return	.vim/plugged/coc.nvim/src/languages.ts	/^          return textEdits$/;"	v
return	.vim/plugged/coc.nvim/src/languages.ts	/^        if (!doc) return null$/;"	v
return	.vim/plugged/coc.nvim/src/list/configuration.ts	/^    if (find) return find$/;"	C
return	.vim/plugged/coc.nvim/src/list/configuration.ts	/^    if (validKeys.indexOf(key) !== -1) return key$/;"	C
return	.vim/plugged/coc.nvim/src/list/configuration.ts	/^    return null$/;"	C
return	.vim/plugged/coc.nvim/src/list/configuration.ts	/^    return this.configuration.get<T>(key, defaultValue)$/;"	C
return	.vim/plugged/coc.nvim/src/list/configuration.ts	/^    return this.fixKey(this.configuration.get<string>('nextKeymap', '<C-k>'))$/;"	C
return	.vim/plugged/coc.nvim/src/list/configuration.ts	/^    return this.fixKey(this.configuration.get<string>('previousKeymap', '<C-j>'))$/;"	C
return	.vim/plugged/coc.nvim/src/list/history.ts	/^    if (!current || !current.length) return$/;"	v
return	.vim/plugged/coc.nvim/src/list/history.ts	/^    if (index == current.length - 1) {$/;"	v
return	.vim/plugged/coc.nvim/src/list/manager.ts	/^          return null$/;"	C
return	.vim/plugged/coc.nvim/src/list/manager.ts	/^        return null$/;"	C
return	.vim/plugged/coc.nvim/src/list/manager.ts	/^      return null$/;"	C
return	.vim/plugged/coc.nvim/src/list/manager.ts	/^      return$/;"	C
return	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( !activated ) return$/;"	v
return	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( !currList ) return$/;"	C
return	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( !item ) return$/;"	C
return	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( !res ) return$/;"	C
return	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( !this.activated ) return$/;"	C
return	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( interactive ) return$/;"	C
return	.vim/plugged/coc.nvim/src/list/manager.ts	/^    if ( this.activated ) return$/;"	C
return	.vim/plugged/coc.nvim/src/list/manager.ts	/^    return this.currList$/;"	C
return	.vim/plugged/coc.nvim/src/list/manager.ts	/^    return {$/;"	C
return	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    if (cusorIndex == 0) return$/;"	v
return	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    if (cusorIndex == input.length - 1) return$/;"	v
return	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    if (cusorIndex == input.length) return$/;"	v
return	.vim/plugged/coc.nvim/src/list/ui.ts	/^    if (!bufnr || !window) return$/;"	v
return	.vim/plugged/coc.nvim/src/list/ui.ts	/^    if (!bufnr) return$/;"	v
return	.vim/plugged/coc.nvim/src/list/ui.ts	/^    if (!window) return Promise.resolve(null)$/;"	v
return	.vim/plugged/coc.nvim/src/list/ui.ts	/^    if (length == 0) return$/;"	v
return	.vim/plugged/coc.nvim/src/list/worker.ts	/^        if (count >= totalItems.length) return$/;"	v
return	.vim/plugged/coc.nvim/src/list/worker.ts	/^        let inputChanged = this.input != currInput$/;"	v
return	.vim/plugged/coc.nvim/src/list/worker.ts	/^    if (!input) return []$/;"	v
return	.vim/plugged/coc.nvim/src/model/document.ts	/^    if (!chars.isKeywordChar('-')) return res$/;"	v
return	.vim/plugged/coc.nvim/src/model/document.ts	/^    if (paused && !force) return$/;"	v
return	.vim/plugged/coc.nvim/src/model/document.ts	/^    if (this.uri.endsWith('%5BCommand%20Line%5D')) return true$/;"	v
return	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^        if (valid) return$/;"	v
return	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^    if (!buffer) return$/;"	v
return	.vim/plugged/coc.nvim/src/model/status.ts	/^    if (this.shownIds.size == 0) return ''$/;"	C
return	.vim/plugged/coc.nvim/src/model/status.ts	/^    return item$/;"	C
return	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^      return new Promise(resolve => {$/;"	v
return	.vim/plugged/coc.nvim/src/services.ts	/^          return Promise.resolve()$/;"	v
return	.vim/plugged/coc.nvim/src/services.ts	/^        return await Promise.resolve(client.stop())$/;"	v
return	.vim/plugged/coc.nvim/src/services.ts	/^        return new Promise(resolve => {$/;"	v
return	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^      if (!session) return$/;"	v
return	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    if (!session) return false$/;"	v
return	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    if (session) return await session.nextPlaceholder()$/;"	v
return	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    if (session) return await session.previousPlaceholder()$/;"	v
return	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    if (session) return await session.selectCurrentPlaceholder(triggerAutocmd)$/;"	v
return	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        return candidate$/;"	v
return	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        return false$/;"	C
return	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        return undefined$/;"	v
return	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    if (!document || !placeholder) return$/;"	v
return	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    if (!document) return false$/;"	C
return	.vim/plugged/coc.nvim/src/util/complete.ts	/^  return {$/;"	C
return	.vim/plugged/coc.nvim/src/util/factory.ts	/^      return require('..\/index')$/;"	C	function:makeRequireFunction
return	.vim/plugged/coc.nvim/src/util/factory.ts	/^    return this.require(p)$/;"	C	function:makeRequireFunction
return	.vim/plugged/coc.nvim/src/util/factory.ts	/^  return () => {$/;"	C
return	.vim/plugged/coc.nvim/src/util/highlight.ts	/^      if (exited) return$/;"	C	function:getHiglights
return	.vim/plugged/coc.nvim/src/util/index.ts	/^          return$/;"	C	function:mkdirp
return	.vim/plugged/coc.nvim/src/workspace.ts	/^        if (!channel) return ''$/;"	v
return	.vim/plugged/coc.nvim/src/workspace.ts	/^        return channel.content$/;"	v
return	.vim/plugged/coc.nvim/src/workspace.ts	/^        return document.uri$/;"	v
return	.vim/plugged/coc.nvim/src/workspace.ts	/^      return null$/;"	v
return	.vim/plugged/coc.nvim/src/workspace.ts	/^      return$/;"	v
return	.vim/plugged/coc.nvim/src/workspace.ts	/^    if (bufnr == null) return null$/;"	v
return	.vim/plugged/coc.nvim/src/workspace.ts	/^    if (rootPath == os.homedir()) return null$/;"	v
return	.vim/plugged/coc.nvim/src/workspace.ts	/^    if (uri.scheme != 'file') return cwd$/;"	v
reuse	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      let reuse = false$/;"	v
revealOutputChannelOn	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "revealOutputChannelOn": {$/;"	o	object:definitions.languageServerBase.properties
revealOutputChannelOn	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "revealOutputChannelOn": {},$/;"	o	object:definitions.languageServerCommand.properties
revealOutputChannelOn	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "revealOutputChannelOn": {},$/;"	o	object:definitions.languageServerModule.properties
revealOutputChannelOn	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "revealOutputChannelOn": {},$/;"	o	object:definitions.languageServerSocket.properties
revealOutputChannelOn	.vim/plugged/coc.nvim/data/schema.json	/^        "revealOutputChannelOn": {$/;"	o	object:definitions.languageServerBase.properties
revealOutputChannelOn	.vim/plugged/coc.nvim/data/schema.json	/^        "revealOutputChannelOn": {},$/;"	o	object:definitions.languageServerCommand.properties
revealOutputChannelOn	.vim/plugged/coc.nvim/data/schema.json	/^        "revealOutputChannelOn": {},$/;"	o	object:definitions.languageServerModule.properties
revealOutputChannelOn	.vim/plugged/coc.nvim/data/schema.json	/^        "revealOutputChannelOn": {},$/;"	o	object:definitions.languageServerSocket.properties
revealOutputChannelOn	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  revealOutputChannelOn: RevealOutputChannelOn$/;"	p	interface:ResolvedClientOptions
revealOutputChannelOn	.vim/plugged/coc.nvim/src/types.ts	/^  revealOutputChannelOn?: string$/;"	p	interface:LanguageServerConfig
reverse	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let reverse = start > end$/;"	v
reverseStringArray	.vim/plugged/fzf/src/terminal.go	/^func reverseStringArray(input []string) []string {$/;"	f	package:fzf	typeref:typename:[]string
revision	.vim/plugged/coc.nvim/webpack.config.js	/^let revision = res.slice(0, 10)$/;"	v
revision	.vim/plugged/fzf/main.go	/^var revision string$/;"	v	package:main	typeref:typename:string
right	.config/nvim/plugged/sideways.vim/spec/spec_helper.rb	/^    def vim.right$/;"	S
rimraf	.config/nvim/plugged/coc.nvim/package.json	/^    "rimraf": "^2.6.3",$/;"	s	object:devDependencies
rimraf	.vim/plugged/coc.nvim/package.json	/^    "rimraf": "^2.6.3",$/;"	s	object:devDependencies
rl	.vim/plugged/coc.nvim/src/list/basic.ts	/^    const rl = readline.createInterface({$/;"	C
rl	.vim/plugged/coc.nvim/src/util/fs.ts	/^  const rl = readline.createInterface({$/;"	C	function:readFileLine
rmcup	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) rmcup() {$/;"	f	struct:tui.LightRenderer
rmrecord	.config/nvim/plugged/html5.vim/Makefile	/^rmrecord:$/;"	t
role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role = extend(role, dpub_role)$/;"	v
role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role = extend(role, graphic_role)$/;"	v
role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role = extend(role, landmark_role)$/;"	v
role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role = extend(widget_role, document_structure)$/;"	v
role	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let role = extend(role, dpub_role)$/;"	v
role	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let role = extend(role, landmark_role)$/;"	v
role	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let role = extend(widget_role, document_structure)$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes = {}$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['alert'] = role_attributes['region']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['alertdialog'] = role_attributes['alert'] + role_attributes['dialog']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['application'] = abstract_role['landmark'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['article'] = role_attributes['document'] + role_attributes['region'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['banner'] = abstract_role['landmark'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['button'] = role_attributes['region'] + role_attributes['menuitemcheckbox']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['cell'] = abstract_role['section'] + ['aria-colindex', 'aria-colspan', 'aria/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['checkbox'] = abstract_role['input'] + ['aria-checked'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['columnheader'] = role_attributes['gridcell'] + abstract_role['sectionhead']/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['combobox'] = abstract_role['select'] + ['aria-expanded', 'aria-required'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['complementary'] = abstract_role['landmark'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['contentinfo'] = abstract_role['landmark'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['default'] = abstract_role['roletype']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['definition'] = abstract_role['section'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['dialog'] = abstract_role['window']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['directory'] = role_attributes['list'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['document'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['feed'] = role_attributes['list']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['figure'] = abstract_role['section'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['form'] = abstract_role['landmark'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['grid'] = abstract_role['composite'] + role_attributes['region'] + ['aria-le/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['gridcell'] = abstract_role['section'] + abstract_role['widget']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['group'] = abstract_role['section']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['heading'] = abstract_role['sectionhead'] + ['aria-level'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['img'] = abstract_role['section'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['link'] = abstract_role['widget'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['list'] = role_attributes['region'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['listbox'] = role_attributes['list'] + abstract_role['select'] + ['aria-mult/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['listitem'] = abstract_role['section']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['log'] = role_attributes['region'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['main'] = abstract_role['landmark'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['marquee'] = role_attributes['region'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['math'] = abstract_role['section'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menu'] =  role_attributes['list'] + abstract_role['select'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menubar'] = role_attributes['menu'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menuitem'] = abstract_role['input'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menuitemcheckbox'] = role_attributes['menuitem'] + role_attributes['checkbo/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['menuitemradio'] = role_attributes['menuitemcheckbox'] + role_attributes['ra/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['navigation'] = abstract_role['landmark'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['none'] = role_attributes['presentation']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['note'] = abstract_role['section'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['option'] = abstract_role['input'] + ['aria-checked', 'aria-posinset', 'aria/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['presentation'] = abstract_role['structure']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['progressbar'] = abstract_role['widget'] + ['aria-valuemax', 'aria-valuemin'/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['radio'] = role_attributes['checkbox'] + role_attributes['option']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['radiogroup'] = abstract_role['select'] + ['aria-required']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['region'] = abstract_role['section']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['row'] = role_attributes['group'] + ['aria-level', 'aria-selected']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['rowheader'] = role_attributes['gridcell'] + abstract_role['sectionhead']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['scrollbar'] = abstract_role['range'] + ['aria-controls', 'aria-orientation'/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['search'] = abstract_role['landmark']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['searchbox'] = role_attributes['textbox']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['separator'] = abstract_role['structure'] + ['aria-expanded'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['slider'] = abstract_role['range'] + ['aria-valuemax', 'aria-valuemin', 'ari/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['spinbutton'] = abstract_role['composite'] + abstract_role['range'] + ['aria/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['status'] = abstract_role['composite'] + role_attributes['region']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['switch'] = role_attributes['checkbox']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tab'] = abstract_role['sectionhead'] + abstract_role['widget'] + ['aria-sel/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['table'] = abstract_role['section'] + ['aria-colcount', 'aria-rowcount']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tablist'] = abstract_role['composite'] + role_attributes['directory']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tabpanel'] = role_attributes['region']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['term'] = abstract_role['section']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['textbox'] = abstract_role['input'] + ['aria-autocomplete', 'aria-multiline'/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['timer'] = role_attributes['status'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['toolbar'] = role_attributes['group'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tooltip'] = abstract_role['section'] $/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['tree'] = abstract_role['select'] + ['aria-multiselectable', 'aria-required'/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['treegrid'] = role_attributes['grid'] + role_attributes['tree']$/;"	v
role_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let role_attributes['treeitem'] = role_attributes['listitem'] + role_attributes['option']$/;"	v
root	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let root = {$/;"	v
root	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let root = await nvim.call('coc#util#extension_root', [])$/;"	v
root	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let root = path.resolve(__dirname, '..\/..\/..')$/;"	v
root	.vim/plugged/coc.nvim/src/__tests__/modules/mru.test.ts	/^const root = os.homedir()$/;"	C
root	.vim/plugged/coc.nvim/src/__tests__/modules/plugin.test.ts	/^    let root = workspace.pluginRoot$/;"	v
root	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let root = path.resolve(__dirname, '..\/extensions\/snippet-sample')$/;"	v
root	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      let root = path.resolve(configFile, '..\/..')$/;"	v
root	.vim/plugged/coc.nvim/src/extensions.ts	/^    let root = path.dirname(filepath)$/;"	v
root	.vim/plugged/coc.nvim/src/extensions.ts	/^    let { root } = this$/;"	v
root	.vim/plugged/coc.nvim/src/model/mru.ts	/^const root = isWindows ? path.join(os.homedir(), 'AppData\/Local\/coc') : path.join(os.homedir()/;"	C
root	.vim/plugged/coc.nvim/src/types.ts	/^  readonly root: string$/;"	p	interface:IWorkspace
root	.vim/plugged/coc.nvim/src/types.ts	/^  root: string$/;"	p	interface:ExtensionInfo
root	.vim/plugged/coc.nvim/src/watchman.ts	/^  root: string$/;"	p	interface:FileChange
root	.vim/plugged/coc.nvim/src/workspace.ts	/^        let root = resolveRoot(dir, patterns, this.cwd)$/;"	v
root	.vim/plugged/coc.nvim/src/workspace.ts	/^        let root = this.resolveRoot(document)$/;"	v
root	.vim/plugged/coc.nvim/src/workspace.ts	/^    let root = path.dirname(this.env.extensionRoot)$/;"	v
rootPath	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let { nvim, workspaceFolders, channelNames, rootPath, cwd, documents, initialized, textDocum/;"	v
rootPath	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let rootPath = path.dirname(u.fsPath)$/;"	v
rootPath	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      rootPath: rootPath ? rootPath : null,$/;"	v
rootPath	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let rootPath = resolved || workspace.rootPath || workspace.cwd$/;"	v
rootPath	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let rootPath = this.resolveRootPath()$/;"	v
rootPath	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { rootPath } = this$/;"	v
rootPatterns	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "rootPatterns": {$/;"	o	object:definitions.languageServerBase.properties
rootPatterns	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "rootPatterns": {},$/;"	o	object:definitions.languageServerCommand.properties
rootPatterns	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "rootPatterns": {},$/;"	o	object:definitions.languageServerModule.properties
rootPatterns	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "rootPatterns": {},$/;"	o	object:definitions.languageServerSocket.properties
rootPatterns	.vim/plugged/coc.nvim/data/schema.json	/^        "rootPatterns": {$/;"	o	object:definitions.languageServerBase.properties
rootPatterns	.vim/plugged/coc.nvim/data/schema.json	/^        "rootPatterns": {},$/;"	o	object:definitions.languageServerCommand.properties
rootPatterns	.vim/plugged/coc.nvim/data/schema.json	/^        "rootPatterns": {},$/;"	o	object:definitions.languageServerModule.properties
rootPatterns	.vim/plugged/coc.nvim/data/schema.json	/^        "rootPatterns": {},$/;"	o	object:definitions.languageServerSocket.properties
rootPatterns	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^    "rootPatterns": [$/;"	a	object:contributes
rootPatterns	.vim/plugged/coc.nvim/src/extensions.ts	/^      let { configuration, rootPatterns, commands } = contributes$/;"	v
rootPatterns	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let rootPatterns = config.get<string[]>('rootPatterns', [])$/;"	v
rootPatterns	.vim/plugged/coc.nvim/src/types.ts	/^  rootPatterns: string[] | null$/;"	p	interface:BufferOption
rootPatterns	.vim/plugged/coc.nvim/src/types.ts	/^  rootPatterns?: string[]$/;"	p	interface:LanguageServerConfig
rootPatterns	.vim/plugged/coc.nvim/src/workspace.ts	/^      let { filetypes, rootPatterns } = config$/;"	v
rootUri	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      rootUri: rootPath ? cv.asUri(URI.file(rootPath)) : null,$/;"	v
root_marker	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    root_marker: str = ''$/;"	v	class:Context
row	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  row: number$/;"	p	interface:Bounding
row	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let bounding: PumBounding = { col, row, height, width, scrollbar }$/;"	v
row	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { completed_item, col, row, height, width, scrollbar } = ev$/;"	v
row	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let [row, col] = await nvim.call('coc#util#win_position') as [number, number]$/;"	v
row	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^  row: number$/;"	p	interface:WindowConfig
row	.vim/plugged/coc.nvim/src/types.ts	/^  readonly row: number$/;"	p	interface:PumBounding
row	.vim/plugged/coc.nvim/src/types.ts	/^  row: number$/;"	p	interface:PopupChangeEvent
rp.error	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^    func rp.error(msg) dict$/;"	f
rp.warn	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^    func rp.warn(msg) dict$/;"	f
rpcnotify	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^def rpcnotify(channel, method, args):$/;"	f
rsi.vim	.config/nvim/plugged/vim-rsi/README.markdown	/^# rsi.vim$/;"	c
rtc	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^rtc,$/;"	s
rtn	.vim/plugged/coc.nvim/src/util/throttle.ts	/^  let rtn$/;"	v
rubout	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) rubout(pattern string) {$/;"	f	struct:fzf.Terminal
ruby	.config/nvim/plugged/sideways.vim/spec/plugin/regression_spec.rb	/^  describe "ruby" do$/;"	d
ruby	.config/nvim/plugged/sideways.vim/spec/plugin/ruby_spec.rb	/^describe "ruby" do$/;"	d
ruby definitions	.config/nvim/plugged/switch.vim/spec/plugin/ruby_spec.rb	/^describe "ruby definitions" do$/;"	d
ruby_minlines	.config/nvim/plugged/vim-ruby/syntax/ruby.vim	/^    let ruby_minlines = 500$/;"	v
rubycomplete#Complete	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! rubycomplete#Complete(findstart, base)$/;"	f
rubycomplete#Init	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! rubycomplete#Init()$/;"	f
rules	.eslintrc.json	/^ "rules": { }$/;"	o
rules	.vim/plugged/coc.nvim/tslint.json	/^  "rules": {$/;"	o
runCodeAction	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def runCodeAction(mode, action):$/;"	f
runCommand	.vim/plugged/coc.nvim/src/types.ts	/^  runCommand(cmd: string, cwd?: string, timeout?: number): Promise<string>$/;"	m	interface:IWorkspace
runCommand	.vim/plugged/coc.nvim/src/util/index.ts	/^export function runCommand(cmd: string, opts: ExecOptions = {}, timeout?: number): Promise<strin/;"	f
runTerminalCommand	.vim/plugged/coc.nvim/src/types.ts	/^  runTerminalCommand(cmd: string, cwd?: string, keepfocus?: boolean): Promise<TerminalResult>$/;"	m	interface:IWorkspace
runTest	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    def runTest(self):$/;"	m	class:_Base
runTest	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    def runTest(self):$/;"	m	class:_BaseGuessing
runTest	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    def runTest(self):$/;"	m	class:_MPBase
runTest	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    def runTest(self):$/;"	m	class:VimTestCase
running	.vim/plugged/coc.nvim/src/__tests__/modules/task.test.ts	/^    let running = await task.running$/;"	v
running_on_windows	.config/nvim/plugged/ultisnips/test/util.py	/^def running_on_windows():$/;"	f
runtime	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "runtime": {$/;"	o	object:definitions.languageServerModule.properties
runtime	.vim/plugged/coc.nvim/data/schema.json	/^        "runtime": {$/;"	o	object:definitions.languageServerModule.properties
runtime	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  runtime?: string$/;"	p	interface:NodeModule
runtime	.vim/plugged/coc.nvim/src/types.ts	/^  runtime?: string$/;"	p	interface:LanguageServerConfig
runtimepath	.vim/plugged/coc.nvim/src/extensions.ts	/^    let runtimepath = await workspace.nvim.eval('&runtimepath') as string$/;"	v
runtimepath	.vim/plugged/coc.nvim/src/sources.ts	/^    let { runtimepath } = workspace.env$/;"	v
runtimepath	.vim/plugged/coc.nvim/src/types.ts	/^  runtimepath: string$/;"	p	interface:Env
runtimepath	.vim/plugged/coc.nvim/src/util/highlight.ts	/^  runtimepath: string$/;"	p	interface:Env
rust	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^describe "rust" do$/;"	d
rust definitions	.config/nvim/plugged/switch.vim/spec/plugin/rust_spec.rb	/^describe "rust definitions" do$/;"	d
rv	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def rv(self):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
rv	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def rv(self, value):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
rv	.config/nvim/plugged/ultisnips/utils/get_tm_snippets.py	/^        rv = fetch_snippets_from_dir(bundle)$/;"	v
rx_coro	.vim/plugged/ghost-text.vim/python3/test/test_channel_server.py	/^async def rx_coro(json_data):$/;"	f
s	.config/nvim/configs/keymap.vim	/^nnoremap s <nop>$/;"	m
s	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map s <Plug>(easymotion-s)$/;"	m
s	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map s <Plug>(easymotion-sn)$/;"	m
s	.config/nvim/plugged/vim-easymotion/t/smartsign_spec.vim	/^        map s <Plug>(easymotion-s)$/;"	m
s	.config/nvim/plugged/vim-easymotion/t/smartsign_spec.vim	/^        map s <Plug>(easymotion-s2)$/;"	m
s	.config/nvim/plugged/vista.vim/ftplugin/vista.vim	/^nnoremap <buffer> <silent> s     :<c-u>call vista#Sort()<CR>$/;"	m
s	.config/nvim/plugged/vista.vim/ftplugin/vista_kind.vim	/^nnoremap <buffer> <silent> s    :<c-u>call vista#Sort()<CR>$/;"	m
s	.vim/plugged/coc.nvim/src/__tests__/modules/sources.test.ts	/^    let s = sources.getSource('around')$/;"	v
s	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let s = matchScore([{ language: '*', scheme: 'file' }], uri, 'typescript')$/;"	v
s	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let s = String.fromCharCode(ch)$/;"	v
s	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let s = snippet.toString()$/;"	v
s	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let s = sources.getSource(source)$/;"	v
s	.vim/plugged/coc.nvim/src/configuration/index.ts	/^        let s = section ? `${section}.${key}` : key$/;"	v
s	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^          let s = byteIndex(line, start.character) + 1$/;"	v
s	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let s = i == start.line ? start.character : 0$/;"	v
s	.vim/plugged/coc.nvim/src/languages.ts	/^      for (let s of fields) {$/;"	v
s	.vim/plugged/coc.nvim/src/list/manager.ts	/^    for ( let s of ch ) {$/;"	v
s	.vim/plugged/coc.nvim/src/sources.ts	/^        s.onEnter(bufnr)$/;"	v
s	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  s = 115,$/;"	e	enum:CharCode
s	.vim/plugged/ghost-text.vim/python3/test/test_channel_server.py	/^s = tcp_server.TcpServer(loop, channel)$/;"	v
s	.vim/plugged/ghost-text.vim/python3/test/test_http_server.py	/^s = tcp_server.TcpServer(loop, h)$/;"	v
s	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^        nnoremap <silent> <buffer> s :call leetcode#GoToSubmissions()<cr>$/;"	m
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['asdf', 'func'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['conditional'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['hi'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['paste'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['text', 'raw', 'func'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create(['whitespace'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_left(['asdf', 'aaaa', 'raw'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_left(['asdf', 'raw'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_left(['text', 'text'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['%t', 'asdf', '%{getcwd()}'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['ffenc','%{strftime("%H:%M")}'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['raw', '%f'])$/;"	v
s	.vim/plugged/vim-airline/t/section.vim	/^    let s = airline#section#create_right(['text', 'text'])$/;"	v
s/	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map s\/ <Plug>(easymotion-sn)$/;"	m
s:ALEWantResults	.vim/plugged/omnisharp-vim/plugin/OmniSharp.vim	/^function! s:ALEWantResults() abort$/;"	f
s:AR	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:AR(cmd,related,line1,line2,count,...) abort$/;"	f
s:AccessModifier	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AccessModifier(cline_info) abort$/;"	f
s:AddBlockTag	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:AddBlockTag(tag, id, ...)$/;"	f
s:AddITags	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:AddITags(tags, taglist)$/;"	f
s:AfterAccessModifier	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterAccessModifier(pline_info) abort$/;"	f
s:AfterBlockOpening	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterBlockOpening(pline_info) abort$/;"	f
s:AfterEndKeyword	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterEndKeyword(pline_info) abort$/;"	f
s:AfterHangingSplat	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterHangingSplat(pline_info) abort$/;"	f
s:AfterIndentKeyword	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterIndentKeyword(pline_info) abort$/;"	f
s:AfterLeadingOperator	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterLeadingOperator(pline_info) abort$/;"	f
s:AfterUnbalancedBracket	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:AfterUnbalancedBracket(pline_info) abort$/;"	f
s:Alien2	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien2()$/;"	f
s:Alien3	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien3()$/;"	f
s:Alien4	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien4()$/;"	f
s:Alien5	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien5()$/;"	f
s:Alien6	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:Alien6()$/;"	f
s:AlignSource	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^function! s:AlignSource() abort$/;"	f
s:Alternate	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Alternate(cmd,line1,line2,count,...) abort$/;"	f
s:Append	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! s:Append(line, rows, depth) abort$/;"	f
s:AppendChild	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! s:AppendChild(line, rows, depth) abort$/;"	f
s:ApplyAppend	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! s:ApplyAppend(line, row, rows) abort$/;"	f
s:ApplyAutoUpdate	.config/nvim/plugged/vista.vim/autoload/vista/extension/markdown.vim	/^function! s:ApplyAutoUpdate() abort$/;"	f
s:ApplyClose	.config/nvim/plugged/vista.vim/autoload/vista/floating.vim	/^function! s:ApplyClose() abort$/;"	f
s:ApplyExecute	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:ApplyExecute(bang, fpath) abort$/;"	f
s:ApplyExtracted	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:ApplyExtracted() abort$/;"	f
s:ApplyHighlight	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:ApplyHighlight(lnum, ensure_visible, ...) abort$/;"	f
s:ApplyJump	.config/nvim/plugged/vista.vim/autoload/vista/jump.vim	/^function! s:ApplyJump(lnum) abort$/;"	f
s:ApplyRun	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:ApplyRun(cmd) abort$/;"	f
s:ApplyRun	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^function! s:ApplyRun(opts, Hi) abort$/;"	f
s:ApplyRunAsync	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:ApplyRunAsync(cmd) abort$/;"	f
s:Assemble	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! s:Assemble(line, depth) abort$/;"	f
s:AssetEdit	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:AssetEdit(cmd, name, dir, suffix, fallbacks) abort$/;"	f
s:AsyncRequest	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:AsyncRequest(name, args) abort$/;"	f
s:AsyncRequest	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! s:AsyncRequest(name, args) abort$/;"	f
s:AutoUpdate	.config/nvim/plugged/vista.vim/autoload/vista/executive/ale.vim	/^function! s:AutoUpdate(fpath) abort$/;"	f
s:AutoUpdate	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^function! s:AutoUpdate(_fpath) abort$/;"	f
s:AutoUpdate	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:AutoUpdate(fpath) abort$/;"	f
s:AutoUpdate	.config/nvim/plugged/vista.vim/autoload/vista/executive/lcn.vim	/^function! s:AutoUpdate(fpath) abort$/;"	f
s:AutoUpdate	.config/nvim/plugged/vista.vim/autoload/vista/executive/vim_lsp.vim	/^function! s:AutoUpdate(fpath) abort$/;"	f
s:AutoUpdate	.config/nvim/plugged/vista.vim/autoload/vista/extension/markdown.vim	/^function! s:AutoUpdate(fpath) abort$/;"	f
s:Autocmd	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:Autocmd(...) abort$/;"	f
s:Autocmd	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! s:Autocmd(...) abort$/;"	f
s:Between	.config/nvim/plugged/sideways.vim/autoload/sideways/parsing.vim	/^function! s:Between(position, start, end)$/;"	f
s:BlockComment	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:BlockComment(cline_info) abort$/;"	f
s:BracketMatch	.config/nvim/plugged/sideways.vim/autoload/sideways/parsing.vim	/^function! s:BracketMatch(text, brackets)$/;"	f
s:BufCommands	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:BufCommands()$/;"	f
s:BufNavCommands	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:BufNavCommands()$/;"	f
s:BufProjectionCommands	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:BufProjectionCommands() abort$/;"	f
s:BufScriptWrappers	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:BufScriptWrappers()$/;"	f
s:Buffer	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/undo.vim	/^let s:Buffer = vital#easymotion#import('Vim.Buffer')$/;"	v
s:BuildCmd	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:BuildCmd(file) abort$/;"	f
s:Bundle	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:Bundle(bang,arg) abort$/;"	f
s:BundleComplete	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:BundleComplete(A, L, P) abort$/;"	f
s:BustAliveCache	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:BustAliveCache(...) abort$/;"	f
s:CBCodeCheck	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBCodeCheck(opts, codecheck) abort$/;"	f
s:CBCountCodeActions	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBCountCodeActions(opts, actions) abort$/;"	f
s:CBFindImplementations	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBFindImplementations(target, opts, locations) abort$/;"	f
s:CBFindMembers	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBFindMembers(opts, locations) abort$/;"	f
s:CBFindSymbol	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBFindSymbol(filter, locations) abort$/;"	f
s:CBFindUsages	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBFindUsages(target, opts, locations) abort$/;"	f
s:CBFixUsings	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBFixUsings(opts, locations) abort$/;"	f
s:CBGetCodeActions	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBGetCodeActions(mode, actions) abort$/;"	f
s:CBGetCompletions	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBGetCompletions(opts, completions) abort$/;"	f
s:CBGlobalCodeCheck	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBGlobalCodeCheck(quickfixes) abort$/;"	f
s:CBGotoDefinition	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBGotoDefinition(opts, location, metadata) abort$/;"	f
s:CBGotoMetadata	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBGotoMetadata(open_in_preview, opts, response, metadata) abort$/;"	f
s:CBHighlightBuffer	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBHighlightBuffer(opts, hltypes) abort$/;"	f
s:CBPreviewDefinition	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBPreviewDefinition(opts, loc, metadata) abort$/;"	f
s:CBPreviewImplementation	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBPreviewImplementation(locs, ...) abort$/;"	f
s:CBSignatureHelp	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBSignatureHelp(response) abort$/;"	f
s:CBTypeLookup	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CBTypeLookup(opts, response) abort$/;"	f
s:CSSIndent	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:CSSIndent()$/;"	f
s:CalculatePosition	.config/nvim/plugged/vista.vim/autoload/vista/floating.vim	/^function! s:CalculatePosition(lines) abort$/;"	f
s:Call	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:Call(method, args)$/;"	f
s:Call	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:Call(method, args)$/;"	f
s:Cancell	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! s:Cancell() " {{{$/;"	f
s:Cb	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  function! s:Cb() closure$/;"	f
s:Cb	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^function! s:Cb(error, response) abort$/;"	f
s:Cb	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^  function! s:Cb() closure$/;"	f
s:Center	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! s:Center(string, fieldwidth)$/;"	f
s:ChangeSurroundingFunctionCall	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^function! s:ChangeSurroundingFunctionCall()$/;"	f
s:ChannelSet	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! s:ChannelSet(dict, key, val)$/;"	f
s:ChannelSet	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^function! s:ChannelSet(dict, key, val)$/;"	f
s:CheckBlockTag	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:CheckBlockTag(blocktag, ind)$/;"	f
s:CheckCustomTag	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:CheckCustomTag(ctag)$/;"	f
s:CheckDefined	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:CheckDefined(colors)$/;"	f
s:CheckTag	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:CheckTag(itag)$/;"	f
s:CheckValidPowershellSettings	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CheckValidPowershellSettings()$/;"	f
s:ChooseCommandMap	.config/nvim/plugged/tabular/plugin/Tabular.vim	/^function! s:ChooseCommandMap(commandline)$/;"	f
s:CleanupCodeActions	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:CleanupCodeActions(opts) abort$/;"	f
s:ClearAugroups	.config/nvim/plugged/vista.vim/autoload/vista/sidebar.vim	/^function! s:ClearAugroups(...) abort$/;"	f
s:ClearHighlight	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:ClearHighlight(groupname)$/;"	f
s:ClearOtherEvents	.config/nvim/plugged/vista.vim/autoload/vista/autocmd.vim	/^function! s:ClearOtherEvents(group) abort$/;"	f
s:Clog	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Clog(bang, mods, arg) abort$/;"	f
s:CloseOnCursorMoved	.config/nvim/plugged/vista.vim/autoload/vista/floating.vim	/^function! s:CloseOnCursorMoved() abort$/;"	f
s:CloseOnWinEnter	.config/nvim/plugged/vista.vim/autoload/vista/floating.vim	/^function! s:CloseOnWinEnter() abort$/;"	f
s:ClosePopup	.config/nvim/plugged/vista.vim/autoload/vista/popup.vim	/^function! s:ClosePopup() abort$/;"	f
s:ClosingBracketOnEmptyLine	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ClosingBracketOnEmptyLine(cline_info) abort$/;"	f
s:ClosingHeredocDelimiter	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ClosingHeredocDelimiter(cline_info) abort$/;"	f
s:CodeActionFromSelected	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:CodeActionFromSelected(type)$/;"	f
s:CodeActionFromSelected	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! s:CodeActionFromSelected(type)$/;"	f
s:CodeCheckRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:CodeCheckRH(Callback, response) abort$/;"	f
s:CodeFormatRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:CodeFormatRH(opts, response) abort$/;"	f
s:CommandEdit	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:CommandEdit(cmd, name, projections, ...)$/;"	f
s:CommandList	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:CommandList(...) abort$/;"	f
s:CommandList	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:CommandList(A,L,P)$/;"	f
s:CommandList	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! s:CommandList(...) abort$/;"	f
s:Compare	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:Compare(s1, s2) abort$/;"	f
s:Compare	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! s:Compare(s1, s2) abort$/;"	f
s:Compare	.config/nvim/plugged/vista.vim/autoload/vista/renderer/kind.vim	/^function! s:Compare(i1, i2) abort$/;"	f
s:CompareDefinitionStarts	.config/nvim/plugged/sideways.vim/autoload/sideways/parsing.vim	/^function! s:CompareDefinitionStarts(first, second)$/;"	f
s:CompleteTabularizeCommand	.config/nvim/plugged/tabular/plugin/Tabular.vim	/^function! s:CompleteTabularizeCommand(argstart, cmdline, cursorpos)$/;"	f
s:Complete_alternate	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Complete_alternate(A,L,P) abort$/;"	f
s:Complete_cd	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Complete_cd(ArgLead, CmdLine, CursorPos) abort$/;"	f
s:Complete_console	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Complete_console(A,L,P) abort$/;"	f
s:Complete_destroy	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Complete_destroy(A,L,P) abort$/;"	f
s:Complete_edit	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Complete_edit(ArgLead, CmdLine, CursorPos) abort$/;"	f
s:Complete_environments	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Complete_environments(...) abort$/;"	f
s:Complete_generate	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Complete_generate(A,L,P) abort$/;"	f
s:Complete_log	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Complete_log(A, L, P) abort$/;"	f
s:Complete_preview	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Complete_preview(A,L,P) abort$/;"	f
s:Complete_related	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Complete_related(A,L,P) abort$/;"	f
s:Complete_ruby	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Complete_ruby(A,L,P) abort$/;"	f
s:Complete_server	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Complete_server(A,L,P) abort$/;"	f
s:ContainWhitespaceOnly	.config/nvim/plugged/vista.vim/autoload/vista/renderer/kind.vim	/^function! s:ContainWhitespaceOnly(str) abort$/;"	f
s:ContinuedHangingOperator	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ContinuedHangingOperator(msl_info) abort$/;"	f
s:ContinuedLine	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ContinuedLine(pline_info) abort$/;"	f
s:CountITags	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:CountITags(text)$/;"	f
s:CountTagsAndState	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:CountTagsAndState(text)$/;"	f
s:CreateCoordKeyDict	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:CreateCoordKeyDict(groups, ...)$/;"	f
s:CssFirstUnfinished	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:CssFirstUnfinished(lnum, min_lnum)$/;"	f
s:CssPrevNonComment	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:CssPrevNonComment(lnum, stopline)$/;"	f
s:CssUnfinished	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:CssUnfinished(text)$/;"	f
s:CursorHasGroup	.config/nvim/plugged/vim-ruby/spec/vim/plugin/syntax_test.vim	/^function! s:CursorHasGroup(group) abort$/;"	f
s:CustomComplete	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:CustomComplete(A,L,P,cmd) abort$/;"	f
s:DIRECTION	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^let s:DIRECTION = { 'forward': 0, 'backward': 1, 'bidirection': 2}$/;"	v
s:DIRECTION	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^let s:DIRECTION = {'forward': 0, 'backward': 1}$/;"	v
s:DebugItems	.config/nvim/plugged/sideways.vim/autoload/sideways/parsing.vim	/^function! s:DebugItems(definition, items)$/;"	f
s:DebugValidDefinitions	.config/nvim/plugged/sideways.vim/autoload/sideways/parsing.vim	/^function! s:DebugValidDefinitions(valid_definitions)$/;"	f
s:DefRuby	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:DefRuby()$/;"	f
s:DeindentingKeyword	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:DeindentingKeyword(cline_info) abort$/;"	f
s:DeleteSurroundingFunctionCall	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^function! s:DeleteSurroundingFunctionCall()$/;"	f
s:DescendantsOf	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! s:DescendantsOf(candidates, root_line, scope) abort$/;"	f
s:DescendantsOfRoot	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! s:DescendantsOfRoot(candidates, root_line) abort$/;"	f
s:Detect	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:Detect(path) abort$/;"	f
s:Detect	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:Detect(path) abort$/;"	f
s:DirectoryContainsFile	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:DirectoryContainsFile(directory, file) abort$/;"	f
s:Disable	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:Disable() abort$/;"	f
s:Disable	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! s:Disable() abort$/;"	f
s:Dispatch	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^function! s:Dispatch(F, ...) abort$/;"	f
s:Dispatch	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:Dispatch(F, ...) abort$/;"	f
s:Display	.config/nvim/plugged/vista.vim/autoload/vista/floating.vim	/^function! s:Display(msg) abort$/;"	f
s:DisplayInFloatingWin	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:DisplayInFloatingWin(...) abort$/;"	f
s:Do	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:Do(action)$/;"	f
s:DotPromptUser	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:DotPromptUser(groups) "{{{$/;"	f
s:EMPTY_LINE	.config/nvim/plugged/vim-textobj-indent/autoload/textobj/indent.vim	/^let s:EMPTY_LINE = -1$/;"	v
s:EasyMotion	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:EasyMotion(regexp, direction, visualmode, is_inclusive, ...) " {{{$/;"	f
s:EasyescapeInsertCharPre	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^function! s:EasyescapeInsertCharPre()$/;"	f
s:EasyescapeInsertEnter	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^function! s:EasyescapeInsertEnter()$/;"	f
s:EasyescapeInsertLeave	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^function! s:EasyescapeInsertLeave()$/;"	f
s:EasyescapeReadTimer	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^function! s:EasyescapeReadTimer()$/;"	f
s:EasyescapeSetTimer	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^function! s:EasyescapeSetTimer()$/;"	f
s:Echo	.config/nvim/plugged/vista.vim/autoload/vista/error.vim	/^function! s:Echo(group, msg) abort$/;"	f
s:EchoInCmdline	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:EchoInCmdline(msg, tag) abort$/;"	f
s:EchoScope	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:EchoScope(scope) abort$/;"	f
s:Echon	.config/nvim/plugged/vista.vim/autoload/vista/error.vim	/^function! s:Echon(group, msg) abort$/;"	f
s:EmptyInsideString	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:EmptyInsideString(pline_info) abort$/;"	f
s:Enable	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:Enable()$/;"	f
s:Enable	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! s:Enable()$/;"	f
s:EnsureExists	.config/nvim/plugged/vista.vim/autoload/vista/source.vim	/^function! s:EnsureExists() abort$/;"	f
s:ErrMsg	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:ErrMsg(msg)$/;"	f
s:ExcludeOther	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! s:ExcludeOther(nr, exclude_preview)$/;"	f
s:ExcludePaths	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! s:ExcludePaths(nr, exclude_paths)$/;"	f
s:Execute	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^function! s:Execute(bang, should_display) abort$/;"	f
s:Execute	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:Execute(bang, should_display) abort$/;"	f
s:Execute	.config/nvim/plugged/vista.vim/autoload/vista/extension/markdown.vim	/^function! s:Execute() abort$/;"	f
s:ExtensionList	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:ExtensionList(...) abort$/;"	f
s:ExtensionList	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! s:ExtensionList(...) abort$/;"	f
s:ExtraBrackets	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:ExtraBrackets(lnum) abort$/;"	f
s:Extract	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^function! s:Extract(symbols) abort$/;"	f
s:ExtractLinewise	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:ExtractLinewise(raw_data) abort$/;"	f
s:FALSE	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^let s:FALSE = 0$/;"	v
s:FALSE	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^let s:FALSE = 0$/;"	v
s:FALSE	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^let s:FALSE = 0$/;"	v
s:FUNCTION_IMPL_TABLE	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^let s:FUNCTION_IMPL_TABLE = {$/;"	v
s:FillChangeContents	.config/nvim/plugged/tagalong.vim/autoload/tagalong.vim	/^function! s:FillChangeContents(change)$/;"	f
s:FilterString	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! s:FilterString(lines, commandstring)$/;"	f
s:FindActiveItem	.config/nvim/plugged/sideways.vim/autoload/sideways.vim	/^function! s:FindActiveItem(items)$/;"	f
s:FindBundlerLock	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:FindBundlerLock(path) abort$/;"	f
s:FindContainingClass	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:FindContainingClass() abort$/;"	f
s:FindHighlightTypesRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:FindHighlightTypesRH(Callback, bufferLines, response) abort$/;"	f
s:FindImplementationsRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:FindImplementationsRH(Callback, response) abort$/;"	f
s:FindMaxLen	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^function! s:FindMaxLen() abort$/;"	f
s:FindMembersRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:FindMembersRH(Callback, response) abort$/;"	f
s:FindNearestMethodOrFunction	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:FindNearestMethodOrFunction(_timer) abort$/;"	f
s:FindServerRunningOnParentDirectory	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:FindServerRunningOnParentDirectory(bufnum) abort$/;"	f
s:FindSolution	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:FindSolution(interactive, bufnum) abort$/;"	f
s:FindSolutionsFiles	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:FindSolutionsFiles(bufnum) abort$/;"	f
s:FindSymbolRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:FindSymbolRH(Callback, response) abort$/;"	f
s:FindTextPropertiesRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:FindTextPropertiesRH(bufnum, buftick, response) abort$/;"	f
s:FindUsagesRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:FindUsagesRH(Callback, response) abort$/;"	f
s:FixUsingsRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:FixUsingsRH(Callback, response) abort$/;"	f
s:FocusGainedHandler	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:FocusGainedHandler(timer)$/;"	f
s:FormatFromSelected	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:FormatFromSelected(type)$/;"	f
s:FormatFromSelected	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! s:FormatFromSelected(type)$/;"	f
s:FreshState	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:FreshState(lnum)$/;"	f
s:FunctionCallTextObject	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^function! s:FunctionCallTextObject(mode)$/;"	f
s:GeneratorCommand	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:GeneratorCommand(bang, mods, ...) abort$/;"	f
s:GenericAutoUpdate	.config/nvim/plugged/vista.vim/autoload/vista/autocmd.vim	/^function! s:GenericAutoUpdate(fpath) abort$/;"	f
s:GenericStopTimer	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:GenericStopTimer(timer) abort$/;"	f
s:GetAvaliableExecutives	.config/nvim/plugged/vista.vim/autoload/vista/debugging.vim	/^function! s:GetAvaliableExecutives() abort$/;"	f
s:GetBufferRubyClass	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubyClass(name, ...)$/;"	f
s:GetBufferRubyEntity	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubyEntity( name, type, ... )$/;"	f
s:GetBufferRubyModule	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubyModule(name, ...)$/;"	f
s:GetBufferRubySingletonMethods	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetBufferRubySingletonMethods(name)$/;"	f
s:GetChangePositions	.config/nvim/plugged/tagalong.vim/autoload/tagalong.vim	/^function! s:GetChangePositions()$/;"	f
s:GetChar	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:GetChar(...) abort "{{{$/;"	f
s:GetCodeActionsRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:GetCodeActionsRH(Callback, response) abort$/;"	f
s:GetCompletionsRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:GetCompletionsRH(Callback, response) abort$/;"	f
s:GetCustomCmd	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:GetCustomCmd(ft) abort$/;"	f
s:GetDefaultDefinitions	.config/nvim/plugged/switch.vim/autoload/switch.vim	/^function! s:GetDefaultDefinitions()$/;"	f
s:GetExplicitExecutive	.config/nvim/plugged/vista.vim/autoload/vista/sidebar.vim	/^function! s:GetExplicitExecutive() abort$/;"	f
s:GetGlobalVariables	.config/nvim/plugged/vista.vim/autoload/vista/debugging.vim	/^function! s:GetGlobalVariables() abort$/;"	f
s:GetHiCmd	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:GetHiCmd(list)$/;"	f
s:GetInfoUnderCursor	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:GetInfoUnderCursor() abort$/;"	f
s:GetLanguageSpecificOptition	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:GetLanguageSpecificOptition(filetype) abort$/;"	f
s:GetMSL	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:GetMSL(lnum) abort$/;"	f
s:GetRubyVarType	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:GetRubyVarType(v)$/;"	f
s:GetScriptType	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:GetScriptType(str)$/;"	f
s:GetTrailingLnum	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:GetTrailingLnum() abort$/;"	f
s:GetVisibility	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! s:GetVisibility(line) abort$/;"	f
s:GetVisualStartPosition	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:GetVisualStartPosition(c_pos, v_start, v_end, search_direction) "{{{$/;"	f
s:GhostTextChanged	.vim/plugged/ghost-text.vim/plugin/ghost-text.vim	/^function! s:GhostTextChanged()$/;"	f
s:GlobalChange	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! s:GlobalChange(dict, key, val)$/;"	f
s:GlobalChange	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! s:GlobalChange(dict, key, val)$/;"	f
s:GlobalCodeCheckRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:GlobalCodeCheckRH(Callback, response) abort$/;"	f
s:GotoDefinitionRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:GotoDefinitionRH(Callback, response) abort$/;"	f
s:GotoMetadataRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:GotoMetadataRH(Callback, metadata, response) abort$/;"	f
s:GroupingAlgorithmOriginal	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:GroupingAlgorithmOriginal(targets, keys)$/;"	f
s:GroupingAlgorithmSCTree	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:GroupingAlgorithmSCTree(targets, keys) "{{{$/;"	f
s:HL	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^function! s:HL(group, fg, ...)$/;"	f
s:HandleServerEvent	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:HandleServerEvent(job, res) abort$/;"	f
s:Handler	.config/nvim/plugged/vista.vim/autoload/vista/executive/ale.vim	/^function! s:Handler(data) abort$/;"	f
s:Handler	.config/nvim/plugged/vista.vim/autoload/vista/executive/lcn.vim	/^function! s:Handler(output) abort$/;"	f
s:Handler	.config/nvim/plugged/vista.vim/autoload/vista/executive/vim_lsp.vim	/^function! s:Handler(_server, _req_id, _type, data) abort$/;"	f
s:HasAvaliableServers	.config/nvim/plugged/vista.vim/autoload/vista/executive/vim_lsp.vim	/^function! s:HasAvaliableServers() abort$/;"	f
s:HasVlnum	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:HasVlnum() abort$/;"	f
s:HeadingWhitespaces	.config/nvim/plugged/vista.vim/autoload/vista/fold.vim	/^function! s:HeadingWhitespaces(line) abort$/;"	f
s:HiTag	.config/nvim/plugged/vista.vim/autoload/vista/popup.vim	/^function! s:HiTag() abort$/;"	f
s:Highlight	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^function! s:Highlight() abort$/;"	f
s:Highlight	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:Highlight(types, group) abort$/;"	f
s:HighlightNearestTag	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:HighlightNearestTag(_timer) abort$/;"	f
s:Hinter	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^let s:Hinter = {$/;"	v
s:Hinter._pos2hint_to_line2col2hint	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter._pos2hint_to_line2col2hint(pos2hint) abort$/;"	f
s:Hinter._replace_line_for_hint	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter._replace_line_for_hint(col_num, line, hint) abort$/;"	f
s:Hinter._replace_tab_target	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter._replace_tab_target(col_num, line) abort$/;"	f
s:Hinter._replace_text_to_space	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter._replace_text_to_space(line, col_num, len) abort$/;"	f
s:Hinter._save_lines	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter._save_lines() abort$/;"	f
s:Hinter._show_hint_for_line	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter._show_hint_for_line(winnr, lnum, col2hint) abort$/;"	f
s:Hinter._show_hint_for_win	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter._show_hint_for_win(winnr) abort$/;"	f
s:Hinter.after	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter.after() abort$/;"	f
s:Hinter.before	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter.before() abort$/;"	f
s:Hinter.disable_conceal_in_other_win	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter.disable_conceal_in_other_win() abort$/;"	f
s:Hinter.init	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter.init(hint_dict) abort$/;"	f
s:Hinter.modify_env_for_win	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter.modify_env_for_win(winnr) abort$/;"	f
s:Hinter.new	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter.new(hint_dict, config) abort$/;"	f
s:Hinter.remove_hints	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter.remove_hints(winnr) abort$/;"	f
s:Hinter.restore_conceal_in_other_win	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter.restore_conceal_in_other_win() abort$/;"	f
s:Hinter.restore_env	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter.restore_env() abort$/;"	f
s:Hinter.restore_lines_for_win	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter.restore_lines_for_win(winnr) abort$/;"	f
s:Hinter.restore_options	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter.restore_options() abort$/;"	f
s:Hinter.save_options	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter.save_options() abort$/;"	f
s:Hinter.show_hint	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter.show_hint() abort$/;"	f
s:Hinter.show_hint_pos	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:Hinter.show_hint_pos(lnum, cnum, char, winnr) abort$/;"	f
s:HitAHintMotion	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/overwin.vim	/^let s:HitAHintMotion = s:V.import('HitAHint.Motion')$/;"	v
s:IndentingKeywordInMSL	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IndentingKeywordInMSL(msl_info) abort$/;"	f
s:InitCwds	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:InitCwds()$/;"	f
s:InitIfSupportedFiletype	.config/nvim/plugged/tagalong.vim/plugin/tagalong.vim	/^function s:InitIfSupportedFiletype(filetype_string)$/;"	f
s:Insert	.config/nvim/plugged/vista.vim/autoload/vista/parser/ctags.vim	/^function! s:Insert(container, kind, picked) abort$/;"	f
s:Insert	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! s:Insert(container, key, line) abort$/;"	f
s:InsideTag	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:InsideTag(foundHtmlString)$/;"	f
s:InstallOptions	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:InstallOptions(...)abort$/;"	f
s:InstallOptions	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! s:InstallOptions(...)abort$/;"	f
s:IntoTemp	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:IntoTemp(...) abort$/;"	f
s:Invert	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Invert(bang)$/;"	f
s:IsAssignment	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsAssignment(str, pos) abort$/;"	f
s:IsBundlerMake	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:IsBundlerMake() abort$/;"	f
s:IsFileUri	.config/nvim/plugged/vista.vim/autoload/vista/parser/lsp.vim	/^function! s:IsFileUri(uri) abort$/;"	f
s:IsHeader	.config/nvim/plugged/vista.vim/autoload/vista/extension/markdown.vim	/^function! s:IsHeader(cur_line, next_line) abort$/;"	f
s:IsInClassDef	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:IsInClassDef()$/;"	f
s:IsInComment	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:IsInComment(pos)$/;"	f
s:IsInRubyGroup	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInRubyGroup(groups, lnum, col) abort$/;"	f
s:IsInString	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInString(lnum, col) abort$/;"	f
s:IsInStringDelimiter	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInStringDelimiter(lnum, col) abort$/;"	f
s:IsInStringOrComment	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInStringOrComment(lnum, col) abort$/;"	f
s:IsInStringOrDocumentation	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:IsInStringOrDocumentation(lnum, col) abort$/;"	f
s:IsPosInClassDef	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:IsPosInClassDef(pos)$/;"	f
s:IsServerPortHardcoded	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:IsServerPortHardcoded(sln_or_dir) abort$/;"	f
s:IsUsable	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^function! s:IsUsable(cache, fpath) abort$/;"	f
s:JumpPair	.config/nvim/plugged/tagalong.vim/autoload/tagalong.vim	/^function! s:JumpPair(direction)$/;"	f
s:JumpToItem	.config/nvim/plugged/sideways.vim/autoload/sideways.vim	/^function s:JumpToItem(items, index)$/;"	f
s:Kind2Symbol	.config/nvim/plugged/vista.vim/autoload/vista/parser/lsp.vim	/^function! s:Kind2Symbol(kind) abort$/;"	f
s:LeadingOperator	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:LeadingOperator(cline_info) abort$/;"	f
s:Left	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! s:Left(string, fieldwidth)$/;"	f
s:LimitPattern	.config/nvim/plugged/switch.vim/autoload/switch/mapping.vim	/^function! s:LimitPattern(pattern, start, end)$/;"	f
s:LoadData	.config/nvim/plugged/vista.vim/autoload/vista/parser/ctags.vim	/^function! s:LoadData(container, line) abort$/;"	f
s:LocateValidDefinitions	.config/nvim/plugged/sideways.vim/autoload/sideways/parsing.vim	/^function! s:LocateValidDefinitions(definitions)$/;"	f
s:LocationsFromResponse	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:LocationsFromResponse(quickfixes) abort$/;"	f
s:Log	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:Log(message, loglevel) abort$/;"	f
s:LogDetect	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^function! s:LogDetect() abort$/;"	f
s:LoopedListItems	.config/nvim/plugged/switch.vim/autoload/switch/mapping.vim	/^function! s:LoopedListItems(list)$/;"	f
s:MakeChanges	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:MakeChanges(body) abort$/;"	f
s:MarkCols	.config/nvim/plugged/sideways.vim/autoload/sideways/textobj.vim	/^function! s:MarkCols(start_coords, end_coords)$/;"	f
s:Match	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:Match(lnum, regex) abort$/;"	f
s:Message	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:Message(message) " {{{$/;"	f
s:ModifierFlags	.vim/plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! s:ModifierFlags()$/;"	f
s:MultilineStringOrLineComment	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:MultilineStringOrLineComment(cline_info) abort$/;"	f
s:NavigateRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:NavigateRH(response) abort$/;"	f
s:NeedsVitalityRedraw	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^function! s:NeedsVitalityRedraw()$/;"	f
s:NewItem	.config/nvim/plugged/sideways.vim/autoload/sideways/parsing.vim	/^function! s:NewItem()$/;"	f
s:NewWindow	.config/nvim/plugged/vista.vim/autoload/vista/sidebar.vim	/^function! s:NewWindow() abort$/;"	f
s:NextTopLevelLnum	.config/nvim/plugged/vista.vim/autoload/vista/jump.vim	/^function! s:NextTopLevelLnum() abort$/;"	f
s:NotEnoughBuffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:NotEnoughBuffers()$/;"	f
s:OnExit	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  function! s:OnExit(status) closure$/;"	f
s:OnExit	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^  function! s:OnExit(status) closure$/;"	f
s:OnExtensionInstalled	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^    function! s:OnExtensionInstalled(status, ...) closure$/;"	f
s:OnExtensionInstalled	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^    function! s:OnExtensionInstalled(status, ...) closure$/;"	f
s:OnInstalled	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  function! s:OnInstalled(status, ...) closure$/;"	f
s:OnInstalled	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^  function! s:OnInstalled(status, ...) closure$/;"	f
s:OnUpdated	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  function! s:OnUpdated(status, ...) closure$/;"	f
s:OnUpdated	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^  function! s:OnUpdated(status, ...) closure$/;"	f
s:Open	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:Open(cmd,gem,lcd) abort$/;"	f
s:OpenComplete	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:OpenComplete(A,L,P) abort$/;"	f
s:OpenConfig	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:OpenConfig()$/;"	f
s:OpenConfig	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! s:OpenConfig()$/;"	f
s:OpenLocationInPreview	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:OpenLocationInPreview(loc) abort$/;"	f
s:OpenPopup	.config/nvim/plugged/vista.vim/autoload/vista/popup.vim	/^function! s:OpenPopup(lnum, tag) abort$/;"	f
s:OutputCommand	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:OutputCommand(count, code) abort$/;"	f
s:PATTERN_FLAGS_TABLE	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^let s:PATTERN_FLAGS_TABLE = {$/;"	v
s:PATTERN_IMPL_TABLE	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^let s:PATTERN_IMPL_TABLE = {$/;"	v
s:PREFIX	.config/nvim/plugged/defx.nvim/autoload/defx/exrename.vim	/^let s:PREFIX = has('win32') ? '[exrename]' : '*exrename*'$/;"	v
s:ParseItems	.config/nvim/plugged/sideways.vim/autoload/sideways/parsing.vim	/^function! s:ParseItems(definition, start_line, start_col)$/;"	f
s:ParsePattern	.config/nvim/plugged/tabular/plugin/Tabular.vim	/^function! s:ParsePattern(string)$/;"	f
s:ParseTagfield	.config/nvim/plugged/vista.vim/autoload/vista/parser/ctags.vim	/^function! s:ParseTagfield(tagfields) abort$/;"	f
s:PerformChangesRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:PerformChangesRH(opts, response) abort$/;"	f
s:Plog	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Plog(bang, arg) abort$/;"	f
s:PrepareContainer	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^function! s:PrepareContainer() abort$/;"	f
s:PrepareContainer	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:PrepareContainer() abort$/;"	f
s:PrependFpath	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! s:PrependFpath(lines) abort$/;"	f
s:PrevNonBlankNonString	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:PrevNonBlankNonString(lnum) abort$/;"	f
s:PrevTopLevelLnum	.config/nvim/plugged/vista.vim/autoload/vista/jump.vim	/^function! s:PrevTopLevelLnum() abort$/;"	f
s:Preview	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Preview(bang, lnum, uri) abort$/;"	f
s:PreviousNotMSL	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:PreviousNotMSL(msl_info) abort$/;"	f
s:ProcessDictMapping	.config/nvim/plugged/switch.vim/autoload/switch/mapping.vim	/^function! s:ProcessDictMapping(definition)$/;"	f
s:ProcessListMapping	.config/nvim/plugged/switch.vim/autoload/switch/mapping.vim	/^function! s:ProcessListMapping(definitions, options)$/;"	f
s:ProcessNormalizedCaseMapping	.config/nvim/plugged/switch.vim/autoload/switch/mapping.vim	/^function! s:ProcessNormalizedCaseMapping(definition)$/;"	f
s:ProjectRun	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^function! s:ProjectRun(...) abort$/;"	f
s:ProjectionistDetect	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:ProjectionistDetect() abort$/;"	f
s:ProjectionistDetect	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:ProjectionistDetect() abort$/;"	f
s:Prompt	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:Prompt(message) " {{{$/;"	f
s:PromptUser	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:PromptUser(groups) "{{{$/;"	f
s:PushItem	.config/nvim/plugged/sideways.vim/autoload/sideways/parsing.vim	/^function! s:PushItem(items, current_item, final_col)$/;"	f
s:QuickFixCmdPostMake	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:QuickFixCmdPostMake() abort$/;"	f
s:QuickFixCmdPreMake	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:QuickFixCmdPreMake() abort$/;"	f
s:Rails	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Rails(bang, count, arg) abort$/;"	f
s:Rake	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Rake(bang, lnum, arg) abort$/;"	f
s:Rake	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:Rake(bang, arg) abort$/;"	f
s:RakeComplete	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:RakeComplete(A, L, P, ...) abort$/;"	f
s:RawRequest	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:RawRequest(body, command, opts, ...) abort$/;"	f
s:RealParentOf	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! s:RealParentOf(candidate) abort$/;"	f
s:Refresh	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Refresh(bang)$/;"	f
s:RefreshTabline	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:RefreshTabline()$/;"	f
s:Related	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:Related(cmd,line1,line2,count,...) abort$/;"	f
s:RemainderOfLine	.config/nvim/plugged/sideways.vim/autoload/sideways/parsing.vim	/^function! s:RemainderOfLine()$/;"	f
s:RemoveITags	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:RemoveITags(tags, taglist)$/;"	f
s:RemoveVisibility	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^  function! s:RemoveVisibility(tag) abort$/;"	f
s:Render	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! s:Render() abort$/;"	f
s:Render	.config/nvim/plugged/vista.vim/autoload/vista/viewer.vim	/^function! s:Render(data) abort$/;"	f
s:RenderDescendants	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! s:RenderDescendants(parent_name, parent_line, descendants, rows, depth) abort$/;"	f
s:RenderLinewise	.config/nvim/plugged/vista.vim/autoload/vista/renderer/line.vim	/^function! s:RenderLinewise() abort$/;"	f
s:RenderScopeless	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! s:RenderScopeless(scope_less, rows) abort$/;"	f
s:Request	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:Request(command, opts) abort$/;"	f
s:RestoreValue	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:RestoreValue() "{{{$/;"	f
s:RevealInSourceFile	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:RevealInSourceFile(lnum, tag) abort$/;"	f
s:Right	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! s:Right(string, fieldwidth)$/;"	f
s:RubyExtract	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:RubyExtract(bang, mods, root, before, name) range abort$/;"	f
s:Run	.config/nvim/plugged/vista.vim/autoload/vista/executive/ale.vim	/^function! s:Run() abort$/;"	f
s:Run	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^function! s:Run() abort$/;"	f
s:Run	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:Run(fpath) abort$/;"	f
s:Run	.config/nvim/plugged/vista.vim/autoload/vista/executive/lcn.vim	/^function! s:Run() abort$/;"	f
s:Run	.config/nvim/plugged/vista.vim/autoload/vista/executive/vim_lsp.vim	/^function! s:Run() abort$/;"	f
s:Run	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^function! s:Run(...) abort$/;"	f
s:RunAsync	.config/nvim/plugged/vista.vim/autoload/vista/executive/ale.vim	/^function! s:RunAsync() abort$/;"	f
s:RunAsync	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^function! s:RunAsync() abort$/;"	f
s:RunAsync	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:RunAsync(fpath) abort$/;"	f
s:RunAsync	.config/nvim/plugged/vista.vim/autoload/vista/executive/lcn.vim	/^function! s:RunAsync() abort$/;"	f
s:RunAsync	.config/nvim/plugged/vista.vim/autoload/vista/executive/vim_lsp.vim	/^function! s:RunAsync() abort$/;"	f
s:RunnerCommand	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:RunnerCommand(bang, count, arg) abort$/;"	f
s:SID_PREFIX	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^function! s:SID_PREFIX()$/;"	f
s:SNR	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:SNR = join(map(range(len("\\<SNR>")), '"[\\\\x" . printf("%0x", char2nr("\\<SNR>"[v:val]))/;"	v
s:SaveValue	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:SaveValue() "{{{$/;"	f
s:SearchDict	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/cmigemo.vim	/^function! s:SearchDict() "{{{$/;"	f
s:SearchDict2	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/cmigemo.vim	/^function! s:SearchDict2(name) "{{{$/;"	f
s:ServerCommand	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:ServerCommand(kill, bg, arg) abort$/;"	f
s:ServerLoadTimeout	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:ServerLoadTimeout(job, timer) abort$/;"	f
s:SetBufline	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! s:SetBufline(bufnr, lines) abort$/;"	f
s:SetDefault	.vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! s:SetDefault(var, val)$/;"	f
s:SetLines	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! s:SetLines(start, len, strings)$/;"	f
s:SetLines	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:SetLines(lines, key) " {{{$/;"	f
s:SetQuickFix	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:SetQuickFix(list, title)$/;"	f
s:Setup	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:Setup(path) abort$/;"	f
s:Setup	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:Setup(path) abort$/;"	f
s:ShortToLong	.config/nvim/plugged/vista.vim/autoload/vista/parser/ctags.vim	/^function! s:ShortToLong(short) abort$/;"	f
s:ShouldForwardNavigationBackToTmux	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^function! s:ShouldForwardNavigationBackToTmux(tmux_last_pane, at_tab_page_edge)$/;"	f
s:ShowDetail	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:ShowDetail() abort$/;"	f
s:ShowInfo	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:ShowInfo()$/;"	f
s:ShowInfo	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! s:ShowInfo()$/;"	f
s:SignatureHelpRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:SignatureHelpRH(Callback, response) abort$/;"	f
s:SkipSyntaxExpression	.config/nvim/plugged/sideways.vim/autoload/sideways/parsing.vim	/^function! s:SkipSyntaxExpression(definition)$/;"	f
s:SkipWhitespace	.config/nvim/plugged/sideways.vim/autoload/sideways/parsing.vim	/^function! s:SkipWhitespace()$/;"	f
s:SortCompare	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! s:SortCompare(i1, i2) abort$/;"	f
s:SourcedFile	.config/nvim/plugged/vim-snippets/plugin/vimsnippets.vim	/^let s:SourcedFile=expand("<sfile>")$/;"	v
s:SourcedFile	.vim/plugged/vim-snippets/plugin/vimsnippets.vim	/^let s:SourcedFile=expand("<sfile>")$/;"	v
s:SplitCommands	.config/nvim/plugged/tabular/plugin/Tabular.vim	/^function! s:SplitCommands(string)$/;"	f
s:SplitDelim	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! s:SplitDelim(string, delim)$/;"	f
s:SplitDelimTest	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! s:SplitDelimTest(string, delim, expected)$/;"	f
s:StarSetf	.config/nvim/plugged/vim-ruby/ftdetect/ruby.vim	/^func! s:StarSetf(ft)$/;"	f
s:StartOfFile	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^function! s:StartOfFile(pline_info) abort$/;"	f
s:StartServer	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:StartServer(sln_or_dir) abort$/;"	f
s:StopCursorTimer	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:StopCursorTimer() abort$/;"	f
s:StopFindTimer	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:StopFindTimer() abort$/;"	f
s:StopHighlightTimer	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! s:StopHighlightTimer() abort$/;"	f
s:StripLeadingSpaces	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! s:StripLeadingSpaces(string)$/;"	f
s:StripTrailingSpaces	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! s:StripTrailingSpaces(string)$/;"	f
s:Strlen	.config/nvim/plugged/tabular/autoload/tabular.vim	/^  function! s:Strlen(string)$/;"	f
s:Strlen	.config/nvim/plugged/tabular/autoload/tabular.vim	/^  let s:Strlen = function("strdisplaywidth")$/;"	v
s:Swap	.config/nvim/plugged/sideways.vim/autoload/sideways.vim	/^function! s:Swap(first, second)$/;"	f
s:Switch	.config/nvim/plugged/switch.vim/plugin/switch.vim	/^function! s:Switch()$/;"	f
s:SwitchReverse	.config/nvim/plugged/switch.vim/plugin/switch.vim	/^function! s:SwitchReverse()$/;"	f
s:SyncAutocmd	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^function! s:SyncAutocmd(...)$/;"	f
s:SyncAutocmd	.vim/plugged/coc.nvim/plugin/coc.vim	/^function! s:SyncAutocmd(...)$/;"	f
s:TRUE	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^let s:TRUE = !0$/;"	v
s:TRUE	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^let s:TRUE = !0$/;"	v
s:TRUE	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^let s:TRUE = !0$/;"	v
s:TYPE	.config/nvim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:TYPE	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:TYPE = {'dict': type({}), 'funcref': type(function('call')), 'string': type(''), 'list': t/;"	v
s:TYPE	.vim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:TabBuffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:TabBuffers()$/;"	f
s:TabularCommands	.config/nvim/plugged/tabular/plugin/Tabular.vim	/^let s:TabularCommands = {}$/;"	v
s:TagsCommand	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:TagsCommand() abort$/;"	f
s:Tasks	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:Tasks(...) abort$/;"	f
s:Throw	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:Throw(message) "{{{$/;"	f
s:TmuxAwareNavigate	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^function! s:TmuxAwareNavigate(direction)$/;"	f
s:TmuxCommand	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^function! s:TmuxCommand(args)$/;"	f
s:TmuxNavigatorProcessList	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^function! s:TmuxNavigatorProcessList()$/;"	f
s:TmuxOrTmateExecutable	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^function! s:TmuxOrTmateExecutable()$/;"	f
s:TmuxSocket	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^function! s:TmuxSocket()$/;"	f
s:TmuxVimPaneIsZoomed	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^function! s:TmuxVimPaneIsZoomed()$/;"	f
s:TryAlternatives	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^function! s:TryAlternatives(tried, fpath) abort$/;"	f
s:TypeLookupRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:TypeLookupRH(Callback, response) abort$/;"	f
s:UpdateBufferRH	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^function! s:UpdateBufferRH(opts, response) abort$/;"	f
s:V	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^let s:V = vital#easymotion#new()$/;"	v
s:V	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/overwin.vim	/^let s:V = vital#easymotion#new()$/;"	v
s:ViewExtract	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:ViewExtract(bang, mods, first, last, file) abort$/;"	f
s:VimNavigate	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^function! s:VimNavigate(direction)$/;"	f
s:Vital	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^  let s:Vital._get_module = s:_function('s:_get_builtin_module')$/;"	v
s:Vital	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^  let s:Vital._get_module = s:_function('s:_get_module')$/;"	v
s:Vital	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:Vital = {}$/;"	v
s:Vital	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:Vital._import = s:_function('s:_import')$/;"	v
s:Vital	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:Vital.exists = s:_function('s:exists')$/;"	v
s:Vital	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:Vital.import = s:_function('s:import')$/;"	v
s:Vital	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:Vital.load = s:_function('s:load')$/;"	v
s:Vital	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:Vital.plugin_name = s:_function('s:plugin_name')$/;"	v
s:Vital	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:Vital.search = s:_function('s:search')$/;"	v
s:Vital	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:Vital.unload = s:_function('s:unload')$/;"	v
s:Vital	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:Vital.vital_files = s:_function('s:vital_files')$/;"	v
s:WriteToPreview	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^function! s:WriteToPreview(content)$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Hint.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Cancel.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/CursorMove.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Delete.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Doautocmd.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionExit.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionMessage.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Exit.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/History.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/InsertRegister.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/KeyMapping.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/NoInsert.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Paste.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Redraw.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Exception.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Input.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Keymapping.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Capture.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Highlight.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Buffer.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Message.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^  function! s:_SID() abort$/;"	f
s:_UNDEFINED	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^let s:_UNDEFINED = function('s:_undefined')$/;"	v
s:_as_echon	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^function! s:_as_echon(str)$/;"	f
s:_as_statusline	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^function! s:_as_statusline(list, count)$/;"	f
s:_assert	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Hint.vim	/^function! s:_assert(...) abort$/;"	f
s:_auto_cmap	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/KeyMapping.vim	/^function! s:_auto_cmap()$/;"	f
s:_base_set	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^let s:_base_set = {$/;"	v
s:_base_set	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^let s:_base_set.and = s:_base_set.intersection$/;"	v
s:_base_set	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^let s:_base_set.ge = s:_base_set.issuperset$/;"	v
s:_base_set	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^let s:_base_set.le = s:_base_set.issubset$/;"	v
s:_base_set	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^let s:_base_set.or = s:_base_set.union$/;"	v
s:_base_set	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^let s:_base_set.sub = s:_base_set.difference$/;"	v
s:_base_set	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^let s:_base_set.xor = s:_base_set.symmetric_difference$/;"	v
s:_base_set._add	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set._add(x) abort$/;"	f
s:_base_set._clear	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set._clear() abort$/;"	f
s:_base_set._hash	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set._hash(x) abort$/;"	f
s:_base_set._new	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set._new(...) abort$/;"	f
s:_base_set._set_data	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set._set_data(xs) abort$/;"	f
s:_base_set._to_set	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set._to_set(x) abort$/;"	f
s:_base_set._update	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set._update(xs) abort$/;"	f
s:_base_set.difference	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set.difference(t) abort$/;"	f
s:_base_set.gt	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set.gt(t) abort$/;"	f
s:_base_set.in	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set.in(x) abort$/;"	f
s:_base_set.intersection	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set.intersection(t) abort$/;"	f
s:_base_set.issubset	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set.issubset(t) abort$/;"	f
s:_base_set.issuperset	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set.issuperset(t) abort$/;"	f
s:_base_set.len	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set.len() abort$/;"	f
s:_base_set.lt	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set.lt(t) abort$/;"	f
s:_base_set.symmetric_difference	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set.symmetric_difference(t) abort$/;"	f
s:_base_set.to_list	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set.to_list() abort$/;"	f
s:_base_set.union	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_base_set.union(t) abort$/;"	f
s:_buffer_complete	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^function! s:_buffer_complete()$/;"	f
s:_capture	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^function! s:_capture(mode)$/;"	f
s:_clamp	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:_clamp(x, max, min)$/;"	f
s:_compare	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:_compare(a, b) abort$/;"	f
s:_convert_sid	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/KeyMapping.vim	/^function! s:_convert_sid(rhs, sid) abort$/;"	f
s:_create_win2pos2hint	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:_create_win2pos2hint(dict, hint_dict, ...) abort$/;"	f
s:_default_compare	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:_default_compare(a, b) abort$/;"	f
s:_dot_to_sharp	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_dot_to_sharp(name) abort$/;"	f
s:_echon	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^function! s:_echon(expr)$/;"	f
s:_engine	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^let s:_engine = exists("+regexpengine") ? '\\%#=2' : ''$/;"	v
s:_execute	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Highlight.vim	/^function! s:_execute(cmd)$/;"	f
s:_exists_autoload_func_with_source	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_exists_autoload_func_with_source(funcname) abort$/;"	f
s:_extract_files	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_extract_files(pattern, files) abort$/;"	f
s:_file2module	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_file2module(file) abort$/;"	f
s:_finish	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^function! s:_finish()$/;"	f
s:_foldl	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^function! s:_foldl(f, init, xs) abort$/;"	f
s:_function	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Hint.vim	/^  function! s:_function(fstr) abort$/;"	f
s:_function	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Hint.vim	/^  let s:_function = function('function')$/;"	v
s:_function	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^  function! s:_function(fstr) abort$/;"	f
s:_get_builtin_module	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_get_builtin_module(name) abort$/;"	f
s:_get_key	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Keymapping.vim	/^function! s:_get_key(conf)$/;"	f
s:_get_module	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_get_module(name) abort dict$/;"	f
s:_get_source_name	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! s:_get_source_name(path) abort$/;"	f
s:_get_source_name	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! s:_get_source_name(path) abort$/;"	f
s:_global_vital_files	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_global_vital_files() abort$/;"	f
s:_handleOldOptions	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
s:_hash_func	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_hash_func(x) abort$/;"	f
s:_import	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_import(name) abort dict$/;"	f
s:_import_func_name	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_import_func_name(plugin_name, module_name) abort$/;"	f
s:_init_hl	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:_init_hl() abort$/;"	f
s:_is_set	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_is_set(x) abort$/;"	f
s:_is_valid_highlight	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:_is_valid_highlight(name)$/;"	f
s:_keymapping	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^function! s:_keymapping(str)$/;"	f
s:_keys_count	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Hint.vim	/^function! s:_keys_count(targets_len, keys_len) abort$/;"	f
s:_map	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:_map(map_commands, forced_p, lhs, rhs)$/;"	f
s:_maparg	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^function! s:_maparg(name, mode, abbr, dict)$/;"	f
s:_max_by	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^function! s:_max_by(dict, expr) abort$/;"	f
s:_module_path	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_module_path(name) abort$/;"	f
s:_module_sid	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_module_sid(name) abort$/;"	f
s:_module_sid_base_dir	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_module_sid_base_dir() abort$/;"	f
s:_move	.config/nvim/plugged/vim-textobj-user/t/move.vim	/^function! s:_move(type)$/;"	f
s:_new_environment	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:_new_environment(name) abort$/;"	f
s:_new_instance	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:_new_instance(instance, ...) abort$/;"	f
s:_new_option	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:_new_option(name) abort$/;"	f
s:_new_register	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:_new_register(name) abort$/;"	f
s:_new_variable	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:_new_variable(name, ...) abort$/;"	f
s:_parse_line	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^function! s:_parse_line(line)$/;"	f
s:_path2project_directory_git	.config/nvim/plugged/denite.nvim/autoload/denite/project.vim	/^function! s:_path2project_directory_git(path) abort$/;"	f
s:_path2project_directory_git	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:_path2project_directory_git(path) abort$/;"	f
s:_path2project_directory_git	.vim/plugged/denite.nvim/autoload/denite/project.vim	/^function! s:_path2project_directory_git(path) abort$/;"	f
s:_path2project_directory_others	.config/nvim/plugged/denite.nvim/autoload/denite/project.vim	/^function! s:_path2project_directory_others(vcs, path) abort$/;"	f
s:_path2project_directory_others	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:_path2project_directory_others(vcs, path) abort$/;"	f
s:_path2project_directory_others	.vim/plugged/denite.nvim/autoload/denite/project.vim	/^function! s:_path2project_directory_others(vcs, path) abort$/;"	f
s:_path2project_directory_svn	.config/nvim/plugged/denite.nvim/autoload/denite/project.vim	/^function! s:_path2project_directory_svn(path) abort$/;"	f
s:_path2project_directory_svn	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:_path2project_directory_svn(path) abort$/;"	f
s:_path2project_directory_svn	.vim/plugged/denite.nvim/autoload/denite/project.vim	/^function! s:_path2project_directory_svn(path) abort$/;"	f
s:_plugin_name	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion.vim	/^let s:_plugin_name = expand('<sfile>:t:r')$/;"	v
s:_redir	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_redir(cmd) abort$/;"	f
s:_redraw	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^function! s:_redraw(cmdline)$/;"	f
s:_regex	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^let s:_regex = exists("+regexpengine")$/;"	v
s:_reset	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/History.vim	/^function! s:_reset()$/;"	f
s:_reset	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Capture.vim	/^function! s:_reset()$/;"	f
s:_runtime	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_runtime(path) abort$/;"	f
s:_s	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Hint.vim	/^  let s:_s = '<SNR>' . s:_SID() . '_'$/;"	v
s:_s	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^  let s:_s = '<SNR>' . s:_SID() . '_'$/;"	v
s:_safe_eval	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Keymapping.vim	/^function! s:_safe_eval(expr, ...)$/;"	f
s:_self_vital_files	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_self_vital_files() abort$/;"	f
s:_serveraddr	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^    fun! s:_serveraddr()$/;"	f
s:_sfuncname	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_sfuncname(sid, funcname) abort$/;"	f
s:_should_match_cmdline	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/History.vim	/^function! s:_should_match_cmdline(cmdline)$/;"	f
s:_sid	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_sid(path, filter_pattern) abort$/;"	f
s:_source	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:_source(path) abort$/;"	f
s:_split_keystring	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:_split_keystring(str, ...)$/;"	f
s:_throw	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:_throw(message) abort$/;"	f
s:_throw	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:_throw(msg) abort$/;"	f
s:_undefined	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:_undefined() abort$/;"	f
s:_unify_path	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^  function! s:_unify_path(path) abort$/;"	f
s:_unify_path_cache	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^  let s:_unify_path_cache = {}$/;"	v
s:_uniq	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^function! s:_uniq(list)$/;"	f
s:_uniq	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^  function! s:_uniq(list) abort$/;"	f
s:_verbosefile_pop	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Capture.vim	/^function! s:_verbosefile_pop()$/;"	f
s:_verbosefile_push	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Capture.vim	/^function! s:_verbosefile_push(file)$/;"	f
s:_virtual_tab2spacelen	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/helper.vim	/^function! s:_virtual_tab2spacelen(col_num) abort$/;"	f
s:_virtual_tab2spacelen	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:_virtual_tab2spacelen(col_num) abort$/;"	f
s:_vital_created	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:_vital_created(module) abort$/;"	f
s:_vital_depends	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:_vital_depends() abort$/;"	f
s:_vital_depends	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:_vital_depends()$/;"	f
s:_vital_depends	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Doautocmd.vim	/^function! s:_vital_depends()$/;"	f
s:_vital_depends	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/InsertRegister.vim	/^function! s:_vital_depends()$/;"	f
s:_vital_depends	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/KeyMapping.vim	/^function! s:_vital_depends()$/;"	f
s:_vital_depends	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Keymapping.vim	/^function! s:_vital_depends()$/;"	f
s:_vital_depends	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^function! s:_vital_depends()$/;"	f
s:_vital_depends	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:_vital_depends()$/;"	f
s:_vital_depends	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Highlight.vim	/^function! s:_vital_depends()$/;"	f
s:_vital_depends	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^function! s:_vital_depends()$/;"	f
s:_vital_depends	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Buffer.vim	/^function! s:_vital_depends() abort$/;"	f
s:_vital_depends	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:_vital_depends() abort$/;"	f
s:_vital_loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Hint.vim	/^function! s:_vital_loaded(V) abort$/;"	f
s:_vital_loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:_vital_loaded(V) abort$/;"	f
s:_vital_loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:_vital_loaded(V)$/;"	f
s:_vital_loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules.vim	/^function! s:_vital_loaded(V)$/;"	f
s:_vital_loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Doautocmd.vim	/^function! s:_vital_loaded(V)$/;"	f
s:_vital_loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/InsertRegister.vim	/^function! s:_vital_loaded(V)$/;"	f
s:_vital_loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/KeyMapping.vim	/^function! s:_vital_loaded(V)$/;"	f
s:_vital_loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Keymapping.vim	/^function! s:_vital_loaded(V)$/;"	f
s:_vital_loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^function! s:_vital_loaded(V)$/;"	f
s:_vital_loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:_vital_loaded(V)$/;"	f
s:_vital_loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Highlight.vim	/^function! s:_vital_loaded(V)$/;"	f
s:_vital_loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^function! s:_vital_loaded(V)$/;"	f
s:_vital_loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Buffer.vim	/^function! s:_vital_loaded(V) abort$/;"	f
s:_vital_loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:_vital_loaded(V) abort$/;"	f
s:_warn_deprecated	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:_warn_deprecated(name, alternative) abort$/;"	f
s:_wcwidth	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
s:abolish_l	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^function! s:abolish_l(word)$/;"	f
s:abolish_setup	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^function! s:abolish_setup()$/;"	f
s:abolish_t	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^function! s:abolish_t(word)$/;"	f
s:abortMatch	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:abortMatch(context, message)$/;"	f
s:absolute	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:absolute(path, in) abort$/;"	f
s:abstract_prototype	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^let s:abstract_prototype = {}$/;"	v
s:abstract_prototype	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^let s:abstract_prototype = {}$/;"	v
s:accents	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:accents = {}$/;"	v
s:access_modifier_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:access_modifier_regex = '\\C^\\s*\\%(public\\|protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:acquire_theme_data	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:acquire_theme_data()$/;"	f
s:action_for	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:action_for(key, ...)$/;"	f
s:action_sink	.vim/plugged/omnisharp-vim/autoload/fzf/OmniSharp.vim	/^function! s:action_sink(str) abort$/;"	f
s:activate	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:activate = 'activate'$/;"	v
s:activate	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:activate = ""$/;"	v
s:activate	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:activate = 'activate'$/;"	v
s:activate	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:activate = ""$/;"	v
s:activated	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:activated = 0$/;"	v
s:activated	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:activated = 0$/;"	v
s:active	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:active() abort$/;"	f
s:active_winnr	.vim/plugged/vim-airline/plugin/airline.vim	/^let s:active_winnr = -1$/;"	v
s:addAllMappings	.config/nvim/plugged/targets.vim/plugin/targets.vim	/^function! s:addAllMappings()$/;"	f
s:addLegacyMappings	.config/nvim/plugged/targets.vim/autoload/targets/mappings.vim	/^function! s:addLegacyMappings()$/;"	f
s:addMapping1	.config/nvim/plugged/targets.vim/autoload/targets/legacy.vim	/^function! s:addMapping1(mapType, mapping, aiAI)$/;"	f
s:addMapping2	.config/nvim/plugged/targets.vim/autoload/targets/legacy.vim	/^function! s:addMapping2(mapType, mapping, aiAI, nl)$/;"	f
s:addMappings	.config/nvim/plugged/targets.vim/autoload/targets/legacy.vim	/^function! s:addMappings(mapType, prefix, suffix)$/;"	f
s:addMappings	.config/nvim/plugged/targets.vim/autoload/targets/mappings.vim	/^function! s:addMappings()$/;"	f
s:addToJumplist	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:addToJumplist(context, target)$/;"	f
s:add_db	.config/nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
s:add_methods	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
s:add_methods	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:add_methods(namespace, method_names)$/;"	f
s:add_methods	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
s:add_section	.vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^  function! s:add_section(builder, context, key)$/;"	f
s:added_db_files	.config/nvim/plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	.config/nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:addfilecmds	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:addfilecmds(type, defer) abort$/;"	f
s:adjust_screen	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! s:adjust_screen() "{{{$/;"	f
s:after	.config/nvim/plugged/vim-after-object/autoload/after_object.vim	/^function! s:after(str, cnt, vis, bw)$/;"	f
s:ag_handler	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_handler(lines, with_column)$/;"	f
s:ag_to_qf	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_to_qf(line, with_column)$/;"	f
s:airline_a_commandline	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_commandline = [ '#0000ff' , '#0cff00' , 63  , 40 ]$/;"	v
s:airline_a_inactive	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_inactive = [ '#4e4e4e' , '#1c1c1c' , 239 , 234 , '' ]$/;"	v
s:airline_a_insert	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_insert = [ '#00005f' , '#00dfff' , 17  , 45  ]$/;"	v
s:airline_a_normal	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_normal   = [ '#00005f' , '#dfff00' , 17  , 190 ]$/;"	v
s:airline_a_visual	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_visual = [ '#000000' , '#ffaf00' , 232 , 214 ]$/;"	v
s:airline_ale_count	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:airline_ale_count(cnt, symbol)$/;"	f
s:airline_ale_get_line_number	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:airline_ale_get_line_number(cnt, type) abort$/;"	f
s:airline_b_commandline	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_commandline = [ '#ffffff' , '#444444' , 255 , 238 ]$/;"	v
s:airline_b_inactive	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_inactive = [ '#4e4e4e' , '#262626' , 239 , 235 , '' ]$/;"	v
s:airline_b_insert	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_insert = [ '#ffffff' , '#005fff' , 255 , 27  ]$/;"	v
s:airline_b_normal	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_normal   = [ '#ffffff' , '#444444' , 255 , 238 ]$/;"	v
s:airline_b_visual	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_visual = [ '#000000' , '#ff5f00' , 232 , 202 ]$/;"	v
s:airline_c_commandline	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_commandline = [ '#9cffd3' , '#202020' , 85  , 234 ]$/;"	v
s:airline_c_inactive	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_inactive = [ '#4e4e4e' , '#303030' , 239 , 236 , '' ]$/;"	v
s:airline_c_insert	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_insert = [ '#ffffff' , '#000080' , 15  , 17  ]$/;"	v
s:airline_c_normal	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_normal   = [ '#9cffd3' , '#202020' , 85  , 234 ]$/;"	v
s:airline_c_visual	.vim/plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_visual = [ '#ffffff' , '#5f0000' , 15  , 52  ]$/;"	v
s:airline_extensions	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_extensions()$/;"	f
s:airline_initialized	.vim/plugged/vim-airline/plugin/airline.vim	/^let s:airline_initialized = 0$/;"	v
s:airline_languageclient_count	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:airline_languageclient_count(cnt, symbol)$/;"	f
s:airline_languageclient_get_line_number	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:airline_languageclient_get_line_number(type) abort$/;"	f
s:airline_refresh	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_refresh(...)$/;"	f
s:airline_tagbar_last_lookup_time	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:airline_tagbar_last_lookup_time = 0$/;"	v
s:airline_tagbar_last_lookup_val	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:airline_tagbar_last_lookup_val = ''$/;"	v
s:airline_theme	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_theme(...)$/;"	f
s:airline_toggle	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:airline_toggle()$/;"	f
s:ale_refresh	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:ale_refresh()$/;"	f
s:align_lists	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_lists(lists)$/;"	f
s:align_pairs	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_pairs(list)$/;"	f
s:aligner	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^let s:aligner = {}$/;"	v
s:aligner.project_ctags	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^function! s:aligner.project_ctags() abort$/;"	f
s:alive_cache	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^let s:alive_cache = []$/;"	v
s:all	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:all(f, xs) abort$/;"	f
s:all	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:all() abort$/;"	f
s:all_files	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:all_files()$/;"	f
s:and	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:and(xs) abort$/;"	f
s:ansi	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
s:ansi	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cya/;"	v
s:any	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:any(f, xs) abort$/;"	f
s:app	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "MacVim"$/;"	v
s:app	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "System Events"$/;"	v
s:app	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "Terminal"$/;"	v
s:app	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "iTerm2"$/;"	v
s:app	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "MacVim"$/;"	v
s:app	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "System Events"$/;"	v
s:app	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "Terminal"$/;"	v
s:app	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:app = "iTerm2"$/;"	v
s:app_commands	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_commands() dict abort$/;"	f
s:app_db_config	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_db_config(environment) dict$/;"	f
s:app_db_url	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_db_url(...) dict abort$/;"	f
s:app_default_locale	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_default_locale() dict abort$/;"	f
s:app_efm_suffix	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_efm_suffix() dict abort$/;"	f
s:app_environments	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_environments() dict$/;"	f
s:app_execute_rails_command	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_execute_rails_command(cmd) dict abort$/;"	f
s:app_file	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_file(name) dict abort$/;"	f
s:app_find_file	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_find_file(name, ...) dict abort$/;"	f
s:app_gems	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_gems() dict abort$/;"	f
s:app_generators	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_generators() dict abort$/;"	f
s:app_has	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_has(feature) dict$/;"	f
s:app_has_file	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_has_file(file) dict abort$/;"	f
s:app_has_gem	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_has_gem(gem) dict abort$/;"	f
s:app_has_path	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_has_path(path) dict abort$/;"	f
s:app_has_rails5	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_has_rails5() abort dict$/;"	f
s:app_has_zeus	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_has_zeus() dict abort$/;"	f
s:app_internal_load_path	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_internal_load_path() dict abort$/;"	f
s:app_migration	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_migration(file) dict$/;"	f
s:app_named_route_file	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_named_route_file(route_name) dict abort$/;"	f
s:app_path	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_path(...) dict dict$/;"	f
s:app_prepare_rails_command	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_prepare_rails_command(cmd) dict abort$/;"	f
s:app_projections	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_projections() dict abort$/;"	f
s:app_prototype	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:app_prototype = {}$/;"	v
s:app_prototype	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:app_prototype.cache = s:cache_prototype$/;"	v
s:app_rake_command	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_rake_command(...) dict abort$/;"	f
s:app_rake_tasks	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_rake_tasks() dict abort$/;"	f
s:app_real	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_real(...) dict abort$/;"	f
s:app_relglob	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_relglob(path,glob,...) dict$/;"	f
s:app_root	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_root(...) dict abort$/;"	f
s:app_routes	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_routes() dict abort$/;"	f
s:app_ruby_script_command	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_ruby_script_command(cmd) dict abort$/;"	f
s:app_server_binding	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_server_binding() dict abort$/;"	f
s:app_server_pid	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_server_pid() dict abort$/;"	f
s:app_smart_projections	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_smart_projections() dict abort$/;"	f
s:app_spec	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_spec(...) dict abort$/;"	f
s:app_start_rails_command	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_start_rails_command(cmd, ...) dict abort$/;"	f
s:app_static_rails_command	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_static_rails_command(cmd) dict abort$/;"	f
s:app_stylesheet_suffix	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_stylesheet_suffix() dict abort$/;"	f
s:app_user_assertions	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_user_assertions() dict$/;"	f
s:app_user_classes	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:app_user_classes() dict$/;"	f
s:append_ul	.config/nvim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:append_ul	.vim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:apply_syntax_highlightings	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:apply_syntax_highlightings()$/;"	f
s:apps	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^  let s:apps = {}$/;"	v
s:aqua	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:aqua   = s:getGruvColor('GruvboxAqua')$/;"	v
s:aqua	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:aqua   = s:gb.bright_aqua$/;"	v
s:aqua	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:aqua   = s:gb.faded_aqua$/;"	v
s:aqua	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:aqua[1]   = 14$/;"	v
s:as_key_config	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Keymapping.vim	/^function! s:as_key_config(config)$/;"	f
s:as_keymapping	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! s:as_keymapping(key)$/;"	f
s:ask	.config/nvim/autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask	.vim/autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask_no_interrupt	.config/nvim/autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:ask_no_interrupt	.vim/autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:assert	.config/nvim/plugged/defx.nvim/test/autoload/defx/custom.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	.config/nvim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	.config/nvim/plugged/denite.nvim/test/autoload/denite/parse.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	.vim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	.vim/plugged/denite.nvim/test/autoload/denite/parse.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:asset_path	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:asset_path() abort$/;"	f
s:assign_name	.config/nvim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assign_name	.vim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assoc	.config/nvim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:assoc	.vim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:async_update	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:async_update() abort$/;"	f
s:async_update	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:async_update() abort$/;"	f
s:autocamelize	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:autocamelize(files,test)$/;"	f
s:b64encode	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^function! s:b64encode(bytes, table, pad)$/;"	f
s:backslash_continuation_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:backslash_continuation_regex = '%\\@<!\\\\\\s*$'$/;"	v
s:bang	.config/nvim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bang	.vim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bar	.config/nvim/autoload/plug.vim	/^function! s:bar()$/;"	f
s:bar	.vim/autoload/plug.vim	/^function! s:bar()$/;"	f
s:base	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^	let s:base.variables.modules = s:Signals.make()$/;"	v
s:base	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^let s:base = {$/;"	v
s:base	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^let s:base = {$/;"	v
s:base	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^let s:base = {}$/;"	v
s:base.__empty	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.__empty(...)$/;"	f
s:base.__execute	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.__execute(command)$/;"	f
s:base.__execute__	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.__execute__(cmd)$/;"	f
s:base.__finish	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.__finish()$/;"	f
s:base.__get_keymapping	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.__get_keymapping()$/;"	f
s:base.__init	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.__init()$/;"	f
s:base.__init_variables	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.__init_variables()$/;"	f
s:base.__input	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.__input(input, ...)$/;"	f
s:base.__input_char	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.__input_char(char)$/;"	f
s:base.__inputting	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.__inputting()$/;"	f
s:base.__is_exit	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.__is_exit()$/;"	f
s:base.__keymapping__	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.__keymapping__()$/;"	f
s:base.__main	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.__main(...)$/;"	f
s:base.__update	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.__update()$/;"	f
s:base.backward	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.backward()$/;"	f
s:base.backward	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.backward()$/;"	f
s:base.backward_word	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.backward_word(...)$/;"	f
s:base.call	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^function! s:base.call(func, ...)$/;"	f
s:base.callevent	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.callevent(event)$/;"	f
s:base.char	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.char()$/;"	f
s:base.cmap	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.cmap(lhs, rhs)$/;"	f
s:base.cnoremap	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.cnoremap(lhs, rhs)$/;"	f
s:base.connect	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.connect(module, ...)$/;"	f
s:base.connect	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^function! s:base.connect(slot)$/;"	f
s:base.cunmap	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.cunmap(lhs)$/;"	f
s:base.disable_keymapping	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.disable_keymapping()$/;"	f
s:base.disconnect	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.disconnect(name)$/;"	f
s:base.disconnect	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^function! s:base.disconnect(slot)$/;"	f
s:base.disconnect_by	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^function! s:base.disconnect_by(expr)$/;"	f
s:base.draw	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.draw()$/;"	f
s:base.enable_keymapping	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.enable_keymapping()$/;"	f
s:base.execute	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.execute(...)$/;"	f
s:base.exit	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.exit(...)$/;"	f
s:base.exit_code	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.exit_code()$/;"	f
s:base.find_by	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^function! s:base.find_by(expr)$/;"	f
s:base.find_first_by	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^function! s:base.find_first_by(expr)$/;"	f
s:base.forward	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.forward()$/;"	f
s:base.forward	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.forward()$/;"	f
s:base.get	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.get(...)$/;"	f
s:base.get_module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.get_module(name)$/;"	f
s:base.get_prompt	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.get_prompt()$/;"	f
s:base.get_slot	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^function! s:base.get_slot(val)$/;"	f
s:base.get_suffix	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.get_suffix()$/;"	f
s:base.get_tap_key	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.get_tap_key()$/;"	f
s:base.getchar	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.getchar(...)$/;"	f
s:base.getline	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.getline()$/;"	f
s:base.getpos	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.getpos()$/;"	f
s:base.hl_cursor_off	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.hl_cursor_off()$/;"	f
s:base.hl_cursor_on	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.hl_cursor_on()$/;"	f
s:base.input	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.input(str)$/;"	f
s:base.input_key	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.input_key()$/;"	f
s:base.input_key_stack	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.input_key_stack()$/;"	f
s:base.input_key_stack_pop	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.input_key_stack_pop()$/;"	f
s:base.input_key_stack_string	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.input_key_stack_string()$/;"	f
s:base.insert	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.insert(word, ...)$/;"	f
s:base.is_enable_keymapping	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.is_enable_keymapping()$/;"	f
s:base.is_exit	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.is_exit()$/;"	f
s:base.is_input	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.is_input(key, ...)$/;"	f
s:base.keymapping	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.keymapping()$/;"	f
s:base.length	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.length()$/;"	f
s:base.next	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.next()$/;"	f
s:base.pos	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.pos()$/;"	f
s:base.pos_char	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.pos_char()$/;"	f
s:base.prev	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.prev()$/;"	f
s:base.remove	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.remove(index)$/;"	f
s:base.remove_next	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.remove_next()$/;"	f
s:base.remove_pos	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.remove_pos()$/;"	f
s:base.remove_prev	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.remove_prev()$/;"	f
s:base.set	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.set(item)$/;"	f
s:base.set_input_key_stack	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.set_input_key_stack(stack)$/;"	f
s:base.set_pos	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.set_pos(pos)$/;"	f
s:base.set_prompt	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.set_prompt(prompt)$/;"	f
s:base.set_str	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.set_str(str)$/;"	f
s:base.set_suffix	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.set_suffix(str)$/;"	f
s:base.setchar	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.setchar(char, ...)$/;"	f
s:base.setline	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.setline(line)$/;"	f
s:base.setpos	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.setpos(pos)$/;"	f
s:base.slots	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^function! s:base.slots()$/;"	f
s:base.sort_by	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^function! s:base.sort_by(expr)$/;"	f
s:base.start	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.start(...)$/;"	f
s:base.str	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:base.str()$/;"	f
s:base.tap_keyinput	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.tap_keyinput(key)$/;"	f
s:base.untap_keyinput	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:base.untap_keyinput(key)$/;"	f
s:base.variables.modules.get_slot	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^	function! s:base.variables.modules.get_slot(val)$/;"	f
s:base00	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base00=['#1b2b34', '235']$/;"	v
s:base00	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base00 =['#d8dee9', '253']$/;"	v
s:base00	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base00=['#1b2b34', '235']$/;"	v
s:base00	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base00=['#d8dee9', '253']$/;"	v
s:base01	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base01=['#343d46', '237']$/;"	v
s:base01	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base01 =['#cdd3de', '252']$/;"	v
s:base01	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base01=['#343d46', '237']$/;"	v
s:base01	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base01=['#cdd3de', '252']$/;"	v
s:base02	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base02=['#4f5b66', '240']$/;"	v
s:base02	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base02 =['#c0c5ce', '251']$/;"	v
s:base02	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base02=['#4f5b66', '240']$/;"	v
s:base02	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base02=['#c0c5ce', '251']$/;"	v
s:base03	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base03=['#65737e', '243']$/;"	v
s:base03	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base03 =['#a7adba', '145']$/;"	v
s:base03	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base03=['#65737e', '243']$/;"	v
s:base03	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base03=['#a7adba', '145']$/;"	v
s:base04	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base04=['#a7adba', '145']$/;"	v
s:base04	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base04 =['#65737e', '243']$/;"	v
s:base04	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base04=['#a7adba', '145']$/;"	v
s:base04	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base04=['#65737e', '243']$/;"	v
s:base05	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base05=['#c0c5ce', '251']$/;"	v
s:base05	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base05 =['#4f5b66', '240']$/;"	v
s:base05	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base05=['#c0c5ce', '251']$/;"	v
s:base05	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base05=['#4f5b66', '240']$/;"	v
s:base06	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base06=['#cdd3de', '252']$/;"	v
s:base06	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base06 =['#343d46', '237']$/;"	v
s:base06	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base06=['#cdd3de', '252']$/;"	v
s:base06	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base06=['#343d46', '237']$/;"	v
s:base07	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base07=['#d8dee9', '253']$/;"	v
s:base07	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base07 =['#1b2b34', '235']$/;"	v
s:base07	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base07=['#d8dee9', '253']$/;"	v
s:base07	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base07=['#1b2b34', '235']$/;"	v
s:base08	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base08=['#ec5f67', '203']$/;"	v
s:base08	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base08 =['#b40b11', '124']$/;"	v
s:base08	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base08=['#ec5f67', '203']$/;"	v
s:base08	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base08=['#b40b11', '124']$/;"	v
s:base09	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base09=['#f99157', '209']$/;"	v
s:base09	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base09 =['#b4713d', '131']$/;"	v
s:base09	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base09=['#f99157', '209']$/;"	v
s:base09	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base09=['#b4713d', '131']$/;"	v
s:base0A	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base0A=['#fac863', '221']$/;"	v
s:base0A	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base0A =['#a48c32', '137']$/;"	v
s:base0A	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base0A=['#fac863', '221']$/;"	v
s:base0A	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base0A=['#a48c32', '137']$/;"	v
s:base0B	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base0B=['#99c794', '114']$/;"	v
s:base0B	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base0B =['#869235', '101']$/;"	v
s:base0B	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base0B=['#99c794', '114']$/;"	v
s:base0B	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base0B=['#869235', '101']$/;"	v
s:base0C	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base0C=['#62b3b2', '73']$/;"	v
s:base0C	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base0C =['#5b9c90', '72']$/;"	v
s:base0C	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base0C=['#62b3b2', '73']$/;"	v
s:base0C	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base0C=['#5b9c90', '72']$/;"	v
s:base0D	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base0D=['#6699cc', '68']$/;"	v
s:base0D	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base0D =['#526f93', '60']$/;"	v
s:base0D	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base0D=['#6699cc', '68']$/;"	v
s:base0D	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base0D=['#526f93', '60']$/;"	v
s:base0E	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base0E=['#c594c5', '176']$/;"	v
s:base0E	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base0E =['#896a98', '96']$/;"	v
s:base0E	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base0E=['#c594c5', '176']$/;"	v
s:base0E	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base0E=['#896a98', '96']$/;"	v
s:base0F	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base0F=['#ab7967', '137']$/;"	v
s:base0F	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base0F =['#9a806d', '101']$/;"	v
s:base0F	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base0F=['#ab7967', '137']$/;"	v
s:base0F	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base0F=['#9a806d', '101']$/;"	v
s:base10	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^  let s:base10=['#ffffff', '15']$/;"	v
s:base10	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^  let s:base10 =['#ffffff', '15']$/;"	v
s:base10	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:base10=['#ffffff', '15']$/;"	v
s:base10	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:base10=['#ffffff', '15']$/;"	v
s:base_dir	.vim/plugged/fzf/plugin/fzf.vim	/^  let s:base_dir = expand('<sfile>:h:h')$/;"	v
s:base_spec	.config/nvim/autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:base_spec	.vim/autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:basic16	.vim/plugged/vim-airline/autoload/airline/msdos.vim	/^let s:basic16 = [$/;"	v
s:beep	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:beep()$/;"	f
s:beep	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:beep()$/;"	f
s:bestTarget	.config/nvim/plugged/targets.vim/autoload/targets/multigen.vim	/^function! s:bestTarget(targets, context, message)$/;"	f
s:bg0	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg0  = s:getGruvColor('GruvboxBg0')$/;"	v
s:bg0	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.dark0_hard$/;"	v
s:bg0	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.dark0_soft$/;"	v
s:bg0	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.light0_hard$/;"	v
s:bg0	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.light0_soft$/;"	v
s:bg0	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg0  = s:gb.dark0$/;"	v
s:bg0	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg0  = s:gb.light0$/;"	v
s:bg0	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg0[1]    = 0$/;"	v
s:bg1	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg1  = s:getGruvColor('GruvboxBg1')$/;"	v
s:bg1	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg1  = s:gb.dark1$/;"	v
s:bg1	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg1  = s:gb.light1$/;"	v
s:bg2	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg2  = s:getGruvColor('GruvboxBg2')$/;"	v
s:bg2	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg2  = s:gb.dark2$/;"	v
s:bg2	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg2  = s:gb.light2$/;"	v
s:bg3	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg3  = s:gb.dark3$/;"	v
s:bg3	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg3  = s:gb.light3$/;"	v
s:bg4	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg4  = s:getGruvColor('GruvboxBg4')$/;"	v
s:bg4	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg4  = s:gb.dark4$/;"	v
s:bg4	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg4  = s:gb.light4$/;"	v
s:bin	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = fnamemodify(s:bin.preview, ':8')$/;"	v
s:bin	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = split(system('for %A in ("'.s:bin.preview.'") do @echo %~sA'), "\\n")[0]$/;"	v
s:bin	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  let s:bin.preview = 'bash '.escape(s:bin.preview, '\\')$/;"	v
s:bin	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin = {$/;"	v
s:bin_dir	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin_dir = expand('<sfile>:h:h:h').'\/bin\/'$/;"	v
s:binary_search	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:binary_search(list, value, ...) abort$/;"	f
s:binstub	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:binstub(root, cmd) abort$/;"	f
s:blank	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:blank(repel)$/;"	f
s:blink.clear	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^  function! s:blink.clear() abort$/;"	f
s:blink.tick	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^  function! s:blink.tick(_) abort$/;"	f
s:block_border_p	.config/nvim/plugged/vim-textobj-indent/autoload/textobj/indent.vim	/^function! s:block_border_p(indent,base_indent,include_empty_lines_p,type) "{{{2$/;"	f
s:block_continuation_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:block_continuation_regex = '^\\s*[^])}\\t ].*'.s:block_regex$/;"	v
s:block_openers	.config/nvim/plugged/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^let s:block_openers = '\\zs(<def>|<if>|<do>|<module>|<class>)'$/;"	v
s:block_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:block_regex =$/;"	v
s:blue	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:blue   = s:getGruvColor('GruvboxBlue')$/;"	v
s:blue	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:blue   = s:gb.bright_blue$/;"	v
s:blue	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:blue   = s:gb.faded_blue$/;"	v
s:blue	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:blue[1]   = 12$/;"	v
s:bold	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:bold = ''$/;"	v
s:bold	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:bold = 'bold,'$/;"	v
s:bold	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^   let s:bold = "bold"$/;"	v
s:bold	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:bold = ""$/;"	v
s:bold	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^   let s:bold = "bold"$/;"	v
s:bold	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:bold = ""$/;"	v
s:bracket_continuation_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:bracket_continuation_regex = '%\\@<!\\%([({[]\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:bracket_switch_continuation_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:bracket_switch_continuation_regex = '^\\([^(]\\+\\zs).\\+\\)\\+'.s:continuation_regex$/;"	v
s:break	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:break(f, xs) abort$/;"	f
s:browsefilter	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','',''/;"	v
s:browsefilter	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:btags_sink	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_sink(lines)$/;"	f
s:btags_source	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_source(tag_cmds)$/;"	f
s:buf_line_count	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:buf_line_count(bufnr) abort$/;"	f
s:buf_line_count	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:buf_line_count(bufnr) abort$/;"	f
s:buf_min_count	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:buf_min_count = get(g:, 'airline#extensions#tabline#buffer_min_count', 0)$/;"	v
s:buf_modified_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:buf_modified_symbol = g:airline_symbols.modified$/;"	v
s:buf_nr_format	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:buf_nr_format = get(g:, 'airline#extensions#tabline#buffer_nr_format', '%s: ')$/;"	v
s:buf_nr_show	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:buf_nr_show = get(g:, 'airline#extensions#tabline#buffer_nr_show', 0)$/;"	v
s:buffer	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:buffer(...) abort$/;"	f
s:buffer_alter_paths	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:buffer_alter_paths() dict abort$/;"	f
s:buffer_app	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:buffer_app() dict abort$/;"	f
s:buffer_getline	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:buffer_getline(...) dict abort$/;"	f
s:buffer_getvar	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:buffer_getvar(var) dict abort$/;"	f
s:buffer_getvar	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:buffer_getvar(varname) dict abort$/;"	f
s:buffer_line_handler	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_line_handler(lines)$/;"	f
s:buffer_lines	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_lines(query)$/;"	f
s:buffer_lines	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:buffer_lines() dict abort$/;"	f
s:buffer_name	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:buffer_name() dict abort$/;"	f
s:buffer_number	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:buffer_number() dict abort$/;"	f
s:buffer_path	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:buffer_path() dict abort$/;"	f
s:buffer_project	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:buffer_project() dict abort$/;"	f
s:buffer_prototype	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_prototype	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_setvar	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:buffer_setvar(var,value) dict abort$/;"	f
s:buffer_setvar	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:buffer_setvar(varname, val) dict abort$/;"	f
s:buffer_type_name	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:buffer_type_name(...) dict abort$/;"	f
s:buflisted	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted()$/;"	f
s:buflisted_sorted	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted_sorted()$/;"	f
s:bufopen	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:bufopen(lines)$/;"	f
s:build_command	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:build_command(color)$/;"	f
s:build_path	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:build_path(path) abort$/;"	f
s:build_path_option	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:build_path_option(paths,suffix) abort$/;"	f
s:build_sections	.vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! s:build_sections(builder, context, keys)$/;"	f
s:builder	.vim/plugged/vim-airline/t/builder.vim	/^    let s:builder = airline#builder#new({'active': 0})$/;"	v
s:builder	.vim/plugged/vim-airline/t/builder.vim	/^    let s:builder = airline#builder#new({'active': 1})$/;"	v
s:builder	.vim/plugged/vim-airline/t/extensions_default.vim	/^    let s:builder = airline#builder#new({'active': 1})$/;"	v
s:bx	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^let s:bx = '{\\%("[^"]*"\\|''[^'']*''\\|\\$#\\|\\${\\w\\+}\\|\\$\\+\\|{[^{]\\+\\|[^{}]\\)\\{-}}'$/;"	v
s:c0	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^let s:c0 = -1$/;"	v
s:c1	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^let s:c1 = -1$/;"	v
s:cache_clear	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:cache_clear(...) dict$/;"	f
s:cache_command	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Doautocmd.vim	/^let s:cache_command = {}$/;"	v
s:cache_get	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:cache_get(...) dict abort$/;"	f
s:cache_needs	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:cache_needs(key, ...) dict abort$/;"	f
s:cache_project_root	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
s:cache_prototype	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:cache_prototype = {'dict': {}}$/;"	v
s:cache_set	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:cache_set(key, value, ...) dict abort$/;"	f
s:cache_sid	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:cache_sid = {}$/;"	v
s:calc_size	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:calc_size(max, val, dict)$/;"	f
s:call	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^function! s:call(list, func, ...)$/;"	f
s:callback	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:callback(dict, lines) abort$/;"	f
s:callbacks	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^let s:callbacks = {}$/;"	v
s:callbacks	.vim/plugged/coc.nvim/autoload/coc.vim	/^let s:callbacks = {}$/;"	v
s:can_preserve_syntax	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^let s:can_preserve_syntax = s:has_patch(7, 4, 792)$/;"	v
s:cancel_selection	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:cancel_selection(previous_mode, orig_pos)$/;"	f
s:capture	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Highlight.vim	/^function! s:capture(name)$/;"	f
s:capture	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^function! s:capture(...)$/;"	f
s:capture	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Message.vim	/^function! s:capture(command) abort$/;"	f
s:capture_list	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^function! s:capture_list(...)$/;"	f
s:cases	.config/nvim/plugged/vim-textobj-user/t/move.vim	/^let s:cases = [$/;"	v
s:cfile_delegate	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:cfile_delegate(expr) abort$/;"	f
s:cfilemap	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:cfilemap = {}$/;"	v
s:cfilemap	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:cfilemap.rhs = "substitute(&l:inex =~# '\\\\<v:fname\\\\>' && len(expand('<cfile>')) ? e/;"	v
s:cfilemap	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:cfilemap = v:version >= 704 ? maparg('<Plug><cfile>', 'c', 0, 1) : {}$/;"	v
s:changesurround	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:changesurround(...) " {{{1$/;"	f
s:changesurround	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:changesurround(...) " {{{1$/;"	f
s:channels	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^let s:channels = {}$/;"	v
s:char_range	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:char_range(from, to) abort$/;"	f
s:check	.config/nvim/plugged/vim-textobj-line/t/basics.vim	/^function! s:check(move_cmd, op_cmd, expected_value)$/;"	f
s:checkAutocmd	.config/nvim/plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkAutocmd()$/;"	f
s:checkAutocmd	.vim/plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkAutocmd()$/;"	f
s:checkCommand	.config/nvim/plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkCommand()$/;"	f
s:checkCommand	.vim/plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkCommand()$/;"	f
s:checkEnvironment	.config/nvim/plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkEnvironment() abort$/;"	f
s:checkEnvironment	.vim/plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkEnvironment() abort$/;"	f
s:checkInitailize	.config/nvim/plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkInitailize() abort$/;"	f
s:checkInitailize	.vim/plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkInitailize() abort$/;"	f
s:check_defined	.vim/plugged/vim-airline/autoload/airline/init.vim	/^function! s:check_defined(variable, default)$/;"	f
s:check_defined_section	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:check_defined_section(name)$/;"	f
s:check_lines	.config/nvim/plugged/defx.nvim/autoload/defx/exrename.vim	/^function! s:check_lines() abort$/;"	f
s:check_mixed_indent	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:check_mixed_indent()$/;"	f
s:check_mixed_indent_file	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:check_mixed_indent_file()$/;"	f
s:check_required_python	.config/nvim/plugged/denite.nvim/autoload/health/denite.vim	/^function! s:check_required_python() abort$/;"	f
s:check_required_python	.vim/plugged/denite.nvim/autoload/health/denite.vim	/^function! s:check_required_python() abort$/;"	f
s:check_required_python_for_defx	.config/nvim/plugged/defx.nvim/autoload/health/defx.vim	/^function! s:check_required_python_for_defx() abort$/;"	f
s:check_ruby	.config/nvim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:check_ruby	.vim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:checkout	.config/nvim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:checkout	.vim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:chomp	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:chomp(str)$/;"	f
s:choose_better_pos	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:choose_better_pos(flags, ORIG_POS, pfh, pft, pbh, pbt)$/;"	f
s:choose_wise	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:choose_wise(flags)$/;"	f
s:chsh	.config/nvim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:chsh	.vim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:clean	.config/nvim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:clean	.vim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:cleanUp	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:cleanUp()$/;"	f
s:clean_jobs	.vim/plugged/vim-airline/autoload/airline/async.vim	/^let s:clean_jobs     = {}$/;"	v
s:clear	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^function! s:clear(dict) abort$/;"	f
s:clear	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:clear(list) abort$/;"	f
s:clear	.vim/plugged/vim-airline/t/init.vim	/^function! s:clear()$/;"	f
s:clearCommandLine	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:clearCommandLine()$/;"	f
s:client	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:client = v:null$/;"	v
s:client	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:client = v:null$/;"	v
s:clients	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:clients = {}$/;"	v
s:clients	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:clients = {}$/;"	v
s:cliquot	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:cliquot = "FFd17f"$/;"	v
s:cliquot	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:cliquot = "FFd17f"$/;"	v
s:close_cb	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:close_cb(channel) abort$/;"	f
s:closematch	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
s:closematch	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
s:closing_regex	.config/nvim/plugged/tagalong.vim/autoload/tagalong.vim	/^let s:closing_regex     = '<\\\/\\zs\\k[^>[:space:]]*\\ze>'$/;"	v
s:cmd	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:cmd(bang, ...) abort$/;"	f
s:cmd_history_sink	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:cmd_history_sink(lines)$/;"	f
s:cmdheight	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^let s:cmdheight = {}$/;"	v
s:cmdheight.get	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^function! s:cmdheight.get()$/;"	f
s:cmdheight.restore	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^function! s:cmdheight.restore()$/;"	f
s:cmdheight.save	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^function! s:cmdheight.save()$/;"	f
s:cmdline	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^let s:cmdline = s:V.import('Over.Commandline.Base')$/;"	v
s:collect	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:collect(temps) abort$/;"	f
s:color_column	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:color_column = get(s:gb, g:gruvbox_color_column)$/;"	v
s:color_column	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:color_column = s:bg1$/;"	v
s:color_efm	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:color_efm(pre, before, after)$/;"	f
s:color_template	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^let s:color_template = get(g:, 'airline#extensions#ctrlp#color_template', 'insert')$/;"	v
s:color_template	.vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^let s:color_template = get(g:, 'airline#extensions#promptline#color_template', 'normal')$/;"	v
s:color_template	.vim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^let s:color_template = get(g:, 'airline#extensions#tmuxline#color_template', 'normal')$/;"	v
s:colour	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:colour(r, g, b)$/;"	f
s:cols_layout	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^let s:cols_layout = {}$/;"	v
s:cols_layout.project_ctags	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^function! s:cols_layout.project_ctags() abort$/;"	f
s:column_display	.vim/plugged/vim-airline/autoload/airline/extensions/csv.vim	/^let s:column_display = get(g:, 'airline#extensions#csv#column_display', 'Number')$/;"	v
s:combinations	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:combinations(list, r) abort$/;"	f
s:combine_projections	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:combine_projections(dest, src, ...) abort$/;"	f
s:comfortable_motion_state	.config/nvim/plugged/comfortable-motion.vim/autoload/comfortable_motion.vim	/^let s:comfortable_motion_state = {$/;"	v
s:command	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:command(definition) abort$/;"	f
s:command	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Capture.vim	/^function! s:command(cmd, ...)$/;"	f
s:command_sink	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:command_sink(lines)$/;"	f
s:commands	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^let s:commands = []$/;"	v
s:comment_escape	.config/nvim/plugged/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^let s:comment_escape = '\\v^[^#]*'$/;"	v
s:commits	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits(buffer_local, args)$/;"	f
s:commits_sink	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits_sink(lines)$/;"	f
s:common_sink	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:common_sink(action, lines) abort$/;"	f
s:compare_git_uri	.config/nvim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:compare_git_uri	.vim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:compensate_for_pum	.config/nvim/plugged/ultisnips/autoload/UltiSnips.vim	/^function! s:compensate_for_pum() abort$/;"	f
s:complete_insert	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_insert(lines)$/;"	f
s:complete_trigger	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_trigger()$/;"	f
s:completion_filter	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:completion_filter(results,A) abort$/;"	f
s:completion_filter	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:completion_filter(results, A, ...) abort$/;"	f
s:concat	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:concat(list) abort$/;"	f
s:config	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^let s:config = {$/;"	v
s:conflict_marker	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:conflict_marker()$/;"	f
s:conj	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:conj(xs, x) abort$/;"	f
s:cons	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:cons(x, xs) abort$/;"	f
s:const	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:const(val, min, max)$/;"	f
s:contexts	.vim/plugged/vim-airline/autoload/airline.vim	/^let s:contexts = {}$/;"	v
s:continuable_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:continuable_regex =$/;"	v
s:continuation_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:continuation_regex =$/;"	v
s:controller	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:controller(...)$/;"	f
s:controllerList	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:controllerList(A,L,P)$/;"	f
s:convertMigemo	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:convertMigemo(re) "{{{$/;"	f
s:convertRegep	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:convertRegep(input) "{{{$/;"	f
s:convertSmartcase	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:convertSmartcase(re, char) "{{{$/;"	f
s:convertSmartsign	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:convertSmartsign(chars) "{{{$/;"	f
s:convert_colors	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:convert_colors()$/;"	f
s:convert_t_regexp	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:convert_t_regexp(re, direction) "{{{$/;"	f
s:core_funcrefs	.vim/plugged/vim-airline/autoload/airline.vim	/^let s:core_funcrefs = [$/;"	v
s:count	.config/nvim/plugged/targets.vim/autoload/targets/sources/quote.vim	/^function! s:count(char, text)$/;"	f
s:count	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^function! s:count()$/;"	f
s:counter	.config/nvim/plugged/vim-textobj-user/t/script-local.vim	/^let s:counter = [0]$/;"	v
s:countonly	.config/nvim/plugged/html5.vim/indent/html.vim	/^let s:countonly = 0$/;"	v
s:cpo_sav	.config/nvim/plugged/vim-ruby/indent/eruby.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	.config/nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_save	.config/nvim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.config/nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.config/nvim/plugged/html5.vim/indent/html.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.config/nvim/plugged/vim-after-object/autoload/after_object.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.config/nvim/plugged/vim-bundler/compiler/bundler.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.config/nvim/plugged/vim-ruby/compiler/eruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.config/nvim/plugged/vim-ruby/compiler/rake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.config/nvim/plugged/vim-ruby/compiler/rspec.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.config/nvim/plugged/vim-ruby/compiler/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.config/nvim/plugged/vim-ruby/compiler/rubyunit.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.vim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.vim/plugged/fzf/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.vim/sessions/foo.vim	/^let s:cpo_save=&cpo$/;"	v
s:create	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Hint.vim	/^function! s:create(targets, keys) abort$/;"	f
s:create	.vim/plugged/vim-airline/autoload/airline/section.vim	/^function! s:create(parts, append)$/;"	f
s:createArgTextObjects	.config/nvim/plugged/targets.vim/autoload/targets/legacy.vim	/^function! s:createArgTextObjects(mapType, trigger)$/;"	f
s:createPairTextObjects	.config/nvim/plugged/targets.vim/autoload/targets/legacy.vim	/^function! s:createPairTextObjects(mapType, pairs)$/;"	f
s:createQuoteTextObjects	.config/nvim/plugged/targets.vim/autoload/targets/legacy.vim	/^function! s:createQuoteTextObjects(mapType, quotes)$/;"	f
s:createSeparatorTextObjects	.config/nvim/plugged/targets.vim/autoload/targets/legacy.vim	/^function! s:createSeparatorTextObjects(mapType, separators)$/;"	f
s:createTagTextObjects	.config/nvim/plugged/targets.vim/autoload/targets/legacy.vim	/^function! s:createTagTextObjects(mapType, trigger)$/;"	f
s:create_color_variables	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^    fun! s:create_color_variables(color_name, rich_color, term_color)$/;"	f
s:create_win2pos2hint	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:create_win2pos2hint(hint_dict) abort$/;"	f
s:cs	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^let s:cs = ctrlspace#context#Configuration().Symbols.CS$/;"	v
s:csi	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:csi(color, fg)$/;"	f
s:ctagmap	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:ctagmap = {}$/;"	v
s:ctagmap	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:ctagmap = v:version >= 704 ? maparg('<Plug><ctag>', 'c', 0, 1) : {}$/;"	v
s:ctags	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^let s:ctags = get(g:, 'vista_ctags_executable', 'ctags')$/;"	v
s:cterm	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^fun s:cterm(color)$/;"	f
s:cterm	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^fun s:cterm(color)$/;"	f
s:cterm	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^fun s:cterm(color)$/;"	f
s:cterm00	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:cterm00 = "00"$/;"	v
s:cterm00	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:cterm00 = "00"$/;"	v
s:cterm00	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:cterm00 = "00"$/;"	v
s:cterm01	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let s:cterm01 = "08"$/;"	v
s:cterm01	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let s:cterm01 = "18"$/;"	v
s:cterm01	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let s:cterm01 = "08"$/;"	v
s:cterm01	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let s:cterm01 = "18"$/;"	v
s:cterm01	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let s:cterm01 = "08"$/;"	v
s:cterm01	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let s:cterm01 = "18"$/;"	v
s:cterm02	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let s:cterm02 = "08"$/;"	v
s:cterm02	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let s:cterm02 = "19"$/;"	v
s:cterm02	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let s:cterm02 = "08"$/;"	v
s:cterm02	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let s:cterm02 = "19"$/;"	v
s:cterm02	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let s:cterm02 = "08"$/;"	v
s:cterm02	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let s:cterm02 = "19"$/;"	v
s:cterm03	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:cterm03 = "02"$/;"	v
s:cterm03	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:cterm03 = "02"$/;"	v
s:cterm03	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:cterm03 = "02"$/;"	v
s:cterm04	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let s:cterm04 = "03"$/;"	v
s:cterm04	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let s:cterm04 = "20"$/;"	v
s:cterm04	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let s:cterm04 = "03"$/;"	v
s:cterm04	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let s:cterm04 = "20"$/;"	v
s:cterm04	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let s:cterm04 = "03"$/;"	v
s:cterm04	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let s:cterm04 = "20"$/;"	v
s:cterm05	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:cterm05 = "07"$/;"	v
s:cterm05	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:cterm05 = "07"$/;"	v
s:cterm05	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:cterm05 = "07"$/;"	v
s:cterm06	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let s:cterm06 = "00"$/;"	v
s:cterm06	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let s:cterm06 = "21"$/;"	v
s:cterm06	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let s:cterm06 = "00"$/;"	v
s:cterm06	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let s:cterm06 = "21"$/;"	v
s:cterm06	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let s:cterm06 = "00"$/;"	v
s:cterm06	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let s:cterm06 = "21"$/;"	v
s:cterm07	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:cterm07 = "15"$/;"	v
s:cterm07	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:cterm07 = "15"$/;"	v
s:cterm07	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:cterm07 = "15"$/;"	v
s:cterm08	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:cterm08 = "11"$/;"	v
s:cterm08	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:cterm08 = "11"$/;"	v
s:cterm08	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:cterm08 = "11"$/;"	v
s:cterm09	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let s:cterm09 = "14"$/;"	v
s:cterm09	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let s:cterm09 = "16"$/;"	v
s:cterm09	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let s:cterm09 = "14"$/;"	v
s:cterm09	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let s:cterm09 = "16"$/;"	v
s:cterm09	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let s:cterm09 = "14"$/;"	v
s:cterm09	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let s:cterm09 = "16"$/;"	v
s:cterm0A	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:cterm0A = "11"$/;"	v
s:cterm0A	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:cterm0A = "11"$/;"	v
s:cterm0A	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:cterm0A = "11"$/;"	v
s:cterm0B	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:cterm0B = "12"$/;"	v
s:cterm0B	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:cterm0B = "12"$/;"	v
s:cterm0B	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:cterm0B = "12"$/;"	v
s:cterm0C	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:cterm0C = "14"$/;"	v
s:cterm0C	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:cterm0C = "14"$/;"	v
s:cterm0C	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:cterm0C = "14"$/;"	v
s:cterm0D	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:cterm0D = "03"$/;"	v
s:cterm0D	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:cterm0D = "03"$/;"	v
s:cterm0D	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:cterm0D = "03"$/;"	v
s:cterm0E	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:cterm0E = "09"$/;"	v
s:cterm0E	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:cterm0E = "09"$/;"	v
s:cterm0E	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:cterm0E = "09"$/;"	v
s:cterm0F	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let s:cterm0F = "03"$/;"	v
s:cterm0F	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^  let s:cterm0F = "17"$/;"	v
s:cterm0F	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let s:cterm0F = "03"$/;"	v
s:cterm0F	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^  let s:cterm0F = "17"$/;"	v
s:cterm0F	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let s:cterm0F = "03"$/;"	v
s:cterm0F	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^  let s:cterm0F = "17"$/;"	v
s:ctrl_u	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^function! s:ctrl_u()$/;"	f
s:ctrlp1	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:ctrlp1    = [s:base10[0], s:base01[0], s:base10[1], s:base01[1]]$/;"	v
s:ctrlp1	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:ctrlp1    = [s:base10[0], s:base01[0], s:base10[1], s:base01[1]]$/;"	v
s:ctrlp2	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:ctrlp2    = [s:base10[0], s:base03[0], s:base10[1], s:base03[1]]$/;"	v
s:ctrlp2	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:ctrlp2    = [s:base10[0], s:base03[0], s:base10[1], s:base03[1]]$/;"	v
s:ctrlp3	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:ctrlp3    = [s:base10[0], s:base0D[0], s:base10[1], s:base0D[1]]$/;"	v
s:ctrlp3	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:ctrlp3    = [s:base10[0], s:base0D[0], s:base10[1], s:base0D[1]]$/;"	v
s:ctrlspace	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:ctrlspace = get(g:, 'CtrlSpaceLoaded', 0)$/;"	v
s:cur_dir	.config/nvim/plugged/vista.vim/autoload/vista.vim	/^let s:cur_dir = fnamemodify(resolve(expand('<sfile>:p')), ':h')$/;"	v
s:current_bufnr	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_bufnr = -1$/;"	v
s:current_dir	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^let s:current_dir = expand("<sfile>:p:h")$/;"	v
s:current_modified	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_modified = 0$/;"	v
s:current_tabcnt	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:current_tabcnt = -1$/;"	v
s:current_tabline	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabline	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabnr	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_tabnr = -1$/;"	v
s:current_tabnr	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_tabnr = -1$/;"	v
s:current_visible_buffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_visible_buffers = []$/;"	v
s:cursor_timer	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^let s:cursor_timer = -1$/;"	v
s:custom_alternate_buffer	.config/nvim/plugged/defx.nvim/autoload/defx/exrename.vim	/^function! s:custom_alternate_buffer() abort$/;"	f
s:debug	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:debug(str)$/;"	f
s:debug	.config/nvim/plugged/vim-ruby/spec/vim/plugin/syntax_test.vim	/^let s:debug = 0$/;"	v
s:debug	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^function! s:debug(message) abort$/;"	f
s:decimal_group	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = ''$/;"	v
s:decimal_group	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = ','$/;"	v
s:decimal_group	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = '.'$/;"	v
s:deep_sea_blue	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:deep_sea_blue = "6d7b8b"$/;"	v
s:deepextend	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:deepextend(expr1, expr2) abort$/;"	f
s:defaultQuoteDirs	.config/nvim/plugged/targets.vim/autoload/targets/sources/quote.vim	/^let s:defaultQuoteDirs = get(g:, 'targets_quoteDirs', {$/;"	v
s:default_action	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:default_action = {$/;"	v
s:default_action	.vim/plugged/fzf/plugin/fzf.vim	/^let s:default_action = {$/;"	v
s:default_checks	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:default_checks = ['indent', 'trailing', 'mixed-indent-file', 'conflicts']$/;"	v
s:default_config	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:default_config() abort$/;"	f
s:default_icon	.config/nvim/plugged/vista.vim/autoload/vista/renderer/kind.vim	/^let s:default_icon = ['╰─▸ ', '├─▸ ']$/;"	v
s:default_icon	.config/nvim/plugged/vista.vim/autoload/vista/renderer/markdown.vim	/^let s:default_icon = ['╰─▸ ', '├─▸ ']$/;"	v
s:default_icon	.config/nvim/plugged/vista.vim/autoload/vista/viewer.vim	/^let s:default_icon = ['╰─▸ ', '├─▸ ']$/;"	v
s:default_layout	.vim/plugged/fzf/plugin/fzf.vim	/^let s:default_layout = { 'down': '~40%' }$/;"	v
s:default_mapping	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^    function! s:default_mapping(motions, do_mapping) "{{{$/;"	f
s:default_projections	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:default_projections = {$/;"	v
s:default_register	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^function! s:default_register()$/;"	f
s:defaults	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:defaults()$/;"	f
s:define_commands	.config/nvim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:define_commands	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:define_commands() abort$/;"	f
s:define_commands	.vim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:define_failsafe_key_mappings	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:define_failsafe_key_mappings(plugin_name, obj_specs)$/;"	f
s:define_navcommand	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:define_navcommand(name, projection) abort$/;"	f
s:define_rake	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:define_rake() abort$/;"	f
s:defs	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^function! s:defs(commands)$/;"	f
s:defx_my_settings	.config/nvim/configs/plugins.vim	/^function! s:defx_my_settings() abort$/;"	f
s:delete	.config/nvim/autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:delete	.vim/autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:delete_op	.config/nvim/autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:delete_op	.vim/autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:delimiter	.config/nvim/plugged/vim-ruby/syntax/ruby.vim	/^    let s:delimiter = '\\' . s:delimiter$/;"	v
s:delimiter	.vim/plugged/omnisharp-vim/ale_linters/cs/omnisharp.vim	/^let s:delimiter = '@@@'$/;"	v
s:denite_filter_settings	.config/nvim/configs/plugins.vim	/^function! s:denite_filter_settings() abort$/;"	f
s:denite_settings	.config/nvim/configs/plugins.vim	/^function! s:denite_settings() abort$/;"	f
s:denite_ver	.vim/plugged/vim-airline/autoload/airline/extensions/denite.vim	/^let s:denite_ver = (exists('*denite#get_status_mode') ? 2 : 3)$/;"	v
s:diagnostics	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:diagnostics = {}$/;"	v
s:diagnostics_for_buffer	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:diagnostics_for_buffer()$/;"	f
s:did_check_exe	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:diff	.config/nvim/autoload/plug.vim	/^function! s:diff()$/;"	f
s:diff	.vim/autoload/plug.vim	/^function! s:diff()$/;"	f
s:dir	.vim/plugged/coc.nvim/src/__tests__/vimrc	/^let s:dir = expand('<sfile>:h')$/;"	v
s:dir_complete	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:dir_complete(lead, cmdline, _) abort$/;"	f
s:dir_separator	.vim/plugged/omnisharp-vim/autoload/OmniSharp/util.vim	/^let s:dir_separator = fnamemodify('.', ':p')[-1 :]$/;"	v
s:dirpath	.config/nvim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:dirpath	.vim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:display_git_branch	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:display_git_branch()$/;"	f
s:display_hg_branch	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:display_hg_branch()$/;"	f
s:do	.config/nvim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:do	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:do(bang, count, cmd) abort$/;"	f
s:do	.vim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:do_rename	.config/nvim/plugged/defx.nvim/autoload/defx/exrename.vim	/^function! s:do_rename() abort$/;"	f
s:do_tests	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:do_tests(bang, ...)$/;"	f
s:doau_user	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^function! s:doau_user(arg) abort$/;"	f
s:doautocmd	.config/nvim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:doautocmd	.vim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:doautocmd_user	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Doautocmd.vim	/^function! s:doautocmd_user(prefix, command)$/;"	f
s:dobufread	.config/nvim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:dobufread	.vim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:dollar_add	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^function! s:dollar_add(base,no) abort$/;"	f
s:dopopd	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:dopopd()$/;"	f
s:dosurround	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
s:dosurround	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
s:dot_continuation_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:dot_continuation_regex = '%\\@<!\\.\\s*\\%(#.*\\)\\=$'$/;"	v
s:dot_relative	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:dot_relative(path) abort$/;"	f
s:dotcmp	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:dotcmp(i1, i2) abort$/;"	f
s:dprint	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^function! s:dprint(msg)$/;"	f
s:easyescape_end_key	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^let s:easyescape_end_key = g:easyescape_string[1]$/;"	v
s:easyescape_start_key	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^let s:easyescape_start_key = g:easyescape_string[0]$/;"	v
s:echo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Message.vim	/^function! s:echo(hl, msg) abort$/;"	f
s:echo_signature	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:echo_signature(parts)$/;"	f
s:echo_signature	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:echo_signature(parts)$/;"	f
s:echomsg	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Message.vim	/^function! s:echomsg(hl, msg) abort$/;"	f
s:edit	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:edit(cmd, file) abort$/;"	f
s:edit_command	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:edit_command(mods, edit, count, ...) abort$/;"	f
s:edit_complete	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:edit_complete(lead, cmdline, _) abort$/;"	f
s:edit_content	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Buffer.vim	/^function! s:edit_content(content, ...) abort$/;"	f
s:editcmdfor	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:editcmdfor(cmd) abort$/;"	f
s:efm_dir	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:efm_dir() abort$/;"	f
s:efm_generate	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:efm_generate =$/;"	v
s:emacs	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/KeyMapping.vim	/^let s:emacs = {$/;"	v
s:emacs.keymapping	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/KeyMapping.vim	/^function! s:emacs.keymapping(cmdline)$/;"	f
s:emmet_settings	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^let s:emmet_settings = {$/;"	v
s:emmet_unittest_complete	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:emmet_unittest_complete(arglead, cmdline, cmdpos)$/;"	f
s:empty	.config/nvim/plugged/targets.vim/autoload/targets/state.vim	/^let s:empty = 1$/;"	v
s:enabled	.vim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let s:enabled = get(g:, 'airline#extensions#localsearch#enabled', 1)$/;"	v
s:enabled	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:enabled = get(g:, 'airline#extensions#whitespace#enabled', 1)$/;"	v
s:end_end_regex	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:end_end_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:end_middle_regex	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\/;"	v
s:end_middle_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\/;"	v
s:end_pattern	.config/nvim/plugged/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^let s:end_pattern = s:comment_escape . '\\zs<end>'$/;"	v
s:end_skip_expr	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:end_skip_expr = s:skip_expr .$/;"	v
s:end_start_regex	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:end_start_regex =$/;"	v
s:end_start_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:end_start_regex =$/;"	v
s:endof	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:endof(lnum)$/;"	f
s:endswith	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:endswith(str, suffix) abort$/;"	f
s:endswith	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:endswith(string,suffix)$/;"	f
s:endtags	.config/nvim/plugged/html5.vim/indent/html.vim	/^let s:endtags = [0,0,0,0,0,0,0]   " long enough for the highest index$/;"	v
s:environment	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^let s:environment = {}$/;"	v
s:environment	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:environment()$/;"	f
s:environment.restore	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:environment.restore() abort$/;"	f
s:err	.config/nvim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:err	.vim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:error	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:error     = [s:base08[0], s:base01[0], s:base08[1], s:base01[1]]$/;"	v
s:error	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:error     = [s:base08[0], s:base01[0], s:base08[1], s:base01[1]]$/;"	v
s:error	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Exception.vim	/^function! s:error(text, where)$/;"	f
s:error	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Message.vim	/^function! s:error(msg) abort$/;"	f
s:error	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:error(str) abort$/;"	f
s:error	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^function! s:error(str)$/;"	f
s:error	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:error(msg)$/;"	f
s:error_sign	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^let s:error_sign = get(g:, 'coc_status_error_sign', has('mac') ? '❌ ' : 'E')$/;"	v
s:error_sign	.vim/plugged/coc.nvim/autoload/coc.vim	/^let s:error_sign = get(g:, 'coc_status_error_sign', has('mac') ? '❌ ' : 'E')$/;"	v
s:error_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^let s:error_symbol = get(g:, 'airline#extensions#coc#error_symbol', 'E:')$/;"	v
s:error_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:error_symbol = get(g:, 'airline#extensions#languageclient#error_symbol', 'E:')$/;"	v
s:error_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^let s:error_symbol = get(g:, 'airline#extensions#neomake#error_symbol', 'E:')$/;"	v
s:error_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^let s:error_symbol = get(g:, 'airline#extensions#syntastic#error_symbol', 'E:')$/;"	v
s:error_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:error_symbol = get(g:, 'airline#extensions#ycm#error_symbol', 'E:')$/;"	v
s:esc	.config/nvim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:esc	.config/nvim/plugged/vim-after-object/autoload/after_object.vim	/^function! s:esc(c)$/;"	f
s:esc	.vim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:escape	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:escape(str)$/;"	f
s:escape	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape(path)$/;"	f
s:escape	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:escape(path)$/;"	f
s:escape_file_searching	.config/nvim/plugged/denite.nvim/autoload/denite/project.vim	/^function! s:escape_file_searching(buffer_name) abort$/;"	f
s:escape_file_searching	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:escape_file_searching(buffer_name) abort$/;"	f
s:escape_file_searching	.vim/plugged/denite.nvim/autoload/denite/project.vim	/^function! s:escape_file_searching(buffer_name) abort$/;"	f
s:escape_pattern	.config/nvim/plugged/defx.nvim/autoload/defx/exrename.vim	/^function! s:escape_pattern(str) abort$/;"	f
s:escape_pattern	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:escape_pattern(str) abort$/;"	f
s:escape_regexp_char	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:escape_regexp_char(char) "{{{$/;"	f
s:escape_sequence	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^let s:escape_sequence = "\\<BS>" . "\\<ESC>"$/;"	v
s:escape_special_key	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^function! s:escape_special_key(key)$/;"	f
s:escarg	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:escarg(p)$/;"	f
s:esccmd	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:esccmd(p)$/;"	f
s:escrtp	.config/nvim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:escrtp	.vim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:eval	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:eval(dict, key, arg)$/;"	f
s:eval_cmdline	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! s:eval_cmdline(cmdline) abort$/;"	f
s:eval_cmdline	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! s:eval_cmdline(cmdline) abort$/;"	f
s:eval_cmdline	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! s:eval_cmdline(cmdline) abort$/;"	f
s:evaluate_opts	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:evaluate_opts(options)$/;"	f
s:evaluate_tabline	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:evaluate_tabline(tabline)$/;"	f
s:excmds	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:excmds()$/;"	f
s:exec_separator	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:exec_separator(dict, from, to, inverse, suffix)$/;"	f
s:execute	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:execute(cmd)$/;"	f
s:execute	.config/nvim/plugged/targets.vim/test/test.vim	/^function! s:execute(operation, motions)$/;"	f
s:execute	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:execute(cmd)$/;"	f
s:execute	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:execute(dict, command, use_height, temps) abort$/;"	f
s:execute_term	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:execute_term(dict, command, temps) abort$/;"	f
s:execute_tmux	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:execute_tmux(dict, command, temps) abort$/;"	f
s:exists	.config/nvim/plugged/emmet-vim/autoload/emmet/lang.vim	/^let s:exists = {}$/;"	v
s:exists	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:exists(name) abort dict$/;"	f
s:exit	.config/nvim/plugged/defx.nvim/autoload/defx/exrename.vim	/^function! s:exit(bufnr) abort$/;"	f
s:exit_handler	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:exit_handler(code, command, ...)$/;"	f
s:expand	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! s:expand(path) abort$/;"	f
s:expand	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^function! s:expand(path) abort$/;"	f
s:expand	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^function! s:expand(path) abort$/;"	f
s:expand_complete	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! s:expand_complete(path) abort$/;"	f
s:expand_placeholder	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:expand_placeholder(placeholder, expansions) abort$/;"	f
s:expand_placeholder	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:expand_placeholder(placeholder, expansions) abort$/;"	f
s:expand_placeholders	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:expand_placeholders(value, expansions, ...) abort$/;"	f
s:expand_placeholders	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:expand_placeholders(string, placeholders, ...) abort$/;"	f
s:expand_url	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:expand_url(url, params) abort$/;"	f
s:ext	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:ext = {}$/;"	v
s:ext	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:ext._theme_funcrefs = []$/;"	v
s:ext.add_inactive_statusline_func	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_inactive_statusline_func(name) dict$/;"	f
s:ext.add_statusline_func	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_statusline_func(name) dict$/;"	f
s:ext.add_statusline_funcref	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_statusline_funcref(function) dict$/;"	f
s:ext.add_theme_func	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_theme_func(name) dict$/;"	f
s:extend	.config/nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:extend(base, extra)$/;"	f
s:extend	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Capture.vim	/^function! s:extend(dict, src)$/;"	f
s:extend_opts	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:extend_opts(dict, eopts, prepend)$/;"	f
s:extend_projection	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:extend_projection(dest, src) abort$/;"	f
s:extension	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^let s:extension = has('win32') ? '.ps1' : '.sh'$/;"	v
s:extract_name	.config/nvim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:extract_name	.vim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:extractafter	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
s:extractafter	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
s:extractbefore	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
s:extractbefore	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
s:fail	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:fail(interface_key_mapping_lhs)$/;"	f
s:fcall	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:fcall(fn, path, ...) abort$/;"	f
s:fcall	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:fcall(fn, path, ...) abort$/;"	f
s:fcall	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:fcall(fn, path, ...) abort$/;"	f
s:fcall	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:fcall(fn, path, ...) abort$/;"	f
s:fetching	.config/nvim/plugged/vista.vim/autoload/vista/executive/lcn.vim	/^let s:fetching = v:true$/;"	v
s:fg0	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg0 = s:gb.dark0$/;"	v
s:fg0	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg0 = s:gb.light0$/;"	v
s:fg1	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:fg1  = s:getGruvColor('GruvboxFg1')$/;"	v
s:fg1	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg1 = s:gb.dark1$/;"	v
s:fg1	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg1 = s:gb.light1$/;"	v
s:fg1	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg1[1]    = 15$/;"	v
s:fg2	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg2 = s:gb.dark2$/;"	v
s:fg2	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg2 = s:gb.light2$/;"	v
s:fg3	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg3 = s:gb.dark3$/;"	v
s:fg3	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg3 = s:gb.light3$/;"	v
s:fg4	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:fg4  = s:getGruvColor('GruvboxFg4')$/;"	v
s:fg4	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4 = s:gb.dark4$/;"	v
s:fg4	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4 = s:gb.light4$/;"	v
s:fg4	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4[1]    = 7$/;"	v
s:fg4_256	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4_256 = s:gb.dark4_256$/;"	v
s:fg4_256	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4_256 = s:gb.light4_256$/;"	v
s:file	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:file = expand('<sfile>:p')$/;"	v
s:file_getline	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:file_getline(lnum,...) dict abort$/;"	f
s:file_lines	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:file_lines() dict abort$/;"	f
s:file_name	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:file_name() dict abort$/;"	f
s:file_options	.config/nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_options(prefix)$/;"	f
s:file_path	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:file_path() dict abort$/;"	f
s:file_prototype	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:file_prototype = {}$/;"	v
s:file_source	.config/nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_source(prefix)$/;"	f
s:file_split_prefix	.config/nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_split_prefix(prefix)$/;"	f
s:filereadable	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:filereadable(path) abort$/;"	f
s:filereadable	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:filereadable(path) abort$/;"	f
s:filetype_overrides	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:filetype_overrides = {$/;"	v
s:filetype_regex_overrides	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:filetype_regex_overrides = {}$/;"	v
s:fill_quickfix	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fill_quickfix(list, ...)$/;"	f
s:filter_async	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:filter_async() abort$/;"	f
s:filter_async	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:filter_async() abort$/;"	f
s:filtermx	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^let s:filtermx = '|\\(\\%(bem\\|html\\|blade\\|haml\\|slim\\|e\\|c\\|s\\|fc\\|xsl\\|t\\|\\\/[^ ]/;"	v
s:find	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:find(list, default, f) abort$/;"	f
s:find	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:find(cmd, file) abort$/;"	f
s:findArg	.config/nvim/plugged/targets.vim/autoload/targets/sources/argument.vim	/^function! s:findArg(args, direction, flags1, flags2, flags3, opening, closing)$/;"	f
s:findArgBoundary	.config/nvim/plugged/targets.vim/autoload/targets/sources/argument.vim	/^function! s:findArgBoundary(flags1, flags2, skip, finish, all, separator)$/;"	f
s:findMotion	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:findMotion(num_strokes, direction) "{{{$/;"	f
s:findRawTarget	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:findRawTarget(context, factories, count)$/;"	f
s:findTarget	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:findTarget(context, count)$/;"	f
s:find_file	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:find_file(name, ...) abort$/;"	f
s:find_index	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:find_index(xs, f, ...) abort$/;"	f
s:find_indices	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:find_indices(xs, f, ...) abort$/;"	f
s:find_last_index	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:find_last_index(xs, f, ...) abort$/;"	f
s:find_name	.config/nvim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:find_name	.vim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:find_open_window	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:find_open_window(b)$/;"	f
s:find_related_file	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:find_related_file(patterns) abort$/;"	f
s:find_root	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:find_root(path) abort$/;"	f
s:find_timer	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^let s:find_timer = -1$/;"	v
s:findasset	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:findasset(path, dir) abort$/;"	f
s:findcmdfor	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:findcmdfor(cmd) abort$/;"	f
s:findcodeactions	.vim/plugged/omnisharp-vim/autoload/unite/sources/OmniSharp.vim	/^let s:findcodeactions = {$/;"	v
s:findcodeactions	.vim/plugged/omnisharp-vim/autoload/unite/sources/OmniSharp.vim	/^let s:findcodeactions.action_table = s:findcodeactions_action_table$/;"	v
s:findcodeactions.gather_candidates	.vim/plugged/omnisharp-vim/autoload/unite/sources/OmniSharp.vim	/^function! s:findcodeactions.gather_candidates(args, context) abort$/;"	f
s:findcodeactions_action_table	.vim/plugged/omnisharp-vim/autoload/unite/sources/OmniSharp.vim	/^let s:findcodeactions_action_table = {$/;"	v
s:findcodeactions_action_table.run.func	.vim/plugged/omnisharp-vim/autoload/unite/sources/OmniSharp.vim	/^function! s:findcodeactions_action_table.run.func(candidate) abort$/;"	f
s:findlayout	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:findlayout(name)$/;"	f
s:findsymbols	.vim/plugged/omnisharp-vim/autoload/unite/sources/OmniSharp.vim	/^let s:findsymbols = {$/;"	v
s:findsymbols.gather_candidates	.vim/plugged/omnisharp-vim/autoload/unite/sources/OmniSharp.vim	/^function! s:findsymbols.gather_candidates(args, context) abort$/;"	f
s:findview	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:findview(name) abort$/;"	f
s:finish	.config/nvim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish	.vim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	.config/nvim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:finish_bindings	.vim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:first_line	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:first_line(lines)$/;"	f
s:first_rtp	.config/nvim/autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:first_rtp	.vim/autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:fixindent	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
s:fixindent	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
s:fixturesEdit	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:fixturesEdit(cmd,...)$/;"	f
s:fixturesList	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:fixturesList(A,L,P)$/;"	f
s:flags	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:flags = get(g:, 'airline#extensions#tagbar#flags', '')$/;"	v
s:flatten	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:flatten(list, ...) abort$/;"	f
s:floating_timer	.config/nvim/plugged/vista.vim/autoload/vista/floating.vim	/^let s:floating_timer = -1$/;"	v
s:fmt_excmd	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:fmt_excmd = '   '.s:blue('%-38s', 'Statement').'%s'$/;"	v
s:fname_prefix	.config/nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:fname_prefix(str)$/;"	f
s:fnamecollapse	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:fnamecollapse = get(g:, 'airline#extensions#tabline#fnamecollapse', 1)$/;"	v
s:fnamecollapse	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/short_path.vim	/^let s:fnamecollapse = get(g:, 'airline#extensions#tabline#fnamecollapse', 1)$/;"	v
s:fnameescape	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:fnameescape(file) abort$/;"	f
s:fnameescape	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:fnameescape(file) abort$/;"	f
s:fnametruncate	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^let s:fnametruncate = get(g:, 'airline#extensions#tabline#fnametruncate', 0)$/;"	v
s:fold_arg	.config/nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:fold_arg	    = s:foldable('string')		? ' fold'   : ''$/;"	v
s:foldable	.config/nvim/plugged/vim-ruby/syntax/ruby.vim	/^function! s:foldable(...) abort$/;"	f
s:foldable_groups	.config/nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:foldable_groups = split($/;"	v
s:foldl	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^function! s:foldl(f, init, dict) abort$/;"	f
s:foldl	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:foldl(f, init, xs) abort$/;"	f
s:foldl1	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:foldl1(f, xs) abort$/;"	f
s:foldr	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^function! s:foldr(f, init, dict) abort$/;"	f
s:foldr	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:foldr(f, init, xs) abort$/;"	f
s:foldr1	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:foldr1(f, xs) abort$/;"	f
s:format	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:format()$/;"	f
s:format_buffer	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_buffer(b)$/;"	f
s:format_cmd	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_cmd(line)$/;"	f
s:format_excmd	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_excmd(ex)$/;"	f
s:format_git_log	.config/nvim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_git_log	.vim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_mark	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_mark(line)$/;"	f
s:format_message	.config/nvim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:format_message	.vim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:format_name	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  function! s:format_name(name)$/;"	f
s:format_win	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_win(tab, win, buf)$/;"	f
s:format_wordcount	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^      function! s:format_wordcount(_)$/;"	f
s:format_wordcount	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! s:format_wordcount(wordcount)$/;"	f
s:formatelempat	.config/nvim/plugged/tabular/autoload/tabular.vim	/^let s:formatelempat = '\\%([lrc]\\d\\+\\)'$/;"	v
s:formatter	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^      let s:formatter = 'default'$/;"	v
s:formatter	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^let s:formatter = get(g:, 'airline#extensions#wordcount#formatter', 'default')$/;"	v
s:frozenset	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:frozenset(...) abort$/;"	f
s:frozenset	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^let s:frozenset = deepcopy(s:_base_set)$/;"	v
s:fullmoon	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:fullmoon = "434852"$/;"	v
s:fullmoon	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:fullmoon = "434852"$/;"	v
s:funcs	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^let s:funcs = {}$/;"	v
s:funcs	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^let s:funcs = {}$/;"	v
s:funcs.buf_add_highlight	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_add_highlight(bufnr, srcId, hlGroup, line, colStart, colEnd) abort$/;"	f
s:funcs.buf_add_highlight	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_add_highlight(bufnr, srcId, hlGroup, line, colStart, colEnd) abort$/;"	f
s:funcs.buf_attach	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_attach(...)$/;"	f
s:funcs.buf_attach	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_attach(...)$/;"	f
s:funcs.buf_clear_namespace	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_clear_namespace(bufnr, srcId, startLine, endLine) abort$/;"	f
s:funcs.buf_clear_namespace	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_clear_namespace(bufnr, srcId, startLine, endLine) abort$/;"	f
s:funcs.buf_del_var	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_del_var(bufnr, name)$/;"	f
s:funcs.buf_del_var	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_del_var(bufnr, name)$/;"	f
s:funcs.buf_detach	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_detach()$/;"	f
s:funcs.buf_detach	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_detach()$/;"	f
s:funcs.buf_get_changedtick	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_changedtick(bufnr)$/;"	f
s:funcs.buf_get_changedtick	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_changedtick(bufnr)$/;"	f
s:funcs.buf_get_lines	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_lines(bufnr, start, end, strict) abort$/;"	f
s:funcs.buf_get_lines	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_lines(bufnr, start, end, strict) abort$/;"	f
s:funcs.buf_get_mark	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_mark(bufnr, name)$/;"	f
s:funcs.buf_get_mark	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_mark(bufnr, name)$/;"	f
s:funcs.buf_get_name	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_name(bufnr)$/;"	f
s:funcs.buf_get_name	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_name(bufnr)$/;"	f
s:funcs.buf_get_option	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_option(bufnr, name)$/;"	f
s:funcs.buf_get_option	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_option(bufnr, name)$/;"	f
s:funcs.buf_get_var	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_var(bufnr, name)$/;"	f
s:funcs.buf_get_var	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_var(bufnr, name)$/;"	f
s:funcs.buf_is_valid	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_is_valid(bufnr)$/;"	f
s:funcs.buf_is_valid	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_is_valid(bufnr)$/;"	f
s:funcs.buf_line_count	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_line_count(bufnr) abort$/;"	f
s:funcs.buf_line_count	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_line_count(bufnr) abort$/;"	f
s:funcs.buf_set_lines	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_lines(bufnr, start, end, strict, ...) abort$/;"	f
s:funcs.buf_set_lines	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_lines(bufnr, start, end, strict, ...) abort$/;"	f
s:funcs.buf_set_name	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_name(bufnr, name) abort$/;"	f
s:funcs.buf_set_name	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_name(bufnr, name) abort$/;"	f
s:funcs.buf_set_option	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_option(bufnr, name, val)$/;"	f
s:funcs.buf_set_option	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_option(bufnr, name, val)$/;"	f
s:funcs.buf_set_var	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_var(bufnr, name, val)$/;"	f
s:funcs.buf_set_var	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_var(bufnr, name, val)$/;"	f
s:funcs.call_atomic	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_atomic(calls)$/;"	f
s:funcs.call_atomic	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_atomic(calls)$/;"	f
s:funcs.call_dict_function	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_dict_function(dict, method, args) abort$/;"	f
s:funcs.call_dict_function	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_dict_function(dict, method, args) abort$/;"	f
s:funcs.call_function	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_function(method, args) abort$/;"	f
s:funcs.call_function	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_function(method, args) abort$/;"	f
s:funcs.command	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.command(command) abort$/;"	f
s:funcs.command	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.command(command) abort$/;"	f
s:funcs.command_output	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.command_output(cmd)$/;"	f
s:funcs.command_output	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.command_output(cmd)$/;"	f
s:funcs.create_namespace	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.create_namespace(name) abort$/;"	f
s:funcs.create_namespace	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.create_namespace(name) abort$/;"	f
s:funcs.del_current_line	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.del_current_line(line)$/;"	f
s:funcs.del_current_line	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.del_current_line(line)$/;"	f
s:funcs.del_var	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.del_var(name) abort$/;"	f
s:funcs.del_var	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.del_var(name) abort$/;"	f
s:funcs.err_write	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.err_write(str)$/;"	f
s:funcs.err_write	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.err_write(str)$/;"	f
s:funcs.err_writeln	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.err_writeln(str)$/;"	f
s:funcs.err_writeln	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.err_writeln(str)$/;"	f
s:funcs.eval	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.eval(expr) abort$/;"	f
s:funcs.eval	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.eval(expr) abort$/;"	f
s:funcs.feedkeys	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.feedkeys(keys, mode, escape_csi)$/;"	f
s:funcs.feedkeys	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.feedkeys(keys, mode, escape_csi)$/;"	f
s:funcs.get_api_info	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_api_info()$/;"	f
s:funcs.get_api_info	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_api_info()$/;"	f
s:funcs.get_current_buf	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_buf()$/;"	f
s:funcs.get_current_buf	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_buf()$/;"	f
s:funcs.get_current_line	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_line()$/;"	f
s:funcs.get_current_line	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_line()$/;"	f
s:funcs.get_current_tabpage	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_tabpage()$/;"	f
s:funcs.get_current_tabpage	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_tabpage()$/;"	f
s:funcs.get_current_win	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_win()$/;"	f
s:funcs.get_current_win	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_win()$/;"	f
s:funcs.get_mode	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_mode()$/;"	f
s:funcs.get_mode	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_mode()$/;"	f
s:funcs.get_option	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_option(name)$/;"	f
s:funcs.get_option	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_option(name)$/;"	f
s:funcs.get_var	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_var(var)$/;"	f
s:funcs.get_var	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_var(var)$/;"	f
s:funcs.get_vvar	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_vvar(var)$/;"	f
s:funcs.get_vvar	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_vvar(var)$/;"	f
s:funcs.list_bufs	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_bufs()$/;"	f
s:funcs.list_bufs	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_bufs()$/;"	f
s:funcs.list_runtime_paths	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_runtime_paths()$/;"	f
s:funcs.list_runtime_paths	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_runtime_paths()$/;"	f
s:funcs.list_tabpages	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_tabpages()$/;"	f
s:funcs.list_tabpages	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_tabpages()$/;"	f
s:funcs.list_wins	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_wins() abort$/;"	f
s:funcs.list_wins	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_wins() abort$/;"	f
s:funcs.out_write	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.out_write(str)$/;"	f
s:funcs.out_write	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.out_write(str)$/;"	f
s:funcs.set_client_info	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_client_info(...) abort$/;"	f
s:funcs.set_client_info	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_client_info(...) abort$/;"	f
s:funcs.set_current_buf	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_buf(bufnr) abort$/;"	f
s:funcs.set_current_buf	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_buf(bufnr) abort$/;"	f
s:funcs.set_current_dir	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_dir(dir) abort$/;"	f
s:funcs.set_current_dir	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_dir(dir) abort$/;"	f
s:funcs.set_current_line	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_line(line)$/;"	f
s:funcs.set_current_line	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_line(line)$/;"	f
s:funcs.set_current_tabpage	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_tabpage(tabnr) abort$/;"	f
s:funcs.set_current_tabpage	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_tabpage(tabnr) abort$/;"	f
s:funcs.set_current_win	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_win(win_id) abort$/;"	f
s:funcs.set_current_win	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_win(win_id) abort$/;"	f
s:funcs.set_option	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_option(name, value) abort$/;"	f
s:funcs.set_option	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_option(name, value) abort$/;"	f
s:funcs.set_var	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_var(name, value) abort$/;"	f
s:funcs.set_var	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_var(name, value) abort$/;"	f
s:funcs.strwidth	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.strwidth(str)$/;"	f
s:funcs.strwidth	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.strwidth(str)$/;"	f
s:funcs.subscribe	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.subscribe(...) abort$/;"	f
s:funcs.subscribe	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.subscribe(...) abort$/;"	f
s:funcs.tabpage_del_var	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_del_var(tabnr, name)$/;"	f
s:funcs.tabpage_del_var	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_del_var(tabnr, name)$/;"	f
s:funcs.tabpage_get_number	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_number(id)$/;"	f
s:funcs.tabpage_get_number	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_number(id)$/;"	f
s:funcs.tabpage_get_var	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_var(tabnr, name)$/;"	f
s:funcs.tabpage_get_var	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_var(tabnr, name)$/;"	f
s:funcs.tabpage_get_win	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_win(tabnr)$/;"	f
s:funcs.tabpage_get_win	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_win(tabnr)$/;"	f
s:funcs.tabpage_is_valid	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_is_valid(tabnr)$/;"	f
s:funcs.tabpage_is_valid	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_is_valid(tabnr)$/;"	f
s:funcs.tabpage_list_wins	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_list_wins(tabnr)$/;"	f
s:funcs.tabpage_list_wins	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_list_wins(tabnr)$/;"	f
s:funcs.tabpage_set_var	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_set_var(tabnr, name, value)$/;"	f
s:funcs.tabpage_set_var	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_set_var(tabnr, name, value)$/;"	f
s:funcs.unsubscribe	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.unsubscribe(...) abort$/;"	f
s:funcs.unsubscribe	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.unsubscribe(...) abort$/;"	f
s:funcs.win_del_var	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_del_var(win_id, name) abort$/;"	f
s:funcs.win_del_var	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_del_var(win_id, name) abort$/;"	f
s:funcs.win_get_buf	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_buf(winid)$/;"	f
s:funcs.win_get_buf	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_buf(winid)$/;"	f
s:funcs.win_get_cursor	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_cursor(win_id) abort$/;"	f
s:funcs.win_get_cursor	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_cursor(win_id) abort$/;"	f
s:funcs.win_get_height	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_height(win_id) abort$/;"	f
s:funcs.win_get_height	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_height(win_id) abort$/;"	f
s:funcs.win_get_number	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_number(win_id) abort$/;"	f
s:funcs.win_get_number	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_number(win_id) abort$/;"	f
s:funcs.win_get_option	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_option(win_id, name) abort$/;"	f
s:funcs.win_get_option	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_option(win_id, name) abort$/;"	f
s:funcs.win_get_position	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_position(win_id) abort$/;"	f
s:funcs.win_get_position	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_position(win_id) abort$/;"	f
s:funcs.win_get_tabpage	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_tabpage(win_id) abort$/;"	f
s:funcs.win_get_tabpage	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_tabpage(win_id) abort$/;"	f
s:funcs.win_get_var	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_var(win_id, name) abort$/;"	f
s:funcs.win_get_var	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_var(win_id, name) abort$/;"	f
s:funcs.win_get_width	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_width(win_id) abort$/;"	f
s:funcs.win_get_width	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_width(win_id) abort$/;"	f
s:funcs.win_is_valid	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_is_valid(win_id) abort$/;"	f
s:funcs.win_is_valid	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_is_valid(win_id) abort$/;"	f
s:funcs.win_set_cursor	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_cursor(win_id, pos) abort$/;"	f
s:funcs.win_set_cursor	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_cursor(win_id, pos) abort$/;"	f
s:funcs.win_set_height	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_height(win_id, height) abort$/;"	f
s:funcs.win_set_height	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_height(win_id, height) abort$/;"	f
s:funcs.win_set_option	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_option(win_id, name, value) abort$/;"	f
s:funcs.win_set_option	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_option(win_id, name, value) abort$/;"	f
s:funcs.win_set_var	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_var(win_id, name, value) abort$/;"	f
s:funcs.win_set_var	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_var(win_id, name, value) abort$/;"	f
s:funcs.win_set_width	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_width(win_id, width) abort$/;"	f
s:funcs.win_set_width	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_width(win_id, width) abort$/;"	f
s:function	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
s:function	.config/nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
s:function	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:function(name) abort$/;"	f
s:function	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:function(name) abort$/;"	f
s:function	.config/nvim/plugged/vim-rails/plugin/rails.vim	/^function! s:function(name)$/;"	f
s:function	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:function(name) abort$/;"	f
s:fuzzyglob	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:fuzzyglob(arg) abort$/;"	f
s:fzf	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fzf(name, opts, extra)$/;"	f
s:fzf_call	.vim/plugged/fzf/plugin/fzf.vim	/^  function! s:fzf_call(fn, ...)$/;"	f
s:fzf_exec	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:fzf_exec()$/;"	f
s:fzf_expand	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:fzf_expand(fmt)$/;"	f
s:fzf_fnamemodify	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:fzf_fnamemodify(fname, mods)$/;"	f
s:fzf_getcwd	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:fzf_getcwd()$/;"	f
s:fzf_go	.vim/plugged/fzf/plugin/fzf.vim	/^let s:fzf_go = s:base_dir.'\/bin\/fzf'$/;"	v
s:fzf_restore_colors	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_restore_colors()$/;"	f
s:fzf_tempname	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:fzf_tempname()$/;"	f
s:fzf_tmux	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:fzf_tmux(dict)$/;"	f
s:fzf_tmux	.vim/plugged/fzf/plugin/fzf.vim	/^let s:fzf_tmux = s:base_dir.'\/bin\/fzf-tmux'$/;"	v
s:fzf_vim_term	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_vim_term()$/;"	f
s:gather_poses	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:gather_poses(pattern) abort$/;"	f
s:gather_visible_matched_poses	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:gather_visible_matched_poses(pattern, direction, allow_cursor_pos_match) abort$/;"	f
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb = {}$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.aqua   = s:aqua$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg0 = s:bg0$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg1 = s:bg1$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg2 = s:bg2$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg3 = s:bg3$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg4 = s:bg4$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.blue   = s:blue$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_aqua    = ['#8ec07c', 108]     " 142-192-124$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_blue    = ['#83a598', 109]     " 131-165-152$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_green   = ['#b8bb26', 142]     " 184-187-38$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_orange  = ['#fe8019', 208]     " 254-128-25$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_purple  = ['#d3869b', 175]     " 211-134-155$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_red     = ['#fb4934', 167]     " 251-73-52$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_yellow  = ['#fabd2f', 214]     " 250-189-47$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark0       = ['#282828', 235]     " 40-40-40$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark0_hard  = ['#1d2021', 234]     " 29-32-33$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark0_soft  = ['#32302f', 236]     " 50-48-47$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark1       = ['#3c3836', 237]     " 60-56-54$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark2       = ['#504945', 239]     " 80-73-69$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark3       = ['#665c54', 241]     " 102-92-84$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark4       = ['#7c6f64', 243]     " 124-111-100$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark4_256   = ['#7c6f64', 243]     " 124-111-100$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_aqua     = ['#427b58', 66]      " 66-123-88$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_blue     = ['#076678', 24]      " 7-102-120$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_green    = ['#79740e', 100]     " 121-116-14$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_orange   = ['#af3a03', 130]     " 175-58-3$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_purple   = ['#8f3f71', 96]      " 143-63-113$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_red      = ['#9d0006', 88]      " 157-0-6$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_yellow   = ['#b57614', 136]     " 181-118-20$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg0 = s:fg0$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg1 = s:fg1$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg2 = s:fg2$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg3 = s:fg3$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg4 = s:fg4$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg4_256 = s:fg4_256$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.gray = s:gray$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.gray_244    = ['#928374', 244]     " 146-131-116$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.gray_245    = ['#928374', 245]     " 146-131-116$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.green  = s:green$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light0      = ['#fbf1c7', 229]     " 253-244-193$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light0_hard = ['#f9f5d7', 230]     " 249-245-215$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light0_soft = ['#f2e5bc', 228]     " 242-229-188$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light1      = ['#ebdbb2', 223]     " 235-219-178$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light2      = ['#d5c4a1', 250]     " 213-196-161$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light3      = ['#bdae93', 248]     " 189-174-147$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light4      = ['#a89984', 246]     " 168-153-132$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light4_256  = ['#a89984', 246]     " 168-153-132$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_aqua   = ['#689d6a', 72]      " 104-157-106$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_blue   = ['#458588', 66]      " 69-133-136$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_green  = ['#98971a', 106]     " 152-151-26$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_orange = ['#d65d0e', 166]     " 214-93-14$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_purple = ['#b16286', 132]     " 177-98-134$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_red    = ['#cc241d', 124]     " 204-36-29$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_yellow = ['#d79921', 172]     " 215-153-33$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.orange = s:orange$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.purple = s:purple$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.red    = s:red$/;"	v
s:gb	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.yellow = s:yellow$/;"	v
s:gem_subdirs	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:gem_subdirs(...) abort$/;"	f
s:gem_subdirs	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:gem_subdirs = {}$/;"	v
s:generate_language_option_variables	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:generate_language_option_variables()$/;"	f
s:generate_theme_option_variables	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:generate_theme_option_variables()$/;"	f
s:generate_wildignore_options	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
s:generated_snippets	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^let s:generated_snippets = {}$/;"	v
s:get	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules.vim	/^function! s:get(name)$/;"	f
s:get	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Highlight.vim	/^function! s:get(name, ...)$/;"	f
s:getFactories	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:getFactories(trigger)$/;"	f
s:getGruvColor	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^function! s:getGruvColor(group)$/;"	f
s:getPromptMessage	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! s:getPromptMessage(num_strokes) "{{{$/;"	f
s:get_accented_line	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_accented_line(self, group, contents)$/;"	f
s:get_airline_themes	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:get_airline_themes(a, l, p)$/;"	f
s:get_array	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:get_array(fg, bg, opts)$/;"	f
s:get_channel	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:get_channel(client)$/;"	f
s:get_channel	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:get_channel(client)$/;"	f
s:get_closing	.vim/plugged/vim-closer/autoload/closer.vim	/^function! s:get_closing(line)$/;"	f
s:get_cmdline	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Doautocmd.vim	/^function! s:get_cmdline()$/;"	f
s:get_cmdline_cword	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/InsertRegister.vim	/^function! s:get_cmdline_cword(backward, cword)$/;"	f
s:get_color	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_color	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:get_color(group, attr)$/;"	f
s:get_color	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_color_map	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:get_color_map()$/;"	f
s:get_context	.vim/plugged/vim-closer/autoload/closer.vim	/^function! s:get_context()$/;"	f
s:get_counts	.vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! s:get_counts()$/;"	f
s:get_ctags_executable	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
s:get_diagnostics	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:get_diagnostics()$/;"	f
s:get_escaped_group_char	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:get_escaped_group_char(dict, char) "{{{$/;"	f
s:get_git_root	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_git_root()$/;"	f
s:get_hit_enter_max_length	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Message.vim	/^function! s:get_hit_enter_max_length() abort$/;"	f
s:get_hunks_changes	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_changes()$/;"	f
s:get_hunks_empty	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_empty()$/;"	f
s:get_hunks_gitgutter	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_gitgutter()$/;"	f
s:get_hunks_signify	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_signify()$/;"	f
s:get_last_selected	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Buffer.vim	/^function! s:get_last_selected() abort$/;"	f
s:get_mode	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:get_mode()$/;"	f
s:get_number	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:get_number(index)$/;"	f
s:get_section	.vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! s:get_section(winnr, key, ...)$/;"	f
s:get_selected_text	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Buffer.vim	/^function! s:get_selected_text(...) abort$/;"	f
s:get_separator_change	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:get_separator_change(new_group, old_group, end_group, sep_size, alt_sep_size)$/;"	f
s:get_separator_change_with_end	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:get_separator_change_with_end(new_group, old_group, new_end_group, old_end_group, se/;"	f
s:get_seperator	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_seperator(self, prev_group, group, side)$/;"	f
s:get_syn	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:get_syn(group, what)$/;"	f
s:get_tag	.config/nvim/plugged/html5.vim/indent/html.vim	/^func! s:get_tag(tagname)$/;"	f
s:get_transitioned_seperator	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_transitioned_seperator(self, prev_group, group, side)$/;"	f
s:get_wordcount	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^  function! s:get_wordcount(visual_mode_active)$/;"	f
s:getchar	.config/nvim/plugged/targets.vim/autoload/targets/sources/argument.vim	/^function! s:getchar()$/;"	f
s:getchar	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Input.vim	/^function! s:getchar(...)$/;"	f
s:getchar	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:getchar(...) abort$/;"	f
s:getchar	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
s:getchar	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
s:getchar_safe	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:getchar_safe(...) abort$/;"	f
s:getftime	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:getftime(path) abort$/;"	f
s:getlist	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:getlist(arg, key)$/;"	f
s:getpos	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:getpos()$/;"	f
s:git_validate	.config/nvim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_validate	.vim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version_requirement	.config/nvim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:git_version_requirement	.vim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:glob	.config/nvim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^  function! s:glob(expr) abort$/;"	f
s:glob	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:glob(path) abort$/;"	f
s:glob	.vim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob_dir	.config/nvim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:glob_dir	.vim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:globpath	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^  function! s:globpath(path, expr) abort$/;"	f
s:globpath	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^  function! s:globpath(path, file) abort$/;"	f
s:go	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:go(...) abort$/;"	f
s:goyo_off	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:goyo_off()$/;"	f
s:goyo_on	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:goyo_on(dim)$/;"	f
s:gpos_to_spos	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:gpos_to_spos(gpos)$/;"	f
s:gracious	.config/nvim/plugged/targets.vim/autoload/targets/multigen.vim	/^let s:gracious = get(g:, 'targets_gracious', 0)$/;"	v
s:gray	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:gray = s:gb.gray_244$/;"	v
s:gray	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:gray = s:gb.gray_245$/;"	v
s:gray	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:gray[1]   = 8$/;"	v
s:green	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:green = s:getGruvColor('GruvboxGreen')$/;"	v
s:green	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:green  = s:gb.bright_green$/;"	v
s:green	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:green  = s:gb.faded_green$/;"	v
s:green	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:green[1]  = 10$/;"	v
s:grey_colour	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:grey_colour(n)$/;"	f
s:grey_level	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:grey_level(n)$/;"	f
s:grey_number	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:grey_number(x)$/;"	f
s:group	.config/nvim/plugged/vim-ruby/syntax/ruby.vim	/^  let s:group = 'ruby' . s:names[s:delimiter] . 'Escape'$/;"	v
s:group_by	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:group_by(xs, f) abort$/;"	f
s:group_list	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Highlight.vim	/^function! s:group_list()$/;"	f
s:group_not_done	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:group_not_done(list, name)$/;"	f
s:grouping_algorithms	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^let s:grouping_algorithms = {$/;"	v
s:gsub	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
s:gsub	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:gsub(str, pat, repl) abort$/;"	f
s:gsub	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
s:guard	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^let s:guard = {}$/;"	v
s:guard.restore	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:guard.restore() abort$/;"	f
s:gui	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:gui = has('gui_running')$/;"	v
s:gui	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:gui = has('gui_running')$/;"	v
s:gui	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^fun s:gui(color)$/;"	f
s:gui	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^fun s:gui(color)$/;"	f
s:gui	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^fun s:gui(color)$/;"	f
s:gui00	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui00 = "2F343F"$/;"	v
s:gui01	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui01 = "333C47"$/;"	v
s:gui02	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui02 = "434852"$/;"	v
s:gui03	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui03 = "9DB1C7"$/;"	v
s:gui04	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui04 = "FBC4C1"$/;"	v
s:gui05	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui05 = "F0FDFF"$/;"	v
s:gui06	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui06 = "111111"$/;"	v
s:gui07	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui07 = "cccccc"$/;"	v
s:gui08	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui08 = "E9967A"$/;"	v
s:gui09	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui09 = "5D7EA3"$/;"	v
s:gui0A	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui0A = "Fbc4c1"$/;"	v
s:gui0B	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui0B = "fcf4ae"$/;"	v
s:gui0C	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui0C = "FCF4AE"$/;"	v
s:gui0D	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui0D = "FBC4C1" $/;"	v
s:gui0E	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui0E = "5D7EA3"$/;"	v
s:gui0F	.vim/plugged/vim-pink-moon/colors/orange-moon.vim	/^let s:gui0F = "608DAB"$/;"	v
s:gui2cui	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:gui2cui(rgb, fallback)$/;"	f
s:h	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^    let s:h.ids[s:group] = []$/;"	v
s:h	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let s:h = {}$/;"	v
s:h	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let s:h.ids = {}$/;"	v
s:halfmoon	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:halfmoon = "333C47"$/;"	v
s:halfmoon	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:halfmoon = "333C47"$/;"	v
s:handleEmpty	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:handleEmpty(input, visualmode) "{{{$/;"	f
s:handleEmptyMatch	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:handleEmptyMatch(context, target)$/;"	f
s:handleTarget	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:handleTarget(context, target, rawTarget)$/;"	f
s:has	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:has(list, value) abort$/;"	f
s:has	.config/nvim/plugged/vim-projectionist/plugin/projectionist.vim	/^function! s:has(ns, root, requirements) abort$/;"	f
s:has	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:has(root, file) abort$/;"	f
s:hasLegacySettings	.config/nvim/plugged/targets.vim/autoload/targets/mappings.vim	/^function! s:hasLegacySettings()$/;"	f
s:has_any	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:has_any(dict, keys)$/;"	f
s:has_app	.config/nvim/plugged/vim-rails/after/syntax/ruby/rails.vim	/^let s:has_app = exists('*RailsDetect') && RailsDetect()$/;"	v
s:has_common_items	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:has_common_items(list1, list2) abort$/;"	f
s:has_floating_win	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^let s:has_floating_win = exists('*nvim_open_win')$/;"	v
s:has_index	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:has_index(list, index) abort$/;"	f
s:has_patch	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:has_patch(major, minor, patch) abort$/;"	f
s:has_popup	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^let s:has_popup = exists('*popup_create')$/;"	v
s:has_projections	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:has_projections = {$/;"	v
s:has_vimproc	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/cmigemo.vim	/^function! s:has_vimproc() "{{{$/;"	f
s:hash_match	.config/nvim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:hash_match	.vim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:haspy3	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^let s:haspy3 = has("python3")$/;"	v
s:head_format	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:head_format = get(g:, 'airline#extensions#branch#format', 0)$/;"	v
s:helptag_sink	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:helptag_sink(line)$/;"	f
s:hide_linenr	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:hide_linenr()$/;"	f
s:hide_statusline	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:hide_statusline()$/;"	f
s:highlight	.config/nvim/plugged/vim-rails/after/syntax/ruby/rails.vim	/^function! s:highlight(group, ...) abort$/;"	f
s:highlight_groups	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:highlight_groups = ['hid', 0, '', 'sel', 'mod_unsel', 0, 'mod_unsel', 'mod']$/;"	v
s:highlight_keys	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:highlight_keys(str)$/;"	f
s:highlight_timer	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^let s:highlight_timer = -1$/;"	v
s:history	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^function! s:history(arg, bang)$/;"	f
s:history_sink	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_sink(type, lines)$/;"	f
s:history_source	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_source(type)$/;"	f
s:hl_group_exists	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:hl_group_exists(group)$/;"	f
s:hl_groups	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:hl_groups = {}$/;"	v
s:hls_cursor	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:hls_cursor = get(s:gb, g:gruvbox_hls_cursor)$/;"	v
s:hls_cursor	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:hls_cursor = s:orange$/;"	v
s:hooks	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Doautocmd.vim	/^let s:hooks = [$/;"	v
s:hooks_camel	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Doautocmd.vim	/^let s:hooks_camel = [$/;"	v
s:hunk_symbols	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^let s:hunk_symbols = get(g:, 'airline#extensions#hunks#hunk_symbols', ['+', '~', '-'])$/;"	v
s:iTerm_escape_template	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:iTerm_escape_template = '\\033]Pl%s\\033\\\\'$/;"	v
s:icons	.config/nvim/plugged/vista.vim/autoload/vista/renderer.vim	/^let s:icons = {$/;"	v
s:id	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:id = 1$/;"	v
s:id	.vim/plugged/omnisharp-vim/autoload/ctrlp/OmniSharp/findcodeactions.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id	.vim/plugged/omnisharp-vim/autoload/ctrlp/OmniSharp/findsymbols.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:identify_color_mode	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:identify_color_mode()$/;"	f
s:import	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:import(name, ...) abort dict$/;"	f
s:inactive1	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:inactive1 = [s:base07[0], s:base03[0], s:base07[1], s:base03[1]]$/;"	v
s:inactive1	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:inactive1 = [s:base07[0], s:base03[0], s:base07[1], s:base03[1]]$/;"	v
s:inactive2	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:inactive2 = [s:base07[0], s:base01[0], s:base07[1], s:base01[1]]$/;"	v
s:inactive2	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:inactive2 = [s:base07[0], s:base01[0], s:base07[1], s:base01[1]]$/;"	v
s:inactive3	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:inactive3 = [s:base03[0], s:base01[0], s:base03[1], s:base01[1]]$/;"	v
s:inactive3	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:inactive3 = [s:base03[0], s:base01[0], s:base03[1], s:base01[1]]$/;"	v
s:inactive_funcrefs	.vim/plugged/vim-airline/autoload/airline.vim	/^let s:inactive_funcrefs = []$/;"	v
s:inc_highlight	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! s:inc_highlight(re) "{{{$/;"	f
s:include	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:include = &l:include$/;"	v
s:increment	.config/nvim/plugged/vim-textobj-user/t/script-local.vim	/^function! s:increment()$/;"	f
s:indent_access_modifier_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:indent_access_modifier_regex = '\\C^\\s*\\%(protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:indent_level_of	.config/nvim/plugged/vim-textobj-indent/autoload/textobj/indent.vim	/^function! s:indent_level_of(linenr)  "{{{2$/;"	f
s:indent_tags	.config/nvim/plugged/html5.vim/indent/html.vim	/^let s:indent_tags = {}$/;"	v
s:index	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:index(haystack, needle, ...)$/;"	f
s:infer_properties	.config/nvim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:infer_properties	.vim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:init	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:init()$/;"	f
s:init	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:init=0$/;"	v
s:init	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:init()$/;"	f
s:initOpenURL	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:initOpenURL() abort$/;"	f
s:initX	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:initX(trigger)$/;"	f
s:init_buffer	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:init_buffer() abort$/;"	f
s:init_buffer	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:init_buffer() abort$/;"	f
s:init_buffer	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:init_buffer()$/;"	f
s:init_pad	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:init_pad(command)$/;"	f
s:init_prompt	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:init_prompt(context) abort$/;"	f
s:init_prompt	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:init_prompt(context) abort$/;"	f
s:inited	.vim/plugged/leetcode.vim/autoload/leetcode.vim	/^let s:inited = py3eval('leetcode.inited')$/;"	v
s:initial_server_ports	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^let s:initial_server_ports = copy(g:OmniSharp_server_ports)$/;"	v
s:initialize_variables	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^function! s:initialize_variables() abort$/;"	f
s:initialize_variables	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^function! s:initialize_variables() abort$/;"	f
s:inject_snippet	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:inject_snippet(line)$/;"	f
s:input	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/InsertRegister.vim	/^function! s:input(cmdline)$/;"	f
s:input_helper	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:input_helper(funcname, args) abort$/;"	f
s:input_safe	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:input_safe(...) abort$/;"	f
s:inputreplacement	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
s:inputreplacement	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
s:inputtarget	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
s:inputtarget	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
s:insert	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
s:insert	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
s:insert1	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:insert1   = [s:base10[0], s:base0B[0], s:base10[1], s:base0B[1]]$/;"	v
s:insert1	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:insert1   = [s:base10[0], s:base0B[0], s:base10[1], s:base0B[1]]$/;"	v
s:insert2	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:insert2   = [s:base07[0], s:base03[0], s:base07[1], s:base03[1]]$/;"	v
s:insert2	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:insert2   = [s:base07[0], s:base03[0], s:base07[1], s:base03[1]]$/;"	v
s:insert3	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:insert3   = [s:base07[0], s:base01[0], s:base07[1], s:base01[1]]$/;"	v
s:insert3	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:insert3   = [s:base07[0], s:base01[0], s:base07[1], s:base01[1]]$/;"	v
s:install	.config/nvim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:install	.vim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:install	.vim/plugged/fzf/plugin/fzf.vim	/^let s:install = s:base_dir.'\/install'$/;"	v
s:install_plugin	.config/nvim/plugged/emmet-vim/plugin/emmet.vim	/^function! s:install_plugin(mode, buffer)$/;"	f
s:installed	.vim/plugged/fzf/plugin/fzf.vim	/^let s:installed = 0$/;"	v
s:instance	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^let s:instance = {}$/;"	v
s:instance.restore	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:instance.restore() abort$/;"	f
s:interface_mapping_name	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:interface_mapping_name(plugin_name, obj_name, spec_name)  "{{{3$/;"	f
s:internal_options	.config/nvim/plugged/defx.nvim/autoload/defx/init.vim	/^function! s:internal_options() abort$/;"	f
s:intersect	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:intersect(list1, list2) abort$/;"	f
s:invalid	.config/nvim/plugged/targets.vim/autoload/targets/state.vim	/^let s:invalid = 0$/;"	v
s:inverse	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:inverse = ''$/;"	v
s:inverse	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:inverse = 'inverse,'$/;"	v
s:invert_selection	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:invert_selection = ''$/;"	v
s:invert_selection	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:invert_selection = s:inverse$/;"	v
s:invert_signs	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:invert_signs = s:inverse$/;"	v
s:invert_signs	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:invert_signs = ''$/;"	v
s:invert_tabline	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:invert_tabline = s:inverse$/;"	v
s:invert_tabline	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:invert_tabline = ''$/;"	v
s:invertrange	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:invertrange(beg,end)$/;"	f
s:invoke_funcrefs	.vim/plugged/vim-airline/autoload/airline.vim	/^function! s:invoke_funcrefs(context, funcrefs)$/;"	f
s:isNewSelection	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:isNewSelection(visualTarget)$/;"	f
s:is_AppleTerminal	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_AppleTerminal = exists('$TERM_PROGRAM') && $TERM_PROGRAM =~# 'Apple_Terminal'$/;"	v
s:is_absolute	.config/nvim/plugged/defx.nvim/autoload/defx/exrename.vim	/^function! s:is_absolute(path) abort$/;"	f
s:is_branch_empty	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:is_branch_empty()$/;"	f
s:is_cmdwin	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Buffer.vim	/^  function! s:is_cmdwin() abort$/;"	f
s:is_cygwin	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:is_cygwin() abort$/;"	f
s:is_cygwin	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_cygwin	.vim/plugged/omnisharp-vim/autoload/OmniSharp/util.vim	/^function! s:is_cygwin() abort$/;"	f
s:is_dark	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:is_dark=(&background == 'dark')$/;"	v
s:is_dict	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:is_dict(Value) abort$/;"	f
s:is_enabled	.config/nvim/plugged/denite.nvim/autoload/denite/init.vim	/^  let s:is_enabled = 0$/;"	v
s:is_enabled	.vim/plugged/denite.nvim/autoload/denite/init.vim	/^  let s:is_enabled = 0$/;"	v
s:is_excluded_window	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:is_excluded_window()$/;"	f
s:is_float	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:is_float(Value) abort$/;"	f
s:is_funcref	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:is_funcref(Value) abort$/;"	f
s:is_good	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_good = !has('gui_running') && !s:is_win && !s:is_AppleTerminal$/;"	v
s:is_gvim	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^let s:is_gvim = get(v:, 'progname', '') ==# 'gvim'$/;"	v
s:is_gvim	.vim/plugged/coc.nvim/plugin/coc.vim	/^let s:is_gvim = get(v:, 'progname', '') ==# 'gvim'$/;"	v
s:is_iTerm	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_iTerm = exists('$TERM_PROGRAM') && $TERM_PROGRAM =~# 'iTerm.app'$/;"	v
s:is_in_fold	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:is_in_fold(lnum) abort$/;"	f
s:is_input_waiting	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:is_input_waiting(keymapping, input)$/;"	f
s:is_list	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:is_list(Value) abort$/;"	f
s:is_local_plug	.config/nvim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_local_plug	.vim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_mac	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^let s:is_mac = !s:is_windows && !has('win32unix')$/;"	v
s:is_mac	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:is_mac() abort$/;"	f
s:is_mac	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_managed	.config/nvim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_managed	.vim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_msys	.vim/plugged/omnisharp-vim/autoload/OmniSharp/util.vim	/^function! s:is_msys() abort$/;"	f
s:is_non_ui_property_name	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:is_non_ui_property_name(name)$/;"	f
s:is_number	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:is_number(Value) abort$/;"	f
s:is_numeric	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:is_numeric(Value) abort$/;"	f
s:is_preview_window_open	.config/nvim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_preview_window_open	.vim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_string	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:is_string(Value) abort$/;"	f
s:is_ui_property_name	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:is_ui_property_name(name)$/;"	f
s:is_unix	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:is_unix() abort$/;"	f
s:is_unix	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_updated	.config/nvim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_updated	.vim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_vim	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.config/nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.config/nvim/plugged/coc.nvim/autoload/coc/task.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.vim/plugged/coc.nvim/autoload/coc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.vim/plugged/coc.nvim/autoload/coc/snippet.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.vim/plugged/coc.nvim/autoload/coc/task.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	.vim/plugged/coc.nvim/plugin/coc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vital_vim	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:is_vital_vim = s:plugin_name is# 'vital'$/;"	v
s:is_win	.config/nvim/autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:is_win	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:is_win = has("win32") || has("win64")$/;"	v
s:is_win	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:is_win = has("win32") || has("win64")$/;"	v
s:is_win	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	.config/nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	.config/nvim/plugged/fzf.vim/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	.vim/autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:is_win	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:is_win = has("win32") || has("win64")$/;"	v
s:is_win	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:is_win = has("win32") || has("win64")$/;"	v
s:is_win	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	.vim/plugged/coc.nvim/plugin/coc.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	.vim/plugged/fzf/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win32term	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:is_win32term = (has('win32') || has('win64')) &&$/;"	v
s:is_windows	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^let s:is_windows = has('win32') || has('win64')$/;"	v
s:is_windows	.config/nvim/plugged/denite.nvim/autoload/denite/util.vim	/^let s:is_windows = has('win32') || has('win64')$/;"	v
s:is_windows	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:is_windows() abort$/;"	f
s:is_windows	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_windows	.vim/plugged/denite.nvim/autoload/denite/util.vim	/^let s:is_windows = has('win32') || has('win64')$/;"	v
s:is_wsl	.vim/plugged/omnisharp-vim/autoload/OmniSharp/util.vim	/^function! s:is_wsl() abort$/;"	f
s:isdirectory	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:isdirectory(path) abort$/;"	f
s:italic	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:italic = ''$/;"	v
s:italic	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:italic = 'italic,'$/;"	v
s:italic	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^    let s:italic = "italic"$/;"	v
s:italic	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:italic = ""$/;"	v
s:italic	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^    let s:italic = "italic"$/;"	v
s:italic	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:italic = ""$/;"	v
s:italicize_comments	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:italicize_comments = ''$/;"	v
s:italicize_comments	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:italicize_comments = s:italic$/;"	v
s:italicize_strings	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:italicize_strings = s:italic$/;"	v
s:italicize_strings	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:italicize_strings = ''$/;"	v
s:itemno	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! s:itemno(itemno, current) abort$/;"	f
s:javascriptEdit	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:javascriptEdit(cmd,...) abort$/;"	f
s:javascriptList	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:javascriptList(A, L, P, ...) abort$/;"	f
s:job_abort	.config/nvim/autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_abort	.vim/autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_cb	.config/nvim/autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_cb	.vim/autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_exit_cb	.config/nvim/autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_exit_cb	.vim/autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_out_cb	.config/nvim/autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:job_out_cb	.vim/autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:jobs	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^let s:jobs = {}$/;"	v
s:jobstart	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:jobstart = 'jobstart'$/;"	v
s:jobstart	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:jobstart = get(g:, 'yarp_jobstart', 'neovim_rpc#jobstart')$/;"	v
s:join	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:join(arg) abort$/;"	f
s:jump	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump(t, w)$/;"	f
s:jump	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:jump(def, ...) abort$/;"	f
s:jump_to_tab	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:jump_to_tab(offset)$/;"	f
s:jumpargs	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:jumpargs(file, jump) abort$/;"	f
s:jumpopt	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:jumpopt(file) abort$/;"	f
s:just_installed_vim_plug	.config/nvim/plugged.vim	/^let s:just_installed_vim_plug = 0$/;"	v
s:keepcpo	.config/nvim/plugged/dsf.vim/plugin/dsf.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	.config/nvim/plugged/sideways.vim/plugin/sideways.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	.config/nvim/plugged/switch.vim/plugin/switch.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	.config/nvim/plugged/tagalong.vim/plugin/tagalong.vim	/^let s:keepcpo = &cpo$/;"	v
s:key_sink	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:key_sink(line)$/;"	f
s:known_files	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_projects	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:l	.vim/sessions/default.vim	/^let s:l = 1 - ((0 * winheight(0) + 21) \/ 42)$/;"	v
s:l	.vim/sessions/foo.vim	/^let s:l = 1 - ((0 * winheight(0) + 17) \/ 35)$/;"	v
s:l0	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^let s:l0 = -1$/;"	v
s:l1	.config/nvim/plugged/vim-indent-object/plugin/indent-object.vim	/^let s:l1 = -1$/;"	v
s:language_opt	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags.vim	/^let s:language_opt = map(s:language_opt,$/;"	v
s:language_opt	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags.vim	/^let s:language_opt = {$/;"	v
s:languageclient_refresh	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:languageclient_refresh()$/;"	f
s:lastRawTarget	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^let s:lastRawTarget = targets#target#withError('initial')$/;"	v
s:lastTrigger	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^let s:lastTrigger   = "   "$/;"	v
s:last_completion_dictionary	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^let s:last_completion_dictionary = {}$/;"	v
s:last_lnum	.config/nvim/plugged/vista.vim/autoload/vista/floating.vim	/^let s:last_lnum = -1$/;"	v
s:last_lnum	.config/nvim/plugged/vista.vim/autoload/vista/popup.vim	/^let s:last_lnum = -1$/;"	v
s:last_mode	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:last_mode = ''$/;"	v
s:last_non_empty_line	.config/nvim/autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:last_non_empty_line	.vim/autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:last_req_id	.config/nvim/plugged/vista.vim/autoload/vista/executive/vim_lsp.vim	/^let s:last_req_id = 0$/;"	v
s:last_rtp	.config/nvim/autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:last_rtp	.vim/autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:last_vlnum	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^let s:last_vlnum = v:null$/;"	v
s:last_wildignores	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
s:lastline	.config/nvim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:lastline	.vim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:lastmethod	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:lastmethod(...)$/;"	f
s:lastmethodline	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:lastmethodline(start)$/;"	f
s:lastopeningline	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:lastopeningline(pattern,limit,start)$/;"	f
s:launcher	.vim/plugged/fzf/plugin/fzf.vim	/^  let s:launcher = '%s'$/;"	v
s:launcher	.vim/plugged/fzf/plugin/fzf.vim	/^  let s:launcher = function('s:xterm_launcher')$/;"	v
s:layout	.vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:layout = get(g:, 'airline#extensions#default#layout', [$/;"	v
s:layoutEdit	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:layoutEdit(cmd,...) abort$/;"	f
s:layoutList	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:layoutList(A,L,P)$/;"	f
s:layout_keys	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:layout_keys	.vim/plugged/fzf/plugin/fzf.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:lazy	.config/nvim/autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
s:lazy	.vim/autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
s:leading_operator_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:leading_operator_regex = '^\\s*\\%(&\\=\\.\\)'$/;"	v
s:leaving	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:leaving = 0$/;"	v
s:leaving	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^let s:leaving = 0$/;"	v
s:legacy_airline_ale_get_line_number	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:legacy_airline_ale_get_line_number(cnt, type) abort$/;"	f
s:length	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:length(str)$/;"	f
s:lhs_key_list	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^function! s:lhs_key_list(...)$/;"	f
s:light_gold	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:light_gold = "fcf4ae"$/;"	v
s:line_handler	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:line_handler(lines)$/;"	f
s:lines	.config/nvim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:lines	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."/;"	v
s:lines	.config/nvim/plugged/vim-ruby/syntax/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."/;"	v
s:lines	.vim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:links_to	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Highlight.vim	/^function! s:links_to(highlight)$/;"	f
s:load	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:load(...) abort dict$/;"	f
s:load	.config/nvim/plugged/vim-projectionist/plugin/projectionist.vim	/^function! s:load(ns) abort$/;"	f
s:load_256_to_GUI_converter	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:load_256_to_GUI_converter()$/;"	f
s:load_GUI_to_256_converter	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:load_GUI_to_256_converter()$/;"	f
s:load_plugin	.config/nvim/autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:load_plugin	.vim/autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:load_smart_dict	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:load_smart_dict() "{{{$/;"	f
s:loaded	.config/nvim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^let s:loaded = s:FALSE$/;"	v
s:loaded	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:loaded = {}$/;"	v
s:loaded	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^  let s:loaded = {}$/;"	v
s:loaded	.config/nvim/plugged/vim-projectionist/plugin/projectionist.vim	/^  let s:loaded = {}$/;"	v
s:loaded	.vim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:loaded = 1$/;"	v
s:loaded	.vim/plugged/vim-airline/autoload/airline/init.vim	/^let s:loaded = 0$/;"	v
s:loaded_ext	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:loaded_ext = []$/;"	v
s:loaded_names	.config/nvim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:loaded_names	.vim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:localeEdit	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:localeEdit(cmd,...)$/;"	f
s:localeList	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:localeList(A,L,P)$/;"	f
s:localtime	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^    let s:localtime = localtime()$/;"	v
s:localvar	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^function! s:localvar(current, key) abort$/;"	f
s:location_sink	.vim/plugged/omnisharp-vim/autoload/fzf/OmniSharp.vim	/^function! s:location_sink(str) abort$/;"	f
s:lod	.config/nvim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod	.vim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	.config/nvim/autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_cmd	.vim/autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	.config/nvim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_ft	.vim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	.config/nvim/autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:lod_map	.vim/autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:log	.config/nvim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:log(msg)$/;"	f
s:log	.vim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log4	.config/nvim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:log4	.vim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:logfile	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:logfile = tempname()$/;"	v
s:logfile	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:logfile = tempname()$/;"	v
s:logfile	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^let s:logfile = expand('<sfile>:p:h:h:h') . '\/log\/stdio.log'$/;"	v
s:logging	.config/nvim/plugged/emmet-vim/unittest.vim	/^let s:logging = 0$/;"	v
s:logn	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:logn(msg)$/;"	f
s:logpos	.config/nvim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:logpos	.vim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:lpad	.config/nvim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:lpad	.vim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:mac_gui	.config/nvim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:mac_gui	.vim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^function! s:make(keys, values, ...) abort$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:make(...)$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules.vim	/^function! s:make(name, ...)$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^function! s:make()$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Cancel.vim	/^function! s:make()$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/CursorMove.vim	/^function! s:make()$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Delete.vim	/^function! s:make()$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Doautocmd.vim	/^function! s:make(prefix)$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^function! s:make()$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionExit.vim	/^function! s:make(...)$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionMessage.vim	/^function! s:make(...)$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Exit.vim	/^function! s:make()$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/History.vim	/^function! s:make(...)$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/InsertRegister.vim	/^function! s:make()$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/NoInsert.vim	/^function! s:make(chars)$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Paste.vim	/^function! s:make()$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Redraw.vim	/^function! s:make()$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^function! s:make()$/;"	f
s:make	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:make(...)$/;"	f
s:make	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:make(bang, args, ...)$/;"	f
s:make_emacs	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/KeyMapping.vim	/^function! s:make_emacs()$/;"	f
s:make_index	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^function! s:make_index(list, ...) abort$/;"	f
s:make_plain	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^function! s:make_plain()$/;"	f
s:make_special_chars	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/NoInsert.vim	/^function! s:make_special_chars()$/;"	f
s:make_vim_cmdline_mapping	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/KeyMapping.vim	/^function! s:make_vim_cmdline_mapping()$/;"	f
s:manual_update_tags	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
s:map	.config/nvim/plugged/vim-ninja-feet/plugin/ninja-feet.vim	/^function! s:map(lhs, rhs, mode)$/;"	f
s:map	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:map(mode, flags, map) abort$/;"	f
s:map	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:map(forced_p, lhs, rhs)$/;"	f
s:map_accum	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:map_accum(expr, xs, init) abort$/;"	f
s:map_expr	.config/nvim/plugged/vim-ninja-feet/plugin/ninja-feet.vim	/^function! s:map_expr(sid, type, direction, count)$/;"	f
s:map_gf	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:map_gf() abort$/;"	f
s:map_keys	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:map_keys()$/;"	f
s:map_next	.config/nvim/plugged/coc.nvim/autoload/coc/snippet.vim	/^let s:map_next = 1$/;"	v
s:map_next	.vim/plugged/coc.nvim/autoload/coc/snippet.vim	/^let s:map_next = 1$/;"	v
s:mapargs_pair_select	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:mapargs_pair_select(lhs, pattern1, pattern2, flags, previous_mode)$/;"	f
s:mapargs_single_move	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:mapargs_single_move(lhs, pattern, flags, previous_mode)$/;"	f
s:mapargs_single_select	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:mapargs_single_select(lhs, pattern, flags, previous_mode)$/;"	f
s:mapkeys	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        fun! s:mapkeys(keys, plug)$/;"	f
s:mappings	.config/nvim/plugged/targets.vim/autoload/targets/mappings.vim	/^let s:mappings = {}$/;"	v
s:maps_nop	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:maps_nop()$/;"	f
s:maps_resize	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:maps_resize()$/;"	f
s:mark_sink	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:mark_sink(lines)$/;"	f
s:match	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:match(file, pattern) abort$/;"	f
s:match_cursor	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:match_cursor(pat) abort$/;"	f
s:match_it	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:match_it(pat, repl) abort$/;"	f
s:match_key	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Keymapping.vim	/^function! s:match_key(keymapping, key)$/;"	f
s:match_method	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:match_method(func, ...) abort$/;"	f
s:match_partial	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:match_partial(func) abort$/;"	f
s:match_symbol	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:match_symbol(sym) abort$/;"	f
s:match_type	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:match_type(type,...)$/;"	f
s:match_words	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:match_words = ""$/;"	v
s:max_by	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^function! s:max_by(dict, expr) abort$/;"	f
s:max_by	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:max_by(list, expr) abort$/;"	f
s:maximal_number_of_compared_movments	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^let s:maximal_number_of_compared_movments = 10000$/;"	v
s:me	.config/nvim/autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:me	.vim/autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:merge_opts	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:merge_opts(dict, eopts)$/;"	f
s:mextargs	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:mextargs(str,num)$/;"	f
s:migrationEdit	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:migrationEdit(cmd,...)$/;"	f
s:migrationList	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:migrationList(A,L,P)$/;"	f
s:migspc	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:migspc(line)$/;"	f
s:min_by	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^function! s:min_by(dict, expr) abort$/;"	f
s:min_by	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:min_by(list, expr) abort$/;"	f
s:mkdir_p	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:mkdir_p(path) abort$/;"	f
s:mkdir_p	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:mkdir_p(path) abort$/;"	f
s:mkeep	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:mkeep(str)$/;"	f
s:model	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:model(...)$/;"	f
s:modep	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^let s:modep = "[nvoicsxl]"$/;"	v
s:modifyTarget	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:modifyTarget(target, modifier)$/;"	f
s:mods	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:mods(mods) abort$/;"	f
s:module	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^let s:module = {$/;"	v
s:module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^let s:module = {$/;"	v
s:module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Cancel.vim	/^let s:module = {$/;"	v
s:module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/CursorMove.vim	/^let s:module = {$/;"	v
s:module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Delete.vim	/^let s:module = {$/;"	v
s:module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Doautocmd.vim	/^let s:module = {$/;"	v
s:module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^let s:module = {$/;"	v
s:module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionExit.vim	/^let s:module = {$/;"	v
s:module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionMessage.vim	/^let s:module = {$/;"	v
s:module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Exit.vim	/^let s:module = {$/;"	v
s:module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/History.vim	/^let s:module = {$/;"	v
s:module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/InsertRegister.vim	/^let s:module = {$/;"	v
s:module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/NoInsert.vim	/^let s:module = {$/;"	v
s:module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Paste.vim	/^let s:module = {$/;"	v
s:module	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Redraw.vim	/^let s:module = {$/;"	v
s:module.complete	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^function! s:module.complete(cmdline)$/;"	f
s:module.get_complete_words	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^function! s:module.get_complete_words()$/;"	f
s:module.histories	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/History.vim	/^function! s:module.histories()$/;"	f
s:module.is_no_insert	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/NoInsert.vim	/^function! s:module.is_no_insert(char)$/;"	f
s:module.message	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionMessage.vim	/^function! s:module.message(...)$/;"	f
s:module.on_char	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/InsertRegister.vim	/^function! s:module.on_char(cmdline)$/;"	f
s:module.on_char_pre	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! s:module.on_char_pre(cmdline)$/;"	f
s:module.on_char_pre	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^function! s:module.on_char_pre(cmdline)$/;"	f
s:module.on_char_pre	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Cancel.vim	/^function! s:module.on_char_pre(cmdline)$/;"	f
s:module.on_char_pre	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/CursorMove.vim	/^function! s:module.on_char_pre(cmdline)$/;"	f
s:module.on_char_pre	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Delete.vim	/^function! s:module.on_char_pre(cmdline)$/;"	f
s:module.on_char_pre	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Exit.vim	/^function! s:module.on_char_pre(cmdline)$/;"	f
s:module.on_char_pre	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/History.vim	/^function! s:module.on_char_pre(cmdline)$/;"	f
s:module.on_char_pre	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/InsertRegister.vim	/^function! s:module.on_char_pre(cmdline)$/;"	f
s:module.on_char_pre	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/NoInsert.vim	/^function! s:module.on_char_pre(cmdline)$/;"	f
s:module.on_char_pre	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Paste.vim	/^function! s:module.on_char_pre(cmdline)$/;"	f
s:module.on_draw	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^function! s:module.on_draw(cmdline)$/;"	f
s:module.on_draw_pre	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^function! s:module.on_draw_pre(...)$/;"	f
s:module.on_draw_pre	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^function! s:module.on_draw_pre(cmdline)$/;"	f
s:module.on_draw_pre	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionMessage.vim	/^function! s:module.on_draw_pre(cmdline)$/;"	f
s:module.on_enter	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/History.vim	/^function! s:module.on_enter(...)$/;"	f
s:module.on_enter	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/InsertRegister.vim	/^function! s:module.on_enter(...)$/;"	f
s:module.on_enter	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Redraw.vim	/^function! s:module.on_enter(...)$/;"	f
s:module.on_exception	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionExit.vim	/^function! s:module.on_exception(cmdline)$/;"	f
s:module.on_exception	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionMessage.vim	/^function! s:module.on_exception(cmdline)$/;"	f
s:module.on_execute	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Redraw.vim	/^function! s:module.on_execute(...)$/;"	f
s:module.on_execute_failed	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Redraw.vim	/^function! s:module.on_execute_failed(...)$/;"	f
s:module.on_execute_pre	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^function! s:module.on_execute_pre(...)$/;"	f
s:module.on_execute_pre	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Redraw.vim	/^function! s:module.on_execute_pre(cmdline)$/;"	f
s:module.on_leave	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^function! s:module.on_leave(cmdline)$/;"	f
s:module.on_leave	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^function! s:module.on_leave(...)$/;"	f
s:module.on_leave	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionMessage.vim	/^function! s:module.on_leave(cmdline)$/;"	f
s:module.on_leave	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Redraw.vim	/^function! s:module.on_leave(cmdline)$/;"	f
s:module.redraw	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Redraw.vim	/^function! s:module.redraw(cmdline)$/;"	f
s:module.reset	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/InsertRegister.vim	/^function! s:module.reset()$/;"	f
s:modules	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^let s:modules = s:V.import("Over.Commandline.Modules")$/;"	v
s:motion_map_helper	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^function! s:motion_map_helper(motions) "{{{$/;"	f
s:move	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:move(pattern, ...) abort$/;"	f
s:move	.config/nvim/plugged/vim-textobj-user/t/move.vim	/^function! s:move(type, count)$/;"	f
s:move_f	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:move_f(...) abort$/;"	f
s:move_f2	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:move_f2() abort$/;"	f
s:move_function_wrapper	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:move_function_wrapper(function_name, spec_name, previous_mode)$/;"	f
s:move_to_win	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:move_to_win(winnr) abort$/;"	f
s:move_to_winpos	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:move_to_winpos(winpos) abort$/;"	f
s:move_wrapper	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:move_wrapper(patterns, flags, previous_mode)$/;"	f
s:mq_jobs	.vim/plugged/vim-airline/autoload/airline/async.vim	/^let s:mq_jobs        = {}$/;"	v
s:mx	.config/nvim/plugged/emmet-vim/autoload/emmet/lang/html.vim	/^let s:mx = '\\([+>]\\|[<^]\\+\\)\\{-}'$/;"	v
s:name	.config/nvim/plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:name = 'coc'$/;"	v
s:name	.vim/plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:name = 'coc'$/;"	v
s:names	.config/nvim/autoload/plug.vim	/^function! s:names(...)$/;"	f
s:names	.config/nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:names = { '~': 'Tilde', '`': 'BackQuote', '!': 'Bang', '@': 'At', '#': 'Hash', '$': 'Dolla/;"	v
s:names	.vim/autoload/plug.vim	/^function! s:names(...)$/;"	f
s:names	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:names = {'0': 'index', '1': 'orig', '2':'fetch', '3':'merge'}$/;"	v
s:namespace_cache	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^let s:namespace_cache = {}$/;"	v
s:namespace_cache	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^let s:namespace_cache = {}$/;"	v
s:namespace_id	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^let s:namespace_id = 1$/;"	v
s:namespace_id	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^let s:namespace_id = 1$/;"	v
s:nbs	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:nbs = nr2char(0x2007)$/;"	v
s:new	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:new(plugin_name) abort$/;"	f
s:new_airline_ale_get_line_number	.vim/plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:new_airline_ale_get_line_number(cnt, type) abort$/;"	f
s:new_filter_buffer	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:new_filter_buffer(context) abort$/;"	f
s:new_filter_buffer	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:new_filter_buffer(context) abort$/;"	f
s:new_overwin	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:new_overwin(...) abort$/;"	f
s:new_window	.config/nvim/autoload/plug.vim	/^function! s:new_window()$/;"	f
s:new_window	.vim/autoload/plug.vim	/^function! s:new_window()$/;"	f
s:newmoon	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:newmoon = "2a2e38"$/;"	v
s:newmoon	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:newmoon = "2a2e38"$/;"	v
s:nextseq	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^let s:nextseq = 1001$/;"	v
s:ninja_append	.config/nvim/plugged/vim-ninja-feet/plugin/ninja-feet.vim	/^function! s:ninja_append(mode)$/;"	f
s:ninja_insert	.config/nvim/plugged/vim-ninja-feet/plugin/ninja-feet.vim	/^function! s:ninja_insert(mode)$/;"	f
s:ninja_prepare	.config/nvim/plugged/vim-ninja-feet/plugin/ninja-feet.vim	/^function! s:ninja_prepare(mode, direction, count)$/;"	f
s:ninja_strike	.config/nvim/plugged/vim-ninja-feet/plugin/ninja-feet.vim	/^function! s:ninja_strike(mode)$/;"	f
s:nomodeline	.vim/plugged/vim-airline/autoload/airline/util.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has("patch438"))) ? '<nomodeline>' :/;"	v
s:non_bracket_continuation_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:non_bracket_continuation_regex =$/;"	v
s:non_ui_property_names	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^let s:non_ui_property_names = [$/;"	v
s:non_zero_only	.vim/plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^let s:non_zero_only = get(g:, 'airline#extensions#hunks#non_zero_only', 0)$/;"	v
s:none	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:none = ['NONE', 'NONE']$/;"	v
s:none	.config/nvim/plugged/oceanic-next/colors/OceanicNext.vim	/^  let s:none=['NONE', 'NONE']$/;"	v
s:none	.config/nvim/plugged/oceanic-next/colors/OceanicNextLight.vim	/^  let s:none=['NONE', 'NONE']$/;"	v
s:nonempty	.config/nvim/plugged/targets.vim/autoload/targets/state.vim	/^let s:nonempty = 2$/;"	v
s:noremap	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:noremap(forced_p, lhs, rhs)$/;"	f
s:normal1	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:normal1   = [s:base10[0], s:base0C[0], s:base10[1], s:base0C[1]]$/;"	v
s:normal1	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:normal1   = [s:base10[0], s:base0C[0], s:base10[1], s:base0C[1]]$/;"	v
s:normal2	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:normal2   = [s:base07[0], s:base03[0], s:base07[1], s:base03[1]]$/;"	v
s:normal2	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:normal2   = [s:base07[0], s:base03[0], s:base07[1], s:base03[1]]$/;"	v
s:normal3	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:normal3   = [s:base07[0], s:base01[0], s:base07[1], s:base01[1]]$/;"	v
s:normal3	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:normal3   = [s:base07[0], s:base01[0], s:base07[1], s:base01[1]]$/;"	v
s:normalize	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:normalize(obj_specs)$/;"	f
s:normalize_path	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:normalize_path(unnormalized_path)$/;"	f
s:normalize_property_names	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:normalize_property_names(obj_specs)$/;"	f
s:normalize_property_values	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:normalize_property_values(obj_specs)$/;"	f
s:notify	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:notify(method, args) dict$/;"	f
s:notify	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:notify(method, args) dict$/;"	f
s:nscall	.config/nvim/plugged/vim-projectionist/plugin/projectionist.vim	/^function! s:nscall(ns, fn, path, ...) abort$/;"	f
s:number_column	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:number_column = get(s:gb, g:gruvbox_number_column)$/;"	v
s:number_column	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:number_column = s:none$/;"	v
s:number_map	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:number_map = &encoding == 'utf-8'$/;"	v
s:number_map	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:number_map = {$/;"	v
s:nvim	.config/nvim/autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim	.vim/autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim_cb	.config/nvim/autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:nvim_cb	.vim/autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:nvim_job_exit_wrapper	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
s:nvim_job_out_wrapper	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
s:nvim_mq_job_handler	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_mq_job_handler(job_id, data, event) dict$/;"	f
s:nvim_output_handler	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_output_handler(job_id, data, event) dict$/;"	f
s:nvim_po_job_handler	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_po_job_handler(job_id, data, event) dict$/;"	f
s:nvim_untracked_job_handler	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_untracked_job_handler(job_id, data, event) dict$/;"	f
s:objmap	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:objmap(forced_p, lhs, rhs)$/;"	f
s:objnoremap	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:objnoremap(forced_p, lhs, rhs)$/;"	f
s:off_screen_search	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! s:off_screen_search(re) "{{{$/;"	f
s:old_width	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^let s:old_width = 0$/;"	v
s:omit	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^function! s:omit(dict, keys) abort$/;"	f
s:on_async_response	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_async_response(id, resp, isErr) dict$/;"	f
s:on_async_response	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_async_response(id, resp, isErr) dict$/;"	f
s:on_colorscheme_changed	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:on_colorscheme_changed()$/;"	f
s:on_cursor_moved	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:on_cursor_moved()$/;"	f
s:on_exit	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_exit(name, code) abort$/;"	f
s:on_exit	.config/nvim/plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_exit(id, code) abort$/;"	f
s:on_exit	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! s:on_exit(_job, _data, _event) abort dict$/;"	f
s:on_exit	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_exit(name, code) abort$/;"	f
s:on_exit	.vim/plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_exit(id, code) abort$/;"	f
s:on_exit_clean	.vim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:on_exit_clean(...) dict abort$/;"	f
s:on_exit_mq	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_mq(channel) dict abort$/;"	f
s:on_exit_po	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_po(channel) dict abort$/;"	f
s:on_exit_untracked	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_untracked(channel) dict abort$/;"	f
s:on_stderr	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_stderr(name, msgs)$/;"	f
s:on_stderr	.config/nvim/plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_stderr(id, msgs)$/;"	f
s:on_stderr	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_stderr(name, msgs)$/;"	f
s:on_stderr	.vim/plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_stderr(id, msgs)$/;"	f
s:on_stdout	.config/nvim/plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_stdout(id, msgs)$/;"	f
s:on_stdout	.vim/plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_stdout(id, msgs)$/;"	f
s:on_stdout	.vim/plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_stdout(channel, msg) dict abort$/;"	f
s:on_window_changed	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:on_window_changed(event)$/;"	f
s:op_command_command	.config/nvim/plugged/vim-operator-user/t/example-b-advanced.vim	/^let s:op_command_command = ''$/;"	v
s:open	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:open(cmd, target)$/;"	f
s:open	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Buffer.vim	/^function! s:open(buffer, opener) abort$/;"	f
s:open	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:open(cmd, file) abort$/;"	f
s:open	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:open(cmd, target)$/;"	f
s:open_projection	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:open_projection(mods, edit, variants, ...) abort$/;"	f
s:opening_end_regex	.config/nvim/plugged/tagalong.vim/autoload/tagalong.vim	/^let s:opening_end_regex = '\\%(\\_[^>]\\{-}\\_[^\\\/]\\)\\=>'$/;"	v
s:opening_regex	.config/nvim/plugged/tagalong.vim/autoload/tagalong.vim	/^let s:opening_regex     = '<\\zs\\k[^>\/[:space:]]*'$/;"	v
s:opfunc	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc(type, ...) abort " {{{1$/;"	f
s:opfunc	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc(type, ...) abort " {{{1$/;"	f
s:opfunc2	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc2(...) abort$/;"	f
s:opfunc2	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc2(...) abort$/;"	f
s:option	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^let s:option = {}$/;"	v
s:option.restore	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:option.restore() abort$/;"	f
s:or	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:or(xs) abort$/;"	f
s:orange	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:orange = s:getGruvColor('GruvboxOrange')$/;"	v
s:orange	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:orange = s:gb.bright_orange$/;"	v
s:orange	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:orange = s:gb.faded_orange$/;"	v
s:osascript	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:osascript(...) abort$/;"	f
s:osascript	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:osascript(...) abort$/;"	f
s:overwin	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^let s:overwin = {$/;"	v
s:overwin.choose_prompt	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:overwin.choose_prompt(hint_dict) abort$/;"	f
s:overwin.gather_poses_overwin	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:overwin.gather_poses_overwin(pattern) abort$/;"	f
s:overwin.pattern	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:overwin.pattern(pattern) abort$/;"	f
s:overwin.restore_options	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:overwin.restore_options() abort$/;"	f
s:overwin.select_winpos	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:overwin.select_winpos(winnr2poses, keys) abort$/;"	f
s:overwin.set_options	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:overwin.set_options() abort$/;"	f
s:overwrite	.vim/plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^let s:overwrite = get(g:, 'airline#extensions#bufferline#overwrite_variables', 1)$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p = {'normal':{}, 'inactive':{}, 'insert':{}, 'replace':{}, 'visual':{}, 'tabline':{}, '/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.inactive.left =  [ [ s:bg4, s:bg1 ], [ s:bg4, s:bg1 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.inactive.middle = [ [ s:bg4, s:bg1 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.inactive.right = [ [ s:bg4, s:bg1 ], [ s:bg4, s:bg1 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.insert.left = [ [ s:bg0, s:blue, 'bold' ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.insert.middle = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.insert.right = [ [ s:bg0, s:blue ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.error = [ [ s:bg0, s:orange ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.left = [ [ s:bg0, s:fg4, 'bold' ], [ s:fg4, s:bg2 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.middle = [ [ s:fg4, s:bg1 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.right = [ [ s:bg0, s:fg4 ], [ s:fg4, s:bg2 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.warning = [ [ s:bg2, s:yellow ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.replace.left = [ [ s:bg0, s:aqua, 'bold' ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.replace.middle = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.replace.right = [ [ s:bg0, s:aqua ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.left = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.middle = [ [ s:bg0, s:bg0 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.right = [ [ s:bg0, s:orange ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.tabsel = [ [ s:bg0, s:fg4 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.terminal.left = [ [ s:bg0, s:green, 'bold' ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.terminal.middle = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.terminal.right = [ [ s:bg0, s:green ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.visual.left = [ [ s:bg0, s:orange, 'bold' ], [ s:bg0, s:bg4 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.visual.middle = [ [ s:fg4, s:bg1 ] ]$/;"	v
s:p	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.visual.right = [ [ s:bg0, s:orange ], [ s:bg0, s:bg4 ] ]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p = {"normal": {}, "inactive": {}, "insert": {}, "replace": {}, "visual": {}, "tabline": {/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.inactive.left = [[["#d8dee9", 253], ["#65737e", 243]], [["#d8dee9", 253], ["#343d46", 23/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.inactive.middle = [[["#65737e", 243], ["#343d46", 237]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.inactive.right = [[["#d8dee9", 253], ["#343d46", 237]], [["#d8dee9", 253], ["#65737e", 2/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.insert.left = [[["#ffffff", 15], ["#99c794", 114]], [["#ffffff", 15], ["#65737e", 243]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.insert.middle = [[["#ffffff", 15], ["#343d46", 237]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.insert.right = [[["#ffffff", 15], ["#65737e", 243]], [["#ffffff", 15], ["#99c794", 114]]/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.normal.error = [[["#ffffff", 15], ["#ec5f67", 203]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.normal.left = [[["#ffffff", 15], ["#6699cc", 68]], [["#ffffff", 15], ["#65737e", 243]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.normal.middle = [[["#ffffff", 15], ["#343d46", 237]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.normal.right = [[["#ffffff", 15], ["#65737e", 243]], [["#ffffff", 15], ["#65737e", 243]]/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.normal.warning = [[["#ffffff", 15], ["#fac863", 221]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.replace.left = [[["#ffffff", 15], ["#ec5f67", 203]], [["#ffffff", 15], ["#65737e", 243]]/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.replace.middle = [[["#ffffff", 15], ["#343d46", 237]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.replace.right = [[["#ffffff", 15], ["#65737e", 243]], [["#ffffff", 15], ["#ec5f67", 203]/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.tabline.left = [[["#65737e", 243], ["#343d46", 237]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.tabline.middle = [[["#65737e", 243], ["#343d46", 237]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.tabline.right = [[["#65737e", 243], ["#343d46", 237]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.tabline.tabsel = [[["#ffffff", 15], ["#65737e", 243]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.visual.left = [[["#ffffff", 15], ["#f99157", 209]], [["#ffffff", 15], ["#65737e", 243]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.visual.middle = [[["#ffffff", 15], ["#343d46", 237]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnext.vim	/^let s:p.visual.right = [[["#ffffff", 15], ["#65737e", 243]], [["#ffffff", 15], ["#f99157", 209]]/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p = {"normal": {}, "inactive": {}, "insert": {}, "replace": {}, "visual": {}, "tabline": {/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.inactive.left = [[["#1b2b34", 235], ["#a7adba", 145]], [["#1b2b34", 235], ["#cdd3de", 25/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.inactive.middle = [[["#a7adba", 145], ["#cdd3de", 252]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.inactive.right = [[["#1b2b34", 235], ["#cdd3de", 252]], [["#1b2b34", 235], ["#a7adba", 1/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.insert.left = [[["#ffffff", 15], ["#869235", 101]], [["#ffffff", 15], ["#a7adba", 145]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.insert.middle = [[["#ffffff", 15], ["#cdd3de", 252]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.insert.right = [[["#ffffff", 15], ["#a7adba", 145]], [["#ffffff", 15], ["#869235", 101]]/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.normal.error = [[["", ], ["", ]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.normal.left = [[["#ffffff", 15], ["#526f93", 60]], [["#ffffff", 15], ["#a7adba", 145]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.normal.middle = [[["#ffffff", 15], ["#cdd3de", 252]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.normal.right = [[["#ffffff", 15], ["#a7adba", 145]], [["#ffffff", 15], ["#a7adba", 145]]/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.normal.warning = [[["", ], ["", ]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.replace.left = [[["#ffffff", 15], ["#b40b11", 124]], [["#ffffff", 15], ["#a7adba", 145]]/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.replace.middle = [[["#ffffff", 15], ["#cdd3de", 252]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.replace.right = [[["#ffffff", 15], ["#a7adba", 145]], [["#ffffff", 15], ["#b40b11", 124]/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.tabline.left = [[["#a7adba", 145], ["#cdd3de", 252]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.tabline.middle = [[["#a7adba", 145], ["#cdd3de", 252]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.tabline.right = [[["#a7adba", 145], ["#cdd3de", 252]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.tabline.tabsel = [[["#ffffff", 15], ["#a7adba", 145]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.visual.left = [[["#ffffff", 15], ["#b4713d", 131]], [["#ffffff", 15], ["#a7adba", 145]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.visual.middle = [[["#ffffff", 15], ["#cdd3de", 252]]]$/;"	v
s:p	.config/nvim/plugged/oceanic-next/autoload/lightline/colorscheme/oceanicnextlight.vim	/^let s:p.visual.right = [[["#ffffff", 15], ["#a7adba", 145]], [["#ffffff", 15], ["#b4713d", 131]]/;"	v
s:padding	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^let s:padding = s:spc . s:spc . s:spc$/;"	v
s:parse	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Highlight.vim	/^function! s:parse(highlight)$/;"	f
s:parse	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:parse(mods, args) abort$/;"	f
s:parse_arg	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:parse_arg(arg)$/;"	f
s:parse_args	.config/nvim/plugged/vim-after-object/autoload/after_object.vim	/^function! s:parse_args(args)$/;"	f
s:parse_cmdarg	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Buffer.vim	/^function! s:parse_cmdarg(...) abort$/;"	f
s:parse_lhs	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^function! s:parse_lhs(text, ...)$/;"	f
s:parse_lhs_list	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^function! s:parse_lhs_list(...)$/;"	f
s:parse_options	.config/nvim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:parse_options	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! s:parse_options(cmdline) abort$/;"	f
s:parse_options	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! s:parse_options(cmdline) abort$/;"	f
s:parse_options	.vim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:parse_options	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! s:parse_options(cmdline) abort$/;"	f
s:parse_to_name	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Highlight.vim	/^function! s:parse_to_name(highlight)$/;"	f
s:partition	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:partition(f, xs) abort$/;"	f
s:parts	.vim/plugged/vim-airline/autoload/airline/parts.vim	/^let s:parts = {}$/;"	v
s:path	.config/nvim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:path	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:path(path, ...) abort$/;"	f
s:path	.config/nvim/plugged/vim-rails/after/syntax/ruby/rails.vim	/^let s:path = tr(expand('%:p'), '\\', '\/')$/;"	v
s:path	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:path = &l:path$/;"	v
s:path	.vim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:path2directory	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:path2directory(path) abort$/;"	f
s:path2project_directory	.config/nvim/plugged/denite.nvim/autoload/denite/project.vim	/^function! s:path2project_directory(path, root_markers) abort$/;"	f
s:path2project_directory	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:path2project_directory(path, ...) abort$/;"	f
s:path2project_directory	.vim/plugged/denite.nvim/autoload/denite/project.vim	/^function! s:path2project_directory(path, root_markers) abort$/;"	f
s:path_addition	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:path_addition(file) abort$/;"	f
s:pathjoin	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:pathjoin(...) abort$/;"	f
s:pathsplit	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:pathsplit(path) abort$/;"	f
s:pattern	.config/nvim/plugged/vim-textobj-user/t/move.vim	/^let s:pattern = '<\\a\\+>'$/;"	v
s:pattern	.config/nvim/plugged/vista.vim/syntax/vista_kind.vim	/^let s:pattern = join(s:prefixes, '\\|')$/;"	v
s:permutations	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:permutations(list, ...) abort$/;"	f
s:pick	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^function! s:pick(dict, keys) abort$/;"	f
s:pink	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:pink = "FCDBD9"$/;"	v
s:pink	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:pink = "FBC4C1"$/;"	v
s:pluck	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:pluck(dict, key, default)$/;"	f
s:plug_buf	.config/nvim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_buf	.vim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	.config/nvim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_src	.vim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	.config/nvim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_tab	.vim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_window_exists	.config/nvim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:plug_window_exists	.vim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:plugin	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^let s:plugin = {}$/;"	v
s:plugin	.vim/plugged/coc.nvim/src/__tests__/vimrc	/^let s:plugin = s:dir.'\/plugins'$/;"	v
s:plugin.define_default_key_mappings	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:plugin.define_default_key_mappings(banged_p)  "{{{3$/;"	f
s:plugin.define_interface_key_mappings	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:plugin.define_interface_key_mappings()  "{{{3$/;"	f
s:plugin.do_by_function	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:plugin.do_by_function(spec_name, obj_name, previous_mode)$/;"	f
s:plugin.do_by_pattern	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:plugin.do_by_pattern(spec_name, obj_name, previous_mode)$/;"	f
s:plugin.interface_mapping_name	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:plugin.interface_mapping_name(obj_name, spec_name)  "{{{3$/;"	f
s:plugin.new	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:plugin.new(plugin_name, obj_specs)$/;"	f
s:plugin.normalize	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:plugin.normalize()$/;"	f
s:plugin_name	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:plugin_name() abort dict$/;"	f
s:plugin_name	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:plugin_name = expand('<sfile>:t:r')$/;"	v
s:plugin_root_dir	.vim/plugged/ghost-text.vim/plugin/ghost-text.vim	/^let s:plugin_root_dir = fnamemodify(resolve(expand('<sfile>:p')), ':h')$/;"	v
s:plugin_root_dir	.vim/plugged/ghost-text.vim/python3/test/test_vim_buffer.vim	/^let s:plugin_root_dir = fnamemodify(resolve(expand('<sfile>:p')), ':h')$/;"	v
s:plugin_root_dir	.vim/plugged/omnisharp-vim/autoload/OmniSharp/util.vim	/^let s:plugin_root_dir = expand('<sfile>:p:h:h:h')$/;"	v
s:po_jobs	.vim/plugged/vim-airline/autoload/airline/async.vim	/^let s:po_jobs        = {}$/;"	v
s:po_output	.vim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:po_output(buf, file)$/;"	f
s:pop	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:pop(list) abort$/;"	f
s:pop_command	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:pop_command() abort$/;"	f
s:pop_command	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:pop_command()$/;"	f
s:popup_timer	.config/nvim/plugged/vista.vim/autoload/vista/popup.vim	/^let s:popup_timer = -1$/;"	v
s:pos	.config/nvim/plugged/vim-rails/ftplugin/railslog.vim	/^  let s:pos = getpos('.')$/;"	v
s:pos2hint_to_line2col2hint	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:pos2hint_to_line2col2hint(pos2hint) abort$/;"	f
s:pos2poskey	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:pos2poskey(pos) abort$/;"	f
s:pos_headp	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:pos_headp(pos)$/;"	f
s:pos_lastp	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:pos_lastp(pos)$/;"	f
s:pos_le	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:pos_le(pos1, pos2)  " less than or equal$/;"	f
s:position	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! s:position(line, column, context)$/;"	f
s:poskey2pos	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:poskey2pos(poskey) abort$/;"	f
s:prefix	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Exception.vim	/^let s:prefix = printf("vital-over(%s) Exception", s:vname)$/;"	v
s:prefixes	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^let s:prefixes = {$/;"	v
s:prefixes	.config/nvim/plugged/vista.vim/syntax/vista_kind.vim	/^let s:prefixes = filter($/;"	v
s:prepare	.config/nvim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:prepare	.vim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:prepareRepeat	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:prepareRepeat(typed)$/;"	f
s:prepareReselect	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:prepareReselect(context)$/;"	f
s:prepare_movement	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:prepare_movement(previous_mode)$/;"	f
s:prepend_opts	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:prepend_opts(dict, eopts)$/;"	f
s:present	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:present(dict, ...)$/;"	f
s:preview_commit	.config/nvim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:preview_commit	.vim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:priorities	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let s:priorities = {$/;"	v
s:process	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
s:process	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
s:process_options_file	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
s:product	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:product(lists) abort$/;"	f
s:progress_bar	.config/nvim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_bar	.vim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	.config/nvim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:progress_opt	.vim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:project	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:project(...) abort$/;"	f
s:project	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:project(...) abort$/;"	f
s:project_alter_buffer_paths	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:project_alter_buffer_paths() dict abort$/;"	f
s:project_dependencies	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:project_dependencies(gem, ...) dict abort$/;"	f
s:project_gems	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:project_gems() dict abort$/;"	f
s:project_has	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:project_has(gem) dict abort$/;"	f
s:project_lock	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:project_lock() dict abort$/;"	f
s:project_locked	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:project_locked() dict abort$/;"	f
s:project_makeprg	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:project_makeprg() dict abort$/;"	f
s:project_manifest	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:project_manifest() dict abort$/;"	f
s:project_path	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:project_path(...) dict abort$/;"	f
s:project_paths	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:project_paths(...) dict abort$/;"	f
s:project_projections_list	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:project_projections_list() dict abort$/;"	f
s:project_prototype	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^let s:project_prototype = {}$/;"	v
s:project_prototype	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^let s:project_prototype = {}$/;"	v
s:project_real	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:project_real(...) dict abort$/;"	f
s:project_real	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:project_real(...) dict abort$/;"	f
s:project_root	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:project_root = expand('<sfile>:h:h:h')$/;"	v
s:project_ruby_include_path	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:project_ruby_include_path() dict abort$/;"	f
s:project_sink	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^function! s:project_sink(line) abort$/;"	f
s:project_sorted	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:project_sorted() dict abort$/;"	f
s:project_tags	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:project_tags() dict abort$/;"	f
s:project_versions	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:project_versions() dict abort$/;"	f
s:projection_complete	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:projection_complete(lead, cmdline, _) abort$/;"	f
s:projection_pairs	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:projection_pairs(options)$/;"	f
s:projectionist_max_file_recursion	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^let s:projectionist_max_file_recursion = 3$/;"	v
s:projections	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^let s:projections = {$/;"	v
s:projections_for_gems	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:projections_for_gems = {}$/;"	v
s:projects	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^let s:projects = {}$/;"	v
s:projects	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^let s:projects = {}$/;"	v
s:prompt_snapshot_file	.vim/plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^let s:prompt_snapshot_file = get(g:, 'airline#extensions#promptline#snapshot_file', '')$/;"	v
s:prop_id	.config/nvim/plugged/coc.nvim/autoload/coc/api.vim	/^let s:prop_id = 1000$/;"	v
s:prop_id	.vim/plugged/coc.nvim/autoload/coc/api.vim	/^let s:prop_id = 1000$/;"	v
s:proper_visual_mode	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:proper_visual_mode(lhs)$/;"	f
s:prototype	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^let s:prototype = {}$/;"	v
s:prototype	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^let s:prototype = {}$/;"	v
s:prototype	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^let s:prototype.overflow_group = 'airline_tab'$/;"	v
s:prototype.add_raw	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_raw(text) dict$/;"	f
s:prototype.add_section	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_section(group, contents) dict$/;"	f
s:prototype.add_section_spaced	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_section_spaced(group, contents) dict$/;"	f
s:prototype.build	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.build() dict$/;"	f
s:prototype.build	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.build() dict$/;"	f
s:prototype.get_position	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.get_position() dict$/;"	f
s:prototype.insert_raw	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.insert_raw(text, position) dict$/;"	f
s:prototype.insert_section	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.insert_section(group, contents, position) dict$/;"	f
s:prototype.insert_titles	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.insert_titles(current, first, last) dict$/;"	f
s:prototype.split	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.split(...) dict$/;"	f
s:prototype.try_insert_title	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.try_insert_title(index, group, pos, sep_size, force) dict$/;"	f
s:provider	.config/nvim/plugged/vista.vim/autoload/vista/executive/ale.vim	/^let s:provider = fnamemodify(expand('<sfile>'), ':t:r')$/;"	v
s:provider	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^let s:provider = fnamemodify(expand('<sfile>'), ':t:r')$/;"	v
s:provider	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^let s:provider = fnamemodify(expand('<sfile>'), ':t:r')$/;"	v
s:provider	.config/nvim/plugged/vista.vim/autoload/vista/executive/lcn.vim	/^let s:provider = fnamemodify(expand('<sfile>'), ':t:r')$/;"	v
s:provider	.config/nvim/plugged/vista.vim/autoload/vista/executive/vim_lsp.vim	/^let s:provider = fnamemodify(expand('<sfile>'), ':t:r')$/;"	v
s:provider	.config/nvim/plugged/vista.vim/autoload/vista/extension/markdown.vim	/^let s:provider = fnamemodify(expand('<sfile>'), ':t:r')$/;"	v
s:purple	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:purple = s:gb.bright_purple$/;"	v
s:purple	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:purple = s:gb.faded_purple$/;"	v
s:purple	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:purple[1] = 13$/;"	v
s:push	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:push(list, val) abort$/;"	f
s:push_chdir	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:push_chdir() abort$/;"	f
s:push_chdir	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:push_chdir(...)$/;"	f
s:pushd	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:pushd(dict)$/;"	f
s:py	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^func! s:py(cmd)$/;"	f
s:py3exe	.vim/plugged/nvim-yarp/autoload/yarp/pyx.vim	/^func! s:py3exe() dict$/;"	f
s:pycmd	.vim/plugged/omnisharp-vim/autoload/OmniSharp/py.vim	/^let s:pycmd = has('python3') ? 'python3' : 'python'$/;"	v
s:pyeval	.vim/plugged/omnisharp-vim/autoload/OmniSharp/py.vim	/^  function! s:pyeval(e)$/;"	f
s:pyeval	.vim/plugged/omnisharp-vim/autoload/OmniSharp/py.vim	/^  let s:pyeval = function('py3eval')$/;"	v
s:pyeval	.vim/plugged/omnisharp-vim/autoload/OmniSharp/py.vim	/^  let s:pyeval = function('pyeval')$/;"	v
s:pyeval	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let s:pyeval = function('py3eval')$/;"	v
s:pyeval	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let s:pyeval = function('pyeval')$/;"	v
s:pyeval	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^    let s:pyeval = function('pyxeval')$/;"	v
s:pyexe	.vim/plugged/nvim-yarp/autoload/yarp/pyx.vim	/^func! s:pyexe() dict$/;"	f
s:pyfile	.vim/plugged/omnisharp-vim/autoload/OmniSharp/py.vim	/^let s:pyfile = has('python3') ? 'py3file' : 'pyfile'$/;"	v
s:qf_pre	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:qf_pre() abort$/;"	f
s:qf_pre	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:qf_pre() abort$/;"	f
s:query_exec_with_alternate	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:query_exec_with_alternate(key) abort$/;"	f
s:query_file_recursive	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:query_file_recursive(key, ...) abort$/;"	f
s:query_path	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:query_path(root) abort$/;"	f
s:quit	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:quit = "quit"$/;"	v
s:quit	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:quit = ""$/;"	v
s:quit	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:quit() abort$/;"	f
s:quit	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^  let s:quit = "quit"$/;"	v
s:quit	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:quit = ""$/;"	v
s:quit	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:quit() abort$/;"	f
s:quoteArgs	.config/nvim/plugged/targets.vim/autoload/targets/sources/quote.vim	/^let s:quoteArgs = {$/;"	v
s:quoteDir	.config/nvim/plugged/targets.vim/autoload/targets/sources/quote.vim	/^function! s:quoteDir(quoteDirs, delimiter)$/;"	f
s:quoteEscape	.config/nvim/plugged/targets.vim/autoload/targets/sources/quote.vim	/^function! s:quoteEscape(delimiter)$/;"	f
s:rake2rails	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:rake2rails(task) abort$/;"	f
s:rand	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:rand(max) abort$/;"	f
s:random_theme	.vim/plugged/vim-airline/plugin/airline.vim	/^function! s:random_theme() abort$/;"	f
s:rangeScore	.config/nvim/plugged/targets.vim/autoload/targets/multigen.vim	/^function! s:rangeScore(range)$/;"	f
s:range_containsp	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:range_containsp(range_head, range_tail, target_pos)$/;"	f
s:range_in_linep	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:range_in_linep(range_head, range_tail, target_pos)$/;"	f
s:range_no_text_without_edgesp	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:range_no_text_without_edgesp(range_head, range_tail)$/;"	f
s:range_select	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:range_select(range_head, range_tail, fallback_wise)$/;"	f
s:range_validp	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:range_validp(range_head, range_tail)$/;"	f
s:re_unquoted_match	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! s:re_unquoted_match(match) abort$/;"	f
s:re_unquoted_match	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! s:re_unquoted_match(match) abort$/;"	f
s:re_unquoted_match	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! s:re_unquoted_match(match) abort$/;"	f
s:read_content	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Buffer.vim	/^function! s:read_content(content, ...) abort$/;"	f
s:readable_absolute	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_absolute() dict abort$/;"	f
s:readable_alternate	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_alternate(...) dict abort$/;"	f
s:readable_alternate_candidates	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_alternate_candidates(...) dict abort$/;"	f
s:readable_app	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_app() dict abort$/;"	f
s:readable_calculate_file_type	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_calculate_file_type() dict abort$/;"	f
s:readable_controller_name	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_controller_name(...) dict abort$/;"	f
s:readable_default_rake_task	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_default_rake_task(...) dict abort$/;"	f
s:readable_default_task	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_default_task(...) dict abort$/;"	f
s:readable_define_pattern	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_define_pattern() dict abort$/;"	f
s:readable_end_of	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_end_of(lnum) dict abort$/;"	f
s:readable_find_affinity	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_find_affinity() dict abort$/;"	f
s:readable_format	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_format(start) dict abort$/;"	f
s:readable_last_method	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_last_method(start) dict abort$/;"	f
s:readable_last_method_line	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_last_method_line(start) dict abort$/;"	f
s:readable_last_opening_line	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_last_opening_line(start,pattern,limit) dict abort$/;"	f
s:readable_line_count	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_line_count() dict abort$/;"	f
s:readable_model_name	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_model_name(...) dict abort$/;"	f
s:readable_open_command	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_open_command(cmd, argument, name, projections) dict abort$/;"	f
s:readable_params	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_params(...) dict abort$/;"	f
s:readable_placeholders	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_placeholders(lnum) dict abort$/;"	f
s:readable_preview_urls	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_preview_urls(lnum) dict abort$/;"	f
s:readable_projected	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_projected(key, ...) dict abort$/;"	f
s:readable_projected_with_raw	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_projected_with_raw(key, ...) dict abort$/;"	f
s:readable_prototype	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:readable_prototype = {}$/;"	v
s:readable_related	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_related(...) dict abort$/;"	f
s:readable_relative	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_relative() dict abort$/;"	f
s:readable_resolve_layout	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_resolve_layout(name, ...) dict abort$/;"	f
s:readable_resolve_view	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_resolve_view(name, ...) dict abort$/;"	f
s:readable_spec	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_spec() dict abort$/;"	f
s:readable_test_file	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_test_file() dict abort$/;"	f
s:readable_test_file_candidates	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_test_file_candidates() dict abort$/;"	f
s:readable_type_name	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readable_type_name(...) dict abort$/;"	f
s:readbuf	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readbuf(path,...) abort$/;"	f
s:readfile	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:readfile(path, ...) abort$/;"	f
s:real	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:real(file) abort$/;"	f
s:real	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:real(file) abort$/;"	f
s:reap	.config/nvim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:reap	.vim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:record_diagnostics	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:record_diagnostics(state)$/;"	f
s:red	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:red    = s:gb.bright_red$/;"	v
s:red	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:red    = s:gb.faded_red$/;"	v
s:red	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:red[1]    = 9$/;"	v
s:redraw	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
s:redraw	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
s:reduce_line	.config/nvim/plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:reduce_line(lines)$/;"	f
s:reg	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^let s:reg = {}$/;"	v
s:regionize	.config/nvim/plugged/vim-textobj-user/t/move.vim	/^function! s:regionize(bp, ep)$/;"	f
s:register	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^let s:register = {}$/;"	v
s:register	.config/nvim/plugged/vim-operator-user/autoload/operator/user.vim	/^function! s:register()$/;"	f
s:register	.config/nvim/plugged/vim-operator-user/t/register-designations.vim	/^let s:register = ['', '']$/;"	v
s:register.restore	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:register.restore() abort$/;"	f
s:registerSources	.config/nvim/plugged/targets.vim/autoload/targets/sources.vim	/^function! s:registerSources()$/;"	f
s:register_default_theme	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:register_default_theme()$/;"	f
s:registered	.config/nvim/plugged/vista.vim/autoload/vista/autocmd.vim	/^let s:registered = []$/;"	v
s:regress_bar	.config/nvim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:regress_bar	.vim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:reindent	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
s:reindent	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
s:relglob	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:relglob(...)$/;"	f
s:reload	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:reload(d)$/;"	f
s:reload_log	.config/nvim/plugged/vim-rails/ftplugin/railslog.vim	/^function! s:reload_log() abort$/;"	f
s:reload_only	.config/nvim/plugged/vista.vim/autoload/vista/executive/ale.vim	/^let s:reload_only = v:false$/;"	v
s:reload_only	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^let s:reload_only = v:false$/;"	v
s:reload_only	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^let s:reload_only = v:false$/;"	v
s:reload_only	.config/nvim/plugged/vista.vim/autoload/vista/executive/lcn.vim	/^let s:reload_only = v:false$/;"	v
s:reload_only	.config/nvim/plugged/vista.vim/autoload/vista/executive/vim_lsp.vim	/^let s:reload_only = v:false$/;"	v
s:reload_plugins	.config/nvim/autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:reload_plugins	.vim/autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:relsz	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:relsz(expr, limit)$/;"	f
s:remove_layout	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:remove_layout(opts)$/;"	f
s:remove_quote_pairs	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! s:remove_quote_pairs(s) abort$/;"	f
s:remove_quote_pairs	.config/nvim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! s:remove_quote_pairs(s) abort$/;"	f
s:remove_quote_pairs	.vim/plugged/denite.nvim/autoload/denite/helper.vim	/^function! s:remove_quote_pairs(s) abort$/;"	f
s:remove_rtp	.config/nvim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_rtp	.vim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_triggers	.config/nvim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:remove_triggers	.vim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:reorg_rtp	.config/nvim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:reorg_rtp	.vim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:replace1	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:replace1  = [s:base10[0], s:base08[0], s:base10[1], s:base08[1]]$/;"	v
s:replace1	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:replace1  = [s:base10[0], s:base08[0], s:base10[1], s:base08[1]]$/;"	v
s:replace2	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:replace2  = [s:base07[0], s:base03[0], s:base07[1], s:base03[1]]$/;"	v
s:replace2	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:replace2  = [s:base07[0], s:base03[0], s:base07[1], s:base03[1]]$/;"	v
s:replace3	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:replace3  = [s:base07[0], s:base01[0], s:base07[1], s:base01[1]]$/;"	v
s:replace3	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:replace3  = [s:base07[0], s:base01[0], s:base07[1], s:base01[1]]$/;"	v
s:request	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:request(method, args) dict$/;"	f
s:request	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:request(method, args) dict$/;"	f
s:request_async	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:request_async(method, args, cb) dict$/;"	f
s:request_async	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:request_async(method, args, cb) dict$/;"	f
s:requests	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^let s:requests = {}$/;"	v
s:reset_untracked_cache	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:reset_untracked_cache(shellcmdpost)$/;"	f
s:resize_pads	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:resize_pads()$/;"	f
s:resolve_asset	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:resolve_asset(name, ...) abort$/;"	f
s:restore_cursor_state	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:restore_cursor_state(visualmode) "{{{$/;"	f
s:retry	.config/nvim/autoload/plug.vim	/^function! s:retry()$/;"	f
s:retry	.vim/autoload/plug.vim	/^function! s:retry()$/;"	f
s:revert	.config/nvim/autoload/plug.vim	/^function! s:revert()$/;"	f
s:revert	.vim/autoload/plug.vim	/^function! s:revert()$/;"	f
s:rgb_colour	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:rgb_colour(x, y, z)$/;"	f
s:rgb_level	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:rgb_level(n)$/;"	f
s:rgb_number	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:rgb_number(x)$/;"	f
s:rhs_escape	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:rhs_escape(pattern)$/;"	f
s:rhs_key_list	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^function! s:rhs_key_list(...)$/;"	f
s:rm_rf	.config/nvim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rm_rf	.vim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:root	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	.config/nvim/plugged/coc.nvim/autoload/health/coc.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	.config/nvim/plugged/coc.nvim/plugin/coc.vim	/^let s:root = expand('<sfile>:h:h')$/;"	v
s:root	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	.vim/plugged/coc.nvim/autoload/health/coc.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	.vim/plugged/coc.nvim/plugin/coc.vim	/^let s:root = expand('<sfile>:h:h')$/;"	v
s:root	.vim/plugged/coc.nvim/src/__tests__/vimrc	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root_dir	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^let s:root_dir = matchstr(system('git rev-parse --show-cdup'), '[^\\n]\\+')$/;"	v
s:root_dir	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^let s:root_dir = matchstr(system('git rev-parse --show-cdup'), '[^\\n]\\+')$/;"	v
s:root_dir	.config/nvim/plugged/vim-easymotion/t/operator_pending_spec.vim	/^let s:root_dir = matchstr(system('git rev-parse --show-cdup'), '[^\\n]\\+')$/;"	v
s:root_dir	.config/nvim/plugged/vim-easymotion/t/smartsign_spec.vim	/^let s:root_dir = matchstr(system('git rev-parse --show-cdup'), '[^\\n]\\+')$/;"	v
s:roots	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:roots() abort$/;"	f
s:roslyn_server_files	.vim/plugged/omnisharp-vim/autoload/OmniSharp/util.vim	/^let s:roslyn_server_files = 'project.json'$/;"	v
s:rpcnotify	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcnotify = 'rpcnotify'$/;"	v
s:rpcnotify	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcnotify = get(g:, 'yarp_rpcnotify', 'neovim_rpc#rpcnotify')$/;"	v
s:rpcrequest	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcrequest = 'rpcrequest'$/;"	v
s:rpcrequest	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:rpcrequest = get(g:, 'yarp_rpcrequest', 'neovim_rpc#rpcrequest')$/;"	v
s:rquote	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:rquote(str)$/;"	f
s:rspid	.vim/plugged/vim-hug-neovim-rpc/autoload/neovim_rpc.vim	/^let s:rspid = 1$/;"	v
s:rtp	.config/nvim/autoload/plug.vim	/^  function! s:rtp(spec)$/;"	f
s:rtp	.vim/autoload/plug.vim	/^  function! s:rtp(spec)$/;"	f
s:ruby_cfile	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:ruby_cfile() abort$/;"	f
s:ruby_deindent_keywords	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:ruby_deindent_keywords =$/;"	v
s:ruby_indent_keywords	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:ruby_indent_keywords =$/;"	v
s:ruby_path	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:ruby_path = s:build_path(s:ruby_paths)$/;"	v
s:ruby_path	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path$/;"	v
s:ruby_paths	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:ruby_paths = g:ruby_default_path$/;"	v
s:ruby_paths	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:ruby_paths = g:ruby_version_paths[b:ruby_version]$/;"	v
s:rubycomplete_debug	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:rubycomplete_debug = 0$/;"	v
s:rubycomplete_rails_loaded	.config/nvim/plugged/vim-ruby/autoload/rubycomplete.vim	/^let s:rubycomplete_rails_loaded = 0$/;"	v
s:run_syntax_fold	.config/nvim/plugged/vim-ruby/syntax/ruby.vim	/^function! s:run_syntax_fold(args) abort$/;"	f
s:runner_exe	.config/nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = gutentags#get_plat_file('update_tags')$/;"	v
s:running_task	.config/nvim/plugged/coc.nvim/autoload/coc/task.vim	/^let s:running_task = {}$/;"	v
s:running_task	.vim/plugged/coc.nvim/autoload/coc/task.vim	/^let s:running_task = {}$/;"	v
s:salmon	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:salmon = "D08785"$/;"	v
s:salmon	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:salmon = "D08785"$/;"	v
s:save_cpo	.config/nvim/plugged/comfortable-motion.vim/autoload/comfortable_motion.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/comfortable-motion.vim/plugin/comfortable_motion.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/emmet-vim/autoload/emmet.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	.config/nvim/plugged/emmet-vim/plugin/emmet.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	.config/nvim/plugged/tabular/after/plugin/TabularMaps.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/ultisnips/autoload/neocomplete/sources/ultisnips.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/ultisnips/ftplugin/snippets.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/cmigemo.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/helper.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/sticky_table.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Cancel.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/CursorMove.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Delete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Doautocmd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionExit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionMessage.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Exit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/History.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/InsertRegister.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/KeyMapping.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/NoInsert.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Paste.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Redraw.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Exception.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Input.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Keymapping.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Capture.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Highlight.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Buffer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Message.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-easymotion/plugin/EasyMotion.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	.vim/plugged/omnisharp-vim/autoload/OmniSharp/proc.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	.vim/plugged/omnisharp-vim/autoload/OmniSharp/py.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	.vim/plugged/omnisharp-vim/autoload/OmniSharp/stdio.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	.vim/plugged/omnisharp-vim/autoload/OmniSharp/util.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	.vim/plugged/omnisharp-vim/autoload/fzf/OmniSharp.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	.vim/plugged/omnisharp-vim/autoload/unite/sources/OmniSharp.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	.vim/plugged/omnisharp-vim/syntax_checkers/cs/codecheck.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpoptions	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^let s:save_cpoptions = &cpoptions$/;"	v
s:save_cpoptions	.config/nvim/plugged/targets.vim/plugin/targets.vim	/^let s:save_cpoptions = &cpoptions$/;"	v
s:save_cursor_pos	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:save_cursor_pos()$/;"	f
s:savecpo	.config/nvim/plugged/tabular/autoload/tabular.vim	/^let s:savecpo = &cpo$/;"	v
s:savecpo	.config/nvim/plugged/tabular/plugin/Tabular.vim	/^let s:savecpo = &cpo$/;"	v
s:saved_cursor	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:saved_cursor = &guicursor$/;"	v
s:saved_cursor	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:saved_cursor = &guicursor$/;"	v
s:saved_ve	.config/nvim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:saved_ve = &t_ve$/;"	v
s:saved_ve	.vim/plugged/coc.nvim/autoload/coc/list.vim	/^let s:saved_ve = &t_ve$/;"	v
s:scanlineforuris	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:scanlineforuris(line) abort$/;"	f
s:schemaEdit	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:schemaEdit(cmd,...)$/;"	f
s:schemaList	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:schemaList(A,L,P) abort$/;"	f
s:scope_icon	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^let s:scope_icon = ['⊕', '⊖']$/;"	v
s:scope_icon	.config/nvim/plugged/vista.vim/autoload/vista/renderer/line.vim	/^let s:scope_icon = ['⊕', '⊖']$/;"	v
s:script_location	.vim/plugged/omnisharp-vim/autoload/OmniSharp.vim	/^let s:script_location = expand('<sfile>:p:h:h') . '\/installer\/omnisharp-manager' . s:extension$/;"	v
s:script_path	.vim/plugged/vim-airline/autoload/airline/extensions.vim	/^let s:script_path = tolower(resolve(expand('<sfile>:p:h')))$/;"	v
s:scroll	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! s:scroll(direction) "{{{$/;"	f
s:sea_blue	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:sea_blue = "9DB1C7"$/;"	v
s:search	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^let s:search = s:cmdline.make()$/;"	v
s:search	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^let s:search.highlights.prompt = 'Question'$/;"	v
s:search	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:search(pattern) abort dict$/;"	f
s:search.keymapping	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! s:search.keymapping() "{{{$/;"	f
s:search.on_char	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! s:search.on_char(cmdline) "{{{$/;"	f
s:search.on_enter	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! s:search.on_enter(cmdline) "{{{$/;"	f
s:search.on_leave	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! s:search.on_leave(cmdline) "{{{$/;"	f
s:search_history_sink	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:search_history_sink(lines)$/;"	f
s:searchsyn	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:searchsyn(pattern, syn, flags, mode) abort$/;"	f
s:section	.config/nvim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:section	.vim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:section_is_empty	.vim/plugged/vim-airline/autoload/airline/builder.vim	/^function! s:section_is_empty(self, content)$/;"	f
s:section_truncate_width	.vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:section_truncate_width = get(g:, 'airline#extensions#default#section_truncate_width', {$/;"	v
s:section_use_groups	.vim/plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:section_use_groups     = get(g:, 'airline#extensions#default#section_use_groupitems', 1)$/;"	v
s:sections	.vim/plugged/vim-airline/autoload/airline.vim	/^let s:sections = ['a','b','c','gutter','x','y','z', 'error', 'warning']$/;"	v
s:sections	.vim/plugged/vim-airline/t/init.vim	/^let s:sections = ['a', 'b', 'c', 'gutter', 'x', 'y', 'z', 'warning']$/;"	v
s:seed	.config/nvim/plugged/emmet-vim/autoload/emmet/util.vim	/^let s:seed = localtime()$/;"	v
s:select	.config/nvim/plugged/targets.vim/autoload/targets/sources/argument.vim	/^function! s:select(args, direction)$/;"	f
s:select	.config/nvim/plugged/targets.vim/autoload/targets/sources/pair.vim	/^function! s:select(count, trigger)$/;"	f
s:select	.config/nvim/plugged/vim-textobj-indent/autoload/textobj/indent.vim	/^function! s:select(include_empty_lines_p, block_border_type)  "{{{2$/;"	f
s:selectRegion	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:selectRegion(target)$/;"	f
s:selectTarget	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:selectTarget(context, target, rawTarget)$/;"	f
s:select_a	.config/nvim/plugged/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^function! s:select_a()$/;"	f
s:select_api	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^let s:select_api = exists('*nvim_select_popupmenu_item')$/;"	v
s:select_api	.vim/plugged/coc.nvim/autoload/coc.vim	/^let s:select_api = exists('*nvim_select_popupmenu_item')$/;"	v
s:select_function_wrapper	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:select_function_wrapper(function_name, spec_name, previous_mode)$/;"	f
s:select_i	.config/nvim/plugged/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^function! s:select_i()$/;"	f
s:select_pair_wrapper	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:select_pair_wrapper(patterns, flags, previous_mode)$/;"	f
s:select_tab	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:select_tab(buf_index)$/;"	f
s:separators	.vim/plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:separators = {}$/;"	v
s:serveraddr	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:serveraddr = function('s:_serveraddr')$/;"	v
s:serveraddr	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^    let s:serveraddr = get(g:, 'yarp_serveraddr', 'neovim_rpc#serveraddr')$/;"	v
s:set	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:set(...) abort$/;"	f
s:set	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^let s:set = deepcopy(s:_base_set)$/;"	v
s:set	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Highlight.vim	/^function! s:set(name, config)$/;"	f
s:set.add	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:set.add(x) abort$/;"	f
s:set.clear	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:set.clear() abort$/;"	f
s:set.difference_update	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:set.difference_update(t) abort$/;"	f
s:set.discard	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:set.discard(e) abort$/;"	f
s:set.iand	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:set.iand(t) abort$/;"	f
s:set.intersection_update	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:set.intersection_update(t) abort$/;"	f
s:set.ior	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:set.ior(t) abort$/;"	f
s:set.isub	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:set.isub(t) abort$/;"	f
s:set.ixor	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:set.ixor(t) abort$/;"	f
s:set.pop	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:set.pop() abort$/;"	f
s:set.remove	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:set.remove(e) abort$/;"	f
s:set.symmetric_difference_update	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:set.symmetric_difference_update(t) abort$/;"	f
s:set.update	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^function! s:set.update(iterable) abort$/;"	f
s:set_clean_jobs_variable	.vim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:set_clean_jobs_variable(vcs, file, id)$/;"	f
s:set_clean_variables	.vim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:set_clean_variables(file, vcs, val)$/;"	f
s:set_color	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:set_color(group, attr, color)$/;"	f
s:set_color_variables	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:set_color_variables()$/;"	f
s:set_cursor_color_for	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:set_cursor_color_for(mode)$/;"	f
s:set_custom	.config/nvim/plugged/defx.nvim/autoload/defx/custom.vim	/^function! s:set_custom(dest, name_or_dict, value) abort$/;"	f
s:set_custom	.config/nvim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! s:set_custom(dest, name_or_dict, value) abort$/;"	f
s:set_custom	.vim/plugged/denite.nvim/autoload/denite/custom.vim	/^function! s:set_custom(dest, name_or_dict, value) abort$/;"	f
s:set_default	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:set_default(var, val) abort$/;"	f
s:set_format_attributes	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:set_format_attributes()$/;"	f
s:set_match_words	.config/nvim/plugged/ultisnips/ftplugin/snippets.vim	/^  let s:set_match_words = 1$/;"	v
s:set_overriding_colors	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:set_overriding_colors()$/;"	f
s:set_prefix	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Exception.vim	/^function! s:set_prefix(prefix)$/;"	f
s:setf	.config/nvim/plugged/vim-ruby/ftdetect/ruby.vim	/^function! s:setf(filetype) abort$/;"	f
s:setf	.config/nvim/plugged/vim-ruby/ftdetect/ruby_extra.vim	/^function! s:setf(filetype) abort$/;"	f
s:setline	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:setline(lnum, text) abort$/;"	f
s:setup_pad	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:setup_pad(bufnr, vert, size, repel)$/;"	f
s:setuplock	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:setuplock() abort$/;"	f
s:severity_error	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_error = 1$/;"	v
s:severity_hint	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_hint = 4$/;"	v
s:severity_info	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_info = 3$/;"	v
s:severity_warning	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_warning = 2$/;"	v
s:sfile	.config/nvim/plugged/emmet-vim/unittest.vim	/^let s:sfile = expand('<sfile>')$/;"	v
s:sha1size	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:sha1size = get(g:, 'airline#extensions#branch#sha1_len', 7)$/;"	v
s:shade_hl_defaults	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let s:shade_hl_defaults = {$/;"	v
s:shade_hl_line_defaults	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let s:shade_hl_line_defaults = {$/;"	v
s:shallow_blue	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:shallow_blue = "a6b8cc"$/;"	v
s:shellesc	.config/nvim/autoload/plug.vim	/^function! s:shellesc(arg)$/;"	f
s:shellesc	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:shellesc(arg) abort$/;"	f
s:shellesc	.vim/autoload/plug.vim	/^function! s:shellesc(arg)$/;"	f
s:shellesc_cmd	.config/nvim/autoload/plug.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:shellesc_cmd	.vim/autoload/plug.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:shellesc_cmd	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:shelljoin	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:shelljoin(val) abort$/;"	f
s:shellslash	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:shellslash(path) abort$/;"	f
s:shellslash	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:shellslash(path) abort$/;"	f
s:shift	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:shift(list) abort$/;"	f
s:shortpath	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:shortpath()$/;"	f
s:shortpath	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:shortpath()$/;"	f
s:should_display	.config/nvim/plugged/vista.vim/autoload/vista/executive/ale.vim	/^let s:should_display = v:false$/;"	v
s:should_display	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^let s:should_display = v:false$/;"	v
s:should_display	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^let s:should_display = v:false$/;"	v
s:should_display	.config/nvim/plugged/vista.vim/autoload/vista/executive/lcn.vim	/^let s:should_display = v:false$/;"	v
s:should_display	.config/nvim/plugged/vista.vim/autoload/vista/executive/vim_lsp.vim	/^let s:should_display = v:false$/;"	v
s:should_use_migemo	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:should_use_migemo(char) "{{{$/;"	f
s:should_use_regexp	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:should_use_regexp() "{{{$/;"	f
s:should_use_smartsign	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:should_use_smartsign(char) "{{{$/;"	f
s:show_buffers	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:show_buffers = get(g:, 'airline#extensions#tabline#show_buffers', 1)$/;"	v
s:show_category	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_category(category)$/;"	f
s:show_documentation	.config/nvim/configs/plugins.vim	/^function! s:show_documentation()$/;"	f
s:show_done	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_done()$/;"	f
s:show_line_numbers	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:show_line_numbers = get(g:, 'airline#extensions#languageclient#show_line_numbers', 1)$/;"	v
s:show_message	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:show_message = get(g:, 'airline#extensions#whitespace#show_message', 1)$/;"	v
s:show_ng	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_ng(no, expect, got)$/;"	f
s:show_ok	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_ok()$/;"	f
s:show_pass	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_pass(pass)$/;"	f
s:show_skip	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_skip(no, title)$/;"	f
s:show_tabline	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! s:show_tabline(min_count, total_count)$/;"	f
s:show_title	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_title(no, title)$/;"	f
s:show_type	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:show_type(type)$/;"	f
s:sid	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:sid = s:sub(maparg("<SID>xx"),'xx$','')$/;"	v
s:sid2sfuncs	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:sid2sfuncs(sid) abort$/;"	f
s:sign_column	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^    let s:sign_column = get(s:gb, g:gruvbox_sign_column)$/;"	v
s:sign_column	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:sign_column = s:number_column$/;"	v
s:sign_column	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:sign_column = s:bg1$/;"	v
s:simplify	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:simplify(path) abort$/;"	f
s:sink	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^function! s:sink(line) abort$/;"	f
s:skip_check_ft	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:skip_check_ft = {'make': ['indent', 'mixed-indent-file']}$/;"	v
s:skip_expr	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:skip_expr =$/;"	v
s:skip_pattern	.config/nvim/plugged/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^let s:skip_pattern = 'getline(".") =~ "\\\\v\\\\S\\\\s<(if|unless)>\\\\s\\\\S"'$/;"	v
s:skip_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail_improved.vim	/^let s:skip_symbol = '…'$/;"	v
s:slash	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:slash(str) abort$/;"	f
s:smart_execute_command	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:smart_execute_command(action, word) abort$/;"	f
s:snapshot	.config/nvim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:snapshot	.vim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:snr_prefix	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:snr_prefix(sfile)$/;"	f
s:so_save	.vim/sessions/default.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:so_save	.vim/sessions/foo.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sort	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:sort(list, expr) abort$/;"	f
s:sort_buffers	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:sort_buffers(...)$/;"	f
s:sort_by	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:sort_by(list, expr) abort$/;"	f
s:source	.config/nvim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:source	.config/nvim/plugged/ultisnips/autoload/neocomplete/sources/ultisnips.vim	/^let s:source = {$/;"	v
s:source	.vim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:source.gather_candidates	.config/nvim/plugged/ultisnips/autoload/neocomplete/sources/ultisnips.vim	/^function! s:source.gather_candidates(context) abort$/;"	f
s:sources	.config/nvim/plugged/targets.vim/autoload/targets/sources.vim	/^let s:sources = {}$/;"	v
s:span	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:span(f, xs) abort$/;"	f
s:spawn	.config/nvim/autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:spawn	.vim/autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/example.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/section.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	.vim/plugged/vim-airline/autoload/airline/util.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:specEdit	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:specEdit(cmd,...) abort$/;"	f
s:specList	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:specList(A,L,P)$/;"	f
s:special	.config/nvim/plugged/vim-rails/after/syntax/ruby/rails.vim	/^let s:special = {$/;"	v
s:spell_cluster	.config/nvim/plugged/vim-ruby/syntax/ruby.vim	/^let s:spell_cluster = exists('ruby_spellcheck_strings') ? ',@Spell' : ''$/;"	v
s:splat_regex	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:splat_regex = '[[,(]\\s*\\*\\s*\\%(#.*\\)\\=$'$/;"	v
s:split	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:split(arg, ...)$/;"	f
s:split	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:split(dict)$/;"	f
s:split_by_keys	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^function! s:split_by_keys(str)$/;"	f
s:split_rtp	.config/nvim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:split_rtp	.vim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:splittable	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:splittable(dict)$/;"	f
s:sprockets_cfile	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:sprockets_cfile() abort$/;"	f
s:sql_define	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:sql_define = substitute($/;"	v
s:starlight	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:starlight = "F0FDFF"$/;"	v
s:starlight	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:starlight = "F0FDFF"$/;"	v
s:start	.config/nvim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:start() dict$/;"	f
s:start	.config/nvim/plugged/denite.nvim/autoload/denite.vim	/^function! s:start(sources, user_context) abort$/;"	f
s:start	.vim/plugged/coc.nvim/autoload/coc/client.vim	/^function! s:start() dict$/;"	f
s:start	.vim/plugged/denite.nvim/autoload/denite.vim	/^function! s:start(sources, user_context) abort$/;"	f
s:start_pattern	.config/nvim/plugged/vim-textobj-rubyblock/plugin/textobj/rubyblock.vim	/^let s:start_pattern = s:comment_escape . s:block_openers$/;"	v
s:started	.config/nvim/plugged/vim-easyescape-plus/plugin/easyescapeplus.vim	/^let s:started = 0$/;"	v
s:startswith	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:startswith(str, prefix) abort$/;"	f
s:startswith	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:startswith(string,prefix)$/;"	f
s:status	.config/nvim/autoload/plug.vim	/^function! s:status()$/;"	f
s:status	.vim/autoload/plug.vim	/^function! s:status()$/;"	f
s:status_load	.config/nvim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_load	.vim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	.config/nvim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:status_update	.vim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:stop_timer	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:stop_timer() abort$/;"	f
s:stop_timer	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:stop_timer() abort$/;"	f
s:store	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:store(targets) abort$/;"	f
s:strip	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:strip(str)$/;"	f
s:strip_white_space	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:strip_white_space(l,r,line) abort$/;"	f
s:strwidthpart	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
s:strwidthpart	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
s:strwidthpart_reverse	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
s:strwidthpart_reverse	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
s:stylesheetEdit	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:stylesheetEdit(cmd,...) abort$/;"	f
s:stylesheetList	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:stylesheetList(A, L, P) abort$/;"	f
s:sub	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
s:sub	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:sub(str, pat, repl) abort$/;"	f
s:sub	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
s:substitute_path_separator	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! s:substitute_path_separator(path) abort$/;"	f
s:substitute_path_separator	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:substitute_path_separator(path) abort$/;"	f
s:suffix	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^function! s:suffix(left, suffix)$/;"	f
s:suffixes	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:suffixes(type) abort$/;"	f
s:suffixesadd	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:suffixesadd = &l:suffixesadd$/;"	v
s:suite	.config/nvim/plugged/defx.nvim/test/autoload/defx/custom.vim	/^let s:suite = themis#suite('custom')$/;"	v
s:suite	.config/nvim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^let s:suite = themis#suite('custom')$/;"	v
s:suite	.config/nvim/plugged/denite.nvim/test/autoload/denite/parse.vim	/^let s:suite = themis#suite('parse')$/;"	v
s:suite	.vim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^let s:suite = themis#suite('custom')$/;"	v
s:suite	.vim/plugged/denite.nvim/test/autoload/denite/parse.vim	/^let s:suite = themis#suite('parse')$/;"	v
s:suite.before_each	.config/nvim/plugged/defx.nvim/test/autoload/defx/custom.vim	/^function! s:suite.before_each() abort$/;"	f
s:suite.before_each	.config/nvim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.before_each() abort$/;"	f
s:suite.before_each	.vim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.before_each() abort$/;"	f
s:suite.custom_alias	.config/nvim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.custom_alias() abort$/;"	f
s:suite.custom_alias	.vim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.custom_alias() abort$/;"	f
s:suite.custom_column	.config/nvim/plugged/defx.nvim/test/autoload/defx/custom.vim	/^function! s:suite.custom_column() abort$/;"	f
s:suite.custom_filter	.config/nvim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.custom_filter() abort$/;"	f
s:suite.custom_filter	.vim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.custom_filter() abort$/;"	f
s:suite.custom_kind	.config/nvim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.custom_kind() abort$/;"	f
s:suite.custom_map	.config/nvim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.custom_map() abort$/;"	f
s:suite.custom_map	.vim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.custom_map() abort$/;"	f
s:suite.custom_option	.config/nvim/plugged/defx.nvim/test/autoload/defx/custom.vim	/^function! s:suite.custom_option() abort$/;"	f
s:suite.custom_option	.config/nvim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.custom_option() abort$/;"	f
s:suite.custom_option	.vim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.custom_option() abort$/;"	f
s:suite.custom_source	.config/nvim/plugged/defx.nvim/test/autoload/defx/custom.vim	/^function! s:suite.custom_source() abort$/;"	f
s:suite.custom_source	.config/nvim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.custom_source() abort$/;"	f
s:suite.custom_source	.vim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.custom_source() abort$/;"	f
s:suite.custom_var	.config/nvim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.custom_var() abort$/;"	f
s:suite.custom_var	.vim/plugged/denite.nvim/test/autoload/denite/custom.vim	/^function! s:suite.custom_var() abort$/;"	f
s:suite.parse_options_args	.config/nvim/plugged/denite.nvim/test/autoload/denite/parse.vim	/^function! s:suite.parse_options_args() abort$/;"	f
s:suite.parse_options_args	.vim/plugged/denite.nvim/test/autoload/denite/parse.vim	/^function! s:suite.parse_options_args() abort$/;"	f
s:support_json_format	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^let s:support_json_format =$/;"	v
s:surroundings	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:surroundings() abort$/;"	f
s:swap	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^function! s:swap(dict) abort$/;"	f
s:switch_in	.config/nvim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_in	.vim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	.config/nvim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:switch_out	.vim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:sx	.vim/sessions/default.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:sx	.vim/sessions/foo.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:symbol	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:symbol = get(g:, 'airline#extensions#whitespace#symbol', g:airline_symbols.whitespace)$/;"	v
s:symbol_kind	.config/nvim/plugged/vista.vim/autoload/vista/parser/lsp.vim	/^let s:symbol_kind = {$/;"	v
s:syng_strcom	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:syng_strcom = s:syng_stringdoc + [$/;"	v
s:syng_string	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:syng_string =$/;"	v
s:syng_stringdoc	.config/nvim/plugged/vim-ruby/indent/ruby.vim	/^let s:syng_stringdoc = s:syng_string + ['Documentation']$/;"	v
s:synid	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:synid() abort$/;"	f
s:syntax	.config/nvim/autoload/plug.vim	/^function! s:syntax()$/;"	f
s:syntax	.vim/autoload/plug.vim	/^function! s:syntax()$/;"	f
s:syntaxfile	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:syntaxfile() abort$/;"	f
s:syntaxlock	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:syntaxlock() abort$/;"	f
s:system	.config/nvim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:system(cmd)$/;"	f
s:system	.vim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:system(cmd)$/;"	f
s:system_chomp	.config/nvim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:system_chomp	.vim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:tab2spacelen	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:tab2spacelen(line, col_num) abort$/;"	f
s:tab_min_count	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:tab_min_count = get(g:, 'airline#extensions#tabline#tab_min_count', 0)$/;"	v
s:tabline_evaluated_length	.vim/plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:tabline_evaluated_length(tabline)$/;"	f
s:taboo	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:taboo = get(g:, 'airline#extensions#taboo#enabled', 1) && get(g:, 'loaded_taboo', 0)$/;"	v
s:tags_sink	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:tags_sink(lines)$/;"	f
s:take_while	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:take_while(f, xs) abort$/;"	f
s:target	.config/nvim/plugged/vim-textobj-user/t/old-property-names.vim	/^function! s:target()$/;"	f
s:target_hl2_first_defaults	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let s:target_hl2_first_defaults = {$/;"	v
s:target_hl2_second_defaults	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let s:target_hl2_second_defaults = {$/;"	v
s:target_hl_defaults	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let s:target_hl_defaults = {$/;"	v
s:target_hl_inc	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let s:target_hl_inc = {$/;"	v
s:target_hl_inc_cursor	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let s:target_hl_inc_cursor = {$/;"	v
s:target_hl_move	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/highlight.vim	/^let s:target_hl_move = {$/;"	v
s:teal	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:teal = "6F98B3"$/;"	v
s:teal	.vim/plugged/vim-pink-moon/colors/yellow-moon.vim	/^let s:teal = "608DAB"$/;"	v
s:term_marker	.vim/plugged/fzf/plugin/fzf.vim	/^  let s:term_marker = ";#FZF"$/;"	v
s:term_marker	.vim/plugged/fzf/plugin/fzf.vim	/^  let s:term_marker = '&::FZF'$/;"	v
s:termname	.vim/plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! s:termname()$/;"	f
s:test	.config/nvim/plugged/emmet-vim/unittest.vim	/^function! s:test(...)$/;"	f
s:testBasic	.config/nvim/plugged/targets.vim/test/test.vim	/^function! s:testBasic()$/;"	f
s:testEmpty	.config/nvim/plugged/targets.vim/test/test.vim	/^function s:testEmpty()$/;"	f
s:testGrow	.config/nvim/plugged/targets.vim/test/test.vim	/^function s:testGrow()$/;"	f
s:testModifiers	.config/nvim/plugged/targets.vim/test/test.vim	/^function s:testModifiers()$/;"	f
s:testMotionForce	.config/nvim/plugged/targets.vim/test/test.vim	/^function s:testMotionForce()$/;"	f
s:testMultiline	.config/nvim/plugged/targets.vim/test/test.vim	/^function! s:testMultiline()$/;"	f
s:testQuotes	.config/nvim/plugged/targets.vim/test/test.vim	/^function s:testQuotes()$/;"	f
s:testReselect	.config/nvim/plugged/targets.vim/test/test.vim	/^function s:testReselect()$/;"	f
s:testSeeking	.config/nvim/plugged/targets.vim/test/test.vim	/^function s:testSeeking()$/;"	f
s:testVisual	.config/nvim/plugged/targets.vim/test/test.vim	/^function s:testVisual()$/;"	f
s:test_on_normal_mode	.config/nvim/plugged/vim-textobj-user/t/move.vim	/^function! s:test_on_normal_mode(type, cases)$/;"	f
s:test_on_operator_pending_mode	.config/nvim/plugged/vim-textobj-user/t/move.vim	/^function! s:test_on_operator_pending_mode(type, cases)$/;"	f
s:test_on_visual_mode	.config/nvim/plugged/vim-textobj-user/t/move.vim	/^function! s:test_on_visual_mode(type, cases, variant)$/;"	f
s:textobj_cancel	.config/nvim/plugged/vim-after-object/autoload/after_object.vim	/^function! s:textobj_cancel()$/;"	f
s:textobject	.config/nvim/plugged/vim-commentary/plugin/commentary.vim	/^function! s:textobject(inner) abort$/;"	f
s:theme_has_hint	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:theme_has_hint(hint)$/;"	f
s:themes	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^let s:themes = {}$/;"	v
s:throw	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:throw(string) abort$/;"	f
s:throw	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:throw(message) abort$/;"	f
s:throw	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Exception.vim	/^function! s:throw(exp, where)$/;"	f
s:throw	.config/nvim/plugged/vim-rake/plugin/rake.vim	/^function! s:throw(string) abort$/;"	f
s:throw_cmd	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Exception.vim	/^function! s:throw_cmd(exp, where)$/;"	f
s:tick	.config/nvim/autoload/plug.vim	/^function! s:tick()$/;"	f
s:tick	.config/nvim/plugged/comfortable-motion.vim/autoload/comfortable_motion.vim	/^function! s:tick(timer_id)$/;"	f
s:tick	.vim/autoload/plug.vim	/^function! s:tick()$/;"	f
s:tmux_enabled	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:tmux_enabled()$/;"	f
s:tmux_is_last_pane	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^let s:tmux_is_last_pane = 0$/;"	v
s:tmuxline_snapshot_file	.vim/plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^let s:tmuxline_snapshot_file = get(g:, 'airline#extensions#tmuxline#snapshot_file', '')$/;"	v
s:to_256	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:to_256(rgb)$/;"	f
s:to_a	.config/nvim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_a	.vim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_be_snr_prefix	.config/nvim/plugged/vim-textobj-user/t/snr-prefix.vim	/^let s:to_be_snr_prefix = {}$/;"	v
s:to_be_snr_prefix.match	.config/nvim/plugged/vim-textobj-user/t/snr-prefix.vim	/^function! s:to_be_snr_prefix.match(actual)$/;"	f
s:to_cursor	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^let s:to_cursor = {}$/;"	v
s:to_cursor.failure_message_for_should	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^function! s:to_cursor.failure_message_for_should(actual, expected)$/;"	f
s:to_cursor.match	.config/nvim/plugged/vim-easymotion/t/compare_movements_spec.vim	/^function! s:to_cursor.match(actual, expected)$/;"	f
s:to_s	.config/nvim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:to_s	.vim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:to_string	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/InsertRegister.vim	/^function! s:to_string(expr)$/;"	f
s:toggle_off	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! s:toggle_off()$/;"	f
s:toggle_on	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! s:toggle_on()$/;"	f
s:tranquilize	.config/nvim/plugged/goyo.vim/autoload/goyo.vim	/^function! s:tranquilize()$/;"	f
s:transformations	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:transformations = {}$/;"	v
s:transformations.basename	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.basename(input, o) abort$/;"	f
s:transformations.blank	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.blank(input, o) abort$/;"	f
s:transformations.camelcase	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.camelcase(input, o) abort$/;"	f
s:transformations.capitalize	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.capitalize(input, o) abort$/;"	f
s:transformations.close	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.close(input, o) abort$/;"	f
s:transformations.colons	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.colons(input, o) abort$/;"	f
s:transformations.dirname	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.dirname(input, o) abort$/;"	f
s:transformations.dot	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.dot(input, o) abort$/;"	f
s:transformations.hyphenate	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.hyphenate(input, o) abort$/;"	f
s:transformations.nothing	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.nothing(input, o) abort$/;"	f
s:transformations.open	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.open(input, o) abort$/;"	f
s:transformations.plural	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.plural(input, o) abort$/;"	f
s:transformations.singular	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.singular(input, o) abort$/;"	f
s:transformations.underscore	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.underscore(input, o) abort$/;"	f
s:transformations.uppercase	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:transformations.uppercase(input, o) abort$/;"	f
s:transpose	.config/nvim/plugged/vim-rsi/plugin/rsi.vim	/^function! s:transpose() abort$/;"	f
s:triggerReselect	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:triggerReselect(context)$/;"	f
s:triggerUndo	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! s:triggerUndo()$/;"	f
s:triggers	.config/nvim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:triggers	.vim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	.config/nvim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:trim	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^function! s:trim(str)$/;"	f
s:trim	.vim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:trim	.vim/plugged/coc.nvim/autoload/coc.vim	/^function! s:trim(str)$/;"	f
s:truncate	.config/nvim/plugged/defx.nvim/autoload/defx/util.vim	/^function! s:truncate(str, width) abort$/;"	f
s:truncate	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:truncate(str, width) abort$/;"	f
s:truncate_skipping	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
s:turn_off_hl_error	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:turn_off_hl_error() "{{{$/;"	f
s:turn_on_hl_error	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:turn_on_hl_error() "{{{$/;"	f
s:type_dict	.config/nvim/plugged/switch.vim/autoload/switch/mapping.vim	/^let s:type_dict = type({})$/;"	v
s:type_list	.config/nvim/plugged/switch.vim/autoload/switch/mapping.vim	/^let s:type_list = type([])$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ada.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ada.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ada.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ada.vim	/^let s:types.lang = 'ada'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ada.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ada.vim	/^let s:types.sro = '.' " Not sure if possible$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ant.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ant.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ant.vim	/^let s:types.lang = 'ant'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/asm.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/asm.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/asm.vim	/^let s:types.lang = 'asm'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/aspvbs.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/aspvbs.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/aspvbs.vim	/^let s:types.lang = 'asp'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/asy.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/asy.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/asy.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/asy.vim	/^let s:types.lang = 'c'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/asy.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/asy.vim	/^let s:types.sro = '::'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/automake.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/automake.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/automake.vim	/^let s:types.lang = 'automake'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/awk.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/awk.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/awk.vim	/^let s:types.lang = 'awk'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/basic.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/basic.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/basic.vim	/^let s:types.lang = 'basic'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/beta.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/beta.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/beta.vim	/^let s:types.lang = 'beta'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/c.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/c.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/c.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/c.vim	/^let s:types.lang = 'c'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/c.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/c.vim	/^let s:types.sro = '::'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/clojure.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/clojure.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/clojure.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/clojure.vim	/^let s:types.lang = 'clojure'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/clojure.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/clojure.vim	/^let s:types.sro = '.'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cobol.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cobol.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cobol.vim	/^let s:types.lang = 'cobol'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/config.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/config.vim	/^let s:types.kinds = [$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/config.vim	/^let s:types.lang = 'autoconf'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cpp.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cpp.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cpp.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cpp.vim	/^let s:types.lang = 'c++'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cpp.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cpp.vim	/^let s:types.sro = '::'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cs.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cs.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cs.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cs.vim	/^let s:types.lang = 'c#'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cs.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/cs.vim	/^let s:types.sro = '.'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/css.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/css.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/css.vim	/^let s:types.lang = 'css'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ctags.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ctags.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ctags.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ctags.vim	/^let s:types.lang = 'ctags'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ctags.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ctags.vim	/^let s:types.sro = '.' " Not actually possible$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/d.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/d.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/d.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/d.vim	/^let s:types.lang = 'D'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/d.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/d.vim	/^let s:types.sro = '.'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/dosbatch.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/dosbatch.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/dosbatch.vim	/^let s:types.lang = 'dosbatch'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/eiffel.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/eiffel.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/eiffel.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/eiffel.vim	/^let s:types.lang = 'eiffel'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/eiffel.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/eiffel.vim	/^let s:types.sro = '.' " Not sure, is nesting even possible?$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/elm.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/elm.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/elm.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/elm.vim	/^let s:types.lang = 'elm'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/elm.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/elm.vim	/^let s:types.sro = ':'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/erlang.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/erlang.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/erlang.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/erlang.vim	/^let s:types.lang = 'erlang'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/erlang.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/erlang.vim	/^let s:types.sro        = '.' " Not sure, is nesting even possible?$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/fortran.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/fortran.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/fortran.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/fortran.vim	/^let s:types.lang = 'fortran'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/fortran.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/fortran.vim	/^let s:types.sro = '.' " Not sure, is nesting even possible?$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/html.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/html.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/html.vim	/^let s:types.lang = 'html'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/java.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/java.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/java.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/java.vim	/^let s:types.lang = 'java'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/java.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/java.vim	/^let s:types.sro = '.'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/javascript.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/javascript.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/javascript.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/javascript.vim	/^let s:types.lang = 'javascript'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/javascript.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/javascript.vim	/^let s:types.sro        = '.'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/lisp.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/lisp.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/lisp.vim	/^let s:types.lang = 'lisp'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/lua.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/lua.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/lua.vim	/^let s:types.lang = 'lua'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/make.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/make.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/make.vim	/^let s:types.lang = 'make'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/matlab.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/matlab.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/matlab.vim	/^let s:types.lang = 'matlab'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/mxml.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/mxml.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/mxml.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/mxml.vim	/^let s:types.lang = 'flex'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/mxml.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/mxml.vim	/^let s:types.sro        = '.'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/objc.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/objc.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/objc.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/objc.vim	/^let s:types.lang = 'objectivec'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/objc.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/objc.vim	/^let s:types.sro = ':'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ocaml.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ocaml.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ocaml.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ocaml.vim	/^let s:types.lang = 'ocaml'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ocaml.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ocaml.vim	/^let s:types.sro = '.' " Not sure, is nesting even possible?$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/pascal.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/pascal.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/pascal.vim	/^let s:types.lang = 'pascal'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/perl.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/perl.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/perl.vim	/^let s:types.lang = 'perl'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/php.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/php.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/php.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/php.vim	/^let s:types.lang = 'php'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/php.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/php.vim	/^let s:types.sro = '\\\\'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/proto.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/proto.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/proto.vim	/^let s:types.lang = 'Protobuf'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/python.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/python.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/python.vim	/^let s:types.kinds     = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/python.vim	/^let s:types.lang = 'python'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/python.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/python.vim	/^let s:types.sro        = '.'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/r.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/r.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/r.vim	/^let s:types.lang = 'R'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/rexx.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/rexx.vim	/^let s:types.kinds     = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/rexx.vim	/^let s:types.lang = 'rexx'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ruby.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ruby.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ruby.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ruby.vim	/^let s:types.lang = 'ruby'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ruby.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/ruby.vim	/^let s:types.sro = '.'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/rust.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/rust.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/rust.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/rust.vim	/^let s:types.lang = 'rust'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/rust.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/rust.vim	/^let s:types.sro = '::'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/scheme.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/scheme.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/scheme.vim	/^let s:types.lang = 'scheme'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/sh.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/sh.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/sh.vim	/^let s:types.lang = 'sh'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/slang.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/slang.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/slang.vim	/^let s:types.lang = 'slang'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/sml.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/sml.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/sml.vim	/^let s:types.lang = 'sml'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/sql.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/sql.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/sql.vim	/^let s:types.lang = 'sql'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/tcl.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/tcl.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/tcl.vim	/^let s:types.lang = 'tcl'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/tex.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/tex.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/tex.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/tex.vim	/^let s:types.lang = 'tex'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/tex.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/tex.vim	/^let s:types.sort = 0$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/tex.vim	/^let s:types.sro = '""'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vala.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vala.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vala.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vala.vim	/^let s:types.lang = 'vala'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vala.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vala.vim	/^let s:types.sro = '.'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vera.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vera.vim	/^let s:types.kind2scope = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vera.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vera.vim	/^let s:types.lang = 'vera'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vera.vim	/^let s:types.scope2kind = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vera.vim	/^let s:types.sro        = '.' " Nesting doesn't seem to be possible$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/verilog.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/verilog.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/verilog.vim	/^let s:types.lang = 'verilog'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vhdl.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vhdl.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vhdl.vim	/^let s:types.lang = 'vhdl'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vim.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vim.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/vim.vim	/^let s:types.lang = 'vim'$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/yacc.vim	/^let s:types = {}$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/yacc.vim	/^let s:types.kinds = {$/;"	v
s:types	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/yacc.vim	/^let s:types.lang = 'yacc'$/;"	v
s:types6	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/perl6.vim	/^let s:types6 = {}$/;"	v
s:types6	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/perl6.vim	/^let s:types6.kinds = {$/;"	v
s:types6	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/perl6.vim	/^let s:types6.lang = 'perl6'$/;"	v
s:ui_property_names	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^let s:ui_property_names = [$/;"	v
s:undercurl	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:undercurl = ''$/;"	v
s:undercurl	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:undercurl = 'undercurl,'$/;"	v
s:underline	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:underline = ''$/;"	v
s:underline	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:underline = 'underline,'$/;"	v
s:undo_ftplugin	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	.config/nvim/plugged/vim-ruby/ftplugin/eruby.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_lock	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/undo.vim	/^let s:undo_lock = {}$/;"	v
s:undo_lock	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^let s:undo_lock = {}$/;"	v
s:undo_lock._save	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/undo.vim	/^function! s:undo_lock._save() abort$/;"	f
s:undo_lock._save	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:undo_lock._save() abort$/;"	f
s:undo_lock.restore	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/undo.vim	/^function! s:undo_lock.restore() abort$/;"	f
s:undo_lock.restore	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:undo_lock.restore() abort$/;"	f
s:undo_lock.save	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/undo.vim	/^function! s:undo_lock.save() abort$/;"	f
s:undo_lock.save	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:undo_lock.save() abort$/;"	f
s:undo_lock.undobreak	.config/nvim/plugged/vim-easymotion/autoload/EasyMotion/undo.vim	/^function! s:undo_lock.undobreak() abort$/;"	f
s:undo_lock.undobreak	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:undo_lock.undobreak() abort$/;"	f
s:uniq	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:uniq(list) abort$/;"	f
s:uniq	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^function! s:uniq(list) abort$/;"	f
s:uniq	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:uniq(list) abort$/;"	f
s:uniq_by	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:uniq_by(list, f) abort$/;"	f
s:unite_source	.config/nvim/plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^let s:unite_source = {$/;"	v
s:unite_source	.config/nvim/plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^let s:unite_source.action_table.expand = {$/;"	v
s:unite_source	.config/nvim/plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^let s:unite_source.action_table.preview = {$/;"	v
s:unite_source.action_table.expand.func	.config/nvim/plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^function! s:unite_source.action_table.expand.func(candidate) abort$/;"	f
s:unite_source.action_table.preview.func	.config/nvim/plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^function! s:unite_source.action_table.preview.func(candidate) abort$/;"	f
s:unite_source.gather_candidates	.config/nvim/plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^function! s:unite_source.gather_candidates(args, context) abort$/;"	f
s:unite_source.get_longest_snippet_len	.config/nvim/plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^function! s:unite_source.get_longest_snippet_len(snippet_list) abort$/;"	f
s:unite_source.hooks.on_syntax	.config/nvim/plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^function! s:unite_source.hooks.on_syntax(args, context) abort$/;"	f
s:unix_redir	.config/nvim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unload	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:unload() abort dict$/;"	f
s:unmapping	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Keymapping.vim	/^function! s:unmapping(keymapping, key, ...)$/;"	f
s:unshift	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:unshift(list, val) abort$/;"	f
s:untracked_jobs	.vim/plugged/vim-airline/autoload/airline/async.vim	/^let s:untracked_jobs = {}$/;"	v
s:untracked_output	.vim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:untracked_output(dict, buf)$/;"	f
s:update	.config/nvim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:update() abort$/;"	f
s:update	.vim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:update() abort$/;"	f
s:update_branch	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_branch()$/;"	f
s:update_buffer	.config/nvim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:update_buffer() abort$/;"	f
s:update_buffer	.vim/plugged/denite.nvim/autoload/denite/filter.vim	/^function! s:update_buffer() abort$/;"	f
s:update_finish	.config/nvim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_finish	.vim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_git_branch	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_git_branch()$/;"	f
s:update_hg_branch	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_hg_branch()$/;"	f
s:update_impl	.config/nvim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_impl	.vim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_in_progress	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_python	.config/nvim/autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_python	.vim/autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_queue	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:update_ruby	.config/nvim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_ruby	.vim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_tabline	.vim/plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! s:update_tabline()$/;"	f
s:update_tags	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
s:update_untracked	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_untracked()$/;"	f
s:update_vim	.config/nvim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:update_vim	.vim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:update_wordcount	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! s:update_wordcount(force_update)$/;"	f
s:upgrade	.config/nvim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade	.vim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:upgrade(dict)$/;"	f
s:upgrade_specs	.config/nvim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:upgrade_specs	.vim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:url_encode	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:url_encode(str, ...) abort$/;"	f
s:use_semicolon	.vim/plugged/vim-closer/autoload/closer.vim	/^function! s:use_semicolon(ln)$/;"	f
s:use_sh	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:use_sh()$/;"	f
s:use_winid	.config/nvim/plugged/vista.vim/autoload/vista/source.vim	/^let s:use_winid = exists('*bufwinid')$/;"	v
s:valid_dir	.vim/plugged/vim-airline/autoload/airline/async.vim	/^function! s:valid_dir(dir)$/;"	f
s:valid_key	.config/nvim/plugged/vim-projectionist/autoload/projectionist.vim	/^let s:valid_key = '^\\%([^*{}]*\\*\\*[^*{}]\\{2\\}\\)\\=[^*{}]*\\*\\=[^*{}]*$'$/;"	v
s:validate_layout	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:validate_layout(layout)$/;"	f
s:variable	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^let s:variable = {}$/;"	v
s:variable.restore	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^function! s:variable.restore() abort$/;"	f
s:variables	.config/nvim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:variables(bufnr) abort$/;"	f
s:variables	.vim/plugged/coc.nvim/autoload/coc/util.vim	/^function! s:variables(bufnr) abort$/;"	f
s:vcs_config	.vim/plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:vcs_config = {$/;"	v
s:vcs_markers	.config/nvim/plugged/denite.nvim/autoload/denite/project.vim	/^let s:vcs_markers = ['.git', '.bzr', '.hg', '.svn']$/;"	v
s:vcs_markers	.vim/plugged/denite.nvim/autoload/denite/project.vim	/^let s:vcs_markers = ['.git', '.bzr', '.hg', '.svn']$/;"	v
s:verbosefiles	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Capture.vim	/^let s:verbosefiles = []$/;"	v
s:version	.vim/plugged/papercolor-theme/colors/PaperColor.vim	/^let s:version = '0.9.x'$/;"	v
s:version_file	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^  let s:version_file = findfile('.ruby-version', '.;')$/;"	v
s:version_requirement	.config/nvim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:version_requirement	.vim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:vert_split	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:vert_split = get(s:gb, g:gruvbox_vert_split)$/;"	v
s:vert_split	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:vert_split = s:bg0$/;"	v
s:viewEdit	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:viewEdit(cmd, ...) abort$/;"	f
s:viewList	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:viewList(A,L,P)$/;"	f
s:view_types	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:view_types = split('rhtml,erb,rxml,builder,rjs,haml',',')$/;"	v
s:viewer	.config/nvim/plugged/vista.vim/autoload/vista/renderer/kind.vim	/^let s:viewer = {}$/;"	v
s:viewer.init	.config/nvim/plugged/vista.vim/autoload/vista/renderer/kind.vim	/^function! s:viewer.init(data) abort$/;"	f
s:viewer.render	.config/nvim/plugged/vista.vim/autoload/vista/renderer/kind.vim	/^function! s:viewer.render() abort$/;"	f
s:vim8	.config/nvim/autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim8	.vim/autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim_bg	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:vim_bg = ['bg', 'bg']$/;"	v
s:vim_cmdline_mapping	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/KeyMapping.vim	/^let s:vim_cmdline_mapping = {$/;"	v
s:vim_cmdline_mapping.keymapping	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/KeyMapping.vim	/^function! s:vim_cmdline_mapping.keymapping(cmdline)$/;"	f
s:vim_cmdline_mapping.on_enter	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/KeyMapping.vim	/^function! s:vim_cmdline_mapping.on_enter(cmdline)$/;"	f
s:vim_config_dir	.config/nvim/plugged.vim	/^let s:vim_config_dir = expand('~\/.config\/nvim')$/;"	v
s:vim_fg	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^let s:vim_fg = ['fg', 'fg']$/;"	v
s:vim_plug_home	.config/nvim/plugged.vim	/^let s:vim_plug_home = s:vim_config_dir . '\/plugged'$/;"	v
s:vim_plug_script	.config/nvim/plugged.vim	/^let s:vim_plug_script = s:vim_config_dir . '\/autoload\/plug.vim'$/;"	v
s:visibility_icon	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^let s:visibility_icon = {$/;"	v
s:visibility_icon	.config/nvim/plugged/vista.vim/autoload/vista/renderer/line.vim	/^let s:visibility_icon = {$/;"	v
s:visual1	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:visual1   = [s:base10[0], s:base09[0], s:base10[1], s:base09[1]]$/;"	v
s:visual1	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:visual1   = [s:base10[0], s:base09[0], s:base10[1], s:base09[1]]$/;"	v
s:visual2	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:visual2   = [s:base07[0], s:base03[0], s:base07[1], s:base03[1]]$/;"	v
s:visual2	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:visual2   = [s:base07[0], s:base03[0], s:base07[1], s:base03[1]]$/;"	v
s:visual3	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:visual3   = [s:base07[0], s:base01[0], s:base07[1], s:base01[1]]$/;"	v
s:visual3	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:visual3   = [s:base07[0], s:base01[0], s:base07[1], s:base01[1]]$/;"	v
s:vital_base_dir	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^let s:vital_base_dir = expand('<sfile>:h')$/;"	v
s:vital_files	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! s:vital_files() abort$/;"	f
s:vname	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionMessage.vim	/^let s:vname = expand("<sfile>:h:h:h:h:t")$/;"	v
s:vname	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Exception.vim	/^let s:vname = expand("<sfile>:h:h:t")$/;"	v
s:warn	.config/nvim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:warn	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:warn(message)$/;"	f
s:warn	.config/nvim/plugged/vim-bundler/plugin/bundler.vim	/^function! s:warn(str) abort$/;"	f
s:warn	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Message.vim	/^function! s:warn(msg) abort$/;"	f
s:warn	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:warn(str) abort$/;"	f
s:warn	.vim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:warn	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:warn(msg)$/;"	f
s:warning	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnext.vim	/^let s:warning   = [s:base09[0], s:base01[0], s:base09[1], s:base01[1]]$/;"	v
s:warning	.config/nvim/plugged/oceanic-next/autoload/airline/themes/oceanicnextlight.vim	/^let s:warning   = [s:base09[0], s:base01[0], s:base09[1], s:base01[1]]$/;"	v
s:warning_sign	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^let s:warning_sign = get(g:, 'coc_status_warning_sign', has('mac') ? '⚠️ ' : 'W')$/;"	v
s:warning_sign	.vim/plugged/coc.nvim/autoload/coc.vim	/^let s:warning_sign = get(g:, 'coc_status_warning_sign', has('mac') ? '⚠️ ' : 'W')$/;"	v
s:warning_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/coc.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#coc#warning_symbol', 'W:')$/;"	v
s:warning_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#languageclient#warning_symbol', 'W:')$/;"	v
s:warning_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#neomake#warning_symbol', 'W:')$/;"	v
s:warning_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#syntastic#warning_symbol', 'W:')$/;"	v
s:warning_symbol	.vim/plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#ycm#warning_symbol', 'W:')$/;"	v
s:watched_keys	.config/nvim/plugged/coc.nvim/autoload/coc.vim	/^let s:watched_keys = []$/;"	v
s:watched_keys	.vim/plugged/coc.nvim/autoload/coc.vim	/^let s:watched_keys = []$/;"	v
s:wcswidth	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^  function! s:wcswidth(str) abort$/;"	f
s:webcat	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^function! s:webcat() abort$/;"	f
s:wide	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:wide = 120$/;"	v
s:wildignores_options_path	.config/nvim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:win2pos2hint_to_w2l2c2h	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:win2pos2hint_to_w2l2c2h(win2pos2hint) abort$/;"	f
s:wincall	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:wincall(func, arglist, ...) abort$/;"	f
s:windows_sink	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:windows_sink(line)$/;"	f
s:winnr2poses_to_list	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^function! s:winnr2poses_to_list(winnr2poses, ...) abort$/;"	f
s:wipebuf	.vim/sessions/default.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
s:wipebuf	.vim/sessions/foo.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
s:wise	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! s:wise(default)$/;"	f
s:with_cd	.config/nvim/autoload/plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
s:with_cd	.vim/autoload/plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
s:with_index	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:with_index(list, ...) abort$/;"	f
s:wordcount_cache	.vim/plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^let s:wordcount_cache = 0  " cache wordcount for performance when force_update=0$/;"	v
s:wrap	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:wrap(name, opts, bang)$/;"	f
s:wrap	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:wrap(string,char,type,removed,special)$/;"	f
s:wrap	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:wrap(string,char,type,removed,special)$/;"	f
s:wrap_a	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:wrap_a(back,forward) abort$/;"	f
s:wrap_accent	.vim/plugged/vim-airline/autoload/airline/section.vim	/^function! s:wrap_accent(part, value)$/;"	f
s:wrap_cmds	.vim/plugged/fzf/plugin/fzf.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
s:wrap_i	.config/nvim/plugged/vim-ruby/ftplugin/ruby.vim	/^function! s:wrap_i(back,forward) abort$/;"	f
s:wrapreg	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,removed,special)$/;"	f
s:wrapreg	.vim/plugged/vim-surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,removed,special)$/;"	f
s:write_triggered_update_tags	.config/nvim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
s:ws_refresh	.vim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:ws_refresh()$/;"	f
s:xterm_escape_template	.vim/plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:xterm_escape_template = '\\033]12;%s\\007'$/;"	v
s:xterm_launcher	.vim/plugged/fzf/plugin/fzf.vim	/^function! s:xterm_launcher()$/;"	f
s:yaml	.config/nvim/plugged/vim-rails/autoload/rails.vim	/^let s:yaml = {}$/;"	v
s:yank_to_register	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:yank_to_register(data)$/;"	f
s:yellow	.config/nvim/plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:yellow = s:getGruvColor('GruvboxYellow')$/;"	v
s:yellow	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:yellow = s:gb.bright_yellow$/;"	v
s:yellow	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:yellow = s:gb.faded_yellow$/;"	v
s:yellow	.config/nvim/plugged/gruvbox/colors/gruvbox.vim	/^  let s:yellow[1] = 11$/;"	v
s:yellow	.vim/plugged/vim-pink-moon/colors/pink-moon.vim	/^let s:yellow = "FDF8CE"$/;"	v
s:zip	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:zip(...) abort$/;"	f
s:zip_fill	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^function! s:zip_fill(xs, ys, filler) abort$/;"	f
safari	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	safari: \/webkit\/.test( userAgent ),$/;"	p	class:jQuery.browser
safari2	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		    safari2      = safari && parseInt(version) < 522 && !\/adobeair\/i.test(userAgent),$/;"	v
safe_call	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/util.py	/^def safe_call(fn: typing.Callable[..., typing.Any],$/;"	f
sandbox	.vim/plugged/coc.nvim/src/util/factory.ts	/^  const sandbox = createSandbox(filename, createLogger(`extension-${id}`))$/;"	C	function:createExtension
sandbox	.vim/plugged/coc.nvim/src/util/factory.ts	/^  const sandbox = vm.createContext({$/;"	C	function:createSandbox
save_mark	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def save_mark(name):$/;"	f
savedHeight	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { nvim, ui, savedHeight } = this$/;"	C
savedHeight	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private savedHeight: number$/;"	C
sc	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let sc = i == range.start.line ? range.start.character : 0$/;"	v
sc	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [, sl, sc] = await nvim.call('getpos', isVisual ? `'<` : `'[`) as [number, number, numbe/;"	v
scala definitions	.config/nvim/plugged/switch.vim/spec/plugin/scala_spec.rb	/^describe "scala definitions" do$/;"	d
scan	.vim/plugged/fzf/src/matcher.go	/^func (m *Matcher) scan(request MatchRequest) (*Merger, bool) {$/;"	f	struct:fzf.Matcher	typeref:typename:(*Merger, bool)
scanner	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const scanner = new Scanner()$/;"	C
scantree	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/scantree.py	/^def scantree(path_name, skip_list=None):$/;"	f
scantree	.vim/plugged/denite.nvim/rplugin/python3/denite/scantree.py	/^def scantree(path_name, skip_list=None):$/;"	f
schema	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let schema = { 'my.schema': { 'foo.bar': 1 } }$/;"	v
schema	.vim/plugged/coc.nvim/src/__tests__/modules/settings.json	/^  "schema": {$/;"	o
scheme	.vim/plugged/coc.nvim/src/util/match.ts	/^    const { language, pattern, scheme } = selector$/;"	C	function:score
schemes	.vim/plugged/coc.nvim/src/workspace.ts	/^    let schemes = this.schemeProviderMap.keys()$/;"	v
score	.vim/plugged/coc.nvim/src/__tests__/completion/match.test.ts	/^function score(word: string, input: string): number {$/;"	f
score	.vim/plugged/coc.nvim/src/list/source/commands.ts	/^function score(list: string[], key: string): number {$/;"	f
score	.vim/plugged/coc.nvim/src/list/source/lists.ts	/^function score(list: string[], key: string): number {$/;"	f
score	.vim/plugged/coc.nvim/src/list/worker.ts	/^  score: number$/;"	p	interface:ExtendedItem
score	.vim/plugged/coc.nvim/src/provider/manager.ts	/^      let score = workspace.match(selector, document)$/;"	v
score	.vim/plugged/coc.nvim/src/types.ts	/^  score?: number$/;"	p	interface:VimCompleteItem
score	.vim/plugged/coc.nvim/src/util/fzy.ts	/^export function score(needle, haystack): number {$/;"	f
score	.vim/plugged/coc.nvim/src/util/match.ts	/^export function score(selector: DocumentSelector | DocumentFilter | string, uri: string, languag/;"	f
score	.vim/plugged/coc.nvim/src/util/score.ts	/^  score: number$/;"	p	interface:MatchResult
scoreGapExtention	.vim/plugged/fzf/src/algo/algo.go	/^	scoreGapExtention = -1$/;"	c	package:algo
scoreGapStart	.vim/plugged/fzf/src/algo/algo.go	/^	scoreGapStart     = -3$/;"	c	package:algo
scoreMatch	.vim/plugged/fzf/src/algo/algo.go	/^	scoreMatch        = 16$/;"	c	package:algo
screenLine	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async screenLine(line: number): Promise<string> {$/;"	m	class:Helper
scripts	.config/nvim/plugged/coc.nvim/package.json	/^  "scripts": {$/;"	o
scripts	.vim/plugged/coc.nvim/package.json	/^  "scripts": {$/;"	o
scrollStepSize	vimium-options.json	/^  "scrollStepSize": 60,$/;"	n
scrollbar	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let bounding: PumBounding = { col, row, height, width, scrollbar }$/;"	v
scrollbar	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { completed_item, col, row, height, width, scrollbar } = ev$/;"	v
scrollbar	.vim/plugged/coc.nvim/src/types.ts	/^  readonly scrollbar: boolean$/;"	p	interface:PumBounding
scrollbar	.vim/plugged/coc.nvim/src/types.ts	/^  scrollbar: boolean$/;"	p	interface:PopupChangeEvent
search	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    search: str = ''$/;"	v	class:Context
search	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let search = this.getResumeInput(content)$/;"	v
search	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let search = byteSlice(line, option.col, col - 1)$/;"	v
search	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let search = content.slice(characterIndex(content, this.option.col))$/;"	v
searchEngines	vimium-options.json	/^  "searchEngines": "w: https:\/\/www.wikipedia.org\/w\/index.php?title=Special:Search&search=%s /;"	s
searchUrl	vimium-options.json	/^  "searchUrl": "https:\/\/www.google.com\/search?q=",$/;"	s
search_file	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def search_file(self, path: Path, index: int) -> bool:$/;"	m	class:View
second	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const [, second] = snippet.placeholders$/;"	C
second	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const [first, second] = placeholders$/;"	C
second	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let [first, second] = snippet.placeholders$/;"	v
section	.config/nvim/plugged/emmet-vim/docs/static/css/style-sites.css	/^section {$/;"	s
section	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let section = this._client.clientOptions.synchronize!.configurationSection$/;"	v
section	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let { section } = data.registerOptions$/;"	v
sections	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let sections: string[] | undefined$/;"	v
seen	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const seen = new Set<Marker>()$/;"	C
seen	.vim/plugged/coc.nvim/src/util/array.ts	/^  const seen: { [key: string]: boolean } = Object.create(null)$/;"	C	function:group
segments	.vim/plugged/coc.nvim/src/configuration/util.ts	/^  const segments = key.split('.')$/;"	C	function:addToValueTree
segments	.vim/plugged/coc.nvim/src/configuration/util.ts	/^  const segments = key.split('.')$/;"	C	function:removeFromValueTree
select	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def select(start, end):$/;"	f
selectItem	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) selectItem(item *Item) {$/;"	f	struct:fzf.Terminal
selectRange	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let selectRange: Range$/;"	v
select_count	.vim/plugged/fzf/test/test_go.rb	/^          def select_count$/;"	f	method:until
select_next_tab	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_snippet_instance.py	/^    def select_next_tab(self, backwards=False):$/;"	m	class:SnippetInstance
selected	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let selected = manager.ui.selectedItems$/;"	v
selected	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { selected } = this$/;"	v
selected	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { selected, items } = this$/;"	v
selected	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { selected, nvim, signOffset, bufnr } = this$/;"	v
selected	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^    let selected = await this.nvim.getVar('coc_selected_text') as string$/;"	v
selected	.vim/plugged/fzf/src/terminal.go	/^	selected   map[int32]selectedItem$/;"	m	struct:fzf.Terminal	typeref:typename:map[int32]selectedItem
selected	.vim/plugged/fzf/src/terminal.go	/^	selected bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
selectedItem	.vim/plugged/fzf/src/terminal.go	/^type selectedItem struct {$/;"	s	package:fzf
selection	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let [ve, selection, pumvisible, mode] = await nvim.eval('[&virtualedit, &selection, pumvisib/;"	v
selection	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [bufnr, ve, selection, mode] = await nvim.eval(`[bufnr('%'), &virtualedit, &selection, m/;"	v
selectionRange	.vim/plugged/coc.nvim/src/handler/index.ts	/^        selectionRange = selectionRange.parent$/;"	v
selectionRange	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let { selectionRange } = this$/;"	v
selectionRange	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let selectionRange: SelectionRange$/;"	v
selectionRange	.vim/plugged/coc.nvim/src/handler/index.ts	/^  selectionRange?: Range$/;"	p	interface:SymbolInfo
selectionRanges	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let selectionRanges: SelectionRange[] = await languages.getSelectionRanges(doc.textDocument,/;"	v
selectionRanges	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let selectionRanges: SelectionRange[] = await languages.getSelectionRanges(document, [positi/;"	v
selector	.vim/plugged/coc.nvim/src/__tests__/client/converter.test.ts	/^    let selector = ['css', { language: 'javascript' }]$/;"	v
selector	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    for (const selector of selectors) {$/;"	C
selector	.vim/plugged/coc.nvim/src/language-client/colorProvider.ts	/^    const selector = implCapabilities.documentSelector || documentSelector$/;"	C	method:ColorProviderFeature.initialize
selector	.vim/plugged/coc.nvim/src/language-client/declaration.ts	/^      const selector = declCapabilities.documentSelector || documentSelector$/;"	C	method:DeclarationFeature.initialize
selector	.vim/plugged/coc.nvim/src/language-client/foldingRange.ts	/^    const selector = implCapabilities.documentSelector || documentSelector$/;"	C	method:FoldingRangeFeature.initialize
selector	.vim/plugged/coc.nvim/src/language-client/implementation.ts	/^      const selector = implCapabilities.documentSelector || documentSelector$/;"	C	method:ImplementationFeature.initialize
selector	.vim/plugged/coc.nvim/src/language-client/selectionRange.ts	/^    const selector = implCapabilities.documentSelector || documentSelector$/;"	C	method:SelectionRangeFeature.initialize
selector	.vim/plugged/coc.nvim/src/language-client/typeDefinition.ts	/^      const selector = implCapabilities.documentSelector || documentSelector$/;"	C	method:TypeDefinitionFeature.initialize
selector	.vim/plugged/coc.nvim/src/provider/manager.ts	/^      let { selector, priority } = item$/;"	v
selector	.vim/plugged/coc.nvim/src/provider/manager.ts	/^  selector: DocumentSelector$/;"	p	interface:ProviderItem
selector	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^      let { triggerCharacters, selector } = o$/;"	v
selector	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^      selector,$/;"	v
selector	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^  selector: DocumentSelector$/;"	p	interface:ProviderItem
selector	.vim/plugged/coc.nvim/src/services.ts	/^      selector: client.clientOptions.documentSelector,$/;"	v
selector	.vim/plugged/coc.nvim/src/services.ts	/^    let selector = service.selector$/;"	v
selector	.vim/plugged/coc.nvim/src/types.ts	/^  selector: DocumentSelector$/;"	p	interface:IServiceProvider
self	.vim/plugged/coc.nvim/src/util/platform.ts	/^declare let self: any$/;"	v
self-closing tags	.config/nvim/plugged/sideways.vim/spec/plugin/html_attributes_spec.rb	/^  describe "self-closing tags" do$/;"	d
semi	.config/nvim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^def semi(snip):$/;"	f
semi	.vim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^def semi(snip):$/;"	f
semver	.config/nvim/plugged/coc.nvim/bin/server.js	/^const semver = require('semver')$/;"	C
semver	.config/nvim/plugged/coc.nvim/package.json	/^    "semver": "^6.1.1",$/;"	s	object:dependencies
semver	.vim/plugged/coc.nvim/bin/server.js	/^const semver = require('semver')$/;"	C
semver	.vim/plugged/coc.nvim/package.json	/^    "semver": "^6.1.1",$/;"	s	object:dependencies
send	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def send(self, keys):$/;"	m	class:VimInterfaceWindows
send	.vim/plugged/ghost-text.vim/python3/vim_channel_handler.py	/^    async def send(self, message):$/;"	m	class:Channel
send	.vim/plugged/ghost-text.vim/python3/vim_websocket_handler.py	/^    async def send(self, buf_name, text, selection):$/;"	m	class:Manager
sendNotification	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public sendNotification<RO>(type: NotificationType0<RO>): void$/;"	m	class:BaseLanguageClient
sendNotification	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  sendNotification(method: string | RPCMessageType, params?: any): void$/;"	m	interface:IConnection
sendNotification	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  sendNotification(method: string): void$/;"	m	interface:IConnection
sendNotification	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  sendNotification(method: string, params: any): void$/;"	m	interface:IConnection
sendNotification	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  sendNotification<P, RO>(type: NotificationType<P, RO>, params?: P): void$/;"	m	interface:IConnection
sendNotification	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  sendNotification<RO>(type: NotificationType0<RO>): void$/;"	m	interface:IConnection
sendRequest	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public sendRequest<R, E, RO>($/;"	m	class:BaseLanguageClient
sendRequest	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  sendRequest<P, R, E, RO>($/;"	m	interface:IConnection
sendRequest	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  sendRequest<R, E, RO>($/;"	m	interface:IConnection
sendRequest	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  sendRequest<R>($/;"	m	interface:IConnection
sendRequest	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  sendRequest<R>(method: string, token?: CancellationToken): Thenable<R>$/;"	m	interface:IConnection
sendRequest	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  sendRequest<R>(type: string | RPCMessageType, ...params: any[]): Thenable<R>$/;"	m	interface:IConnection
sendResponse	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^function sendResponse(data: any): void {$/;"	f
sendSubscription	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^function sendSubscription(uid: string, root: string, files: FileChangeItem[]): void {$/;"	f
sendText	.vim/plugged/coc.nvim/src/model/terminal.ts	/^  public sendText(text: string, addNewLine = true): void {$/;"	m	class:TerminalModel
sendText	.vim/plugged/coc.nvim/src/types.ts	/^  sendText(text: string, addNewLine?: boolean): void$/;"	m	interface:Terminal
send_keys	.vim/plugged/fzf/test/test_go.rb	/^  def send_keys(*args)$/;"	f
send_to_terminal	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def send_to_terminal(self, s):$/;"	m	class:VimInterface
send_to_terminal	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def send_to_terminal(self, s):$/;"	m	class:VimInterfaceTmux
send_to_vim	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def send_to_vim(self, s):$/;"	m	class:VimInterface
send_to_vim	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def send_to_vim(self, s):$/;"	m	class:VimInterfaceTmux
send_to_vim	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def send_to_vim(self, s):$/;"	m	class:VimInterfaceTmuxNeovim
sendall	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def sendall(self, commands):$/;"	m	class:Socket
sendall	.vim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def sendall(self, commands):$/;"	m	class:Socket
separator	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^  private separator: string$/;"	p	class:CodeLensManager
sequence	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let sequence = this.sequence = new CallSequence()$/;"	v
server	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^let server: net.Server$/;"	v
serverModule	.vim/plugged/coc.nvim/src/__tests__/client/changedFiles.test.ts	/^    let serverModule = path.join(__dirname, '.\/server\/testFileWatcher.js')$/;"	v
serverModule	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^    let serverModule = path.join(__dirname, '.\/server\/testInitializeResult.js')$/;"	v
serverOptions	.vim/plugged/coc.nvim/src/__tests__/client/changedFiles.test.ts	/^    let serverOptions: lsclient.ServerOptions = {$/;"	v
serverOptions	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^    let serverOptions: lsclient.ServerOptions = {$/;"	v
serveraddr	.vim/plugged/nvim-yarp/pythonx/yarp.py	/^        serveraddr, port = serveraddr.split(':')$/;"	v
serveraddr	.vim/plugged/nvim-yarp/pythonx/yarp.py	/^serveraddr = sys.argv[1]$/;"	v
servers	.vim/plugged/coc.nvim/src/__tests__/modules/settings.json	/^  "servers": {$/;"	o
service	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^      let service = services.getService(id)$/;"	v
service	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let service = services.getService(clientId)$/;"	v
service	.vim/plugged/coc.nvim/src/list/source/actions.ts	/^          let service = services.getService(clientId)$/;"	v
service	.vim/plugged/coc.nvim/src/services.ts	/^        service.state = ServiceStat.Starting$/;"	v
service	.vim/plugged/coc.nvim/src/services.ts	/^    for (let service of services) {$/;"	v
service	.vim/plugged/coc.nvim/src/services.ts	/^    for (let service of this.registed.values()) {$/;"	v
service	.vim/plugged/coc.nvim/src/services.ts	/^    let service = this.getService(id)$/;"	v
service	.vim/plugged/coc.nvim/src/services.ts	/^    let service = this.registed.get(id)$/;"	v
service	.vim/plugged/coc.nvim/src/services.ts	/^    let service: IServiceProvider = {$/;"	v
serviceState	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  public get serviceState(): ServiceStat {$/;"	m	class:LanguageClient
services	.vim/plugged/coc.nvim/src/services.ts	/^    let services = this.getServices(document)$/;"	v
session	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let session = new SnippetSession(nvim, buf.id)$/;"	v
session	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let session = new SnippetSession(nvim, doc.bufnr)$/;"	v
session	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^      let session = this.getSession(bufnr)$/;"	v
session	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^      let session = this.getSession(doc.bufnr)$/;"	v
session	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^      let { session } = this$/;"	v
session	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    let session = this.getSession(bufnr)$/;"	v
session	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    let session = this.getSession(workspace.bufnr)$/;"	v
session	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    let { session } = this$/;"	v
session	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^session = None$/;"	v
session_file	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    session_file: str = ''$/;"	v	class:Context
set	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def set(self, line, column):$/;"	m	class:_SnippetUtilCursor
set	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^set,$/;"	s
set	.vim/plugged/coc.nvim/src/types.ts	/^  set(entries: [string, Diagnostic[] | null][] | string, diagnostics?: Diagnostic[]): void$/;"	m	interface:DiagnosticCollection
set	.vim/plugged/coc.nvim/src/types.ts	/^  set(uri: string, diagnostics: Diagnostic[] | null): void$/;"	m	interface:DiagnosticCollection
setBg	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) setBg() {$/;"	f	struct:tui.LightWindow
setBuffer	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def setBuffer(text):$/;"	f
setFiletype	.vim/plugged/coc.nvim/src/model/popup.ts	/^  public setFiletype(filetype: string): void {$/;"	m	class:Popup
setKeywordOption	.vim/plugged/coc.nvim/src/model/chars.ts	/^  public setKeywordOption(keywordOption: string): void {$/;"	m	class:Range
setMouseEvent	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    async function setMouseEvent(line: number): Promise<void> {$/;"	f
setStatusText	.vim/plugged/coc.nvim/src/model/status.ts	/^  private async setStatusText(): Promise<void> {$/;"	C
setUp	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    def setUp(self):$/;"	m	class:VimTestCase
set_cursor_from_pos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def set_cursor_from_pos(pos):$/;"	f
set_default	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def set_default(vim: Nvim, var, val):$/;"	f
set_default	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def set_default(vim: Nvim, var, val):$/;"	f
set_file_contents	.config/nvim/plugged/dsf.vim/spec/support/vim.rb	/^    def set_file_contents(string)$/;"	f	module:Support.Vim
set_file_contents	.config/nvim/plugged/sideways.vim/spec/support/vim.rb	/^    def set_file_contents(string)$/;"	f	module:Support.Vim
set_file_contents	.config/nvim/plugged/switch.vim/spec/support/vim.rb	/^    def set_file_contents(string)$/;"	f	module:Support.Vim
set_file_contents	.config/nvim/plugged/tagalong.vim/spec/support/vim.rb	/^    def set_file_contents(string)$/;"	f	module:Support.Vim
set_mark_from_pos	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def set_mark_from_pos(name, pos):$/;"	f
set_var	.vim/plugged/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f
set_var	.vim/plugged/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	module:TestShell
settings	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "settings": {$/;"	o	object:definitions.languageServerBase.properties
settings	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "settings": {},$/;"	o	object:definitions.languageServerCommand.properties
settings	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "settings": {},$/;"	o	object:definitions.languageServerModule.properties
settings	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "settings": {},$/;"	o	object:definitions.languageServerSocket.properties
settings	.vim/plugged/coc.nvim/data/schema.json	/^        "settings": {$/;"	o	object:definitions.languageServerBase.properties
settings	.vim/plugged/coc.nvim/data/schema.json	/^        "settings": {},$/;"	o	object:definitions.languageServerCommand.properties
settings	.vim/plugged/coc.nvim/data/schema.json	/^        "settings": {},$/;"	o	object:definitions.languageServerModule.properties
settings	.vim/plugged/coc.nvim/data/schema.json	/^        "settings": {},$/;"	o	object:definitions.languageServerSocket.properties
settings	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      let settings = this.getConfiguredSettings(section as string)$/;"	v
settingsVersion	vimium-options.json	/^  "settingsVersion": "1.64.3",$/;"	s
setup	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public setup(): Promise<void> {$/;"	m	class:Helper
setup	.vim/plugged/fzf/test/test_go.rb	/^  def setup$/;"	f
setup	.vim/plugged/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestBash
setup	.vim/plugged/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestGoFZF
setup	.vim/plugged/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestZsh
setup	.vim/plugged/fzf/test/test_go.rb	/^  def setup$/;"	f	module:TestShell
setup_other_plugins	.config/nvim/plugged/ultisnips/test_all.py	/^def setup_other_plugins(all_plugins):$/;"	f
severity	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let { range, severity } = diagnostic$/;"	v
severity	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^      for (let severity of ['error', 'info', 'warning', 'hint']) {$/;"	v
severity	.vim/plugged/coc.nvim/src/types.ts	/^  severity: string$/;"	p	interface:DiagnosticItem
severityLevel	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let level = severity ? severityLevel(severity) : 0$/;"	v
severityLevel	.vim/plugged/coc.nvim/src/diagnostic/util.ts	/^export function severityLevel(level: string): number {$/;"	f
severityNames	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^const severityNames = ['CocError', 'CocWarning', 'CocInfo', 'CocHint']$/;"	C
shape	.vim/plugged/fzf/src/tui/tui.go	/^	shape       BorderShape$/;"	m	struct:tui.BorderStyle	typeref:typename:BorderShape
shell	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "shell": {$/;"	o	object:definitions.languageServerCommand.properties
shell	.vim/plugged/coc.nvim/data/schema.json	/^        "shell": {$/;"	o	object:definitions.languageServerCommand.properties
shell	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  shell?: boolean$/;"	p	interface:SpawnOptions
shell	.vim/plugged/coc.nvim/src/types.ts	/^  shell?: boolean$/;"	p	interface:LanguageServerConfig
shell scripts	.config/nvim/plugged/sideways.vim/spec/plugin/sh_spec.rb	/^describe "shell scripts" do$/;"	d
shellArgs	.vim/plugged/coc.nvim/src/types.ts	/^  shellArgs?: string[]$/;"	p	interface:TerminalOptions
shellPath	.vim/plugged/coc.nvim/src/types.ts	/^  shellPath?: string$/;"	p	interface:TerminalOptions
shell_in_repro	.config/nvim/plugged/ultisnips/Makefile	/^shell_in_repro:$/;"	t
shift	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def shift(self, amount=1):$/;"	m	class:SnippetUtil
shortcut	.vim/plugged/coc.nvim/src/languages.ts	/^      shortcut,$/;"	v
shortcut	.vim/plugged/coc.nvim/src/model/source.ts	/^  public get shortcut(): string {$/;"	m	class:Source
shortcut	.vim/plugged/coc.nvim/src/types.ts	/^  shortcut: string$/;"	p	interface:SourceStat
shortcut	.vim/plugged/coc.nvim/src/types.ts	/^  shortcut?: string$/;"	p	interface:ISource
shortcut	.vim/plugged/coc.nvim/src/types.ts	/^  shortcut?: string$/;"	p	interface:SourceConfig
shortcuts	.vim/plugged/coc.nvim/src/list/manager.ts	/^          shortcuts.add( ch )$/;"	C
shortcuts	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let shortcuts: Set<string> = new Set()$/;"	C
shorthand	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      let shorthand = this._accept(TokenType.VariableName, true)$/;"	v
shouldCancel	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let shouldCancel = action.persist !== true && action.name != 'preview'$/;"	v
shouldCommit	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^      shouldCommit: (_item, character) => {$/;"	v
shouldCommit	.vim/plugged/coc.nvim/src/types.ts	/^  shouldCommit?(item: VimCompleteItem, character: string): boolean$/;"	m	interface:ISource
shouldComplete	.vim/plugged/coc.nvim/src/model/source-vim.ts	/^  public async shouldComplete(opt: CompleteOption): Promise<boolean> {$/;"	m	class:VimSource
shouldComplete	.vim/plugged/coc.nvim/src/model/source.ts	/^  public async shouldComplete(opt: CompleteOption): Promise<boolean> {$/;"	m	class:Source
shouldComplete	.vim/plugged/coc.nvim/src/types.ts	/^  shouldComplete?(opt: CompleteOption): Promise<boolean>$/;"	m	interface:ISource
shouldRun	.vim/plugged/coc.nvim/src/completion/complete.ts	/^        let shouldRun = await Promise.resolve(source.shouldComplete(opt))$/;"	v
shouldTrigger	.vim/plugged/coc.nvim/src/completion/index.ts	/^      let shouldTrigger = await this.shouldTrigger(document, pre)$/;"	v
shouldTrigger	.vim/plugged/coc.nvim/src/provider/signatureManager.ts	/^  public shouldTrigger(document: TextDocument, triggerCharacter: string): boolean {$/;"	m	class:SignatureManager
show	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	show: function(){$/;"	m	class:jQuery.fx
show	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  public async show(docs: Documentation[], bounding: PumBounding, token: CancellationToken): Pro/;"	m	class:Floating
show	.vim/plugged/coc.nvim/src/model/popup.ts	/^  public show(): void {$/;"	m	class:Popup
show	.vim/plugged/coc.nvim/src/model/status.ts	/^      show: () => {$/;"	C
show	.vim/plugged/coc.nvim/src/model/terminal.ts	/^  public async show(preserveFocus?: boolean): Promise<void> {$/;"	m	class:TerminalModel
show	.vim/plugged/coc.nvim/src/types.ts	/^  show(): void$/;"	m	interface:StatusBarItem
show	.vim/plugged/coc.nvim/src/types.ts	/^  show(preserveFocus?: boolean): void$/;"	m	interface:OutputChannel
show	.vim/plugged/coc.nvim/src/types.ts	/^  show(preserveFocus?: boolean): void$/;"	m	interface:Terminal
showDocumentationFloating	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  private async showDocumentationFloating(docs: Documentation[], bounding: PumBounding, token: C/;"	m	class:Floating
showDocumentationVim	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  private async showDocumentationVim(docs: Documentation[], bounding: PumBounding, token: Cancel/;"	m	class:Floating
showInfo	.vim/plugged/coc.nvim/src/plugin.ts	/^  public async showInfo(): Promise<void> {$/;"	m	class:Plugin
showMessage	.vim/plugged/coc.nvim/src/types.ts	/^  showMessage(msg: string, identify?: MsgTypes): void$/;"	m	interface:IWorkspace
showOutputChannel	.vim/plugged/coc.nvim/src/types.ts	/^  showOutputChannel(name: string): void$/;"	m	interface:IWorkspace
showPrompt	.vim/plugged/coc.nvim/src/types.ts	/^  showPrompt(title: string): Promise<boolean>$/;"	m	interface:IWorkspace
showQuickpick	.vim/plugged/coc.nvim/src/types.ts	/^  showQuickpick(items: string[], placeholder?: string): Promise<number>$/;"	m	interface:IWorkspace
show_ignored_files	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    show_ignored_files: bool = False$/;"	v	class:Context
shownIds	.vim/plugged/coc.nvim/src/model/status.ts	/^  private shownIds: Set<string> = new Set()$/;"	C
shutdown	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async shutdown(): Promise<void> {$/;"	m	class:Helper
shutdown	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  shutdown(): Thenable<void>$/;"	m	interface:IConnection
shutdown	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def shutdown(cls):$/;"	m	class:NvimHandler
sideways#AroundCursor	.config/nvim/plugged/sideways.vim/autoload/sideways.vim	/^function! sideways#AroundCursor()$/;"	f
sideways#JumpLeft	.config/nvim/plugged/sideways.vim/autoload/sideways.vim	/^function! sideways#JumpLeft()$/;"	f
sideways#JumpRight	.config/nvim/plugged/sideways.vim/autoload/sideways.vim	/^function! sideways#JumpRight()$/;"	f
sideways#MoveLeft	.config/nvim/plugged/sideways.vim/autoload/sideways.vim	/^function! sideways#MoveLeft()$/;"	f
sideways#MoveRight	.config/nvim/plugged/sideways.vim/autoload/sideways.vim	/^function! sideways#MoveRight()$/;"	f
sideways#Parse	.config/nvim/plugged/sideways.vim/autoload/sideways.vim	/^function! sideways#Parse()$/;"	f
sideways#parsing#Parse	.config/nvim/plugged/sideways.vim/autoload/sideways/parsing.vim	/^function! sideways#parsing#Parse(definitions)$/;"	f
sideways#textobj#Argument	.config/nvim/plugged/sideways.vim/autoload/sideways/textobj.vim	/^function! sideways#textobj#Argument(mode)$/;"	f
sideways#util#DropCursor	.config/nvim/plugged/sideways.vim/autoload/sideways/util.vim	/^function! sideways#util#DropCursor()$/;"	f
sideways#util#GetCols	.config/nvim/plugged/sideways.vim/autoload/sideways/util.vim	/^function! sideways#util#GetCols(line, start, end)$/;"	f
sideways#util#GetItem	.config/nvim/plugged/sideways.vim/autoload/sideways/util.vim	/^function! sideways#util#GetItem(item)$/;"	f
sideways#util#GetMotion	.config/nvim/plugged/sideways.vim/autoload/sideways/util.vim	/^function! sideways#util#GetMotion(motion)$/;"	f
sideways#util#PeekCursor	.config/nvim/plugged/sideways.vim/autoload/sideways/util.vim	/^function! sideways#util#PeekCursor()$/;"	f
sideways#util#PopCursor	.config/nvim/plugged/sideways.vim/autoload/sideways/util.vim	/^function! sideways#util#PopCursor()$/;"	f
sideways#util#PushCursor	.config/nvim/plugged/sideways.vim/autoload/sideways/util.vim	/^function! sideways#util#PushCursor()$/;"	f
sideways#util#ReplaceCols	.config/nvim/plugged/sideways.vim/autoload/sideways/util.vim	/^function! sideways#util#ReplaceCols(line, start, end, text)$/;"	f
sideways#util#ReplaceItem	.config/nvim/plugged/sideways.vim/autoload/sideways/util.vim	/^function! sideways#util#ReplaceItem(item, text)$/;"	f
sideways#util#ReplaceMotion	.config/nvim/plugged/sideways.vim/autoload/sideways/util.vim	/^function! sideways#util#ReplaceMotion(motion, text)$/;"	f
sideways#util#SearchSkip	.config/nvim/plugged/sideways.vim/autoload/sideways/util.vim	/^function! sideways#util#SearchSkip(pattern, flags, skip, ...)$/;"	f
sideways#util#SetPos	.config/nvim/plugged/sideways.vim/autoload/sideways/util.vim	/^function! sideways#util#SetPos(line, col)$/;"	f
signId	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let signId = this.config.signOffset$/;"	v
signIds	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      signIds.clear()$/;"	v
signIds	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { nvim, bufnr, signIds } = this$/;"	v
signIds	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { nvim, signIds, bufnr } = this$/;"	v
signIds	.vim/plugged/coc.nvim/src/list/ui.ts	/^        signIds.push(signOffset + lnum)$/;"	v
signIds	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let signIds: number[] = []$/;"	v
signOffset	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^  signOffset: 1000,$/;"	C
signOffset	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  signOffset: number$/;"	p	interface:DiagnosticConfig
signOffset	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { nvim, signOffset, bufnr, length } = this$/;"	v
signOffset	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { selected, nvim, signOffset, bufnr } = this$/;"	v
signText	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let signText = config.get<string>('selectedSignText', '*')$/;"	v
signature	.vim/plugged/coc.nvim/src/types.ts	/^  signature?: string$/;"	p	interface:VimCompleteItem
signature.enable	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "signature.enable": {$/;"	o	object:properties
signature.enable	.vim/plugged/coc.nvim/data/schema.json	/^    "signature.enable": {$/;"	o	object:properties
signature.floatTimeout	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "signature.floatTimeout": {$/;"	o	object:properties
signature.floatTimeout	.vim/plugged/coc.nvim/data/schema.json	/^    "signature.floatTimeout": {$/;"	o	object:properties
signature.hideOnTextChange	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "signature.hideOnTextChange": {$/;"	o	object:properties
signature.hideOnTextChange	.vim/plugged/coc.nvim/data/schema.json	/^    "signature.hideOnTextChange": {$/;"	o	object:properties
signature.maxWindowHeight	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "signature.maxWindowHeight": {$/;"	o	object:properties
signature.maxWindowHeight	.vim/plugged/coc.nvim/data/schema.json	/^    "signature.maxWindowHeight": {$/;"	o	object:properties
signature.preferShownAbove	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "signature.preferShownAbove": {$/;"	o	object:properties
signature.preferShownAbove	.vim/plugged/coc.nvim/data/schema.json	/^    "signature.preferShownAbove": {$/;"	o	object:properties
signature.target	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "signature.target": {$/;"	o	object:properties
signature.target	.vim/plugged/coc.nvim/data/schema.json	/^    "signature.target": {$/;"	o	object:properties
signature.triggerSignatureWait	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "signature.triggerSignatureWait": {$/;"	o	object:properties
signature.triggerSignatureWait	.vim/plugged/coc.nvim/data/schema.json	/^    "signature.triggerSignatureWait": {$/;"	o	object:properties
signatureConfig	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let signatureConfig = workspace.getConfiguration('signature')$/;"	v
signatureFactory	.vim/plugged/coc.nvim/src/handler/index.ts	/^  private signatureFactory: FloatFactory$/;"	p	class:Handler
signatureHelp	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let signatureHelp = await languages.getSignatureHelp(document.textDocument, position, token)$/;"	v
signatureHelp	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def signatureHelp():$/;"	f
signatureHelpTarget	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let signatureHelpTarget = signatureConfig.get<string>('target', 'float')$/;"	v
signatureHelpTarget	.vim/plugged/coc.nvim/src/handler/index.ts	/^  signatureHelpTarget: string$/;"	p	interface:Preferences
signatureHelpTimeout	.vim/plugged/coc.nvim/src/handler/index.ts	/^  signatureHelpTimeout: number$/;"	p	interface:Preferences
signatureHideOnChange	.vim/plugged/coc.nvim/src/handler/index.ts	/^  signatureHideOnChange: boolean$/;"	p	interface:Preferences
signatureMaxHeight	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let { signaturePreferAbove, signatureMaxHeight } = this.preferences$/;"	v
signatureMaxHeight	.vim/plugged/coc.nvim/src/handler/index.ts	/^  signatureMaxHeight: number$/;"	p	interface:Preferences
signaturePreferAbove	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let { signaturePreferAbove, signatureMaxHeight } = this.preferences$/;"	v
signaturePreferAbove	.vim/plugged/coc.nvim/src/handler/index.ts	/^  signaturePreferAbove: boolean$/;"	p	interface:Preferences
signatures	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let { activeParameter, activeSignature, signatures } = signatureHelp$/;"	v
signin	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def signin(username, password):$/;"	f
silent	.vim/plugged/coc.nvim/src/types.ts	/^  silent: boolean$/;"	p	interface:KeymapOption
silent	.vim/plugged/coc.nvim/src/workspace.ts	/^    let silent = opts.silent ? '<silent>' : ''$/;"	v
silent_call	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^def silent_call(cmd):$/;"	f
simple	.config/nvim/plugged/sideways.vim/spec/plugin/go_lists_spec.rb	/^  describe "simple" do$/;"	d
simple	.config/nvim/plugged/sideways.vim/spec/plugin/html_attributes_spec.rb	/^  describe "simple" do$/;"	d
single-line	.config/nvim/plugged/sideways.vim/spec/plugin/textobj_spec.rb	/^  describe "single-line" do$/;"	d
single-line lambdas as function call arguments	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "single-line lambdas as function call arguments" do$/;"	d
size	.vim/plugged/coc.nvim/src/types.ts	/^  size: number$/;"	p	interface:PopupChangeEvent
size	.vim/plugged/coc.nvim/src/watchman.ts	/^  size: number$/;"	p	interface:FileChangeItem
size	.vim/plugged/fzf/src/options.go	/^	size     sizeSpec$/;"	m	struct:fzf.previewOpts	typeref:typename:sizeSpec
size	.vim/plugged/fzf/src/options.go	/^	size    float64$/;"	m	struct:fzf.sizeSpec	typeref:typename:float64
sizeSpec	.vim/plugged/fzf/src/options.go	/^type sizeSpec struct {$/;"	s	package:fzf
sketch	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let { bufname, filetype, sketch, lines, lnum } = options$/;"	v
sketch	.vim/plugged/coc.nvim/src/types.ts	/^  sketch: boolean$/;"	p	interface:PreiewOptions
skip_if	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    skip_if = check_required_vim_version$/;"	v	class:Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne
skip_if	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    skip_if = check_required_vim_version$/;"	v	class:Autotrigger_CanMatchContext
skip_if	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    skip_if = check_required_vim_version$/;"	v	class:Autotrigger_CanMatchPreviouslySelectedPlaceholder
skip_if	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    skip_if = check_required_vim_version$/;"	v	class:Autotrigger_CanMatchSimpleTrigger
skip_if	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    skip_if = lambda self: 'Vim older than 7.4.214 is required' \\$/;"	m	class:Autotrigger_WillProduceNoExceptionWithVimLowerThan214
skip_if	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:_UmlautsBase
skip_if	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    skip_if = lambda self: 'Bug in Neovim.' \\$/;"	m	class:ContextSnippets_ReportErrorOnIndexOutOfRange
skip_if	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    skip_if = check_required_vim_version$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove1
skip_if	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    skip_if = check_required_vim_version$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove2
skip_if	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
skip_if	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_InDefValue_Leave
skip_if	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_InDefValue_Overwrite
skip_if	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_ShebangPython
skip_if	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_SimpleExample
skip_if	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite
skip_if	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_TestEscapedChars_Overwrite
skip_if	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_TextInNextLine
skip_if	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_WithUmlauts
skip_if	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3
skip_if	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    skip_if = lambda self: no_unidecode_available()$/;"	m	class:Transformation_LowerCaseAsciiResult
skip_if	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    skip_if = lambda self: no_unidecode_available()$/;"	m	class:Transformation_SimpleCaseAsciiResult
skip_if	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TestLangmapWithUtf8_ExpectCorrectResult
skip_if	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    skip_if = lambda self: None$/;"	m	class:VimTestCase
sl	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [, sl, sc] = await nvim.call('getpos', isVisual ? `'<` : `'[`) as [number, number, numbe/;"	v
slab	.vim/plugged/fzf/src/matcher.go	/^	slab           []*util.Slab$/;"	m	struct:fzf.Matcher	typeref:typename:[]*util.Slab
slab	.vim/plugged/fzf/src/pattern_test.go	/^var slab *util.Slab$/;"	v	package:fzf	typeref:typename:*util.Slab
slab	.vim/plugged/fzf/src/terminal.go	/^	slab       *util.Slab$/;"	m	struct:fzf.Terminal	typeref:typename:*util.Slab
slab16Size	.vim/plugged/fzf/src/constants.go	/^	slab16Size int = 100 * 1024 \/\/ 200KB * 32 = 12.8MB$/;"	c	package:fzf	typeref:typename:int
slab32Size	.vim/plugged/fzf/src/constants.go	/^	slab32Size int = 2048       \/\/ 8KB * 32 = 256KB$/;"	c	package:fzf	typeref:typename:int
sleeptime	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    sleeptime = 0.00$/;"	v	class:VimTestCase
slice	.vim/plugged/fzf/src/util/chars.go	/^	slice           []byte \/\/ or []rune$/;"	m	struct:util.Chars	typeref:typename:[]byte
sliceChunks	.vim/plugged/fzf/src/matcher.go	/^func (m *Matcher) sliceChunks(chunks []*Chunk) [][]*Chunk {$/;"	f	struct:fzf.Matcher	typeref:typename:[][]*Chunk
slot	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^slot,$/;"	s
smartdict_jp	.config/nvim/plugged/vim-easymotion/t/smartsign_spec.vim	/^        let smartdict_jp = g:EasyMotion#sticky_table#jp$/;"	v
smartdict_us	.config/nvim/plugged/vim-easymotion/t/smartsign_spec.vim	/^        let smartdict_us = g:EasyMotion#sticky_table#us$/;"	v
smcup	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) smcup() {$/;"	f	struct:tui.LightRenderer
smoothScroll	vimium-options.json	/^  "smoothScroll": true,$/;"	b
snip	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let snip = '<a ${1:http:\/\/www.${2:example.com}}>\\n$0\\n<\/a>'$/;"	v
snipMate & UltiSnip Snippets	.config/nvim/plugged/vim-snippets/README.md	/^snipMate & UltiSnip Snippets$/;"	c
snipMate & UltiSnip Snippets	.vim/plugged/vim-snippets/README.md	/^snipMate & UltiSnip Snippets$/;"	c
snipMate_Disabled	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_Disabled(_VimTest):$/;"	c
snipMate_EmptyLinesContinueSnippets	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_EmptyLinesContinueSnippets(_VimTest):$/;"	c
snipMate_Extends	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_Extends(_VimTest):$/;"	c
snipMate_Interpolation	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_Interpolation(_VimTest):$/;"	c
snipMate_InterpolationWithSystem	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_InterpolationWithSystem(_VimTest):$/;"	c
snipMate_Issue658	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_Issue658(_VimTest):$/;"	c
snipMate_MultiMatches	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_MultiMatches(_VimTest):$/;"	c
snipMate_NoNestedTabstops	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_NoNestedTabstops(_VimTest):$/;"	c
snipMate_OtherFiletype	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_OtherFiletype(_VimTest):$/;"	c
snipMate_OverwrittenByRegExpTrigger	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_OverwrittenByRegExpTrigger(_VimTest):$/;"	c
snipMate_SimpleSnippet	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_SimpleSnippet(_VimTest):$/;"	c
snipMate_SimpleSnippetInSnippetFile	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_SimpleSnippetInSnippetFile(_VimTest):$/;"	c
snipMate_SimpleSnippetSubDirectory	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_SimpleSnippetSubDirectory(_VimTest):$/;"	c
snipMate_TestMirrors	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_TestMirrors(_VimTest):$/;"	c
snipMate_TestMirrorsInPlaceholders	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_TestMirrorsInPlaceholders(_VimTest):$/;"	c
snipMate_TestMirrorsInPlaceholders_Overwrite	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_TestMirrorsInPlaceholders_Overwrite(_VimTest):$/;"	c
snipMate_TestNoBraceTabstops	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_TestNoBraceTabstops(_VimTest):$/;"	c
snipMate_TestNoBraceTabstopsAndMirrors	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_TestNoBraceTabstopsAndMirrors(_VimTest):$/;"	c
snipMate_Visual_Simple	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_Visual_Simple(_VimTest):$/;"	c
snippet	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "snippet": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
snippet	.vim/plugged/coc.nvim/data/schema.json	/^        "snippet": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^      const snippet = new SnippetParser().parse(input)$/;"	C	function:assertIdent
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^      const snippet = new SnippetParser().parse(input)$/;"	C	function:assertTextsnippetString
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^      const snippet = new SnippetParser().parse(template, true)$/;"	C	function:assertLen
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const snippet = new SnippetParser().parse('${TM_DIRECTORY\/.*src[\\\\\/](.*)\/$1\/}')$/;"	C
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const snippet = new SnippetParser().parse('const fileName = "${TM_FILENAME\/(.*)\\\\..+$\/$1/;"	C
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const snippet = p.parse('${1:type}${1\/(.+)\/ \/}')$/;"	C
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const snippet = p.parse('${1|one,two,three|}')$/;"	C
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let snippet = new SnippetParser().parse('${1:aaa} ${1:aaa} bbb ${2:ccc}}$0', true)$/;"	v
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let snippet = new SnippetParser().parse('${1\/(void$)|(.+)\/${1:?-\\treturn nil;}\/}')$/;"	v
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let snippet = new SnippetParser().parse('${3:nest1 ${1:nest2 ${2:nest3}}} $3')$/;"	v
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let snippet = new SnippetParser().parse('This ${1:is ${2:nested}}$0', true)$/;"	v
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let snippet = new SnippetParser().parse('aaa${1:bbb${2:ccc}}$0', true)$/;"	v
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let snippet = new SnippetParser().parse('aaa${1:bbb} ${1:bbb}', true)$/;"	v
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let snippet = new SnippetParser().parse('te$1xt$0', true)$/;"	v
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let snippet = new SnippetParser().parse('te$1xt', true)$/;"	v
snippet	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let { snippet } = session$/;"	v
snippet	.vim/plugged/coc.nvim/src/languages.ts	/^        let snippet = await this.applyTextEdit(item, opt)$/;"	v
snippet	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    const snippet = parser.parse(body, true)$/;"	C
snippet	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^    let snippet = (new SnippetParser()).parse(text, true)$/;"	v
snippet	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const snippet = new TextmateSnippet()$/;"	C
snippet	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    const snippet = new CocSnippet(inserted, position, resolver)$/;"	C
snippet	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let { snippet } = this$/;"	v
snippet	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    const snippet = this._parser.parse(this._snippetString, true)$/;"	C
snippet	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^  snippet: CocSnippet$/;"	p	interface:CocSnippetPlaceholder
snippet2	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^      const snippet2 = new SnippetParser().parse(input2)$/;"	C	function:assertIdent
snippetCheck	.vim/plugged/coc.nvim/src/plugin.ts	/^  public async snippetCheck(checkExpand: boolean, checkJump: boolean): Promise<boolean> {$/;"	m	class:Plugin
snippetIndicator	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let snippetIndicator = completion.config.maxItemCount$/;"	v
snippetIndicator	.vim/plugged/coc.nvim/src/types.ts	/^  snippetIndicator: string$/;"	p	interface:CompleteConfig
snippet_end	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def snippet_end(self):$/;"	m	class:SnippetUtil
snippet_start	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def snippet_start(self):$/;"	m	class:SnippetUtil
snippets	.config/nvim/plugged/ultisnips/test/test_Autocommands.py	/^    snippets = ('test', '[ ${1:foo} ]')$/;"	v	class:Autocommands
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('test', """Hello \\t ${1:default}\\n$2""")$/;"	v	class:LeaveTrailingWhitespace
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('test', """Hello\\t ${1:default}\\n$2""", '', 's')$/;"	v	class:RemoveTrailingWhitespace
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('test', """next line\\n\\nshould be empty""", '', '')$/;"	v	class:DoNotTrimSpacesAtEndOfLinesByDefault
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('test', """next line\\n\\nshould be empty""", '', 'm')$/;"	v	class:TrimSpacesAtEndOfLines
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:TrailingNewline_TabStop_EndNL
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:TrailingNewline_TabStop_EndStartNL
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:TrailingNewline_TabStop_ExtraNL_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:TrailingNewline_TabStop_JustNL
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:TrailingNewline_TabStop_NLInsideStuffBehind
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:TrailingNewline_TabStop_NotEndStartNL
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:TrailingNewline_TabStop_StartNL
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('test', r"""$/;"	v	class:_MultiLineDefault
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('trig', 'success')$/;"	v	class:NoUmlautsBeforeTriggerAndCharsAfter
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('trig', 'success')$/;"	v	class:UmlautsBeforeTriggerAndCharsAfter
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('ül', 'üü ${1:world} üü $1')$/;"	v	class:Snippet_With_Umlauts_Mirrors
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('ül', 'üü ${1:world} üü ${2:hello}ßß\\nüüüü')$/;"	v	class:Snippet_With_Umlauts_OverwriteFirst
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('ül', 'üü ${1:world} üü ${2:hello}ßß\\nüüüü')$/;"	v	class:Snippet_With_Umlauts_OverwriteNone
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('ül', 'üü ${1:world} üü ${2:hello}ßß\\nüüüü')$/;"	v	class:Snippet_With_Umlauts_OverwriteSecond
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('ül', 'üü ${1:world} üü `!p snip.rv = len(t[1])*"a"`')$/;"	v	class:Snippet_With_Umlauts_Python
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = ('ül', 'üüüüüßßßß')$/;"	v	class:Snippet_With_Umlauts_TypeOn
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = _snip_quote("'")$/;"	v	class:Snippet_With_SingleQuote
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = _snip_quote("'")$/;"	v	class:Snippet_With_SingleQuote_List
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = _snip_quote('"')$/;"	v	class:Snippet_With_DoubleQuote
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = _snip_quote('"')$/;"	v	class:Snippet_With_DoubleQuote_List
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = _snip_quote('ü')$/;"	v	class:Snippet_With_Umlauts
snippets	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    snippets = _snip_quote('ü')$/;"	v	class:Snippet_With_Umlauts_List
snippets	.config/nvim/plugged/ultisnips/test/test_Completion.py	/^    snippets = ('test', '$1 $2')$/;"	v	class:Completion_BackwardsJumpWithoutCOMPL_ACCEPT
snippets	.config/nvim/plugged/ultisnips/test/test_Completion.py	/^    snippets = ('test', '$1 $2')$/;"	v	class:Completion_ForwardsJumpWithoutCOMPL_ACCEPT
snippets	.config/nvim/plugged/ultisnips/test/test_Completion.py	/^    snippets = ('test', '$1 ${1:blah}')$/;"	v	class:Completion_SimpleExample_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ($/;"	v	class:JumpForward_DefSnippet
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('i', 'if $1:\\n\\t$2')$/;"	v	class:Undo_ChangesInPlaceholder
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('i', 'if $1:\\n\\t$2')$/;"	v	class:Undo_CompletelyUndoSnippet
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('i', 'if:\\n\\t$1')$/;"	v	class:Undo_RemoveOneSnippetByTime
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('i', 'if:\\n\\t$1')$/;"	v	class:Undo_RemoveOneSnippetByTime2
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('test', '$1 Hello\\naaa ${1} bbb\\nWorld')$/;"	v	class:Undo_RemoveEditInTabstop
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('test', '$1hello\\nnice\\nworld')$/;"	v	class:DeleteLastTwoLinesInSnippet
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('test', '${1:hello} $1')$/;"	v	class:DeleteSnippetInsertion0
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('test', '${1:hi}\\n${2:world}\\nend')$/;"	v	class:DeleteCurrentTabStop2_JumpBack
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('test', '${1:hi}\\n${2:world}\\nend')$/;"	v	class:DeleteCurrentTabStop3_JumpAround
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('test', '${1:hi}\\nend')$/;"	v	class:DeleteCurrentTabStop1_JumpBack
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('test', '${1:one}(${2:xxx})${3:three}')$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove1
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('test', '''\\$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove2
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('test', 'A${1:C} ${0:DDD}', 'This is Case 1')$/;"	v	class:Backspace_TabStop_Zero
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('test', 'A${1:C} ${2:DDD}', 'This is Case 1')$/;"	v	class:Backspace_TabStop_NotZero
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('test', 'Hello\\n${1:Hello}World')$/;"	v	class:Undo_RemoveWholeSnippet
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('test', 'Hello\\naaa ${1} bbb\\nWorld')$/;"	v	class:Undo_RemoveMultilineSnippet
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('test', r"$1${1\/(.*)\/(?0::.)\/}")$/;"	v	class:DeleteSnippetInsertion1
snippets	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    snippets = ('test', r"if $1: $2")$/;"	v	class:DoNotCrashOnUndoAndJumpInNestedSnippet
snippets	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    snippets = ('hallo', 'Hallo Welt!')$/;"	v	class:_SimpleExpands
snippets	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    snippets = ('hallo', 'Hallo Welt!\\nUnd Wie gehts')$/;"	v	class:MultilineExpandTestTyping_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    snippets = ('hallo', 'Hallo Welt!\\nUnd Wie gehts')$/;"	v	class:MultilineExpand_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    snippets = ('hallo', 'Hallo Welt\\n')$/;"	v	class:SimpleExpandEndingWithNewline_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    snippets = ('test', 'SimpleText')$/;"	v	class:ExitSnippetModeAfterTabstopZero
snippets	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    snippets = ('pd', 'padding: ${1:0}px')$/;"	v	class:VirtualEdit
snippets	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    snippets = ('test', '${1:hello} ${2:world} ${0}')$/;"	v	class:RetainsTheUnnamedRegister
snippets	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    snippets = ('test', '${1:hello} ${2:world} ${0}')$/;"	v	class:RetainsTheUnnamedRegister_ButOnlyOnce
snippets	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    snippets = ('test', '${2:#2} ${1:#1};$0')$/;"	v	class:Bug1251994
snippets	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    snippets = ('test', '\\t${1}${0}')$/;"	v	class:ShiftWidthZero
snippets	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    snippets = ('test', 'hello')$/;"	v	class:NonUnicodeDataInUnnamedRegister
snippets	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^    snippets = ('fold',$/;"	v	class:FoldOverwrite_Simple_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^    snippets = ('fold',$/;"	v	class:Fold_DeleteMiddleLine_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^    snippets = ('test', r"""Hello {{{$/;"	v	class:FoldingEnabled_SnippetWithFold_ExpectNoFolding
snippets	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^    snippets = ('test', r"""package ${1:`!v printf('c%02d', 3)`};$/;"	v	class:PerlSyntaxFold
snippets	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    snippets = ($/;"	v	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    snippets = ('m', '\\tBlaahblah \\t\\t  ')$/;"	v	class:RecTabStopsWithExpandtab_SimpleExample_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    snippets = ('test', '${1:longer expand}\\n$1\\n$0', '', 'f')$/;"	v	class:FOSimple_Break_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    snippets = ('test', '${1:longer expand}after\\nstart$1end')$/;"	v	class:FOTextAfter_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    snippets = ('test', '${1:longer expand}after\\nstart$1end')$/;"	v	class:FOWrapOnLongWord_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    snippets = ('test', 'Before${1:longer expand}After\\nstart$1end')$/;"	v	class:FOTextBeforeAndAfter_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    snippets = ('test', 'for\\n    blah')$/;"	v	class:ProperIndenting_SimpleCase_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    snippets = ('test', 'hui')$/;"	v	class:ProperIndenting_AutoIndentAndNewline_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    snippets = ('test', 'hui')$/;"	v	class:ProperIndenting_SingleLineNoReindenting_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteFirst
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteSecond
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_CanOverwriteTabstop
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_LongerTextThanSource_MultiLine
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_OptExists
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_OptNoExists
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_TrickyReferences
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonVisual_HasAccessToSelectedPlaceholders
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonVisual_HasAccessToZeroPlaceholders
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:Python_WeirdScoping_Error
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """${1:hi} `!p res = t[1]+".blah"` End""")$/;"	v	class:PythonCodeOld_ReferencePlaceholderAfter
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """${1:hi} `!p snip.rv = t[1]+".blah"` End""")$/;"	v	class:PythonCode_ReferencePlaceholder
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """${1\/.+\/egal\/m} ${1:`!p$/;"	v	class:PythonCodeOld_TransformedBeforeMultiLine
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """${1\/.+\/egal\/m} ${1:`!p$/;"	v	class:PythonCode_TransformedBeforeMultiLine
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """Hallo ${1:now `#!\/usr\/bin\/env %s$/;"	v	class:TabStop_Shell_ShebangPython
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """`!p res = len(t[1])*"#"`\\n${1:some text}""")$/;"	v	class:PythonCodeOld_ReferencePlaceholderBefore
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """`!p snip.rv = len(t[1])*"#"`\\n${1:some text}""")$/;"	v	class:PythonCode_ReferencePlaceholderBefore
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """hi `!p res = "Hallo"` End""")$/;"	v	class:PythonCodeOld_SimpleExample
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """hi `!p res = "Old"$/;"	v	class:PythonCode_UseNewOverOld
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """hi `!p snip.rv = "Hallo"` End""")$/;"	v	class:PythonCode_SimpleExample
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """hi `!p snip.rv = "Hallo1"$/;"	v	class:PythonCode_MultiAppend
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """hi `!p snip.rv = "Hallo1"$/;"	v	class:PythonCode_SimpleAppend
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """hi `!v indent(".")` End""")$/;"	v	class:TabStop_VimScriptInterpolation_SimpleExample
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """hi$/;"	v	class:PythonCode_MultiAppendSimpleIndent
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """hi`!p snip.rv = ""`End""")$/;"	v	class:PythonCode_SimpleExample_ReturnValueIsEmptyString
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """start `!p a = 1$/;"	v	class:PythonCodeOld_IndentedMultiline
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', """start `!p a = 1$/;"	v	class:PythonCode_MultilineIndented
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', 'Hallo ${1:now `echo fromecho`} end')$/;"	v	class:TabStop_Shell_InDefValue_Leave
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', 'Hallo ${1:now `echo fromecho`} end')$/;"	v	class:TabStop_Shell_InDefValue_Overwrite
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', 'h`!p snip.rv = snip.v.mode + snip.v.text`b')$/;"	v	class:PythonVisual_LineSelect_Simple
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', 'h`!p snip.rv = snip.v.mode + snip.v.text`b')$/;"	v	class:PythonVisual_NoVisualSelection_Ignore
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', 'h`!p snip.rv = snip.v.mode + snip.v.text`b')$/;"	v	class:PythonVisual_SelectOneWord
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', 'hi `echo hallo` you!')$/;"	v	class:TabStop_Shell_SimpleExample
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', 'hi `echo hallo`\\nWeiter')$/;"	v	class:TabStop_Shell_TextInNextLine
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', 'hi `echo höüäh` you!')$/;"	v	class:TabStop_Shell_WithUmlauts
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', r"""`echo \\`echo "\\\\$hi"\\``""")$/;"	v	class:TabStop_Shell_TestEscapedChars_Overwrite
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', r"""`hi="blah"; echo \\`echo "$hi"\\``""")$/;"	v	class:TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', r"""hi `!p a = "test"$/;"	v	class:PythonCode_Locals
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', r"""hi `!p$/;"	v	class:PythonCode_IndentProblem
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', r"""hi$/;"	v	class:PythonCode_IndentEtSw
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', r"""hi$/;"	v	class:PythonCode_IndentEtSwOffset
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', r"""hi$/;"	v	class:PythonCode_IndentNoetSwTs
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', r"""hi$/;"	v	class:PythonCode_MultiAppendShift
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', r"""hi$/;"	v	class:PythonCode_MultiAppendShiftMethods
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', r"""hi$/;"	v	class:PythonCode_ResetIndent
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', r"""hi$/;"	v	class:PythonCode_SimpleMkline
snippets	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ('test', r"""hi`!p snip.rv = "a" * 100`end""")$/;"	v	class:PythonCode_LongerTextThanSource_Chars
snippets	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^    snippets = (('testblah', 'BLAAH', 'Say BLAH'),$/;"	v	class:_ListAllSnippets
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = 'test', '$1 $1_'$/;"	v	class:Mirror_TestKill_InsertAfter_NoKill
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = 'test', '$1 $1_'$/;"	v	class:Mirror_TestKill_InsertBefore_NoKill
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = 'test', '$1 $1_'$/;"	v	class:Mirror_TestKill_InsertBeginning_Kill
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = 'test', '$1 $1_'$/;"	v	class:Mirror_TestKill_InsertEnd_Kill
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = 'test', 'welt${1:welt${2:welt}welt} $2'$/;"	v	class:Mirror_TestKillTabstop_Kill
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ($/;"	v	class:MirrorRealLifeExample_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '    $1\\n$1\\na$1b\\n$1\\ntest $1 mich')$/;"	v	class:SimpleMirrorMultilineMany_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1 $1 $1 $1')$/;"	v	class:SimpleMirrorSameLineManyMultiline_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1 $1 $1 $1')$/;"	v	class:SimpleMirrorSameLineMany_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1 $1')$/;"	v	class:SimpleMirrorSameLine_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1 $1')$/;"	v	class:SimpleMirrorSameLine_InText_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1 ${1:replace me}')$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1 ${1:replace me}')$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1 ${1:this is it} $1')$/;"	v	class:MirrorBeforeTabstopLeave_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1 ${1:this is it} $1')$/;"	v	class:MirrorBeforeTabstopOverwrite_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1 Hinten\\n$1')$/;"	v	class:TextTabStopTextAfterTab_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1\\n$1 Hinten')$/;"	v	class:TextTabStopAfterMirror_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1\\n$1')$/;"	v	class:SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1\\n$1')$/;"	v	class:SimpleMirrorDelete_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1\\n$1')$/;"	v	class:TextTabStopSimpleMirrorMultiline_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1\\n$1\\n$1')$/;"	v	class:MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1\\n$1\\n$1')$/;"	v	class:MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1\\n${1:sometext}')$/;"	v	class:TextTabStopSimpleMirrorMultilineMirrorInFront_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1\\nVorne $1 Hinten')$/;"	v	class:TextTabStopSurroundMirror_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1\\nVorne $1')$/;"	v	class:TextTabStopTextBeforeMirror_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', '$1\\n\\n$1\\n\\n$1')$/;"	v	class:MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'ObenVorne $1 ObenHinten\\nVorne $1 Hinten')$/;"	v	class:TextTabStopAllSurrounded_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'Vorne $1 Hinten\\n$1')$/;"	v	class:TextTabStopTextSurroundedTab_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'Vorne $1\\n$1')$/;"	v	class:TextTabStopTextBeforeTab_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'ha $1 ${2:$1.h $1.c}\\ntest $1')$/;"	v	class:TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'ha $1 ${2:$1.h}')$/;"	v	class:TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'ha $1 ${2:$1}')$/;"	v	class:TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'ha $1 ${2:$1}')$/;"	v	class:TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'ha $1 ${2:snip} ${3:$1.h $2}')$/;"	v	class:TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'ha $1 ${2:snip} ${3:$1.h $2}')$/;"	v	class:TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'ha $5 ${1:blub} $4 $0 ${2:$1.h} $1 $3 ${4:More}')$/;"	v	class:TabstopWithMirrorManyFromAll_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'ha ${1:blub} ${2:$1.h}')$/;"	v	class:TabstopWithMirrorInDefaultNoType_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'ha ${1:blub} ${2:$1}')$/;"	v	class:TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'ha ${1:default value} $1\\nanother: $1 mirror')$/;"	v	class:SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'ha ${1:default value} $1\\nanother: $1 mirror')$/;"	v	class:SimpleTabstopWithDefaultComplexType_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'ha ${1:defa}\\n$1')$/;"	v	class:SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    snippets = ('test', 'ha ${1:defa}\\n$1')$/;"	v	class:SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    snippets = ('<trh', '<tr>\\n\\t<th>$1<\/th>\\n\\t$2\\n<\/tr>\\n$3')$/;"	v	class:CursorMovement_BS_InEditMode
snippets	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    snippets = ('test', '${1:Hi}\\n${2:blub}')$/;"	v	class:IMMoving_ExitWhenOutsideAbove_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    snippets = ('test', '${1:Hi}\\n${2:blub}')$/;"	v	class:IMMoving_ExitWhenOutsideBelow_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    snippets = ('test', '${1:Some}')$/;"	v	class:IMMoving_CursorsKeys_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    snippets = ('test', r"$1 ${1:a tab}")$/;"	v	class:CursorMovement_Multiline_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    snippets = ('test', r"$1 ${1:a tab}")$/;"	v	class:IMMoving_AcceptInputWhenMoved_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    snippets = ('test', r"$1 ${2:a tab} ${1:Tab}")$/;"	v	class:IMMoving_NoExitingEventAtEnd_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    snippets = ('test', r"$1 ${2:a tab} ${1:Tab}")$/;"	v	class:IMMoving_NoExiting_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    snippets = ('test', r"$1 ${2:blub} ${1:Tab}")$/;"	v	class:IMMoving_ExitWhenOutsideRight_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    snippets = ('test', r"${1:Hi} ${2:blub}")$/;"	v	class:IMMoving_ExitWhenOutsideLeft_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    snippets = ('test', r"${1:Hi} ${2:blub}")$/;"	v	class:IMMoving_NotExitingWhenBarelyOutsideLeft_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^    snippets = ($/;"	v	class:Multiple_ManySnippetsOneTrigger_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^    snippets = (('test', 'Case1', 'This is Case 1'),$/;"	v	class:_MultipleMatches
snippets	.config/nvim/plugged/ultisnips/test/test_Plugin.py	/^    snippets = ('long', 'Hello', '', 'w')$/;"	v	class:Plugin_SuperTab_SimpleTest
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_BarelyNotLeavingInner_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_ExpandedInZeroTSSecondTime_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_ExpandedInZeroTSTwice_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_ExpandedInZeroTS_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_InnerWOTabStopTwiceDirectly_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_InnerWOTabStopTwice_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_InnerWOTabStop_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_LeavingInnerInnerTwo_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_LeavingInnerInner_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_LeavingInner_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_MirrorInnerSnippet_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_MirroredZeroTS_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_OuterOnlyWithZeroTS_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_OuterOnlyWithZero_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_ZeroTSisNothingSpecial_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabsStops_BackspaceZero_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabsStops_TypeInZero2_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabsStops_TypeInZero_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ('m', 'M START\\n    $0\\nM END')$/;"	v	class:RecTabStops_InNewlineMultilineWithIndent_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ('m', 'M START\\n    $1\\nM END -> $0')$/;"	v	class:RecTabStops_InNewlineMultilineWithNonZeroTS_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ('m', 'M START\\n$0\\nM END')$/;"	v	class:RecTabStops_InNewlineManualIndentTextInFront_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ('m', 'M START\\n$0\\nM END')$/;"	v	class:RecTabStops_InNewlineManualIndent_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ('m', 'M START\\n$0\\nM END')$/;"	v	class:RecTabStops_InNewlineMultiline_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ('m', '[ ${1:first}  ${2:sec} ]')$/;"	v	class:RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ('m', '[ ${1:first}  ${2:sec} ]')$/;"	v	class:RecTabStops_InNewlineInTabstop_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ('m', '[ ${1:first}  ${2:sec} ]')$/;"	v	class:RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ('m', '[ ${1:first}  ${2:sec} ]')$/;"	v	class:RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ('m', '[ ${1:first}  ${2:sec} ]')$/;"	v	class:RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    snippets = ('m', '[ ${1:first}  ${2:sec} ]')$/;"	v	class:RecTabStops_SimpleCase_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    snippets = ('for',$/;"	v	class:ExclusiveSelection_RealWorldCase_Test
snippets	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    snippets = ('for',$/;"	v	class:OldSelection_RealWorldCase_Test
snippets	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    snippets = ('test', '${1:World}')$/;"	v	class:_SelectModeMappings
snippets	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    snippets = ('test', 'h${1:blah}w $1')$/;"	v	class:ExclusiveSelection_SimpleTabstop_Test
snippets	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    snippets = ('test', 'h${1:blah}w $1')$/;"	v	class:OldSelection_SimpleTabstop_Test
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ($/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ($/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ($/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ($/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('((?<=\\W)|^)(\\.)', 'self.', '', 'r')$/;"	v	class:_Regex_Self
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('(.*test)', 'Expand me!', '', 'r')$/;"	v	class:SnippetOptions_Regex_SameLine_Long_Start
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('(test *)+', 'Expand me!', '', 'r')$/;"	v	class:SnippetOptions_Regex_Multiple
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('(test)', 'Expand me!', '', 'r')$/;"	v	class:SnippetOptions_Regex_Expand
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('(test)', 'Expand me!', '', 'r')$/;"	v	class:SnippetOptions_Regex_SameLine_Simple
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('(test.*)', 'Expand me!', '', 'r')$/;"	v	class:SnippetOptions_Regex_SameLine_Long_End
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('hi',$/;"	v	class:_TabExpand_RealWorld
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('test ', 'Expand me!', '', 'r')$/;"	v	class:SnippetOptions_Regex_WithSpace
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('test it', 'Expand me!', '', 'b')$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('test it', 'Expand me!', '', 'b')$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('test it', 'Expand me!', '', 'b')$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('test me', 'Expand me!')$/;"	v	class:MultiWordSnippet_Simple
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('test', 'Expand me!', '', 'b')$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('test', 'Expand me!', '', 'b')$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('test', 'Expand me!', '', 'b')$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand2
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ('test', '\\t\\tExpand\\tme!\\t', '', 't')$/;"	v	class:_No_Tab_Expand
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (('test it', 'Expand me!', '', 'i'), )$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (('test it', 'Expand me!', '', 'i'), )$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (('test it', 'Expand me!', '', 'w'), )$/;"	v	class:_MultiWord_SnippetOptions_ExpandWordSnippets
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (('test', 'Expand me!', '', 'i'), )$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (('test', 'Expand me!', '', 'i'), )$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (('test', 'Expand me!', '', 'i'), )$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (('test', 'Expand me!', '', 'i'), )$/;"	v	class:SnippetOptions_ExpandInwordSnippets_ExpandSingle
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (('test', 'Expand me!', '', 'i'), )$/;"	v	class:SnippetOptions_ExpandInwordSnippets_SimpleExpand
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (('test', 'Expand me!', '', 'w'), )$/;"	v	class:_SnippetOptions_ExpandWordSnippets
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (r"([abc]+)([def]+)", r"""`!p m = match$/;"	v	class:SnippetOptions_Regex_PythonBlockMatch
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (r"cabfed", r"""`!p snip.rv =  match or "No match"`""")$/;"	v	class:SnippetOptions_Regex_PythonBlockNoMatch
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_AddedHasHigherThanFile
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_DoNotCareAboutNonMatchings
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_FileHasHigherThanAdded
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_FileHasHigherThanAdded_neg_prio
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_MultiWordTriggerOverwriteExisting
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_OverwriteExisting
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_OverwriteThenChoose_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_OverwriteTwice_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ($/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ($/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('echo', '$0 run')$/;"	v	class:TabStop_Exit_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('echo', 'echo ${1:Hallo}')$/;"	v	class:TabStopNoReplace_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('hallo', 'Hallo ${1:WELT} ups')$/;"	v	class:TabStopNavigatingInInsertModeSimple_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('hallo', 'hallo $0 $1')$/;"	v	class:TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('hallo', 'hallo $0 a small feed')$/;"	v	class:TabStopSimpleReplaceSurrounded1_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('hallo', 'hallo $0\\nnice $1 work\\n$3 $2\\nSeem to work')$/;"	v	class:TabStopTestMultilineExpand_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('hallo', 'hallo $2 $1')$/;"	v	class:TabStopTestBackwardJumping2_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('hallo', 'hallo $2 $1')$/;"	v	class:TabStopTestJumping2_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('hallo', 'hallo ${0:End} ${1:Beginning}')$/;"	v	class:TabStopSimpleReplace_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('hallo', 'hallo ${0:End} a small feed')$/;"	v	class:TabStopSimpleReplaceSurrounded_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('hallo', 'hallo ${1:End} ${0:Beginning}')$/;"	v	class:TabStopSimpleReplaceReversed_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('hallo', 'hallo ${2:End} mitte ${1:Beginning}')$/;"	v	class:TabStopTestJumping_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('hallo', 'hallo ${2:End} mitte${1:Beginning}')$/;"	v	class:TabStopTestBackwardJumping_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('hallo', 'nothing ${1:i} hups')$/;"	v	class:TabStopWithOneChar_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', """<div${1: id="${2:some_id}"}>\\n  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_DeleteFirst
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', """<div${1: id="${2:some_id}"}>\\n  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', """<div${1: id="${2:some_id}"}>\\n  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', """<div${1: id="${2:some_id}"}>\\n  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecond
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', """<div${1: id="${2:some_id}"}>\\n  $3  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', """<div${1: id="${2:some_id}"}>\\n  $3 $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', """<div${1: id="${2:some_id}"}>\\n  $3 $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', """Test: ${1:snippet start\\nNested tabstop: $0\\nsnippet end}\\nTrailin/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', """Test: ${1:snippet start\\nNested tabstop: $0\\nsnippet end}\\nTrailin/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', "$1: ${1:'${2:second}'} $2")$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite1
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', "$1: ${1:'${2:second}'} $2")$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', "$2: ${2:'${1:second}'} $1")$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', '[ $1$2 ] $1')$/;"	v	class:TabStop_AdjacentTabStopAddText_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', '\\\\${1:literal}')$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfDefinitionText
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', '\\n\\\\${1:literal}')$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfLine
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'each_byte { |${1:byte}| $0 }')$/;"	v	class:TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'hi $1 $2 ${1:first line\\nsecond line} ${2:Hi} world')$/;"	v	class:TabStop_Multiline_DelFirstOverwriteSecond_Overwrite
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'hi $1 ${1:first line\\nsecond line} world')$/;"	v	class:TabStop_Multiline_MirrorInFront_Leave
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'hi $1 ${1:first line\\nsecond line} world')$/;"	v	class:TabStop_Multiline_MirrorInFront_Overwrite
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'hi ${1:first line\\nsecond line} world')$/;"	v	class:TabStop_Multiline_Leave
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'hi ${1:first line\\nsecond line} world')$/;"	v	class:TabStop_Multiline_Overwrite
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'hi ${1:this ${2:second ${3:third}}} $4')$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpAround
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'hi ${1:this ${2:second ${3:third}}} $4')$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'hi ${1:this ${2:second ${3:third}}} $4')$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpToThird
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'hi ${1:this ${2:second}} $2')$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_DoNothing
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'hi ${1:this ${2:second}} $2')$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite0
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'hi ${1:this ${2:second}} $2')$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'snip $1')$/;"	v	class:TabStopEscapingWhenSelectedNoCharTS_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'snip ${1:default}')$/;"	v	class:TabStopEscapingWhenSelected_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 'snip ${1:i}')$/;"	v	class:TabStopEscapingWhenSelectedSingleCharTS_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', 't$1t${2: }t{\\n\\t$0\\n}')$/;"	v	class:TabStop_CROnlyOnSelectedNear
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', r":latex:\\`$1\\`$0")$/;"	v	class:TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', r"These are two backslashes \\\\\\\\ done")$/;"	v	class:TabStop_EscapingChars_Backslash3
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', r"This \\ is a backslash!")$/;"	v	class:TabStop_EscapingChars_Backslash
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', r"This is a backslash \\\\ done")$/;"	v	class:TabStop_EscapingChars_Backslash2
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', r"\\\\$1{$2}")$/;"	v	class:TabStop_EscapingChars_Backslash4
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', r"a\\${1:literal}")$/;"	v	class:TabStop_EscapingCharsDollars1
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', r"snip \\$0 $$0 end")$/;"	v	class:TabStop_EscapingCharsDollars
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', r"snip \\` literal")$/;"	v	class:TabStop_EscapingCharsBackticks
snippets	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    snippets = ('test', r"usage: \\`basename \\$0\\` ${1:args}")$/;"	v	class:TabStop_EscapingChars_RealLife
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = 'test', r"$1 ${1\/(aa)|.*\/(?1:yes:no\\\\)\/}"$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter1
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = 'test', r"$1 ${1\/(aa)|.*\/(?1:yes\\:no\\))\/}"$/;"	v	class:Transformation_ConditionalWithEscapedDelimiter
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = 'test', r"$1 ${1\/(aa)|.*\/(?1:yes\\\\:no)\/}"$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = 'test', r"$1 ${1\/.*\/\\L$0$0\\E\/}_"$/;"	v	class:Transformation_TestKill_InsertAfter_NoKill
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = 'test', r"$1 ${1\/.*\/\\L$0$0\\E\/}_"$/;"	v	class:Transformation_TestKill_InsertBefore_NoKill
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = 'test', r"$1 ${1\/.*\/\\L$0$0\\E\/}_"$/;"	v	class:Transformation_TestKill_InsertBeginning_Kill
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = 'test', r"$1 ${1\/.*\/\\L$0$0\\E\/}_"$/;"	v	class:Transformation_TestKill_InsertEnd_Kill
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('ascii', '$1 ${1\/(.*)\/$1\/a}')$/;"	v	class:Transformation_SimpleCaseAsciiResult
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('ascii', '$1 ${1\/(.*)\/\\L$1\\E\/a}')$/;"	v	class:Transformation_LowerCaseAsciiResult
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '$1 ${1\/(.)\/\\\\u$1\/}')$/;"	v	class:Transformation_CleverTransformUpercaseChar_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '$1 ${1\/(.*)\/\\L$1\\E\/}')$/;"	v	class:Transformation_CleverTransformLongLower_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '$1 ${1\/(.*)\/\\\\U$1\\E\/}')$/;"	v	class:Transformation_CleverTransformLongUpper_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '$1 ${1\/(.*)\/\\l$1\/}')$/;"	v	class:Transformation_CleverTransformLowercaseChar_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '$1 ${1\/(?:(^a)|(^b)).*\/(?1:yes:no)\/}')$/;"	v	class:Transformation_CIBothDefinedNegative_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '$1 ${1\/(?:(^a)|(^b)).*\/(?1:yes:no)\/}')$/;"	v	class:Transformation_CIBothDefinedPositive_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '$1 ${1\/([ab])oo\/$1ull\/}')$/;"	v	class:Transformation_Backreference_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '$1 ${1\/(^a).*\/(?0:began with an a)\/}')$/;"	v	class:Transformation_ConditionalInsertionSimple_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '$1 ${1\/foo\/batzl\/}')$/;"	v	class:Transformation_SimpleCaseNoTransform_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '$1 ${1\/foo\/batzl\/}')$/;"	v	class:Transformation_SimpleCase_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '${1:Some Text}${1\/.+\/\\\\U$0\\E\/}\\n${1\/.+\/\\L$0\\E\/}')$/;"	v	class:Transformation_MultipleTransformations_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '${1\/.+\/is something\/}${1:some}')$/;"	v	class:Transformation_TabIsAtEndAndDeleted1_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '${1\/.+\/is something\/}${1:some}')$/;"	v	class:Transformation_TabIsAtEndAndDeleted_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '${1\/.+\/is something\/}${1}')$/;"	v	class:Transformation_TabIsAtEndNoTextLeave_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '${1\/.+\/is something\/}${1}')$/;"	v	class:Transformation_TabIsAtEndNoTextType_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '${1\/foo\/batzl\/} $1')$/;"	v	class:Transformation_SimpleCaseTransformInFront_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', '${1\/foo\/batzl\/} ${1:replace me}')$/;"	v	class:Transformation_SimpleCaseTransformInFrontDefVal_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', 'snip ${1\/.+\/(?0:m1)\/} ${2\/.+\/(?0:m2)\/} '$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', 'snip ${1\/.+\/(?0:m1)\/} ${2\/.+\/(?0:m2)\/} '$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', 'snip ${1\/.+\/(?0:matched)\/} ${1:default}')$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', 'snip ${1\/.+\/(?0:matched)\/} ${1:default}')$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValue_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/(\\w+(?:\\W+\\w+){,7})\\W*(.+)?\/$1(?2:...)\/}")$/;"	v	class:Transformation_ConditionalInsertRWEllipsis_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/(dead) (par[^ ]*)\/this $2 is a bit $1\/}")$/;"	v	class:Transformation_BackreferenceTwice_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/, *\/, \/g}")$/;"	v	class:Transformation_OptionReplaceGlobalMatchInReplace_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/, *\/-\/g}")$/;"	v	class:Transformation_OptionReplaceGlobal_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/, *\/\\n\/}")$/;"	v	class:Transformation_CINewlines_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/, *\/\\t\/}")$/;"	v	class:Transformation_CITabstop_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/^.*?(-)?(>)?$\/(?2::(?1:>:.))\/}")$/;"	v	class:Transformation_ConditionalInConditional_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/hal((?:lo)|(?:ul))\/(?1:ha\\($1\\))\/}")$/;"	v	class:Transformation_CIEscapedParensinReplace_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', r"$1 ${1\/test\/blah\/i}")$/;"	v	class:Transformation_OptionIgnoreCase_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', r"$1 ${2:${1\/.+\/(?0:defined $0)\/}}")$/;"	v	class:Transformation_InsideTabLeaveAtDefault_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', r"$1 ${2:${1\/.+\/(?0:defined $0)\/}}")$/;"	v	class:Transformation_InsideTabOvertype_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    snippets = ('test', r"${VISUAL\/^\/* \/mg}")$/;"	v	class:Transformation_OptionMultiline_ECR
snippets	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    snippets = ("te'stâ", 'abc123ά', '123êabc')$/;"	v	class:VerifyVimDict3
snippets	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    snippets = ('te"stâ', 'abc123ά', '123êabc')$/;"	v	class:VerifyVimDict2
snippets	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    snippets = ('testme',$/;"	v	class:TestLangmapWithUtf8_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    snippets = ('testme',$/;"	v	class:TestNonEmptyLangmapWithSemi_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    snippets = ('testme',$/;"	v	class:TestNonEmptyLangmap_ExpectCorrectResult
snippets	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    snippets = ('testâ', 'abc123ά', '123\\'êabc')$/;"	v	class:VerifyVimDict1
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('if', 'if {\\n\\t${VISUAL}$0\\n}')$/;"	v	class:Visual_LineSelect_DedentLine
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'beg\\n\\t${0:${VISUAL}}\\nend')$/;"	v	class:Visual_LineSelect_CheckIndentWithTS_NoOverwrite
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'beg\\n\\t${VISUAL}\\n\\t${1:here_we_go}\\nend')$/;"	v	class:Visual_LineSelect_WithTabStop
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'beg\\n\\t${VISUAL}\\nend')$/;"	v	class:Visual_LineSelect_CheckIndentSimple
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'beg\\n\\t${VISUAL}\\nend')$/;"	v	class:Visual_LineSelect_CheckIndentTwice
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${1:${VISUAL}}b')$/;"	v	class:Visual_InDefaultText_SelectOneWord
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${1:${VISUAL}}b')$/;"	v	class:Visual_InDefaultText_SelectOneWord_NoOverwrite
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${1:bef${VISUAL}aft}b')$/;"	v	class:Visual_InDefaultText_LineSelect_NoOverwrite
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${1:bef${VISUAL}aft}b')$/;"	v	class:Visual_InDefaultText_LineSelect_Overwrite
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${1:beforea${VISUAL}aft}b')$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${1:beforea${VISUAL}aft}b')$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_Overwrite
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${1:beforeaaa${VISUAL}aft}b')$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${2:ahh}${VISUAL}${1:ups}b', 'Description', 'i')$/;"	v	class:Visual_SelectOneWordWithTabstop_TillEndOfLine
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${VISUAL:world}b')$/;"	v	class:VisualWithDefault_ExpandWithVisual
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${VISUAL:world}b')$/;"	v	class:VisualWithDefault_ExpandWithoutVisual
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b${VISUAL}a')$/;"	v	class:Visual_SelectOneWord_TwiceVisual
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b')$/;"	v	class:Visual_CrossOneLine
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b')$/;"	v	class:Visual_ExpandTwice
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b')$/;"	v	class:Visual_LineSelect_Simple
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b')$/;"	v	class:Visual_NoVisualSelection_Ignore
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b')$/;"	v	class:Visual_SelectOneWord
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b', '', 'i')$/;"	v	class:Visual_SelectOneWordExclusive
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b', '', 'i')$/;"	v	class:Visual_SelectOneWordInclusive
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b', '', 'i')$/;"	v	class:Visual_SelectOneWord_ProblemAfterTab
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b', 'Description', 'i')$/;"	v	class:Visual_SelectOneWord_Inword
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'h${VISUAL}b', 'Description', 'i')$/;"	v	class:Visual_SelectOneWord_TillEndOfLine
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', 'hello\\n\\t ${1:${VISUAL}}\\nend')$/;"	v	class:Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', r"h${1:bef${VISUAL\/.\/\\U$0\\E\/g}aft}b")$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_NoOverwrite
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', r"h${1:bef${VISUAL\/.\/\\U$0\\E\/g}aft}b")$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_Overwrite
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', r"h${VISUAL:\\\/\\\/ body}b")$/;"	v	class:VisualWithDefaultWithSlashes_ExpandWithoutVisual
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', r"h${VISUAL:world\/.\/\\U$0\\E\/g}b")$/;"	v	class:VisualTransformationWithDefault_ExpandWithVisual
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', r"h${VISUAL:world\/.\/\\U$0\\E\/g}b")$/;"	v	class:VisualTransformationWithDefault_ExpandWithoutVisual
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', r"h${VISUAL\/.\/\\U$0\\E\/g}b")$/;"	v	class:VisualTransformation_LineSelect_Simple
snippets	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    snippets = ('test', r"h${VISUAL\/.\/\\U$0\\E\/g}b")$/;"	v	class:VisualTransformation_SelectOneWord
snippets	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    snippets = ()$/;"	v	class:VimTestCase
snippets_in_current_scope	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def snippets_in_current_scope(self, searchAll):$/;"	m	class:SnippetManager
sockPath	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^const sockPath = '\/tmp\/watchman-fake'$/;"	C
socket	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  socket$/;"	e	enum:TransportKind
socketserver	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    import SocketServer as socketserver$/;"	I
solargraph.logLevel	.config/nvim/coc-settings.json	/^    "solargraph.logLevel": "debug"$/;"	s
solidcolor	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^solidcolor,$/;"	s
sort	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    sort: str = ''$/;"	v	class:Context
sort	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/sort.py	/^def sort($/;"	f
sort	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let sort = filtered.length && typeof filtered[0].recentScore == 'number'$/;"	v
sort	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { sort, matcher, ignorecase } = this.manager.listOptions$/;"	v
sort	.vim/plugged/coc.nvim/src/types.ts	/^  sort: boolean$/;"	p	interface:ListOptions
sort	.vim/plugged/fzf/src/matcher.go	/^	sort           bool$/;"	m	struct:fzf.Matcher	typeref:typename:bool
sort	.vim/plugged/fzf/src/matcher.go	/^	sort    bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
sort	.vim/plugged/fzf/src/terminal.go	/^	sort       bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
sortCriteria	.vim/plugged/fzf/src/result.go	/^var sortCriteria []criterion$/;"	v	package:fzf	typeref:typename:[]criterion
sortDocumentSymbols	.vim/plugged/coc.nvim/src/handler/index.ts	/^function sortDocumentSymbols(a: DocumentSymbol, b: DocumentSymbol): number {$/;"	f
sortSelected	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) sortSelected() []selectedItem {$/;"	f	struct:fzf.Terminal	typeref:typename:[]selectedItem
sortSymbolInformations	.vim/plugged/coc.nvim/src/handler/index.ts	/^function sortSymbolInformations(a: SymbolInformation, b: SymbolInformation): number {$/;"	f
sortSymbols	.vim/plugged/coc.nvim/src/list/source/outline.ts	/^function sortSymbols(a: DocumentSymbol, b: DocumentSymbol): number {$/;"	f
sortText	.vim/plugged/coc.nvim/src/languages.ts	/^      sortText: item.sortText || null,$/;"	v
sortText	.vim/plugged/coc.nvim/src/types.ts	/^  sortText?: string$/;"	p	interface:VimCompleteItem
sortable	.vim/plugged/fzf/src/pattern.go	/^	sortable      bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
sorted	.vim/plugged/fzf/src/merger.go	/^	sorted  bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
source	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let source: ISource = {$/;"	v
source	.vim/plugged/coc.nvim/src/__tests__/completion/float.test.ts	/^let source: ISource$/;"	v
source	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^    let source: ISource = {$/;"	v
source	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let source: ISource = {$/;"	v
source	.vim/plugged/coc.nvim/src/__tests__/modules/sources.test.ts	/^    let source: ISource = {$/;"	v
source	.vim/plugged/coc.nvim/src/completion/complete.ts	/^      let { source } = JSON.parse(item.user_data)$/;"	v
source	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let source = this.resolveTokenSource = new CancellationTokenSource()$/;"	v
source	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { source } = option$/;"	v
source	.vim/plugged/coc.nvim/src/languages.ts	/^    let source = this.createCompleteSource(name, shortcut, provider, languageIds, triggerCharact/;"	v
source	.vim/plugged/coc.nvim/src/languages.ts	/^    let source: ISource = {$/;"	v
source	.vim/plugged/coc.nvim/src/languages.ts	/^  source: ISource$/;"	p	interface:CompletionSource
source	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let source = this.tokenSource = new CancellationTokenSource()$/;"	v
source	.vim/plugged/coc.nvim/src/sources.ts	/^      let source = new VimSource({$/;"	v
source	.vim/plugged/coc.nvim/src/sources.ts	/^    for (let source of this.sources) {$/;"	v
source	.vim/plugged/coc.nvim/src/sources.ts	/^    let name = typeof source == 'string' ? source : source.name$/;"	v
source	.vim/plugged/coc.nvim/src/sources.ts	/^    let source = new Source(Object.assign({ sourceType: SourceType.Service } as any, config))$/;"	v
source	.vim/plugged/coc.nvim/src/sources.ts	/^    let source = this.getSource(data.source)$/;"	v
source	.vim/plugged/coc.nvim/src/sources.ts	/^    let source = this.getSource(item.source)$/;"	v
source	.vim/plugged/coc.nvim/src/sources.ts	/^    let source = this.getSource(name)$/;"	v
source	.vim/plugged/coc.nvim/src/types.ts	/^  readonly source?: string$/;"	p	interface:CompleteOption
source	.vim/plugged/coc.nvim/src/types.ts	/^  source?: string$/;"	p	interface:CompleteResult
source	.vim/plugged/coc.nvim/src/types.ts	/^  source?: string$/;"	p	interface:VimCompleteItem
source	.vim/plugged/coc.nvim/src/workspace.ts	/^      let source = new CancellationTokenSource()$/;"	v
source	.vim/plugged/coc.nvim/src/workspace.ts	/^      let source = this.creatingSources.get(bufnr)$/;"	v
sourceMap	.vim/plugged/coc.nvim/src/sources.ts	/^  private sourceMap: Map<string, ISource> = new Map()$/;"	p	class:Sources
sourceMap	.vim/plugged/coc.nvim/tsconfig.json	/^    "sourceMap": true,$/;"	b	object:compilerOptions
sourceMap	tsconfig.json	/^    "sourceMap": true,$/;"	b	object:compilerOptions
sourceType	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^      sourceType: SourceType.Native,$/;"	v
sourceType	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^      sourceType: SourceType.Native,$/;"	v
sourceType	.vim/plugged/coc.nvim/src/languages.ts	/^      sourceType: SourceType.Service,$/;"	v
sourceType	.vim/plugged/coc.nvim/src/model/source.ts	/^  public readonly sourceType: SourceType$/;"	p	class:Source
sourceType	.vim/plugged/coc.nvim/src/types.ts	/^  sourceType?: SourceType$/;"	p	interface:ISource
sources	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let sources = this.sources.filter(s => names.indexOf(s.name) !== -1)$/;"	v
sources	.vim/plugged/coc.nvim/src/sources.ts	/^    let { sources } = this$/;"	v
space	.vim/plugged/coc.nvim/src/handler/index.ts	/^            let space = opts.insertSpaces ? ' '.repeat(opts.tabSize) : '\\t'$/;"	v
space	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let space = line.match(\/^\\s*\/)[0]$/;"	v
space_before_function_paren	.config/nvim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^def space_before_function_paren(snip):$/;"	f
space_before_function_paren	.vim/plugged/vim-snippets/pythonx/javascript_snippets.py	/^def space_before_function_paren(snip):$/;"	f
spaces_to_indent	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/indent_util.py	/^    def spaces_to_indent(self, indent):$/;"	m	class:IndentUtil
span	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^.scoping-1 \/deep\/ span {$/;"	s
span	.vim/plugged/coc.nvim/src/list/ui.ts	/^          let { span, hlGroup } = hi$/;"	v
span	.vim/plugged/coc.nvim/src/list/ui.ts	/^        for (let span of spans) {$/;"	v
span	.vim/plugged/coc.nvim/src/list/worker.ts	/^        let span: [number, number] = [byteLength(old), byteLength(newLabel)]$/;"	v
span	.vim/plugged/coc.nvim/src/types.ts	/^  span: [number, number]$/;"	p	interface:AnsiHighlight
spans	.vim/plugged/coc.nvim/src/list/ui.ts	/^        let { spans, hlGroup } = highlight$/;"	v
spans	.vim/plugged/coc.nvim/src/list/worker.ts	/^          let spans: [number, number][] = []$/;"	v
spans	.vim/plugged/coc.nvim/src/list/worker.ts	/^        spans.push([byteIndex(text, start), byteIndex(text, curr) + 1])$/;"	v
spans	.vim/plugged/coc.nvim/src/list/worker.ts	/^      spans.push([byteIndex(text, start), byteIndex(text, curr) + 1])$/;"	v
spans	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let spans: [number, number][] = []$/;"	v
spans	.vim/plugged/coc.nvim/src/types.ts	/^  spans: [number, number][]$/;"	p	interface:ListHighlights
spinnerDuration	.vim/plugged/fzf/src/constants.go	/^	spinnerDuration   = 200 * time.Millisecond$/;"	c	package:fzf
splat operators	.config/nvim/plugged/vim-ruby/spec/syntax/operators_spec.rb	/^  context "splat operators" do$/;"	c
split	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    split: str = 'no'$/;"	v	class:Context
splitNth	.vim/plugged/fzf/src/options.go	/^func splitNth(str string) []Range {$/;"	f	package:fzf	typeref:typename:[]Range
split_at_whitespace	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^def split_at_whitespace(string):$/;"	f
split_input	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def split_input(text):$/;"	f
split_input	.vim/plugged/denite.nvim/rplugin/python3/denite/util.py	/^def split_input(text):$/;"	f
splited	.vim/plugged/coc.nvim/src/model/document.ts	/^    let splited: Range[] = ranges.reduce((p, c) => {$/;"	v
square-bracketed lists	.config/nvim/plugged/sideways.vim/spec/plugin/square_brackets_spec.rb	/^describe "square-bracketed lists" do$/;"	d
src	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^				var src = target[ name ], copy = options[ name ];$/;"	v
srcId	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^  srcId: 1000,$/;"	C
srcId	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  srcId: number$/;"	p	interface:FloatingConfig
srcId	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let srcId = this.config.virtualTextSrcId$/;"	v
srcId	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { srcId } = this.config$/;"	v
srcId	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  srcId: number$/;"	p	interface:DiagnosticConfig
srcId	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^  private srcId: number$/;"	p	class:CodeLensManager
srcId	.vim/plugged/coc.nvim/src/handler/colors.ts	/^  private srcId = 1090$/;"	p	class:Colors
srcId	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    let { matchIds, srcId } = this$/;"	v
st	.vim/plugged/ghost-text.vim/python3/single_server.py	/^st = None$/;"	v
stack	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  const stack = [...marker]$/;"	C	function:walk
stack	.vim/plugged/coc.nvim/src/util/object.ts	/^  const stack: any[] = [obj]$/;"	C	function:deepFreeze
start	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/__init__.py	/^        def start(self, args: typing.List[typing.Any]) -> None:$/;"	m	class:DefxHandlers
start	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/rplugin.py	/^    def start(self, args: typing.List[typing.Any]) -> None:$/;"	m	class:Rplugin
start	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^        def start(self, args):$/;"	m	class:DeniteHandlers
start	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def start(self, context):$/;"	m	class:Child
start	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def start(self, context):$/;"	m	class:_Parent
start	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^    def start(self, args):$/;"	m	class:Rplugin
start	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def start(self, sources, context):$/;"	m	class:Default
start	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_base.py	/^    def start(self):$/;"	m	class:TextObject
start	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let { start } = session.snippet.range$/;"	v
start	.vim/plugged/coc.nvim/src/completion/complete.ts	/^          let dt = Date.now() - start$/;"	v
start	.vim/plugged/coc.nvim/src/completion/complete.ts	/^      let start = Date.now()$/;"	v
start	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let s = i == start.line ? start.character : 0$/;"	v
start	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let { start, end } = range$/;"	v
start	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let { start } = range$/;"	v
start	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^      let start = await nvim.call('line', 'w0')$/;"	v
start	.vim/plugged/coc.nvim/src/handler/colors.ts	/^      let { start, end } = range$/;"	v
start	.vim/plugged/coc.nvim/src/handler/index.ts	/^              let start: number$/;"	v
start	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let [start, end] = docs[0].active$/;"	v
start	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let { start } = location.range$/;"	v
start	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let { start, end } = selectRange$/;"	v
start	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  public start(): Disposable {$/;"	m	class:SettingMonitor
start	.vim/plugged/coc.nvim/src/languages.ts	/^    let start = line.substr(0, range.start.character)$/;"	v
start	.vim/plugged/coc.nvim/src/list/basic.ts	/^        let start = byteIndex(line, r.start.character) + 1$/;"	v
start	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async start( args: string[] ): Promise<void> {$/;"	C
start	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let [start, end] = await nvim.eval('[line("w0"),line("w$")]') as number[]$/;"	v
start	.vim/plugged/coc.nvim/src/list/worker.ts	/^        start = next$/;"	v
start	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let start = matches.shift()$/;"	v
start	.vim/plugged/coc.nvim/src/model/chars.ts	/^  public start: number$/;"	p	class:Range
start	.vim/plugged/coc.nvim/src/model/document.ts	/^        let { start, end } = range$/;"	v
start	.vim/plugged/coc.nvim/src/model/document.ts	/^      let ch = line[start - 1]$/;"	v
start	.vim/plugged/coc.nvim/src/model/document.ts	/^      let start = textDocument.positionAt(change.start)$/;"	v
start	.vim/plugged/coc.nvim/src/model/document.ts	/^      let { start, end } = range$/;"	v
start	.vim/plugged/coc.nvim/src/model/document.ts	/^    let start = 0$/;"	v
start	.vim/plugged/coc.nvim/src/model/document.ts	/^    let start = line.slice(0, character)$/;"	v
start	.vim/plugged/coc.nvim/src/model/document.ts	/^    let start = position.character$/;"	v
start	.vim/plugged/coc.nvim/src/model/terminal.ts	/^  public async start(cwd?: string, env?: { [key: string]: string | null }): Promise<void> {$/;"	m	class:TerminalModel
start	.vim/plugged/coc.nvim/src/services.ts	/^      start: (): Promise<void> => {$/;"	v
start	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let start = this._token$/;"	v
start	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    const len = end.character - start.character$/;"	C
start	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let { start, end } = placeholder.range$/;"	v
start	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let { start, end } = range$/;"	v
start	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^      const start: Position = {$/;"	C
start	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let { start } = placeholder.range$/;"	v
start	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let { start, end } = edit.range$/;"	v
start	.vim/plugged/coc.nvim/src/types.ts	/^  start(): Promise<void>$/;"	m	interface:IServiceProvider
start	.vim/plugged/coc.nvim/src/types.ts	/^  start: number$/;"	p	interface:ChangedLines
start	.vim/plugged/coc.nvim/src/types.ts	/^  start: number$/;"	p	interface:Fragment
start	.vim/plugged/coc.nvim/src/util/diff.ts	/^  start: number$/;"	p	interface:Change
start	.vim/plugged/coc.nvim/src/util/position.ts	/^  let removed = start.line == end.line && newLines.length == 1 ? end.character - start.character/;"	v
start	.vim/plugged/coc.nvim/src/util/position.ts	/^  let { start, end } = range$/;"	v
start	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { start, end } = range$/;"	v
start	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^        def start(self, args):$/;"	m	class:DeniteHandlers
start	.vim/plugged/denite.nvim/rplugin/python3/denite/child.py	/^    def start(self, context):$/;"	m	class:Child
start	.vim/plugged/denite.nvim/rplugin/python3/denite/parent.py	/^    def start(self, context):$/;"	m	class:_Parent
start	.vim/plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^    def start(self, args):$/;"	m	class:Rplugin
start	.vim/plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^    def start(self, sources, context):$/;"	m	class:Default
start	.vim/plugged/ghost-text.vim/python3/server_thread.py	/^    def start(self):$/;"	m	class:ServerThread
start	.vim/plugged/ghost-text.vim/python3/tcp_server.py	/^    def start(self, host='localhost', port='4001'):$/;"	m	class:TcpServer
start	.vim/plugged/ghost-text.vim/python3/websocket_server.py	/^    def start(self, host='localhost', port='8765'):$/;"	m	class:WebsocketServer
start	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^def start():$/;"	f
start ghost-text.vim	.vim/plugged/ghost-text.vim/README.md	/^# start ghost-text.vim$/;"	c
start on vim side	.vim/plugged/ghost-text.vim/README.md	/^## start on vim side$/;"	s
startChan	.vim/plugged/fzf/src/terminal.go	/^	startChan  chan bool$/;"	m	struct:fzf.Terminal	typeref:typename:chan bool
startEventPoller	.vim/plugged/fzf/src/reader.go	/^func (r *Reader) startEventPoller() {$/;"	f	struct:fzf.Reader
startLine	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let { startLine, endLine } = range$/;"	v
startLine	.vim/plugged/coc.nvim/src/model/document.ts	/^    let startLine = Math.max(0, sp.line - 100)$/;"	v
start_server	.vim/plugged/ghost-text.vim/python3/single_server.py	/^def start_server():$/;"	f
start_server	.vim/plugged/ghost-text.vim/python3/test/test_websocket_server.py	/^start_server = websockets.serve(hello, 'localhost', 8765)$/;"	v
start_server	.vim/plugged/ghost-text.vim/python3/vim_ghost_text.py	/^def start_server():$/;"	f
start_with?	.vim/plugged/fzf/test/test_go.rb	/^  def start_with?(_str)$/;"	f	class:NilClass
startcol	.vim/plugged/coc.nvim/src/source/file.ts	/^  startcol: number$/;"	p	interface:PathOption
startcol	.vim/plugged/coc.nvim/src/types.ts	/^  startcol?: number$/;"	p	interface:CompleteResult
started	.vim/plugged/coc.nvim/src/__tests__/modules/task.test.ts	/^    let started = await task.start({ cmd: 'sleep', args: ['50'] })$/;"	v
starts_here	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:MirrorToken
starts_here	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:PythonCodeToken
starts_here	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:ShellCodeToken
starts_here	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:TabStopToken
starts_here	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:TransformationToken
starts_here	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:VimLCodeToken
starts_here	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:VisualToken
starts_here	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^    def starts_here(cls, stream, chars=r'{}\\$`'):$/;"	m	class:EscapeCharToken
stat	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let stat = extensions.getExtensionState('coc-json')$/;"	v
stat	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let stat = extensions.getExtensionState('local')$/;"	v
stat	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let stat = extensions.getExtensionState('test')$/;"	v
stat	.vim/plugged/coc.nvim/src/extensions.ts	/^        let stat = stats.find(s => s.id == name)$/;"	v
stat	.vim/plugged/coc.nvim/src/extensions.ts	/^    for (let stat of stats) {$/;"	v
stat	.vim/plugged/coc.nvim/src/extensions.ts	/^    let stat = await statAsync(folder)$/;"	v
stat	.vim/plugged/coc.nvim/src/extensions.ts	/^    let stat = await statAsync(jsonFile)$/;"	v
stat	.vim/plugged/coc.nvim/src/sources.ts	/^    let stat = await statAsync(folder)$/;"	v
stat	.vim/plugged/coc.nvim/src/util/index.ts	/^        const stat = await nfcall<fs.Stats>(fs.stat, path)$/;"	C	function:mkdirp
stat	.vim/plugged/coc.nvim/src/workspace.ts	/^    let stat = await statAsync(filepath)$/;"	v
stat	.vim/plugged/coc.nvim/src/workspace.ts	/^    let stat = await statAsync(filepath.replace(\/\\\/$\/, ''))$/;"	v
stat	.vim/plugged/coc.nvim/src/workspace.ts	/^    let stat = await statAsync(newPath)$/;"	v
statAsync	.vim/plugged/coc.nvim/src/util/fs.ts	/^export async function statAsync(filepath: string): Promise<fs.Stats | null> {$/;"	f
state	.vim/plugged/coc.nvim/src/__tests__/modules/colors.test.ts	/^let state = 'normal'$/;"	v
state	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let state = await workspace.getCurrentState()$/;"	v
state	.vim/plugged/coc.nvim/src/extensions.ts	/^    let state = this.getExtensionState(id)$/;"	v
state	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private get state(): ClientState {$/;"	m	class:BaseLanguageClient
state	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  private set state(value: ClientState) {$/;"	m	class:BaseLanguageClient
state	.vim/plugged/coc.nvim/src/services.ts	/^      state: ServiceStat.Initial,$/;"	v
state	.vim/plugged/coc.nvim/src/services.ts	/^    let { state } = service$/;"	v
state	.vim/plugged/coc.nvim/src/services.ts	/^  state: string$/;"	p	interface:ServiceInfo
state	.vim/plugged/coc.nvim/src/types.ts	/^  state: ExtensionState$/;"	p	interface:ExtensionInfo
state	.vim/plugged/coc.nvim/src/types.ts	/^  state: ServiceStat$/;"	p	interface:IServiceProvider
state	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^  let state: Partial<AnsiItem> = {}$/;"	C
state	.vim/plugged/fzf/src/util/atomicbool.go	/^	state bool$/;"	m	struct:util.AtomicBool	typeref:typename:bool
stateName	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  public static stateName(state: ClientState): string {$/;"	m	class:LanguageClient
stateString	.vim/plugged/coc.nvim/src/services.ts	/^function stateString(state: State): string {$/;"	f
static references	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "static references" do$/;"	d
stats	.vim/plugged/coc.nvim/src/__tests__/modules/extensions.test.ts	/^    let stats = await extensions.getExtensionStates()$/;"	v
stats	.vim/plugged/coc.nvim/src/__tests__/modules/sources.test.ts	/^    let stats = sources.sourceStats()$/;"	v
stats	.vim/plugged/coc.nvim/src/extensions.ts	/^      let stats = await this.getExtensionStates()$/;"	v
stats	.vim/plugged/coc.nvim/src/extensions.ts	/^    let stats = await this.globalExtensionStats()$/;"	v
status	.vim/plugged/coc.nvim/src/extensions.ts	/^    let status = workspace.createStatusBarItem(99, { progress: true })$/;"	v
status	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let status = {$/;"	v
statusline on top	.vim/plugged/vim-airline/README.md	/^### statusline on top$/;"	S
stderr	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) stderr(str string) {$/;"	f	unknown:tui.LightRenderer
stderr	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) stderr(str string) {$/;"	f	struct:tui.LightWindow
stderrInternal	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) stderrInternal(str string, allowNLCR bool) {$/;"	f	unknown:tui.LightRenderer
stderrInternal	.vim/plugged/fzf/src/tui/light.go	/^func (w *LightWindow) stderrInternal(str string, allowNLCR bool) {$/;"	f	struct:tui.LightWindow
stdio	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  stdio,$/;"	e	enum:TransportKind
stdio	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  stdio?: string | string[]$/;"	p	interface:SpawnOptions
stdioEncoding	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "stdioEncoding": {$/;"	o	object:definitions.languageServerBase.properties
stdioEncoding	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "stdioEncoding": {},$/;"	o	object:definitions.languageServerCommand.properties
stdioEncoding	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "stdioEncoding": {},$/;"	o	object:definitions.languageServerModule.properties
stdioEncoding	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "stdioEncoding": {},$/;"	o	object:definitions.languageServerSocket.properties
stdioEncoding	.vim/plugged/coc.nvim/data/schema.json	/^        "stdioEncoding": {$/;"	o	object:definitions.languageServerBase.properties
stdioEncoding	.vim/plugged/coc.nvim/data/schema.json	/^        "stdioEncoding": {},$/;"	o	object:definitions.languageServerCommand.properties
stdioEncoding	.vim/plugged/coc.nvim/data/schema.json	/^        "stdioEncoding": {},$/;"	o	object:definitions.languageServerModule.properties
stdioEncoding	.vim/plugged/coc.nvim/data/schema.json	/^        "stdioEncoding": {},$/;"	o	object:definitions.languageServerSocket.properties
stdioEncoding	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  stdioEncoding: string$/;"	p	interface:ResolvedClientOptions
stdioEncoding	.vim/plugged/coc.nvim/src/types.ts	/^  stdioEncoding?: string$/;"	p	interface:LanguageServerConfig
stdout	.vim/plugged/coc.nvim/src/model/task.ts	/^    let stdout: string[] = []$/;"	v
step	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	step: function(gotoEnd){$/;"	m	class:jQuery.fx
steps	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    steps = ($/;"	v	class:MovePosition_DelSameLine
steps	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    steps = ($/;"	v	class:MovePosition_DelSameLine1
steps	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    steps = ($/;"	v	class:MovePosition_DelSecondLine
steps	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    steps = ($/;"	v	class:MovePosition_DelSecondLine1
steps	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    steps = ($/;"	v	class:MovePosition_InsSameLine1
steps	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    steps = ($/;"	v	class:MovePosition_InsSameLine2
stl	.vim/plugged/vim-airline/t/builder.vim	/^    let stl = s:builder.build()$/;"	v
stl	.vim/plugged/vim-airline/t/extensions_default.vim	/^    let stl = s:builder.build()$/;"	v
stop	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^stop,$/;"	s
stop	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  public stop(): Thenable<void> {$/;"	m	class:LanguageClient
stop	.vim/plugged/coc.nvim/src/services.ts	/^      stop: async (): Promise<void> => {$/;"	v
stop	.vim/plugged/coc.nvim/src/types.ts	/^  stop(): Promise<void> | void$/;"	m	interface:IServiceProvider
stop	.vim/plugged/ghost-text.vim/python3/server_thread.py	/^    def stop(self):$/;"	m	class:ServerThread
stop	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^def stop():$/;"	f
stop on vim side	.vim/plugged/ghost-text.vim/README.md	/^## stop on vim side$/;"	s
stopPropagation	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		event.stopPropagation = function() {$/;"	f	function:event
stop_server	.vim/plugged/ghost-text.vim/python3/single_server.py	/^def stop_server():$/;"	f
stop_server	.vim/plugged/ghost-text.vim/python3/vim_ghost_text.py	/^def stop_server():$/;"	f
storagePath	.vim/plugged/coc.nvim/src/extensions.ts	/^          storagePath: path.join(this.root, `${id}-data`),$/;"	v
storagePath	.vim/plugged/coc.nvim/src/types.ts	/^  storagePath: string$/;"	p	interface:ExtensionContext
str	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let str = '\\u001b[33mText\\u001b[mnormal'$/;"	v
str	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let str = '\\u001b[33m\\u001b[mText'$/;"	v
str	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let str = 'this.\\u001b[0m\\u001b[31m\\u001b[1mhistory\\u001b[0m.add()'$/;"	v
str	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let str = await helper.getCmdline()$/;"	v
str	.vim/plugged/coc.nvim/src/handler/index.ts	/^                let str = after.slice(0)$/;"	v
str	.vim/plugged/coc.nvim/src/model/document.ts	/^          let str = content.slice(start, i)$/;"	v
str	.vim/plugged/coc.nvim/src/model/document.ts	/^    let str = ''$/;"	v
str	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^      for (let str of arr) {$/;"	v
str	.vim/plugged/fzf/src/tokenizer.go	/^	str   *string$/;"	m	struct:fzf.Delimiter	typeref:typename:*string
strLines	.vim/plugged/fzf/src/options.go	/^func strLines(str string) []string {$/;"	f	package:fzf	typeref:typename:[]string
stream_url	.config/nvim/plugged/oceanic-next/test/test.js	/^      stream_url: streamUrl$/;"	p	class:SoundCloudAudio.preload._track
strictEnv	.vim/plugged/coc.nvim/src/types.ts	/^  strictEnv?: boolean$/;"	p	interface:TerminalOptions
strictFunctionTypes	.vim/plugged/coc.nvim/tsconfig.json	/^    "strictFunctionTypes": false,$/;"	b	object:compilerOptions
strictNullChecks	.vim/plugged/coc.nvim/tsconfig.json	/^    "strictNullChecks": false,$/;"	b	object:compilerOptions
strictPropertyInitialization	.vim/plugged/coc.nvim/tsconfig.json	/^    "strictPropertyInitialization": false,$/;"	b	object:compilerOptions
string	.vim/plugged/coc.nvim/src/__tests__/modules/plugin.test.ts	/^    let res = await nvim.call('execute', `helptags ${dir}`) as string$/;"	v
string	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let name = await nvim.eval('bufname("%")') as string$/;"	v
string	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        let echoLine = await this.nvim.call('coc#util#echo_line') as string$/;"	v
string	.vim/plugged/coc.nvim/src/extensions.ts	/^    let runtimepath = await workspace.nvim.eval('&runtimepath') as string$/;"	v
string	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let [pos, line] = await nvim.eval('[coc#util#cursor(), getline(".")]') as [[number, number/;"	v
string	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let [bufnr, mode] = await nvim.eval(`[bufnr('%'), mode()]`) as [number, string]$/;"	v
string	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let text = await this.nvim.eval('@*') as string$/;"	v
string	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let filetype = await this.nvim.eval('&filetype') as string$/;"	v
string	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let [mode, line, col] = await this.nvim.eval('[mode(),line("."),col(".")]') as [string, numb/;"	v
string	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let [ve, selection, pumvisible, mode] = await nvim.eval('[&virtualedit, &selection, pumvisib/;"	v
string	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^    let selected = await this.nvim.getVar('coc_selected_text') as string$/;"	v
string	.vim/plugged/coc.nvim/src/sources.ts	/^      let fns = await nvim.call('coc#util#remote_fns', name) as string[]$/;"	v
string	.vim/plugged/coc.nvim/src/util/is.ts	/^export function string(value: any): value is string {$/;"	f
string	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [bufnr, ve, selection, mode] = await nvim.eval(`[bufnr('%'), &virtualedit, &selection, m/;"	v
string	.vim/plugged/coc.nvim/src/workspace.ts	/^    let encoding = await this.nvim.getOption('fileencoding') as string$/;"	v
string	.vim/plugged/coc.nvim/src/workspace.ts	/^    let filepath = await this.nvim.call('expand', '%:p') as string$/;"	v
strong	.vim/plugged/fzf/src/terminal.go	/^	strong     tui.Attr$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Attr
struct	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "struct": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
struct	.vim/plugged/coc.nvim/data/schema.json	/^        "struct": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
style	.vim/plugged/fzf/src/tui/tcell.go	/^func (p ColorPair) style() tcell.Style {$/;"	f	unknown:tui.ColorPair	typeref:typename:tcell.Style
styleFloat	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var styleFloat = jQuery.browser.msie ?$/;"	v
styles	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^const styles = {$/;"	C
submit_solution	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def submit_solution(slug, filetype, code=None):$/;"	f
submit_solution_async	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def submit_solution_async(slug, filetype, code=None):$/;"	f
subscribe	.vim/plugged/coc.nvim/src/watchman.ts	/^  public async subscribe(globPattern: string, cb: ChangeCallback): Promise<Disposable> {$/;"	m	class:Watchman
subscription	.vim/plugged/coc.nvim/src/watchman.ts	/^  subscription: string$/;"	p	interface:FileChange
subscriptions	.vim/plugged/coc.nvim/src/extensions.ts	/^    let subscriptions: Disposable[] = []$/;"	v
subscriptions	.vim/plugged/coc.nvim/src/types.ts	/^  subscriptions: Disposable[]$/;"	p	interface:ExtensionContext
success	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		function success(){$/;"	f	function:AnonymousFunctiond47633f8a100
success	.vim/plugged/coc.nvim/src/types.ts	/^  success: boolean$/;"	p	interface:TerminalResult
success	.vim/plugged/fzf/src/terminal.go	/^	success    bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
suggest	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let suggest = workspace.getConfiguration('suggest')$/;"	v
suggest	.vim/plugged/coc.nvim/src/languages.ts	/^    let suggest = workspace.getConfiguration('suggest')$/;"	v
suggest	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let suggest = workspace.getConfiguration('suggest')$/;"	v
suggest	.vim/plugged/coc.nvim/src/workspace.ts	/^        let suggest = this.getConfiguration('suggest')$/;"	v
suggest.acceptSuggestionOnCommitCharacter	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.acceptSuggestionOnCommitCharacter": {$/;"	o	object:properties
suggest.acceptSuggestionOnCommitCharacter	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.acceptSuggestionOnCommitCharacter": {$/;"	o	object:properties
suggest.autoTrigger	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.autoTrigger": {$/;"	o	object:properties
suggest.autoTrigger	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.autoTrigger": {$/;"	o	object:properties
suggest.completionItemKindLabels	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.completionItemKindLabels": {$/;"	o	object:properties
suggest.completionItemKindLabels	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.completionItemKindLabels": {$/;"	o	object:properties
suggest.detailField	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.detailField": {$/;"	o	object:properties
suggest.detailField	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.detailField": {$/;"	o	object:properties
suggest.detailMaxLength	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.detailMaxLength": {$/;"	o	object:properties
suggest.detailMaxLength	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.detailMaxLength": {$/;"	o	object:properties
suggest.disableKind	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.disableKind": {$/;"	o	object:properties
suggest.disableKind	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.disableKind": {$/;"	o	object:properties
suggest.disableMenu	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.disableMenu": {$/;"	o	object:properties
suggest.disableMenu	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.disableMenu": {$/;"	o	object:properties
suggest.disableMenuShortcut	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.disableMenuShortcut": {$/;"	o	object:properties
suggest.disableMenuShortcut	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.disableMenuShortcut": {$/;"	o	object:properties
suggest.echodocSupport	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.echodocSupport": {$/;"	o	object:properties
suggest.echodocSupport	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.echodocSupport": {$/;"	o	object:properties
suggest.enablePreview	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.enablePreview": {$/;"	o	object:properties
suggest.enablePreview	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.enablePreview": {$/;"	o	object:properties
suggest.fixInsertedWord	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.fixInsertedWord": {$/;"	o	object:properties
suggest.fixInsertedWord	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.fixInsertedWord": {$/;"	o	object:properties
suggest.floatEnable	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.floatEnable": {$/;"	o	object:properties
suggest.floatEnable	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.floatEnable": {$/;"	o	object:properties
suggest.highPrioritySourceLimit	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.highPrioritySourceLimit": {$/;"	o	object:properties
suggest.highPrioritySourceLimit	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.highPrioritySourceLimit": {$/;"	o	object:properties
suggest.keepCompleteopt	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.keepCompleteopt": {$/;"	o	object:properties
suggest.keepCompleteopt	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.keepCompleteopt": {$/;"	o	object:properties
suggest.labelMaxLength	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.labelMaxLength": {$/;"	o	object:properties
suggest.labelMaxLength	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.labelMaxLength": {$/;"	o	object:properties
suggest.languageSourcePriority	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.languageSourcePriority": {$/;"	o	object:properties
suggest.languageSourcePriority	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.languageSourcePriority": {$/;"	o	object:properties
suggest.localityBonus	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.localityBonus": {$/;"	o	object:properties
suggest.localityBonus	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.localityBonus": {$/;"	o	object:properties
suggest.lowPrioritySourceLimit	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.lowPrioritySourceLimit": {$/;"	o	object:properties
suggest.lowPrioritySourceLimit	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.lowPrioritySourceLimit": {$/;"	o	object:properties
suggest.maxCompleteItemCount	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.maxCompleteItemCount": {$/;"	o	object:properties
suggest.maxCompleteItemCount	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.maxCompleteItemCount": {$/;"	o	object:properties
suggest.maxPreviewWidth	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.maxPreviewWidth": {$/;"	o	object:properties
suggest.maxPreviewWidth	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.maxPreviewWidth": {$/;"	o	object:properties
suggest.minTriggerInputLength	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.minTriggerInputLength": {$/;"	o	object:properties
suggest.minTriggerInputLength	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.minTriggerInputLength": {$/;"	o	object:properties
suggest.noselect	.config/nvim/coc-settings.json	/^    "suggest.noselect": false,$/;"	b
suggest.noselect	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.noselect": {$/;"	o	object:properties
suggest.noselect	.vim/coc-settings.json	/^ "suggest.noselect": false,$/;"	b
suggest.noselect	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.noselect": {$/;"	o	object:properties
suggest.numberSelect	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.numberSelect": {$/;"	o	object:properties
suggest.numberSelect	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.numberSelect": {$/;"	o	object:properties
suggest.preferCompleteThanJumpPlaceholder	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.preferCompleteThanJumpPlaceholder": {$/;"	o	object:properties
suggest.preferCompleteThanJumpPlaceholder	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.preferCompleteThanJumpPlaceholder": {$/;"	o	object:properties
suggest.snippetIndicator	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.snippetIndicator": {$/;"	o	object:properties
suggest.snippetIndicator	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.snippetIndicator": {$/;"	o	object:properties
suggest.timeout	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.timeout": {$/;"	o	object:properties
suggest.timeout	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.timeout": {$/;"	o	object:properties
suggest.timeout	.vim/plugged/coc.nvim/src/__tests__/coc-settings.json	/^  "suggest.timeout": 5000,$/;"	n
suggest.triggerAfterInsertEnter	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.triggerAfterInsertEnter": {$/;"	o	object:properties
suggest.triggerAfterInsertEnter	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.triggerAfterInsertEnter": {$/;"	o	object:properties
suggest.triggerCompletionWait	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "suggest.triggerCompletionWait": {$/;"	o	object:properties
suggest.triggerCompletionWait	.vim/plugged/coc.nvim/data/schema.json	/^    "suggest.triggerCompletionWait": {$/;"	o	object:properties
super	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^    super(nvim)$/;"	v
suppress	.vim/plugged/fzf/src/terminal.go	/^	suppress   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
surround.vim	.config/nvim/plugged/vim-surround/README.markdown	/^# surround.vim$/;"	c
surround.vim	.vim/plugged/vim-surround/README.markdown	/^# surround.vim$/;"	c
suspend_proxy_edits	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^def suspend_proxy_edits():$/;"	f
switch	.config/nvim/plugged/switch.vim/spec/spec_helper.rb	/^    def vim.switch$/;"	S
switch	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^switch,$/;"	s
switch	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      switch (diagnostic.severity) {$/;"	v
switch#NormalizedCase	.config/nvim/plugged/switch.vim/autoload/switch.vim	/^function! switch#NormalizedCase(definition)$/;"	f
switch#Switch	.config/nvim/plugged/switch.vim/autoload/switch.vim	/^function! switch#Switch(...)$/;"	f
switch#mapping#Match	.config/nvim/plugged/switch.vim/autoload/switch/mapping.vim	/^function! switch#mapping#Match() dict$/;"	f
switch#mapping#Process	.config/nvim/plugged/switch.vim/autoload/switch/mapping.vim	/^function! switch#mapping#Process(definition, options)$/;"	f
switch#mapping#Replace	.config/nvim/plugged/switch.vim/autoload/switch/mapping.vim	/^function! switch#mapping#Replace(match) dict$/;"	f
switch#match#IsBetter	.config/nvim/plugged/switch.vim/autoload/switch/match.vim	/^function! switch#match#IsBetter(other) dict$/;"	f
switch#match#IsNull	.config/nvim/plugged/switch.vim/autoload/switch/match.vim	/^function! switch#match#IsNull() dict$/;"	f
switch#match#New	.config/nvim/plugged/switch.vim/autoload/switch/match.vim	/^function! switch#match#New(mapping, pattern, start, end)$/;"	f
switch#match#Null	.config/nvim/plugged/switch.vim/autoload/switch/match.vim	/^function! switch#match#Null()$/;"	f
switch#match#Replace	.config/nvim/plugged/switch.vim/autoload/switch/match.vim	/^function! switch#match#Replace() dict$/;"	f
switch#util#Capitalize	.config/nvim/plugged/switch.vim/autoload/switch/util.vim	/^function! switch#util#Capitalize(word)$/;"	f
switch#util#FlatMap	.config/nvim/plugged/switch.vim/autoload/switch/util.vim	/^function! switch#util#FlatMap(list, expr)$/;"	f
switchMatcher	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async switchMatcher(): Promise<void> {$/;"	C
switch_reverse	.config/nvim/plugged/switch.vim/spec/spec_helper.rb	/^    def vim.switch_reverse$/;"	S
sym	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let label = this.labels[sym.kind.toLowerCase()]$/;"	v
sym	.vim/plugged/coc.nvim/src/handler/index.ts	/^      for (let sym of properties) {$/;"	v
sym	.vim/plugged/coc.nvim/src/handler/index.ts	/^      for (let sym of symbols) {$/;"	v
sym	.vim/plugged/coc.nvim/src/handler/index.ts	/^    for (let sym of symbols.reverse()) {$/;"	v
symbol	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^symbol,$/;"	s
symbols	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let symbols = await languages.getDocumentSymbol(document.textDocument)$/;"	v
symbols	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let symbols = await this.getDocumentSymbols(doc)$/;"	v
symbols	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let symbols = await this.getDocumentSymbols(document)$/;"	v
sync	.vim/plugged/coc.nvim/src/types.ts	/^  sync: boolean$/;"	p	interface:KeymapOption
syncKind	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  syncKind: 0 | 1 | 2$/;"	p	interface:DidChangeTextDocumentData
synchronize	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  synchronize: SynchronizeOptions$/;"	p	interface:ResolvedClientOptions
synname	.vim/plugged/coc.nvim/src/types.ts	/^  readonly synname: string$/;"	p	interface:CompleteOption
syntaxes	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/column.py	/^    def syntaxes(self) -> typing.List[str]:$/;"	m	class:Base
syntaxes	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/filename.py	/^    def syntaxes(self) -> typing.List[str]:$/;"	m	class:Column
syntaxes	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/icon.py	/^    def syntaxes(self) -> typing.List[str]:$/;"	m	class:Column
syntaxes	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/mark.py	/^    def syntaxes(self) -> typing.List[str]:$/;"	m	class:Column
syntaxes	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/column/type.py	/^    def syntaxes(self) -> typing.List[str]:$/;"	m	class:Column
t	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> t    denite#do_map('do_action', 'tabopen')$/;"	m
t	.config/nvim/plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.t = function(value, mode) {$/;"	f	function:__webpack_require__
t	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		function t(gotoEnd){$/;"	f	function:jQuery.fx.custom
t	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map t <Plug>(easymotion-bd-t)$/;"	m
t	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map t <Plug>(easymotion-t)$/;"	m
t	.vim/plugged/coc.nvim/build/index.js	/^\/******\/ 	__webpack_require__.t = function(value, mode) {$/;"	f	function:__webpack_require__
t	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  t = 116,$/;"	e	enum:CharCode
t	.vim/plugged/fzf/src/terminal.go	/^	t actionType$/;"	m	struct:fzf.action	typeref:typename:actionType
t/	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map t\/ <Plug>(easymotion-tn)$/;"	m
tab	.vim/plugged/coc.nvim/src/types.ts	/^  tab?: number$/;"	p	interface:PopupOptions
tabSize	.vim/plugged/coc.nvim/src/workspace.ts	/^    let tabSize = await this.getDocumentOption('shiftwidth', doc) as number$/;"	v
tabstop	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let { tabstop } = this$/;"	v
tabstop	.vim/plugged/fzf/src/terminal.go	/^	tabstop    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
tabstop	.vim/plugged/fzf/src/tui/light.go	/^	tabstop       int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
tabstop	.vim/plugged/fzf/src/tui/light.go	/^	tabstop  int$/;"	m	struct:tui.LightWindow	typeref:typename:int
tabular#DoGTabularize	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! tabular#DoGTabularize()$/;"	f
tabular#ElementFormatPattern	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! tabular#ElementFormatPattern()$/;"	f
tabular#PipeRange	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! tabular#PipeRange(includepat, ...) range$/;"	f
tabular#PipeRangeWithOptions	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! tabular#PipeRangeWithOptions(includepat, filterlist, options) range$/;"	f
tabular#SplitDelimUnitTest	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! tabular#SplitDelimUnitTest()$/;"	f
tabular#TabularizeStrings	.config/nvim/plugged/tabular/autoload/tabular.vim	/^function! tabular#TabularizeStrings(strings, delim, ...)$/;"	f
tac	.vim/plugged/fzf/src/matcher.go	/^	tac            bool$/;"	m	struct:fzf.Matcher	typeref:typename:bool
tac	.vim/plugged/fzf/src/merger.go	/^	tac     bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
tagalong	.config/nvim/plugged/tagalong.vim/plugin/tagalong.vim	/^augroup tagalong$/;"	a
tagalong#Apply	.config/nvim/plugged/tagalong.vim/autoload/tagalong.vim	/^function! tagalong#Apply()$/;"	f
tagalong#Deinit	.config/nvim/plugged/tagalong.vim/autoload/tagalong.vim	/^function! tagalong#Deinit()$/;"	f
tagalong#Init	.config/nvim/plugged/tagalong.vim/autoload/tagalong.vim	/^function! tagalong#Init()$/;"	f
tagalong#Reapply	.config/nvim/plugged/tagalong.vim/autoload/tagalong.vim	/^function! tagalong#Reapply()$/;"	f
tagalong#Trigger	.config/nvim/plugged/tagalong.vim/autoload/tagalong.vim	/^function! tagalong#Trigger()$/;"	f
tagalong#util#DropCursor	.config/nvim/plugged/tagalong.vim/autoload/tagalong/util.vim	/^function! tagalong#util#DropCursor()$/;"	f
tagalong#util#GetByPosition	.config/nvim/plugged/tagalong.vim/autoload/tagalong/util.vim	/^function! tagalong#util#GetByPosition(start, end)$/;"	f
tagalong#util#GetMotion	.config/nvim/plugged/tagalong.vim/autoload/tagalong/util.vim	/^function! tagalong#util#GetMotion(motion)$/;"	f
tagalong#util#PopCursor	.config/nvim/plugged/tagalong.vim/autoload/tagalong/util.vim	/^function! tagalong#util#PopCursor()$/;"	f
tagalong#util#PosBetween	.config/nvim/plugged/tagalong.vim/autoload/tagalong/util.vim	/^function! tagalong#util#PosBetween(pos, start, end)$/;"	f
tagalong#util#PushCursor	.config/nvim/plugged/tagalong.vim/autoload/tagalong/util.vim	/^function! tagalong#util#PushCursor()$/;"	f
tagalong#util#ReplaceMotion	.config/nvim/plugged/tagalong.vim/autoload/tagalong/util.vim	/^function! tagalong#util#ReplaceMotion(motion, text)$/;"	f
tagalong#util#SearchSkip	.config/nvim/plugged/tagalong.vim/autoload/tagalong/util.vim	/^function! tagalong#util#SearchSkip(pattern, skip, ...)$/;"	f
tagalong#util#SearchUnderCursor	.config/nvim/plugged/tagalong.vim/autoload/tagalong/util.vim	/^function! tagalong#util#SearchUnderCursor(pattern, ...)$/;"	f
tagalong#util#SearchposUnderCursor	.config/nvim/plugged/tagalong.vim/autoload/tagalong/util.vim	/^function! tagalong#util#SearchposUnderCursor(pattern, ...)$/;"	f
tail	.vim/plugged/coc.nvim/src/util/array.ts	/^export function tail<T>(array: T[], n = 0): T {$/;"	f
tailCount	.vim/plugged/coc.nvim/src/model/document.ts	/^    let tailCount = len - doc.offsetAt(ep)$/;"	v
target	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	var target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, options;$/;"	v
target	.vim/plugged/coc.nvim/src/configuration/index.ts	/^        let target = isUser ? ConfigurationTarget.User : ConfigurationTarget.Workspace$/;"	v
target	.vim/plugged/coc.nvim/src/handler/index.ts	/^        let { target } = link$/;"	v
target	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let target = this.preferences.hoverTarget$/;"	v
target	.vim/plugged/coc.nvim/tsconfig.json	/^    "target": "es2017",$/;"	s	object:compilerOptions
target	.vim/plugged/coc.nvim/webpack.config.js	/^  target: 'node',$/;"	p	class:module.exports
target	.vim/plugged/fzf/Makefile	/^target:$/;"	t
target/$(BINARY32)	.vim/plugged/fzf/Makefile	/^target\/$(BINARY32): $(SOURCES)$/;"	t
target/$(BINARY64)	.vim/plugged/fzf/Makefile	/^target\/$(BINARY64): $(SOURCES)$/;"	t
target/$(BINARYARM5)	.vim/plugged/fzf/Makefile	/^target\/$(BINARYARM5): $(SOURCES)$/;"	t
target/$(BINARYARM6)	.vim/plugged/fzf/Makefile	/^target\/$(BINARYARM6): $(SOURCES)$/;"	t
target/$(BINARYARM7)	.vim/plugged/fzf/Makefile	/^target\/$(BINARYARM7): $(SOURCES)$/;"	t
target/$(BINARYARM8)	.vim/plugged/fzf/Makefile	/^target\/$(BINARYARM8): $(SOURCES)$/;"	t
target/$(BINARYPPC64LE)	.vim/plugged/fzf/Makefile	/^target\/$(BINARYPPC64LE): $(SOURCES)$/;"	t
targetBufnr	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private targetBufnr: number$/;"	p	class:FloatFactory
targets	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    targets: typing.List[typing.Dict[str, typing.Any]] = []$/;"	v	class:Context
targets	.config/nvim/plugged/targets.vim/autoload/targets/mappings.vim	/^    augroup targets#mappings#silent$/;"	a
targets	.config/nvim/plugged/targets.vim/autoload/targets/sources.vim	/^    augroup targets#sources#silent$/;"	a
targets#context#new	.config/nvim/plugged/targets.vim/autoload/targets/context.vim	/^function! targets#context#new(mapmode, trigger, newSelection, visualTarget)$/;"	f
targets#context#withOldpos	.config/nvim/plugged/targets.vim/autoload/targets/context.vim	/^function! targets#context#withOldpos(oldpos) dict$/;"	f
targets#do	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! targets#do()$/;"	f
targets#e	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! targets#e(mapmode, modifier, original)$/;"	f
targets#factory#init	.config/nvim/plugged/targets.vim/autoload/targets/factory.vim	/^function! targets#factory#init(source, factory)$/;"	f
targets#factory#new	.config/nvim/plugged/targets.vim/autoload/targets/factory.vim	/^function! targets#factory#new(oldpos, which) dict$/;"	f
targets#generator#new	.config/nvim/plugged/targets.vim/autoload/targets/generator.vim	/^function! targets#generator#new(genFunc, modFuncs, source, args, oldpos, which)$/;"	f
targets#generator#next	.config/nvim/plugged/targets.vim/autoload/targets/generator.vim	/^function! targets#generator#next(first) dict$/;"	f
targets#generator#nextN	.config/nvim/plugged/targets.vim/autoload/targets/generator.vim	/^function! targets#generator#nextN(n, first) dict$/;"	f
targets#generator#target	.config/nvim/plugged/targets.vim/autoload/targets/generator.vim	/^function! targets#generator#target() dict$/;"	f
targets#legacy#addMappings	.config/nvim/plugged/targets.vim/autoload/targets/legacy.vim	/^function! targets#legacy#addMappings(a, i, A, I, n, l)$/;"	f
targets#mappings#extend	.config/nvim/plugged/targets.vim/README.md	/^### targets#mappings#extend$/;"	S
targets#mappings#extend	.config/nvim/plugged/targets.vim/autoload/targets/mappings.vim	/^function! targets#mappings#extend(mappings)$/;"	f
targets#mappings#get	.config/nvim/plugged/targets.vim/autoload/targets/mappings.vim	/^function! targets#mappings#get(trigger)$/;"	f
targets#modify#drop	.config/nvim/plugged/targets.vim/autoload/targets/modify.vim	/^function! targets#modify#drop(target, args)$/;"	f
targets#modify#dropa	.config/nvim/plugged/targets.vim/autoload/targets/modify.vim	/^function! targets#modify#dropa(target, args)$/;"	f
targets#modify#dropr	.config/nvim/plugged/targets.vim/autoload/targets/modify.vim	/^function! targets#modify#dropr(target, args)$/;"	f
targets#modify#expand	.config/nvim/plugged/targets.vim/autoload/targets/modify.vim	/^function! targets#modify#expand(target, args, ...)$/;"	f
targets#modify#expands	.config/nvim/plugged/targets.vim/autoload/targets/modify.vim	/^function! targets#modify#expands(target, args)$/;"	f
targets#modify#innert	.config/nvim/plugged/targets.vim/autoload/targets/modify.vim	/^function! targets#modify#innert(target, args)$/;"	f
targets#modify#keep	.config/nvim/plugged/targets.vim/autoload/targets/modify.vim	/^function! targets#modify#keep(target, args)$/;"	f
targets#modify#shrink	.config/nvim/plugged/targets.vim/autoload/targets/modify.vim	/^function! targets#modify#shrink(target, args)$/;"	f
targets#multigen#add	.config/nvim/plugged/targets.vim/autoload/targets/multigen.vim	/^function! targets#multigen#add(factories, ...) dict$/;"	f
targets#multigen#new	.config/nvim/plugged/targets.vim/autoload/targets/multigen.vim	/^function! targets#multigen#new(context, lastRawTarget)$/;"	f
targets#multigen#next	.config/nvim/plugged/targets.vim/autoload/targets/multigen.vim	/^function! targets#multigen#next(first) dict$/;"	f
targets#o	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! targets#o(trigger, typed, count)$/;"	f
targets#sources#argument#current	.config/nvim/plugged/targets.vim/autoload/targets/sources/argument.vim	/^function! targets#sources#argument#current(args, opts, state)$/;"	f
targets#sources#argument#last	.config/nvim/plugged/targets.vim/autoload/targets/sources/argument.vim	/^function! targets#sources#argument#last(args, opts, state)$/;"	f
targets#sources#argument#new	.config/nvim/plugged/targets.vim/autoload/targets/sources/argument.vim	/^function! targets#sources#argument#new(args)$/;"	f
targets#sources#argument#next	.config/nvim/plugged/targets.vim/autoload/targets/sources/argument.vim	/^function! targets#sources#argument#next(args, opts, state)$/;"	f
targets#sources#newFactories	.config/nvim/plugged/targets.vim/autoload/targets/sources.vim	/^function! targets#sources#newFactories(trigger)$/;"	f
targets#sources#pair#current	.config/nvim/plugged/targets.vim/autoload/targets/sources/pair.vim	/^function! targets#sources#pair#current(args, opts, state)$/;"	f
targets#sources#pair#last	.config/nvim/plugged/targets.vim/autoload/targets/sources/pair.vim	/^function! targets#sources#pair#last(args, opts, state)$/;"	f
targets#sources#pair#new	.config/nvim/plugged/targets.vim/autoload/targets/sources/pair.vim	/^function! targets#sources#pair#new(args)$/;"	f
targets#sources#pair#next	.config/nvim/plugged/targets.vim/autoload/targets/sources/pair.vim	/^function! targets#sources#pair#next(args, opts, state)$/;"	f
targets#sources#quote#current	.config/nvim/plugged/targets.vim/autoload/targets/sources/quote.vim	/^function! targets#sources#quote#current(args, opts, state)$/;"	f
targets#sources#quote#last	.config/nvim/plugged/targets.vim/autoload/targets/sources/quote.vim	/^function! targets#sources#quote#last(args, opts, state)$/;"	f
targets#sources#quote#new	.config/nvim/plugged/targets.vim/autoload/targets/sources/quote.vim	/^function! targets#sources#quote#new(args)$/;"	f
targets#sources#quote#next	.config/nvim/plugged/targets.vim/autoload/targets/sources/quote.vim	/^function! targets#sources#quote#next(args, opts, state)$/;"	f
targets#sources#register	.config/nvim/plugged/targets.vim/autoload/targets/sources.vim	/^function! targets#sources#register(source, newFactoryFunc)$/;"	f
targets#sources#separator#current	.config/nvim/plugged/targets.vim/autoload/targets/sources/separator.vim	/^function! targets#sources#separator#current(args, opts, state)$/;"	f
targets#sources#separator#last	.config/nvim/plugged/targets.vim/autoload/targets/sources/separator.vim	/^function! targets#sources#separator#last(args, opts, state)$/;"	f
targets#sources#separator#new	.config/nvim/plugged/targets.vim/autoload/targets/sources/separator.vim	/^function! targets#sources#separator#new(args)$/;"	f
targets#sources#separator#next	.config/nvim/plugged/targets.vim/autoload/targets/sources/separator.vim	/^function! targets#sources#separator#next(args, opts, state)$/;"	f
targets#sources#tag#new	.config/nvim/plugged/targets.vim/autoload/targets/sources/tag.vim	/^function! targets#sources#tag#new(args)$/;"	f
targets#state#empty	.config/nvim/plugged/targets.vim/autoload/targets/state.vim	/^function! targets#state#empty()$/;"	f
targets#state#invalid	.config/nvim/plugged/targets.vim/autoload/targets/state.vim	/^function! targets#state#invalid()$/;"	f
targets#state#isEmpty	.config/nvim/plugged/targets.vim/autoload/targets/state.vim	/^function! targets#state#isEmpty() dict$/;"	f
targets#state#isInvalid	.config/nvim/plugged/targets.vim/autoload/targets/state.vim	/^function! targets#state#isInvalid() dict$/;"	f
targets#state#isInvalidOrEmpty	.config/nvim/plugged/targets.vim/autoload/targets/state.vim	/^function! targets#state#isInvalidOrEmpty() dict$/;"	f
targets#state#isNonempty	.config/nvim/plugged/targets.vim/autoload/targets/state.vim	/^function! targets#state#isNonempty() dict$/;"	f
targets#state#isValid	.config/nvim/plugged/targets.vim/autoload/targets/state.vim	/^function! targets#state#isValid() dict$/;"	f
targets#state#new	.config/nvim/plugged/targets.vim/autoload/targets/state.vim	/^function! targets#state#new(state)$/;"	f
targets#state#nonempty	.config/nvim/plugged/targets.vim/autoload/targets/state.vim	/^function! targets#state#nonempty()$/;"	f
targets#target#copy	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#copy() dict$/;"	f
targets#target#cursorE	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#cursorE() dict$/;"	f
targets#target#cursorS	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#cursorS() dict$/;"	f
targets#target#e	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#e() dict$/;"	f
targets#target#equal	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#equal(t) dict$/;"	f
targets#target#fromValues	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#fromValues(sl, sc, el, ec)$/;"	f
targets#target#fromVisualSelection	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#fromVisualSelection(...)$/;"	f
targets#target#getcharE	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#getcharE() dict$/;"	f
targets#target#getcharS	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#getcharS() dict$/;"	f
targets#target#getposE	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#getposE(...) dict$/;"	f
targets#target#getposS	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#getposS(...) dict$/;"	f
targets#target#new	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#new(sl, sc, el, ec, error)$/;"	f
targets#target#range	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#range(context) dict$/;"	f
targets#target#s	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#s() dict$/;"	f
targets#target#searchposE	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#searchposE(...) dict$/;"	f
targets#target#searchposS	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#searchposS(...) dict$/;"	f
targets#target#select	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#select() dict$/;"	f
targets#target#setE	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#setE(...) dict$/;"	f
targets#target#setS	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#setS(...) dict$/;"	f
targets#target#state	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#state() dict$/;"	f
targets#target#string	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#string() dict$/;"	f
targets#target#withError	.config/nvim/plugged/targets.vim/autoload/targets/target.vim	/^function! targets#target#withError(error)$/;"	f
targets#undo	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! targets#undo(lastseq)$/;"	f
targets#util#debug	.config/nvim/plugged/targets.vim/autoload/targets/util.vim	/^function! targets#util#debug(message)$/;"	f
targets#util#fail	.config/nvim/plugged/targets.vim/autoload/targets/util.vim	/^function! targets#util#fail(message, ...)$/;"	f
targets#util#print	.config/nvim/plugged/targets.vim/autoload/targets/util.vim	/^function! targets#util#print(...)$/;"	f
targets#util#printpos	.config/nvim/plugged/targets.vim/autoload/targets/util.vim	/^function! targets#util#printpos()$/;"	f
targets#util#search	.config/nvim/plugged/targets.vim/autoload/targets/util.vim	/^function! targets#util#search(pattern, flags, ...)$/;"	f
targets#util#select	.config/nvim/plugged/targets.vim/autoload/targets/util.vim	/^function! targets#util#select(opening, closing, direction)$/;"	f
targets#x	.config/nvim/plugged/targets.vim/autoload/targets.vim	/^function! targets#x(trigger, typed, count)$/;"	f
task	.vim/plugged/coc.nvim/src/__tests__/modules/task.test.ts	/^    let task = workspace.createTask('echo')$/;"	v
task	.vim/plugged/coc.nvim/src/__tests__/modules/task.test.ts	/^    let task = workspace.createTask('error')$/;"	v
task	.vim/plugged/coc.nvim/src/__tests__/modules/task.test.ts	/^    let task = workspace.createTask('sleep')$/;"	v
task	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^        const task = this.task!$/;"	C	method:Delayer.trigger
task	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  private task: Task<T | Thenable<T>> | null$/;"	p	class:Delayer
task	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let task = this.task = items as ListTask$/;"	v
task_done	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^task_done = False$/;"	v
task_err	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^task_err = ''$/;"	v
task_input	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^task_input = None$/;"	v
task_name	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^task_name = ''$/;"	v
task_output	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^task_output = None$/;"	v
task_progress	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^task_progress = ''$/;"	v
task_running	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^task_running = False$/;"	v
task_thread	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^task_thread = Thread(target=_thread_main, daemon=True)$/;"	v
task_trigger	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^task_trigger = Semaphore(0)$/;"	v
tearDown	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    def tearDown(self):$/;"	m	class:VimTestCase
teardown	.vim/plugged/fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestGoFZF
teardown	.vim/plugged/fzf/test/test_go.rb	/^  def teardown$/;"	f	module:TestShell
template	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^template {$/;"	s
template args in a newtype declaration	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "template args in a newtype declaration" do$/;"	d
template args in a turbofish	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "template args in a turbofish" do$/;"	d
template args in struct definitions	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "template args in struct definitions" do$/;"	d
template args in tuple struct definitions	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "template args in tuple struct definitions" do$/;"	d
template args in types	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "template args in types" do$/;"	d
tempname	.vim/plugged/fzf/test/test_go.rb	/^  def tempname$/;"	f	class:TestBase
term	.vim/plugged/fzf/src/pattern.go	/^type term struct {$/;"	s	package:fzf
termEqual	.vim/plugged/fzf/src/pattern.go	/^	termEqual$/;"	c	package:fzf
termExact	.vim/plugged/fzf/src/pattern.go	/^	termExact$/;"	c	package:fzf
termFuzzy	.vim/plugged/fzf/src/pattern.go	/^	termFuzzy termType = iota$/;"	c	package:fzf	typeref:type:termType
termPrefix	.vim/plugged/fzf/src/pattern.go	/^	termPrefix$/;"	c	package:fzf
termSet	.vim/plugged/fzf/src/pattern.go	/^type termSet []term$/;"	t	package:fzf	typeref:typename:[]term
termSets	.vim/plugged/fzf/src/pattern.go	/^	termSets      []termSet$/;"	m	struct:fzf.Pattern	typeref:typename:[]termSet
termSuffix	.vim/plugged/fzf/src/pattern.go	/^	termSuffix$/;"	c	package:fzf
termType	.vim/plugged/fzf/src/pattern.go	/^type termType int$/;"	t	package:fzf	typeref:typename:int
terminal	.vim/plugged/coc.nvim/src/__tests__/modules/terminal.test.ts	/^let terminal: TerminalModel$/;"	v
terminal	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let terminal = await workspace.createTerminal({ name: 'test' })$/;"	v
terminal	.vim/plugged/coc.nvim/src/workspace.ts	/^      let terminal = this.terminals.get(bufnr)$/;"	v
terminal	.vim/plugged/coc.nvim/src/workspace.ts	/^    let terminal = new TerminalModel(cmd, args || [], this.nvim, opts.name)$/;"	v
terminal.integrated.fontFamily	VSCode/settings.json	/^    "terminal.integrated.fontFamily": "monospace, PowerlineSymbols",$/;"	s
terminate	.vim/plugged/coc.nvim/src/util/processes.ts	/^export function terminate(process: ChildProcess, cwd?: string): boolean {$/;"	f
terminateTree	.config/nvim/plugged/coc.nvim/bin/terminateProcess.sh	/^terminateTree() {$/;"	f
terminateTree	.vim/plugged/coc.nvim/bin/terminateProcess.sh	/^terminateTree() {$/;"	f
test	.config/nvim/plugged/coc.nvim/package.json	/^    "test": "node --trace-warnings node_modules\/.bin\/jest --runInBand --detectOpenHandles --fo/;"	s	object:scripts
test	.config/nvim/plugged/defx.nvim/Makefile	/^test:$/;"	t
test	.config/nvim/plugged/denite.nvim/Makefile	/^test:$/;"	t
test	.config/nvim/plugged/emmet-vim/Makefile	/^test:$/;"	t
test	.config/nvim/plugged/targets.vim/test/Makefile	/^test: clean$/;"	t
test	.vim/plugged/coc.nvim/package.json	/^    "test": "node --trace-warnings node_modules\/.bin\/jest --runInBand --detectOpenHandles --fo/;"	s	object:scripts
test	.vim/plugged/coc.nvim/src/__tests__/extensions/package.json	/^    "test": "^1.0.0",$/;"	s	object:dependencies
test	.vim/plugged/denite.nvim/Makefile	/^test:$/;"	t
test	.vim/plugged/fzf/Makefile	/^test: $(SOURCES)$/;"	t
test	.vim/plugged/vim-closer/Makefile	/^test: test-plain test-endwise$/;"	t
test-build	.config/nvim/plugged/coc.nvim/package.json	/^    "test-build": "node --trace-warnings node_modules\/.bin\/jest --runInBand --coverage --force/;"	s	object:scripts
test-build	.vim/plugged/coc.nvim/package.json	/^    "test-build": "node --trace-warnings node_modules\/.bin\/jest --runInBand --coverage --force/;"	s	object:scripts
test-endwise	.vim/plugged/vim-closer/Makefile	/^test-endwise: vendor\/vimrc$/;"	t
test-plain	.vim/plugged/vim-closer/Makefile	/^test-plain: vendor\/vimrc$/;"	t
test.enable	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^        "test.enable": {$/;"	o	object:contributes.configuration.properties
testEnvironment	.config/nvim/plugged/coc.nvim/package.json	/^    "testEnvironment": "node",$/;"	s	object:jest
testEnvironment	.vim/plugged/coc.nvim/package.json	/^    "testEnvironment": "node",$/;"	s	object:jest
testLanguageServer	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^async function testLanguageServer(serverOptions: lsclient.ServerOptions): Promise<void> {$/;"	f
testRegex	.config/nvim/plugged/coc.nvim/package.json	/^    "testRegex": "src\/__tests__\/.*\\\\.(test|spec)\\\\.ts$",$/;"	s	object:jest
testRegex	.vim/plugged/coc.nvim/package.json	/^    "testRegex": "src\/__tests__\/.*\\\\.(test|spec)\\\\.ts$",$/;"	s	object:jest
test_accept_non_empty	.vim/plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty$/;"	f	class:TestGoFZF
test_accept_non_empty_with_empty_list	.vim/plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_empty_list$/;"	f	class:TestGoFZF
test_accept_non_empty_with_multi_selection	.vim/plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_multi_selection$/;"	f	class:TestGoFZF
test_alt_c	.vim/plugged/fzf/test/test_go.rb	/^  def test_alt_c$/;"	f	module:TestShell
test_alt_c_command	.vim/plugged/fzf/test/test_go.rb	/^  def test_alt_c_command$/;"	f	module:TestShell
test_bind	.vim/plugged/fzf/test/test_go.rb	/^  def test_bind$/;"	f	class:TestGoFZF
test_bind_print_query	.vim/plugged/fzf/test/test_go.rb	/^  def test_bind_print_query$/;"	f	class:TestGoFZF
test_bind_replace_query	.vim/plugged/fzf/test/test_go.rb	/^  def test_bind_replace_query$/;"	f	class:TestGoFZF
test_cancel	.vim/plugged/fzf/test/test_go.rb	/^  def test_cancel$/;"	f	class:TestGoFZF
test_change_top	.vim/plugged/fzf/test/test_go.rb	/^  def test_change_top$/;"	f	class:TestGoFZF
test_convert2fuzzy_pattern	.config/nvim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def test_convert2fuzzy_pattern():$/;"	f
test_convert2fuzzy_pattern	.vim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def test_convert2fuzzy_pattern():$/;"	f
test_convert2regex_pattern	.config/nvim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def test_convert2regex_pattern():$/;"	f
test_convert2regex_pattern	.vim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def test_convert2regex_pattern():$/;"	f
test_ctrl_r	.vim/plugged/fzf/test/test_go.rb	/^  def test_ctrl_r$/;"	f	module:TestShell
test_ctrl_t	.vim/plugged/fzf/test/test_go.rb	/^  def test_ctrl_t$/;"	f	module:TestShell
test_ctrl_t_unicode	.vim/plugged/fzf/test/test_go.rb	/^  def test_ctrl_t_unicode$/;"	f	module:TestShell
test_custom_completion	.vim/plugged/fzf/test/test_go.rb	/^  def test_custom_completion$/;"	f	module:CompletionTest
test_cycle	.vim/plugged/fzf/test/test_go.rb	/^  def test_cycle$/;"	f	class:TestGoFZF
test_default_extended	.vim/plugged/fzf/test/test_go.rb	/^  def test_default_extended$/;"	f	class:TestGoFZF
test_dir_completion	.vim/plugged/fzf/test/test_go.rb	/^  def test_dir_completion$/;"	f	module:CompletionTest
test_dynamic_completion_loader	.vim/plugged/fzf/test/test_go.rb	/^  def test_dynamic_completion_loader$/;"	f	class:TestBash
test_escaped_meta_characters	.vim/plugged/fzf/test/test_go.rb	/^  def test_escaped_meta_characters$/;"	f	class:TestGoFZF
test_exact	.vim/plugged/fzf/test/test_go.rb	/^  def test_exact$/;"	f	class:TestGoFZF
test_execute	.vim/plugged/fzf/test/test_go.rb	/^  def test_execute$/;"	f	class:TestGoFZF
test_execute_multi	.vim/plugged/fzf/test/test_go.rb	/^  def test_execute_multi$/;"	f	class:TestGoFZF
test_execute_plus_flag	.vim/plugged/fzf/test/test_go.rb	/^  def test_execute_plus_flag$/;"	f	class:TestGoFZF
test_execute_shell	.vim/plugged/fzf/test/test_go.rb	/^  def test_execute_shell$/;"	f	class:TestGoFZF
test_exit_0	.vim/plugged/fzf/test/test_go.rb	/^  def test_exit_0$/;"	f	class:TestGoFZF
test_exit_0_exit_code	.vim/plugged/fzf/test/test_go.rb	/^  def test_exit_0_exit_code$/;"	f	class:TestGoFZF
test_exitstatus_empty	.vim/plugged/fzf/test/test_go.rb	/^  def test_exitstatus_empty$/;"	f	class:TestGoFZF
test_expect	.vim/plugged/fzf/test/test_go.rb	/^  def test_expect$/;"	f	class:TestGoFZF
test_expect_print_query	.vim/plugged/fzf/test/test_go.rb	/^  def test_expect_print_query$/;"	f	class:TestGoFZF
test_expect_print_query_select_1	.vim/plugged/fzf/test/test_go.rb	/^  def test_expect_print_query_select_1$/;"	f	class:TestGoFZF
test_expect_printable_character_print_query	.vim/plugged/fzf/test/test_go.rb	/^  def test_expect_printable_character_print_query$/;"	f	class:TestGoFZF
test_file_completion	.vim/plugged/fzf/test/test_go.rb	/^  def test_file_completion$/;"	f	module:CompletionTest
test_file_completion_root	.vim/plugged/fzf/test/test_go.rb	/^  def test_file_completion_root$/;"	f	module:CompletionTest
test_file_completion_unicode	.vim/plugged/fzf/test/test_go.rb	/^  def test_file_completion_unicode$/;"	f	module:CompletionTest
test_file_word	.vim/plugged/fzf/test/test_go.rb	/^  def test_file_word$/;"	f	class:TestGoFZF
test_filter_exitstatus	.vim/plugged/fzf/test/test_go.rb	/^  def test_filter_exitstatus$/;"	f	class:TestGoFZF
test_find_rplugins_kind	.config/nvim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def test_find_rplugins_kind(walk):$/;"	f
test_find_rplugins_kind	.vim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def test_find_rplugins_kind(walk):$/;"	f
test_format_client_relative	.vim/plugged/omnisharp-vim/python/tests/test_util.py	/^def test_format_client_relative(ctx):$/;"	f
test_format_no_translate	.vim/plugged/omnisharp-vim/python/tests/test_util.py	/^def test_format_no_translate(ctx):$/;"	f
test_fzf_default_command	.vim/plugged/fzf/test/test_go.rb	/^  def test_fzf_default_command$/;"	f	class:TestGoFZF
test_fzf_default_command_failure	.vim/plugged/fzf/test/test_go.rb	/^  def test_fzf_default_command_failure$/;"	f	class:TestGoFZF
test_get_bad_json_response	.vim/plugged/omnisharp-vim/python/tests/test_util.py	/^def test_get_bad_json_response(ctx, mocker):$/;"	f
test_get_json_response_mocked_server	.vim/plugged/omnisharp-vim/python/tests/test_util.py	/^def test_get_json_response_mocked_server(ctx, mocker):$/;"	f
test_get_response_mocked_server	.vim/plugged/omnisharp-vim/python/tests/test_util.py	/^def test_get_response_mocked_server(ctx, mocker):$/;"	f
test_get_response_no_server	.vim/plugged/omnisharp-vim/python/tests/test_util.py	/^def test_get_response_no_server(ctx):$/;"	f
test_header	.vim/plugged/fzf/test/test_go.rb	/^  def test_header$/;"	f	class:TestGoFZF
test_header_and_header_lines	.vim/plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines$/;"	f	class:TestGoFZF
test_header_and_header_lines_reverse	.vim/plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_and_header_lines_reverse_list	.vim/plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse_list$/;"	f	class:TestGoFZF
test_header_lines	.vim/plugged/fzf/test/test_go.rb	/^  def test_header_lines$/;"	f	class:TestGoFZF
test_header_lines_overflow	.vim/plugged/fzf/test/test_go.rb	/^  def test_header_lines_overflow$/;"	f	class:TestGoFZF
test_header_lines_reverse	.vim/plugged/fzf/test/test_go.rb	/^  def test_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_lines_reverse_list	.vim/plugged/fzf/test/test_go.rb	/^  def test_header_lines_reverse_list$/;"	f	class:TestGoFZF
test_header_lines_with_nth	.vim/plugged/fzf/test/test_go.rb	/^  def test_header_lines_with_nth$/;"	f	class:TestGoFZF
test_header_reverse	.vim/plugged/fzf/test/test_go.rb	/^  def test_header_reverse$/;"	f	class:TestGoFZF
test_header_reverse_list	.vim/plugged/fzf/test/test_go.rb	/^  def test_header_reverse_list$/;"	f	class:TestGoFZF
test_history	.vim/plugged/fzf/test/test_go.rb	/^  def test_history$/;"	f	class:TestGoFZF
test_hscroll_off	.vim/plugged/fzf/test/test_go.rb	/^  def test_hscroll_off$/;"	f	class:TestGoFZF
test_invalid_cache	.vim/plugged/fzf/test/test_go.rb	/^  def test_invalid_cache$/;"	f	class:TestGoFZF
test_invalid_cache_query_type	.vim/plugged/fzf/test/test_go.rb	/^  def test_invalid_cache_query_type$/;"	f	class:TestGoFZF
test_invalid_option	.vim/plugged/fzf/test/test_go.rb	/^  def test_invalid_option$/;"	f	class:TestGoFZF
test_inverse_only_search_should_not_sort_the_result	.vim/plugged/fzf/test/test_go.rb	/^  def test_inverse_only_search_should_not_sort_the_result$/;"	f	class:TestGoFZF
test_jump	.vim/plugged/fzf/test/test_go.rb	/^  def test_jump$/;"	f	class:TestGoFZF
test_jump_accept	.vim/plugged/fzf/test/test_go.rb	/^  def test_jump_accept$/;"	f	class:TestGoFZF
test_key_bindings	.vim/plugged/fzf/test/test_go.rb	/^  def test_key_bindings$/;"	f	class:TestGoFZF
test_long_line	.vim/plugged/fzf/test/test_go.rb	/^  def test_long_line$/;"	f	class:TestGoFZF
test_margin	.vim/plugged/fzf/test/test_go.rb	/^  def test_margin$/;"	f	class:TestGoFZF
test_margin_reverse	.vim/plugged/fzf/test/test_go.rb	/^  def test_margin_reverse$/;"	f	class:TestGoFZF
test_margin_reverse_list	.vim/plugged/fzf/test/test_go.rb	/^  def test_margin_reverse_list$/;"	f	class:TestGoFZF
test_multi_order	.vim/plugged/fzf/test/test_go.rb	/^  def test_multi_order$/;"	f	class:TestGoFZF
test_no_clear	.vim/plugged/fzf/test/test_go.rb	/^  def test_no_clear$/;"	f	class:TestGoFZF
test_or_operator	.vim/plugged/fzf/test/test_go.rb	/^  def test_or_operator$/;"	f	class:TestGoFZF
test_parse_jump_line	.config/nvim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def test_parse_jump_line():$/;"	f
test_parse_jump_line	.vim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def test_parse_jump_line():$/;"	f
test_parse_tag_line	.config/nvim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def test_parse_tag_line():$/;"	f
test_parse_tag_line	.vim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def test_parse_tag_line():$/;"	f
test_partial_caching	.vim/plugged/fzf/test/test_go.rb	/^  def test_partial_caching$/;"	f	class:TestGoFZF
test_preview	.vim/plugged/fzf/test/test_go.rb	/^  def test_preview$/;"	f	class:TestGoFZF
test_preview_correct_tab_width_after_ansi_reset_code	.vim/plugged/fzf/test/test_go.rb	/^  def test_preview_correct_tab_width_after_ansi_reset_code$/;"	f	class:TestGoFZF
test_preview_flags	.vim/plugged/fzf/test/test_go.rb	/^  def test_preview_flags$/;"	f	class:TestGoFZF
test_preview_hidden	.vim/plugged/fzf/test/test_go.rb	/^  def test_preview_hidden$/;"	f	class:TestGoFZF
test_preview_q_no_match	.vim/plugged/fzf/test/test_go.rb	/^  def test_preview_q_no_match$/;"	f	class:TestGoFZF
test_preview_q_no_match_with_initial_query	.vim/plugged/fzf/test/test_go.rb	/^  def test_preview_q_no_match_with_initial_query$/;"	f	class:TestGoFZF
test_preview_size_0	.vim/plugged/fzf/test/test_go.rb	/^  def test_preview_size_0$/;"	f	class:TestGoFZF
test_preview_update_on_select	.vim/plugged/fzf/test/test_go.rb	/^  def test_preview_update_on_select$/;"	f	class:TestGoFZF
test_process_completion	.vim/plugged/fzf/test/test_go.rb	/^  def test_process_completion$/;"	f	module:CompletionTest
test_query_unicode	.vim/plugged/fzf/test/test_go.rb	/^  def test_query_unicode$/;"	f	class:TestGoFZF
test_quickfixes_from_response	.vim/plugged/omnisharp-vim/python/tests/test_util.py	/^def test_quickfixes_from_response(ctx):$/;"	f
test_read0	.vim/plugged/fzf/test/test_go.rb	/^  def test_read0$/;"	f	class:TestGoFZF
test_regex_convert_py_vim	.config/nvim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def test_regex_convert_py_vim():$/;"	f
test_regex_convert_py_vim	.vim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def test_regex_convert_py_vim():$/;"	f
test_regex_convert_str_vim	.config/nvim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def test_regex_convert_str_vim():$/;"	f
test_regex_convert_str_vim	.vim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^def test_regex_convert_str_vim():$/;"	f
test_scroll	.vim/plugged/fzf/test/test_go.rb	/^  def test_scroll$/;"	f	class:TestGoFZF
test_select_1	.vim/plugged/fzf/test/test_go.rb	/^  def test_select_1$/;"	f	class:TestGoFZF
test_select_1_exit_0_fail	.vim/plugged/fzf/test/test_go.rb	/^  def test_select_1_exit_0_fail$/;"	f	class:TestGoFZF
test_select_all_deselect_all_toggle_all	.vim/plugged/fzf/test/test_go.rb	/^  def test_select_all_deselect_all_toggle_all$/;"	f	class:TestGoFZF
test_smart_case_for_each_term	.vim/plugged/fzf/test/test_go.rb	/^  def test_smart_case_for_each_term$/;"	f	class:TestGoFZF
test_snipmate_format	.config/nvim/plugged/vim-snippets/tests.sh	/^function test_snipmate_format {$/;"	f
test_snipmate_format	.vim/plugged/vim-snippets/tests.sh	/^function test_snipmate_format {$/;"	f
test_solution	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def test_solution(slug, filetype, code=None):$/;"	f
test_solution_async	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^def test_solution_async(slug, filetype, code=None):$/;"	f
test_space_indented	.config/nvim/plugged/vim-snippets/tests.sh	/^function test_space_indented {$/;"	f
test_space_indented	.vim/plugged/vim-snippets/tests.sh	/^function test_space_indented {$/;"	f
test_sync	.vim/plugged/fzf/test/test_go.rb	/^  def test_sync$/;"	f	class:TestGoFZF
test_tabstop	.vim/plugged/fzf/test/test_go.rb	/^  def test_tabstop$/;"	f	class:TestGoFZF
test_tac	.vim/plugged/fzf/test/test_go.rb	/^  def test_tac$/;"	f	class:TestGoFZF
test_tac_nosort	.vim/plugged/fzf/test/test_go.rb	/^  def test_tac_nosort$/;"	f	class:TestGoFZF
test_tac_sort	.vim/plugged/fzf/test/test_go.rb	/^  def test_tac_sort$/;"	f	class:TestGoFZF
test_tiebreak	.vim/plugged/fzf/test/test_go.rb	/^  def test_tiebreak$/;"	f	class:TestGoFZF
test_tiebreak_begin_algo_v2	.vim/plugged/fzf/test/test_go.rb	/^  def test_tiebreak_begin_algo_v2$/;"	f	class:TestGoFZF
test_tiebreak_end	.vim/plugged/fzf/test/test_go.rb	/^  def test_tiebreak_end$/;"	f	class:TestGoFZF
test_tiebreak_index_begin	.vim/plugged/fzf/test/test_go.rb	/^  def test_tiebreak_index_begin$/;"	f	class:TestGoFZF
test_tiebreak_length_with_nth	.vim/plugged/fzf/test/test_go.rb	/^  def test_tiebreak_length_with_nth$/;"	f	class:TestGoFZF
test_toggle_sort	.vim/plugged/fzf/test/test_go.rb	/^  def test_toggle_sort$/;"	f	class:TestGoFZF
test_translate_for_client	.vim/plugged/omnisharp-vim/python/tests/test_util.py	/^def test_translate_for_client(ctx):$/;"	f
test_translate_for_server	.vim/plugged/omnisharp-vim/python/tests/test_util.py	/^def test_translate_for_server(ctx):$/;"	f
test_unicode_case	.vim/plugged/fzf/test/test_go.rb	/^  def test_unicode_case$/;"	f	class:TestGoFZF
test_unset_completion	.vim/plugged/fzf/test/test_go.rb	/^  def test_unset_completion$/;"	f	module:CompletionTest
test_vanilla	.vim/plugged/fzf/test/test_go.rb	/^  def test_vanilla$/;"	f	class:TestGoFZF
test_view	.config/nvim/plugged/defx.nvim/test/rplugin/python3/defx/test_defx.py	/^def test_view():$/;"	f
test_with_nth	.vim/plugged/fzf/test/test_go.rb	/^  def test_with_nth$/;"	f	class:TestGoFZF
test_with_nth_ansi	.vim/plugged/fzf/test/test_go.rb	/^  def test_with_nth_ansi$/;"	f	class:TestGoFZF
test_with_nth_basic	.vim/plugged/fzf/test/test_go.rb	/^  def test_with_nth_basic$/;"	f	class:TestGoFZF
test_with_nth_no_ansi	.vim/plugged/fzf/test/test_go.rb	/^  def test_with_nth_no_ansi$/;"	f	class:TestGoFZF
testenv	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^[testenv]$/;"	s
testenv	.vim/plugged/omnisharp-vim/python/tox.ini	/^[testenv]$/;"	s
testenv:coverage	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^[testenv:coverage]$/;"	s
testenv:coverage	.vim/plugged/omnisharp-vim/python/tox.ini	/^[testenv:coverage]$/;"	s
testenv:lint	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^[testenv:lint]$/;"	s
testenv:lint	.vim/plugged/omnisharp-vim/python/tox.ini	/^[testenv:lint]$/;"	s
testenv:lint2	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^[testenv:lint2]$/;"	s
testenv:lint2	.vim/plugged/omnisharp-vim/python/tox.ini	/^[testenv:lint2]$/;"	s
text	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "text": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
text	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def text(self):$/;"	m	class:VisualContentPreserver
text	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^text,$/;"	s
text	.vim/plugged/coc.nvim/data/schema.json	/^        "text": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
text	.vim/plugged/coc.nvim/src/__tests__/list/location.test.ts	/^  text: 'Bar'$/;"	C
text	.vim/plugged/coc.nvim/src/__tests__/list/location.test.ts	/^  text: 'foo'$/;"	C
text	.vim/plugged/coc.nvim/src/__tests__/list/location.test.ts	/^  text: 'multiple'$/;"	C
text	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^  public text = 'test'$/;"	p	class:TestList
text	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^        return text$/;"	v
text	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let text = 'foo'$/;"	v
text	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^          let text = config.get<string>(`${severity}Sign`, '>>')$/;"	v
text	.vim/plugged/coc.nvim/src/handler/colors.ts	/^        let { range, text } = contentChanges[0]$/;"	v
text	.vim/plugged/coc.nvim/src/handler/index.ts	/^  text: string$/;"	p	interface:SignaturePart
text	.vim/plugged/coc.nvim/src/handler/index.ts	/^  text: string$/;"	p	interface:SymbolInfo
text	.vim/plugged/coc.nvim/src/list/prompt.ts	/^    let text = await this.nvim.eval('@*') as string$/;"	v
text	.vim/plugged/coc.nvim/src/model/document.ts	/^        text: change.newText$/;"	v
text	.vim/plugged/coc.nvim/src/model/status.ts	/^        text = `${text} ${frames[idx]} ${item.text}`$/;"	C
text	.vim/plugged/coc.nvim/src/model/status.ts	/^        text = `${text} ${item.text}`$/;"	C
text	.vim/plugged/coc.nvim/src/model/status.ts	/^    let text = ''$/;"	C
text	.vim/plugged/coc.nvim/src/model/status.ts	/^    let text = this.getText()$/;"	C
text	.vim/plugged/coc.nvim/src/model/status.ts	/^  }$/;"	C
text	.vim/plugged/coc.nvim/src/types.ts	/^  text: string$/;"	p	interface:AnsiItem
text	.vim/plugged/coc.nvim/src/types.ts	/^  text: string$/;"	p	interface:LocationListItem
text	.vim/plugged/coc.nvim/src/types.ts	/^  text: string$/;"	p	interface:StatusBarItem
text	.vim/plugged/coc.nvim/src/types.ts	/^  text: string$/;"	p	interface:TextItem
text	.vim/plugged/coc.nvim/src/types.ts	/^  text?: string$/;"	p	interface:LocationWithLine
text	.vim/plugged/coc.nvim/src/types.ts	/^  text?: string$/;"	p	interface:QuickfixItem
text	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^      text = result[index].text$/;"	C
text	.vim/plugged/coc.nvim/src/util/ansiparse.ts	/^    let text$/;"	C
text	.vim/plugged/fzf/src/item.go	/^	text        util.Chars    \/\/ 32 = 24 + 1 + 1 + 2 + 4$/;"	m	struct:fzf.Item	typeref:typename:util.Chars
text	.vim/plugged/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.Pattern	typeref:typename:[]rune
text	.vim/plugged/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.term	typeref:typename:[]rune
text	.vim/plugged/fzf/src/terminal.go	/^	text    string$/;"	m	struct:fzf.previewer	typeref:typename:string
text	.vim/plugged/fzf/src/tokenizer.go	/^	text         *util.Chars$/;"	m	struct:fzf.Token	typeref:typename:*util.Chars
text	.vim/plugged/fzf/src/tui/light.go	/^	text         string$/;"	m	struct:tui.wrappedLine	typeref:typename:string
text object for a result	.config/nvim/plugged/sideways.vim/spec/plugin/rust_spec.rb	/^  describe "text object for a result" do$/;"	d
textDocument	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let { textDocument } = document$/;"	v
textDocument	.vim/plugged/coc.nvim/src/language-client/client.ts	/^            let { textDocument } = workspace.getDocument(event.textDocument.uri)$/;"	v
textDocument	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let { textDocument } = doc$/;"	v
textDocument	.vim/plugged/coc.nvim/src/model/document.ts	/^    let textDocument = TextDocument.create(this.uri, this.filetype, 1, orig)$/;"	v
textDocument	.vim/plugged/coc.nvim/src/model/document.ts	/^    let textDocument = TextDocument.create(uri, this.filetype, version, this.content)$/;"	v
textDocument	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { paused, textDocument } = this$/;"	v
textDocument	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { textDocument } = this$/;"	v
textDocument	.vim/plugged/coc.nvim/src/model/document.ts	/^  public textDocument: TextDocument$/;"	p	class:Document
textDocument	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let len = textDocument.offsetAt(end) - textDocument.offsetAt(start)$/;"	v
textDocument	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let { textDocument } = document$/;"	v
textDocument	.vim/plugged/coc.nvim/src/workspace.ts	/^            let { textDocument, edits } = change as TextDocumentEdit$/;"	v
textDocument	.vim/plugged/coc.nvim/src/workspace.ts	/^        let { edits, textDocument } = change as TextDocumentEdit$/;"	v
textDocument	.vim/plugged/coc.nvim/src/workspace.ts	/^        let { textDocument } = change as TextDocumentEdit$/;"	v
textDocumentSyncOptions	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        let textDocumentSyncOptions:$/;"	v
textDocumentSyncOptions	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let textDocumentSyncOptions = (capabilities as ResolvedTextDocumentSyncCapabilities).resolve/;"	v
textDocuments	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let { nvim, workspaceFolders, channelNames, rootPath, cwd, documents, initialized, textDocum/;"	v
textDocuments	.vim/plugged/coc.nvim/src/types.ts	/^  textDocuments: TextDocument[]$/;"	p	interface:IWorkspace
textEdit	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let { textEdit, additionalTextEdits, label } = presentation$/;"	v
textEdit	.vim/plugged/coc.nvim/src/languages.ts	/^    let { textEdit } = item$/;"	v
textEdits	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let textEdits = await languages.provideDocumentFormattingEdits(document.textDocument, option/;"	v
textEdits	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let textEdits = await languages.provideDocumentRangeFormattingEdits(document.textDocument, r/;"	v
textEdits	.vim/plugged/coc.nvim/src/languages.ts	/^          let textEdits = await this.provideDocumentFormattingEdits(event.document, options)$/;"	v
textEdits	.vim/plugged/coc.nvim/src/languages.ts	/^          return textEdits$/;"	v
textPath	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^textPath,$/;"	s
text_after	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    text_after = ''$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
text_after	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    text_after = '\\n\\n --- some text after --- '$/;"	v	class:VimTestCase
text_before	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    text_before = ''$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
text_before	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    text_before = ' --- some text before --- \\n\\n'$/;"	v	class:VimTestCase
text_changed_from_vim	.vim/plugged/ghost-text.vim/python3/vim_ghost_text.py	/^def text_changed_from_vim():$/;"	f
textobj mapping	.config/nvim/plugged/sideways.vim/spec/plugin/textobj_spec.rb	/^describe "textobj mapping" do$/;"	d
textobj#entire#select_a	.config/nvim/plugged/vim-textobj-entire/autoload/textobj/entire.vim	/^function! textobj#entire#select_a()  "{{{2$/;"	f
textobj#entire#select_i	.config/nvim/plugged/vim-textobj-entire/autoload/textobj/entire.vim	/^function! textobj#entire#select_i()  "{{{2$/;"	f
textobj#indent#select_a	.config/nvim/plugged/vim-textobj-indent/autoload/textobj/indent.vim	/^function! textobj#indent#select_a()  "{{{2$/;"	f
textobj#indent#select_i	.config/nvim/plugged/vim-textobj-indent/autoload/textobj/indent.vim	/^function! textobj#indent#select_i()  "{{{2$/;"	f
textobj#indent#select_same_a	.config/nvim/plugged/vim-textobj-indent/autoload/textobj/indent.vim	/^function! textobj#indent#select_same_a()  "{{{2$/;"	f
textobj#indent#select_same_i	.config/nvim/plugged/vim-textobj-indent/autoload/textobj/indent.vim	/^function! textobj#indent#select_same_i()  "{{{2$/;"	f
textobj#line#select_a	.config/nvim/plugged/vim-textobj-line/autoload/textobj/line.vim	/^function! textobj#line#select_a()  "{{{2$/;"	f
textobj#line#select_i	.config/nvim/plugged/vim-textobj-line/autoload/textobj/line.vim	/^function! textobj#line#select_i()  "{{{2$/;"	f
textobj#user#_sid	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! textobj#user#_sid()$/;"	f
textobj#user#define	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! textobj#user#define(pat0, pat1, pat2, guideline)  "{{{2$/;"	f
textobj#user#map	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! textobj#user#map(plugin_name, obj_specs, ...)  "{{{2$/;"	f
textobj#user#move	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! textobj#user#move(pattern, flags, previous_mode)$/;"	f
textobj#user#plugin	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! textobj#user#plugin(plugin_name, obj_specs)  "{{{2$/;"	f
textobj#user#select	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! textobj#user#select(pattern, flags, previous_mode)$/;"	f
textobj#user#select_pair	.config/nvim/plugged/vim-textobj-user/autoload/textobj/user.vim	/^function! textobj#user#select_pair(pattern1, pattern2, flags, previous_mode)$/;"	f
textprop	.vim/plugged/coc.nvim/src/types.ts	/^  readonly textprop: boolean$/;"	p	interface:Env
theme	.config/nvim/plugged/oceanic-next/test/style-components.js	/^  theme: {$/;"	c	class:Button.defaultProps
theme	.vim/plugged/fzf/src/terminal.go	/^	theme      *tui.ColorTheme$/;"	m	struct:fzf.Terminal	typeref:typename:*tui.ColorTheme
theme	.vim/plugged/fzf/src/tui/light.go	/^	theme         *ColorTheme$/;"	m	struct:tui.LightRenderer	typeref:typename:*ColorTheme
theme	.vim/plugged/fzf/src/tui/tui.go	/^	theme        *ColorTheme$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:*ColorTheme
then	.vim/plugged/coc.nvim/src/types.ts	/^  then<TResult>(onfulfilled?: (value: T) => TResult | Thenable<TResult>, onrejected?: (reason: a/;"	m	interface:Thenable
this	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    this._listeners = []$/;"	p	class:BaseLanguageClient
thisArg	.vim/plugged/coc.nvim/src/commands.ts	/^    let { impl, thisArg } = this$/;"	v
thisArg	.vim/plugged/coc.nvim/src/types.ts	/^  thisArg?: any$/;"	p	interface:Autocmd
thread_function	.vim/plugged/ghost-text.vim/python3/server_thread.py	/^        def thread_function():$/;"	f	member:ServerThread._threaded_function	file:
three	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const [one, two, three] = snippet.placeholders$/;"	C
throttle	.vim/plugged/coc.nvim/src/util/throttle.ts	/^export default function throttle(func: Function, wait: number): Function & { clear(): void; } {$/;"	f
throw	.vim/plugged/coc.nvim/src/util/factory.ts	/^    throw new Error(`process.${name}() is not allowed in extension sandbox`)$/;"	C
throw	.vim/plugged/coc.nvim/src/util/index.ts	/^        throw new Error(`'${path}' exists and is not a directory.`)$/;"	C	function:mkdirp
throw	.vim/plugged/coc.nvim/src/util/index.ts	/^      throw err$/;"	C	function:mkdirp
time	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let time = Date.now()$/;"	v
time	.vim/plugged/coc.nvim/src/types.ts	/^  time?: number$/;"	p	interface:PopupOptions
timeout	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^  public timeout = 3000$/;"	p	class:TestList
timeout	.vim/plugged/coc.nvim/src/__tests__/list/worker.test.ts	/^  public timeout = 3000$/;"	p	class:TaskList
timeout	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    let timeout = this.config.timeout$/;"	v
timeout	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  private timeout: any$/;"	p	class:Delayer
timeout	.vim/plugged/coc.nvim/src/types.ts	/^  timeout: number$/;"	p	interface:CompleteConfig
timeout	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^    def timeout(self):$/;"	m	class:VimUtilCtx
timeoutID	.vim/plugged/coc.nvim/src/util/throttle.ts	/^  let timeoutID$/;"	v
timer	.vim/plugged/coc.nvim/src/completion/complete.ts	/^        let timer = setTimeout(() => {$/;"	v
timer	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let timer: NodeJS.Timer = null$/;"	v
timer	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let timer: NodeJS.Timer$/;"	v
timer	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let timer = setTimeout(async () => {$/;"	v
timer	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let timer = setTimeout(() => {$/;"	v
timer	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let timer: NodeJS.Timeout$/;"	v
timer	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let timer: NodeJS.Timer$/;"	v
timer	.vim/plugged/coc.nvim/src/model/task.ts	/^    let timer: NodeJS.Timeout$/;"	v
timer	.vim/plugged/coc.nvim/src/workspace.ts	/^      let timer = setTimeout(() => {$/;"	v
timestamp	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let timestamp = this.insertCharTs$/;"	v
timestamp	.vim/plugged/coc.nvim/src/completion/index.ts	/^  timestamp: number$/;"	C
title	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^        "title": "Test",$/;"	s	object:contributes.commands.0
title	.vim/plugged/coc.nvim/src/handler/index.ts	/^  title: string$/;"	p	interface:CommandItem
title	.vim/plugged/coc.nvim/src/types.ts	/^  title?: string$/;"	p	interface:PopupOptions
titles	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let { titles } = commandManager$/;"	v
tmpFile	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let tmpFile = path.join(os.tmpdir(), uuidv1())$/;"	v
tmux	.config/nvim/plugged/vim-tmux-navigator/README.md	/^### tmux$/;"	S
tmux_navigator	.config/nvim/plugged/vim-tmux-navigator/plugin/tmux_navigator.vim	/^augroup tmux_navigator$/;"	a
toActions	.vim/plugged/fzf/src/terminal.go	/^func toActions(types ...actionType) []action {$/;"	f	package:fzf	typeref:typename:[]action
toAnsiString	.vim/plugged/fzf/src/ansi.go	/^func toAnsiString(color tui.Color, offset int) string {$/;"	f	package:fzf	typeref:typename:string
toHexColor	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^function toHexColor(color: Color): { red: number, green: number, blue: number } {$/;"	f
toHexString	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^export function toHexString(color: Color): string {$/;"	f
toString	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public toString(): string {$/;"	m	class:Text
toString	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public toString(): string {$/;"	m	class:Transform
toTextmateString	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public toTextmateString(): string {$/;"	m	class:FormatString
toTextmateString	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public toTextmateString(): string {$/;"	m	class:Placeholder
toTextmateString	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public toTextmateString(): string {$/;"	m	class:Text
toTextmateString	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public toTextmateString(): string {$/;"	m	class:Transform
toTextmateString	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public toTextmateString(): string {$/;"	m	class:Variable
to_client	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^def to_client(msg):$/;"	f
to_vim	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_snippet_instance.py	/^    def to_vim(self):$/;"	m	class:_VimCursor
to_vim_cursor	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def to_vim_cursor(self):$/;"	m	class:_SnippetUtilCursor
todo	.vim/plugged/ghost-text.vim/README.md	/^# todo $/;"	c
toggle	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    toggle: bool = False$/;"	v	class:Context
toggle	.vim/plugged/coc.nvim/src/model/source.ts	/^  public toggle(): void {$/;"	m	class:Source
toggle	.vim/plugged/coc.nvim/src/types.ts	/^  toggle?(): void$/;"	m	interface:ISource
toggleItem	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) toggleItem(item *Item) {$/;"	f	struct:fzf.Terminal
togglePreview	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public async togglePreview(): Promise<void> {$/;"	C
toggleSort	.vim/plugged/fzf/src/terminal.go	/^	toggleSort bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
token	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^          token = cancellationToken$/;"	v
token	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let token: CancellationToken$/;"	v
token	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { token } = source$/;"	v
token	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let token = tokenSource.token$/;"	v
token	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let token = source.token$/;"	v
token	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let token = tokenSource.token$/;"	v
token	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const token = this._token$/;"	C
token	.vim/plugged/coc.nvim/src/workspace.ts	/^      let token = source.token$/;"	v
tokenSource	.vim/plugged/coc.nvim/src/completion/complete.ts	/^      let tokenSource = new CancellationTokenSource()$/;"	v
tokenSource	.vim/plugged/coc.nvim/src/completion/complete.ts	/^    for (let tokenSource of this.tokenSources.values()) {$/;"	v
tokenSource	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let tokenSource = this.signatureTokenSource = new CancellationTokenSource()$/;"	v
tokenSource	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let tokenSource = this.tokenSource = new CancellationTokenSource()$/;"	v
tokenSource	.vim/plugged/coc.nvim/src/workspace.ts	/^    let tokenSource = new CancellationTokenSource()$/;"	v
tokenize	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_lexer.py	/^def tokenize(text, indent, offset, allowed_tokens):$/;"	f
tokenize_snippet_text	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/_base.py	/^def tokenize_snippet_text(snippet_instance, text, indent,$/;"	f
top	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		results = { top: top, left: left };$/;"	p	class:results
top	.vim/plugged/fzf/src/tui/light.go	/^	top      int$/;"	m	struct:tui.LightWindow	typeref:typename:int
top	.vim/plugged/fzf/src/tui/tcell.go	/^	top         int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
topLeft	.vim/plugged/fzf/src/tui/tui.go	/^	topLeft     rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
topRight	.vim/plugged/fzf/src/tui/tui.go	/^	topRight    rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
total	.vim/plugged/coc.nvim/src/list/manager.ts	/^      total: this.worker.length,$/;"	v
totalAdd	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let totalAdd = maxIndexAdded + - 1$/;"	v
totalItems	.vim/plugged/coc.nvim/src/list/worker.ts	/^      let totalItems = this.totalItems = []$/;"	v
totalItems	.vim/plugged/coc.nvim/src/list/worker.ts	/^    let { totalItems } = this$/;"	v
tox	.vim/plugged/omnisharp-vim/python/tox-appveyor.ini	/^[tox]$/;"	s
tox	.vim/plugged/omnisharp-vim/python/tox.ini	/^[tox]$/;"	s
trace	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      trace: Trace.toString(this._trace),$/;"	v
trace	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let trace: Trace = Trace.Off$/;"	v
trace	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public set trace(value: Trace) {$/;"	m	class:BaseLanguageClient
trace	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  trace(value: Trace, tracer: Tracer, sendNotification?: boolean): void$/;"	m	interface:IConnection
trace	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  trace(value: Trace, tracer: Tracer, traceOptions?: TraceOptions): void$/;"	m	interface:IConnection
trace.server	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "trace.server": {$/;"	o	object:definitions.languageServerBase.properties
trace.server	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "trace.server": {}$/;"	o	object:definitions.languageServerCommand.properties
trace.server	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "trace.server": {}$/;"	o	object:definitions.languageServerModule.properties
trace.server	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "trace.server": {}$/;"	o	object:definitions.languageServerSocket.properties
trace.server	.vim/plugged/coc.nvim/data/schema.json	/^        "trace.server": {$/;"	o	object:definitions.languageServerBase.properties
trace.server	.vim/plugged/coc.nvim/data/schema.json	/^        "trace.server": {}$/;"	o	object:definitions.languageServerCommand.properties
trace.server	.vim/plugged/coc.nvim/data/schema.json	/^        "trace.server": {}$/;"	o	object:definitions.languageServerModule.properties
trace.server	.vim/plugged/coc.nvim/data/schema.json	/^        "trace.server": {}$/;"	o	object:definitions.languageServerSocket.properties
trace.server	.vim/plugged/coc.nvim/src/__tests__/modules/settings.json	/^      "trace.server": "verbose"$/;"	s	object:servers.c
traceConfig	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      const traceConfig = config.get('trace.server', 'off')$/;"	C
traceFormat	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let traceFormat: TraceFormat = TraceFormat.Text$/;"	v
trans	.vim/plugged/fzf/src/chunklist.go	/^	trans  ItemBuilder$/;"	m	struct:fzf.ChunkList	typeref:typename:ItemBuilder
transform	.config/nvim/plugged/coc.nvim/package.json	/^    "transform": {$/;"	o	object:jest
transform	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^def transform(a, cmds):$/;"	f
transform	.vim/plugged/coc.nvim/package.json	/^    "transform": {$/;"	o	object:jest
transform	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const transform = new Transform()$/;"	C
transform	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let transform = (<Placeholder>children[3]).transform$/;"	v
transform	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    let transform = new Transform()$/;"	v
transform	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let transform = new Transform()$/;"	v
transform	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  public transform: Transform$/;"	p	class:TransformableMarker
transform	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^        transform: p.transform != null,$/;"	v
transform	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^  transform: boolean$/;"	p	interface:CocSnippetPlaceholder
transformInput	.vim/plugged/fzf/src/pattern.go	/^func (p *Pattern) transformInput(item *Item) []Token {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Token
transformed	.vim/plugged/fzf/src/item.go	/^	transformed *[]Token      \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]Token
translate_cygwin_wsl	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^    def translate_cygwin_wsl(self):$/;"	m	class:VimUtilCtx
transparent	.vim/plugged/coc.nvim/src/types.ts	/^  transparent?: boolean$/;"	p	interface:PopupProps
transport	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "transport": {$/;"	o	object:definitions.languageServerModule.properties
transport	.vim/plugged/coc.nvim/data/schema.json	/^        "transport": {$/;"	o	object:definitions.languageServerModule.properties
transport	.vim/plugged/coc.nvim/src/__tests__/client/changedFiles.test.ts	/^      transport: lsclient.TransportKind.ipc$/;"	v
transport	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^      debug: { module: serverModule, transport: lsclient.TransportKind.ipc, options: { execArgv:/;"	v
transport	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^      run: { module: serverModule, transport: lsclient.TransportKind.ipc },$/;"	v
transport	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^      transport: lsclient.TransportKind.pipe$/;"	v
transport	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^      transport: lsclient.TransportKind.stdio$/;"	v
transport	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^      transport: {$/;"	v
transport	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  transport?: Transport$/;"	p	interface:NodeModule
transport	.vim/plugged/coc.nvim/src/types.ts	/^  transport?: string$/;"	p	interface:LanguageServerConfig
transportPort	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "transportPort": {$/;"	o	object:definitions.languageServerModule.properties
transportPort	.vim/plugged/coc.nvim/data/schema.json	/^        "transportPort": {$/;"	o	object:definitions.languageServerModule.properties
transportPort	.vim/plugged/coc.nvim/src/types.ts	/^  transportPort?: number$/;"	p	interface:LanguageServerConfig
tree_candidates	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/defx.py	/^    def tree_candidates($/;"	m	class:Defx
trigger	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/definition/_base.py	/^    def trigger(self):$/;"	m	class:SnippetDefinition
trigger	.vim/plugged/coc.nvim/src/language-client/utils/async.ts	/^  trigger(task: Task<T | Thenable<T>>, delay: number = this.defaultDelay): Thenable<T> {$/;"	m	class:Delayer
triggerAfterInsertEnter	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^    let triggerAfterInsertEnter = completion.config.triggerAfterInsertEnter$/;"	v
triggerAfterInsertEnter	.vim/plugged/coc.nvim/src/types.ts	/^  triggerAfterInsertEnter: boolean$/;"	p	interface:CompleteConfig
triggerCharacter	.vim/plugged/coc.nvim/src/languages.ts	/^        let { triggerCharacter, bufnr } = opt$/;"	v
triggerCharacter	.vim/plugged/coc.nvim/src/types.ts	/^  triggerCharacter: string$/;"	p	interface:CompleteOption
triggerCharacter	.vim/plugged/coc.nvim/src/types.ts	/^  triggerCharacter?: string$/;"	p	interface:CompletionContext
triggerCharacters	.vim/plugged/coc.nvim/src/__tests__/client/integration.test.ts	/^            completionProvider: { resolveProvider: true, triggerCharacters: ['"', ':'] },$/;"	v
triggerCharacters	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^      triggerCharacters: ['.'],$/;"	v
triggerCharacters	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^      triggerCharacters: [],$/;"	v
triggerCharacters	.vim/plugged/coc.nvim/src/__tests__/completion/sources.test.ts	/^      triggerCharacters: ['.', '\/'],$/;"	v
triggerCharacters	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^      triggerCharacters: ['.'],$/;"	v
triggerCharacters	.vim/plugged/coc.nvim/src/__tests__/modules/completion.test.ts	/^      triggerCharacters: ['>'],$/;"	v
triggerCharacters	.vim/plugged/coc.nvim/src/__tests__/modules/sources.test.ts	/^      triggerCharacters: [],$/;"	v
triggerCharacters	.vim/plugged/coc.nvim/src/languages.ts	/^      triggerCharacters: triggerCharacters || [],$/;"	v
triggerCharacters	.vim/plugged/coc.nvim/src/model/source.ts	/^  public get triggerCharacters(): string[] {$/;"	m	class:Source
triggerCharacters	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^      let { triggerCharacters, selector } = o$/;"	v
triggerCharacters	.vim/plugged/coc.nvim/src/provider/onTypeFormatManager.ts	/^  triggerCharacters: string[]$/;"	p	interface:ProviderItem
triggerCharacters	.vim/plugged/coc.nvim/src/sources.ts	/^    let { triggerCharacters, triggerPatterns } = source$/;"	v
triggerCharacters	.vim/plugged/coc.nvim/src/types.ts	/^  triggerCharacters?: string[]$/;"	p	interface:ISource
triggerForInComplete	.vim/plugged/coc.nvim/src/types.ts	/^  triggerForInComplete?: boolean$/;"	p	interface:CompleteOption
triggerKind	.vim/plugged/coc.nvim/src/languages.ts	/^        let triggerKind: CompletionTriggerKind = CompletionTriggerKind.Invoked$/;"	v
triggerKind	.vim/plugged/coc.nvim/src/types.ts	/^  triggerKind: CompletionTriggerKind$/;"	p	interface:CompletionContext
triggerOnly	.vim/plugged/coc.nvim/src/model/source.ts	/^  public get triggerOnly(): boolean {$/;"	m	class:Source
triggerOnly	.vim/plugged/coc.nvim/src/sources.ts	/^      let { filetypes, triggerOnly, enable } = source$/;"	v
triggerOnly	.vim/plugged/coc.nvim/src/types.ts	/^  triggerOnly?: boolean$/;"	p	interface:ISource
triggerPatterns	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^      triggerPatterns: [\/\\w+\\.$\/],$/;"	v
triggerPatterns	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^      triggerPatterns: [\/^From:\\s*\/],$/;"	v
triggerPatterns	.vim/plugged/coc.nvim/src/model/source.ts	/^  public get triggerPatterns(): RegExp[] | null {$/;"	m	class:Source
triggerPatterns	.vim/plugged/coc.nvim/src/sources.ts	/^    let { triggerCharacters, triggerPatterns } = source$/;"	v
triggerPatterns	.vim/plugged/coc.nvim/src/types.ts	/^  triggerPatterns?: RegExp[]$/;"	p	interface:ISource
triggerSignatureHelp	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let { triggerSignatureHelp, triggerSignatureWait, formatOnType } = this.preferences$/;"	v
triggerSignatureHelp	.vim/plugged/coc.nvim/src/handler/index.ts	/^  triggerSignatureHelp: boolean$/;"	p	interface:Preferences
triggerSignatureWait	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let { triggerSignatureHelp, triggerSignatureWait, formatOnType } = this.preferences$/;"	v
triggerSignatureWait	.vim/plugged/coc.nvim/src/handler/index.ts	/^  triggerSignatureWait: number$/;"	p	interface:Preferences
trimLeft	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) trimLeft(runes []rune, width int) ([]rune, int32) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, int32)
trimLength	.vim/plugged/fzf/src/util/chars.go	/^	trimLength      uint16$/;"	m	struct:util.Chars	typeref:typename:uint16
trimLengthKnown	.vim/plugged/fzf/src/util/chars.go	/^	trimLengthKnown bool$/;"	m	struct:util.Chars	typeref:typename:bool
trimQuery	.vim/plugged/fzf/src/terminal.go	/^func trimQuery(query string) []rune {$/;"	f	package:fzf	typeref:typename:[]rune
trimRight	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) trimRight(runes []rune, width int) ([]rune, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, int)
true	.vim/plugged/coc.nvim/src/model/document.ts	/^    if (this.uri.endsWith('%5BCommand%20Line%5D')) return true$/;"	v
truncateQuery	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) truncateQuery() {$/;"	f	struct:fzf.Terminal
try	.vim/plugged/coc.nvim/src/extensions.ts	/^          try {$/;"	v
try	.vim/plugged/coc.nvim/src/extensions.ts	/^        try {$/;"	v
try	.vim/plugged/coc.nvim/src/list/manager.ts	/^    try {$/;"	C
try	.vim/plugged/coc.nvim/src/util/index.ts	/^    try {$/;"	C	function:mkdirp
trySkip	.vim/plugged/fzf/src/algo/algo.go	/^func trySkip(input *util.Chars, caseSensitive bool, b byte, from int) int {$/;"	f	package:algo	typeref:typename:int
try_curl	.vim/plugged/fzf/install	/^try_curl() {$/;"	f
try_open_or_close_log_file	.vim/plugged/ghost-text.vim/python3/ghost_log.py	/^def try_open_or_close_log_file():$/;"	f
try_wget	.vim/plugged/fzf/install	/^try_wget() {$/;"	f
ts	.vim/plugged/coc.nvim/src/extensions.ts	/^    let ts = await db.fetch('lastUpdate')$/;"	v
ts	.vim/plugged/coc.nvim/src/handler/documentHighlight.ts	/^    let ts = Date.now()$/;"	v
ts	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let ts = Date.now()$/;"	v
ts-jest	.config/nvim/plugged/coc.nvim/package.json	/^    "ts-jest": "^24.0.2",$/;"	s	object:devDependencies
ts-jest	.vim/plugged/coc.nvim/package.json	/^    "ts-jest": "^24.0.2",$/;"	s	object:devDependencies
tslib	.config/nvim/plugged/coc.nvim/package.json	/^    "tslib": "^1.10.0",$/;"	s	object:dependencies
tslib	.vim/plugged/coc.nvim/package.json	/^    "tslib": "^1.10.0",$/;"	s	object:dependencies
tslib_1	.vim/plugged/coc.nvim/src/__tests__/client/server/testInitializeResult.js	/^const tslib_1 = require("tslib");$/;"	C
tslint	.config/nvim/plugged/coc.nvim/package.json	/^    "tslint": "^5.18.0",$/;"	s	object:devDependencies
tslint	.vim/plugged/coc.nvim/package.json	/^    "tslint": "^5.18.0",$/;"	s	object:devDependencies
tslint.enable	.vim/plugged/coc.nvim/src/__tests__/coc-settings.json	/^  "tslint.enable": false$/;"	b
tspan	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^tspan,$/;"	s
ttyin	.vim/plugged/fzf/src/tui/light.go	/^	ttyin         *os.File$/;"	m	struct:tui.LightRenderer	typeref:typename:*os.File
ttyname	.vim/plugged/fzf/src/tui/ttyname_unix.go	/^func ttyname() string {$/;"	f	package:tui	typeref:typename:string
ttyname	.vim/plugged/fzf/src/tui/ttyname_windows.go	/^func ttyname() string {$/;"	f	package:tui	typeref:typename:string
tui	.vim/plugged/fzf/src/terminal.go	/^	tui        tui.Renderer$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Renderer
tui	.vim/plugged/fzf/src/tui/dummy.go	/^package tui$/;"	p
tui	.vim/plugged/fzf/src/tui/light.go	/^package tui$/;"	p
tui	.vim/plugged/fzf/src/tui/tcell.go	/^package tui$/;"	p
tui	.vim/plugged/fzf/src/tui/ttyname_unix.go	/^package tui$/;"	p
tui	.vim/plugged/fzf/src/tui/ttyname_windows.go	/^package tui$/;"	p
tui	.vim/plugged/fzf/src/tui/tui.go	/^package tui$/;"	p
tui	.vim/plugged/fzf/src/tui/tui_test.go	/^package tui$/;"	p
two	.vim/plugged/coc.nvim/src/__tests__/snippets/parser.test.ts	/^    const [one, two, three] = snippet.placeholders$/;"	C
typ	.vim/plugged/fzf/src/pattern.go	/^	typ           termType$/;"	m	struct:fzf.term	typeref:typename:termType
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerBase.properties.additionalSchemes.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerBase.properties.filetypes.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerBase.properties.ignoredRootPaths.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerBase.properties.rootPatterns.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerCommand.properties.args.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerModule.properties.args.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerModule.properties.execArgv.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerBase.properties.additionalSchemes
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerBase.properties.filetypes
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerBase.properties.ignoredRootPaths
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerBase.properties.rootPatterns
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerCommand.properties.args
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerModule.properties.args
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerModule.properties.execArgv
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.disableCompletion
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.disableDiagnostics
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.disableWorkspaceFolders
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.enable
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.requireRootPattern
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerCommand.properties.detached
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerCommand.properties.shell
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "integer",$/;"	s	object:definitions.languageServerModule.properties.transportPort
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "integer",$/;"	s	object:definitions.languageServerSocket.properties.port
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "object",$/;"	s	object:definitions.languageServerBase.properties.env
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "object",$/;"	s	object:definitions.languageServerBase.properties.initializationOptions
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "object",$/;"	s	object:definitions.languageServerBase.properties.settings
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerBase.properties.cwd
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerBase.properties.revealOutputChannelOn
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerBase.properties.stdioEncoding
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerBase.properties.trace.server
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerCommand.properties.command
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerModule.properties.module
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerModule.properties.runtime
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerModule.properties.transport
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerSocket.properties.host
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "class": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.class
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "color": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.color
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "constant": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.constant
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "constructor": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.constructor
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "default": {"type": "string"}$/;"	s	object:properties.suggest.completionItemKindLabels.properties.default
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "enum": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.enum
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "enumMember": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.enumMember
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "event": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.event
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "field": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.field
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "file": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.file
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "folder": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.folder
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "function": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.function
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "interface": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.interface
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "keyword": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.keyword
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "method": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.method
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "module": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.module
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "operator": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.operator
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "property": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.property
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "reference": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.reference
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "snippet": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.snippet
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "struct": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.struct
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "text": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.text
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.preferences.formatOnSaveFiletypes.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.preferences.rootPatterns.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.around.disableSyntaxes.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.buffer.disableSyntaxes.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.file.disableSyntaxes.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.file.ignorePatterns.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.file.triggerCharacters.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.file.trimSameExts.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.list.source.outline.ctagsFilestypes.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.workspace.ignoredFiletypes.items
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "typeParameter": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.typeParameter
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "unit": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.unit
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "value": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.value
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "variable": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.variable
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.preferences.formatOnSaveFiletypes
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.preferences.rootPatterns
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.around.disableSyntaxes
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.buffer.disableSyntaxes
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.file.disableSyntaxes
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.file.ignorePatterns
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.file.triggerCharacters
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.file.trimSameExts
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.list.source.outline.ctagsFilestypes
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.workspace.ignoredFiletypes
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.bracketEnterImprove
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.colorSupport
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.currentFunctionSymbolAutoUpdate
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.enableFloatHighlight
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.formatOnType
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.previewAutoClose
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.snippets.enable
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.useQuickfixForLocations
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.around.enable
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.around.firstMatch
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.buffer.enable
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.buffer.firstMatch
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.buffer.ignoreGitignore
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.file.enable
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.file.ignoreHidden
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.codeLens.enable
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.checkCurrentLine
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.displayByAle
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.enable
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.enableSign
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.joinMessageLines
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.locationlist
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.refreshAfterSave
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.refreshOnInsertMode
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.virtualText
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.http.proxyStrictSSL
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.list.autoResize
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.list.extendedSearchMode
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.list.previewSplitRight
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.signature.enable
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.signature.hideOnTextChange
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.signature.preferShownAbove
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.acceptSuggestionOnCommitCharacter
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.disableKind
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.disableMenu
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.disableMenuShortcut
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.echodocSupport
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.enablePreview
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.fixInsertedWord
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.floatEnable
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.keepCompleteopt
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.localityBonus
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.noselect
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.numberSelect
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.preferCompleteThanJumpPlaceholder
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.triggerAfterInsertEnter
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.coc.source.around.priority
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.coc.source.buffer.priority
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.coc.source.file.priority
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.signature.floatTimeout
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.signature.triggerSignatureWait
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.suggest.highPrioritySourceLimit
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.suggest.lowPrioritySourceLimit
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.suggest.timeout
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.suggest.triggerCompletionWait
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.diagnostic.highlightOffset
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.diagnostic.maxWindowHeight
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.diagnostic.signOffset
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.diagnostic.virtualTextLines
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.list.limitLines
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.list.maxHeight
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.list.maxPreviewHeight
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.list.signOffset
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.signature.maxWindowHeight
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.detailMaxLength
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.labelMaxLength
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.languageSourcePriority
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.maxCompleteItemCount
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.maxPreviewWidth
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.minTriggerInputLength
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:definitions.languageServerBase
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:definitions.languageServerCommand
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:definitions.languageServerModule
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:definitions.languageServerSocket
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:properties.languageserver
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:properties.list.insertMappings
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:properties.list.normalMappings
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:properties.suggest.completionItemKindLabels
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.extensionUpdateCheck
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.hoverTarget
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.jumpCommand
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.messageLevel
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.snippetStatusText
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.watchmanPath
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.source.around.shortcut
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.source.buffer.shortcut
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.source.file.shortcut
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.codeLens.separator
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.enableMessage
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.errorSign
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.hintSign
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.infoSign
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.level
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.messageTarget
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.virtualTextLineSeparator
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.virtualTextPrefix
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.warningSign
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.http.proxy
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.indicator
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.nextKeymap
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.previewHighlightGroup
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.previousKeymap
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.selectedSignText
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.signature.target
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.suggest.autoTrigger
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.suggest.detailField
type	.config/nvim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.suggest.snippetIndicator
type	.config/nvim/plugged/coc.nvim/package.json	/^    "type": "git",$/;"	s	object:repository
type	.config/nvim/plugged/vim-snippets/addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/snipmate-snippets.git"},$/;"	s	object:repository
type	.vim/plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerBase.properties.additionalSchemes.items
type	.vim/plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerBase.properties.filetypes.items
type	.vim/plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerBase.properties.ignoredRootPaths.items
type	.vim/plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerBase.properties.rootPatterns.items
type	.vim/plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerCommand.properties.args.items
type	.vim/plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerModule.properties.args.items
type	.vim/plugged/coc.nvim/data/schema.json	/^            "type": "string"$/;"	s	object:definitions.languageServerModule.properties.execArgv.items
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerBase.properties.additionalSchemes
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerBase.properties.filetypes
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerBase.properties.ignoredRootPaths
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerBase.properties.rootPatterns
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerCommand.properties.args
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerModule.properties.args
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "array",$/;"	s	object:definitions.languageServerModule.properties.execArgv
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.disableCompletion
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.disableDiagnostics
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.disableWorkspaceFolders
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.enable
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerBase.properties.requireRootPattern
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerCommand.properties.detached
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "boolean",$/;"	s	object:definitions.languageServerCommand.properties.shell
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "integer",$/;"	s	object:definitions.languageServerModule.properties.transportPort
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "integer",$/;"	s	object:definitions.languageServerSocket.properties.port
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "object",$/;"	s	object:definitions.languageServerBase.properties.env
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "object",$/;"	s	object:definitions.languageServerBase.properties.initializationOptions
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "object",$/;"	s	object:definitions.languageServerBase.properties.settings
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerBase.properties.cwd
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerBase.properties.revealOutputChannelOn
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerBase.properties.stdioEncoding
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerBase.properties.trace.server
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerCommand.properties.command
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerModule.properties.module
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerModule.properties.runtime
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerModule.properties.transport
type	.vim/plugged/coc.nvim/data/schema.json	/^          "type": "string",$/;"	s	object:definitions.languageServerSocket.properties.host
type	.vim/plugged/coc.nvim/data/schema.json	/^        "class": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.class
type	.vim/plugged/coc.nvim/data/schema.json	/^        "color": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.color
type	.vim/plugged/coc.nvim/data/schema.json	/^        "constant": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.constant
type	.vim/plugged/coc.nvim/data/schema.json	/^        "constructor": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.constructor
type	.vim/plugged/coc.nvim/data/schema.json	/^        "default": {"type": "string"}$/;"	s	object:properties.suggest.completionItemKindLabels.properties.default
type	.vim/plugged/coc.nvim/data/schema.json	/^        "enum": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.enum
type	.vim/plugged/coc.nvim/data/schema.json	/^        "enumMember": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.enumMember
type	.vim/plugged/coc.nvim/data/schema.json	/^        "event": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.event
type	.vim/plugged/coc.nvim/data/schema.json	/^        "field": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.field
type	.vim/plugged/coc.nvim/data/schema.json	/^        "file": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.file
type	.vim/plugged/coc.nvim/data/schema.json	/^        "folder": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.folder
type	.vim/plugged/coc.nvim/data/schema.json	/^        "function": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.function
type	.vim/plugged/coc.nvim/data/schema.json	/^        "interface": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.interface
type	.vim/plugged/coc.nvim/data/schema.json	/^        "keyword": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.keyword
type	.vim/plugged/coc.nvim/data/schema.json	/^        "method": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.method
type	.vim/plugged/coc.nvim/data/schema.json	/^        "module": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.module
type	.vim/plugged/coc.nvim/data/schema.json	/^        "operator": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.operator
type	.vim/plugged/coc.nvim/data/schema.json	/^        "property": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.property
type	.vim/plugged/coc.nvim/data/schema.json	/^        "reference": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.reference
type	.vim/plugged/coc.nvim/data/schema.json	/^        "snippet": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.snippet
type	.vim/plugged/coc.nvim/data/schema.json	/^        "struct": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.struct
type	.vim/plugged/coc.nvim/data/schema.json	/^        "text": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.text
type	.vim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.preferences.formatOnSaveFiletypes.items
type	.vim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.preferences.rootPatterns.items
type	.vim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.around.disableSyntaxes.items
type	.vim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.buffer.disableSyntaxes.items
type	.vim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.file.disableSyntaxes.items
type	.vim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.file.ignorePatterns.items
type	.vim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.file.triggerCharacters.items
type	.vim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.coc.source.file.trimSameExts.items
type	.vim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.list.source.outline.ctagsFilestypes.items
type	.vim/plugged/coc.nvim/data/schema.json	/^        "type": "string"$/;"	s	object:properties.workspace.ignoredFiletypes.items
type	.vim/plugged/coc.nvim/data/schema.json	/^        "typeParameter": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.typeParameter
type	.vim/plugged/coc.nvim/data/schema.json	/^        "unit": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.unit
type	.vim/plugged/coc.nvim/data/schema.json	/^        "value": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.value
type	.vim/plugged/coc.nvim/data/schema.json	/^        "variable": {"type": "string"},$/;"	s	object:properties.suggest.completionItemKindLabels.properties.variable
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.preferences.formatOnSaveFiletypes
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.preferences.rootPatterns
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.around.disableSyntaxes
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.buffer.disableSyntaxes
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.file.disableSyntaxes
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.file.ignorePatterns
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.file.triggerCharacters
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.coc.source.file.trimSameExts
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.list.source.outline.ctagsFilestypes
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "array",$/;"	s	object:properties.workspace.ignoredFiletypes
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.bracketEnterImprove
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.colorSupport
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.currentFunctionSymbolAutoUpdate
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.enableFloatHighlight
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.formatOnType
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.previewAutoClose
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.snippets.enable
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.preferences.useQuickfixForLocations
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.around.enable
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.around.firstMatch
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.buffer.enable
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.buffer.firstMatch
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.buffer.ignoreGitignore
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.file.enable
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.coc.source.file.ignoreHidden
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.codeLens.enable
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.checkCurrentLine
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.displayByAle
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.enable
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.enableSign
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.joinMessageLines
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.locationlist
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.refreshAfterSave
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.refreshOnInsertMode
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.diagnostic.virtualText
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.http.proxyStrictSSL
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.list.autoResize
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.list.extendedSearchMode
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.list.previewSplitRight
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.signature.enable
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.signature.hideOnTextChange
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.signature.preferShownAbove
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.acceptSuggestionOnCommitCharacter
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.disableKind
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.disableMenu
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.disableMenuShortcut
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.echodocSupport
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.enablePreview
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.fixInsertedWord
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.floatEnable
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.keepCompleteopt
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.localityBonus
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.noselect
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.numberSelect
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.preferCompleteThanJumpPlaceholder
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "boolean",$/;"	s	object:properties.suggest.triggerAfterInsertEnter
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.coc.source.around.priority
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.coc.source.buffer.priority
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.coc.source.file.priority
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.signature.floatTimeout
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.signature.triggerSignatureWait
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.suggest.highPrioritySourceLimit
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.suggest.lowPrioritySourceLimit
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.suggest.timeout
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "integer",$/;"	s	object:properties.suggest.triggerCompletionWait
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.diagnostic.highlightOffset
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.diagnostic.maxWindowHeight
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.diagnostic.signOffset
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.diagnostic.virtualTextLines
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.list.limitLines
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.list.maxHeight
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.list.maxPreviewHeight
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.list.signOffset
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.signature.maxWindowHeight
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.detailMaxLength
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.labelMaxLength
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.languageSourcePriority
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.maxCompleteItemCount
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.maxPreviewWidth
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "number",$/;"	s	object:properties.suggest.minTriggerInputLength
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:definitions.languageServerBase
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:definitions.languageServerCommand
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:definitions.languageServerModule
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:definitions.languageServerSocket
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:properties.languageserver
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:properties.list.insertMappings
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:properties.list.normalMappings
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "object",$/;"	s	object:properties.suggest.completionItemKindLabels
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.extensionUpdateCheck
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.hoverTarget
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.jumpCommand
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.messageLevel
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.snippetStatusText
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.preferences.watchmanPath
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.source.around.shortcut
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.source.buffer.shortcut
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.coc.source.file.shortcut
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.codeLens.separator
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.enableMessage
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.errorSign
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.hintSign
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.infoSign
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.level
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.messageTarget
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.virtualTextLineSeparator
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.virtualTextPrefix
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.diagnostic.warningSign
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.http.proxy
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.indicator
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.nextKeymap
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.previewHighlightGroup
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.previousKeymap
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.list.selectedSignText
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.signature.target
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.suggest.autoTrigger
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.suggest.detailField
type	.vim/plugged/coc.nvim/data/schema.json	/^      "type": "string",$/;"	s	object:properties.suggest.snippetIndicator
type	.vim/plugged/coc.nvim/package.json	/^    "type": "git",$/;"	s	object:repository
type	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^          "type": "boolean",$/;"	s	object:contributes.configuration.properties.test.enable
type	.vim/plugged/coc.nvim/src/extensions.ts	/^  type: string$/;"	p	interface:PropertyScheme
type	.vim/plugged/coc.nvim/src/handler/index.ts	/^  type: 'Label' | 'MoreMsg' | 'Normal'$/;"	p	interface:SignaturePart
type	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let type: TokenType$/;"	v
type	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  type: TokenType$/;"	p	interface:Token
type	.vim/plugged/coc.nvim/src/types.ts	/^  type: string$/;"	p	interface:LocationListItem
type	.vim/plugged/coc.nvim/src/types.ts	/^  type: string$/;"	p	interface:PopupProps
type	.vim/plugged/coc.nvim/src/types.ts	/^  type: string$/;"	p	interface:SourceStat
type	.vim/plugged/coc.nvim/src/types.ts	/^  type?: string,$/;"	p	interface:QuickfixItem
type	.vim/plugged/coc.nvim/src/watchman.ts	/^  type: 'f' | 'd'$/;"	p	interface:FileChangeItem
type	.vim/plugged/vim-snippets/addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/snipmate-snippets.git"},$/;"	s	object:repository
typeLookup	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def typeLookup(include_documentation):$/;"	f
typeParameter	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "typeParameter": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
typeParameter	.vim/plugged/coc.nvim/data/schema.json	/^        "typeParameter": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
type_go	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/go.vim	/^let type_go = {}$/;"	v
type_go	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/go.vim	/^let type_go.kind2scope = {$/;"	v
type_go	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/go.vim	/^let type_go.kinds = {$/;"	v
type_go	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/go.vim	/^let type_go.lang = 'go'$/;"	v
type_go	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/go.vim	/^let type_go.scope2kind = {$/;"	v
type_go	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags/go.vim	/^let type_go.sro = '.'$/;"	v
typedArray	.vim/plugged/coc.nvim/src/util/is.ts	/^export function typedArray<T>($/;"	f
types	.vim/plugged/coc.nvim/src/workspace.ts	/^    let types = [PatternType.Buffer, PatternType.LanguageServer, PatternType.Global]$/;"	v
typescript	.config/nvim/plugged/coc.nvim/package.json	/^    "typescript": "3.5.2",$/;"	s	object:devDependencies
typescript	.vim/plugged/coc.nvim/package.json	/^    "typescript": "3.5.2",$/;"	s	object:devDependencies
typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions	.vim/plugged/coc.nvim/.vim/coc-settings.json	/^  "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": false,$/;"	b
typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces	.vim/plugged/coc.nvim/.vim/coc-settings.json	/^  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,$/;"	b
typescript.preferences.noSemicolons	.vim/plugged/coc.nvim/.vim/coc-settings.json	/^  "typescript.preferences.noSemicolons": true,$/;"	b
typescript.suggestionActions.enabled	.vim/plugged/coc.nvim/.vim/coc-settings.json	/^  "typescript.suggestionActions.enabled": false$/;"	b
u	.config/nvim/plugged/vim-repeat/autoload/repeat.vim	/^    nmap u <Plug>(RepeatUndo)$/;"	m
u	.vim/plugged/coc.nvim/src/configuration/index.ts	/^        let u = URI.parse(resource)$/;"	v
u	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let u = URI.parse(uri)$/;"	v
u	.vim/plugged/coc.nvim/src/extensions.ts	/^          let u = URI.parse(doc.uri)$/;"	v
u	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let filepath = u.scheme == 'file' ? u.fsPath : u.toString()$/;"	v
u	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let u = URI.parse(location.uri)$/;"	v
u	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let u = URI.parse(uri)$/;"	v
u	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  u = 117,$/;"	e	enum:CharCode
u	.vim/plugged/coc.nvim/src/workspace.ts	/^    let filepath = u.scheme == 'file' ? u.fsPath : uri$/;"	v
u	.vim/plugged/coc.nvim/src/workspace.ts	/^    let u = URI.parse(document.uri)$/;"	v
u	.vim/plugged/coc.nvim/src/workspace.ts	/^    let u = URI.parse(uri)$/;"	v
ui	.vim/plugged/coc.nvim/src/list/manager.ts	/^      ui.hide()$/;"	C
ui	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { name, ui, currList, nvim } = this$/;"	C
ui	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { nvim, ui, savedHeight } = this$/;"	C
ui	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { ui } = this$/;"	C
ui	.vim/plugged/coc.nvim/src/list/manager.ts	/^    let { ui, currList, activated, nvim } = this$/;"	v
ui	.vim/plugged/coc.nvim/src/list/manager.ts	/^    ui.index = ui.index + 1$/;"	C
ui	.vim/plugged/coc.nvim/src/list/manager.ts	/^    ui.index = ui.index - 1$/;"	C
ui	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public ui: UI$/;"	C
uid	.vim/plugged/coc.nvim/src/model/status.ts	/^    let uid = uuidv1()$/;"	C
ultisnips_snippets	.config/nvim/plugged/ultisnips/ftplugin/snippets.vim	/^augroup ultisnips_snippets.vim$/;"	a
unbindAll	.config/nvim/plugged/oceanic-next/test/test.js	/^  unbindAll() {$/;"	m	class:SoundCloudAudio
undefined	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	undefined;$/;"	v
undefined	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^      ['file:1', undefined]$/;"	v
undefined	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        return undefined$/;"	v
underline	.vim/plugged/coc.nvim/src/types.ts	/^  underline?: boolean$/;"	p	interface:AnsiItem
unescape	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text.py	/^def unescape(text):$/;"	f
unescape	.config/nvim/plugged/ultisnips/utils/get_tm_snippets.py	/^def unescape(s):$/;"	f
unicode	.vim/plugged/fzf/src/terminal.go	/^	unicode    bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
uninstall	.config/nvim/plugged/html5.vim/Makefile	/^uninstall: uninstall-files rmrecord$/;"	t
uninstall-files	.config/nvim/plugged/html5.vim/Makefile	/^uninstall-files:$/;"	t
unique_name_temp	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def unique_name_temp(self, suffix='', prefix=''):$/;"	m	class:TempFileManager
unit	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "unit": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
unit	.vim/plugged/coc.nvim/data/schema.json	/^        "unit": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
unite#sources#OmniSharp#define	.vim/plugged/omnisharp-vim/autoload/unite/sources/OmniSharp.vim	/^function! unite#sources#OmniSharp#define() abort$/;"	f
unite#sources#ultisnips#define	.config/nvim/plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^function! unite#sources#ultisnips#define() abort$/;"	f
unknown	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^unknown,$/;"	s
unlinkAsync	.vim/plugged/coc.nvim/src/util/fs.ts	/^export async function unlinkAsync(filepath: string): Promise<void> {$/;"	f
unlink_file	.config/nvim/plugged/html5.vim/Makefile	/^unlink_file = \\$/;"	m
unregister	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public unregister(id: string): void {$/;"	m	class:DidCloseTextDocumentFeature
unregister	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  unregister(id: string): void$/;"	m	interface:DynamicFeature
unregister_snippet_source	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def unregister_snippet_source(self, name):$/;"	m	class:SnippetManager
unregistration	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      for (let unregistration of params.unregisterations) {$/;"	v
unset_var	.vim/plugged/fzf/test/test_go.rb	/^  def unset_var(name)$/;"	f	module:TestShell
unsets	.vim/plugged/fzf/test/test_go.rb	/^    def unsets$/;"	S	class:Shell
unshift	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def unshift(self, amount=1):$/;"	m	class:SnippetUtil
unsubscribe	.vim/plugged/coc.nvim/src/watchman.ts	/^  public unsubscribe(subscription: string): Promise<any> {$/;"	m	class:Watchman
until	.vim/plugged/fzf/test/test_go.rb	/^  def until(refresh = false, pane = 0)$/;"	f
upOneLine	.vim/plugged/fzf/src/tui/light.go	/^	upOneLine     bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
update	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	update: function(){$/;"	m	class:jQuery.fx
update	.config/nvim/plugged/html5.vim/Makefile	/^update:$/;"	t
update	.vim/plugged/coc.nvim/src/model/memos.ts	/^  private async update(id: string, key: string, value: any): Promise<void> {$/;"	m	class:Memos
update	.vim/plugged/coc.nvim/src/types.ts	/^  update(key: string, value: any): Promise<void>$/;"	m	interface:Memento
update	.vim/plugged/coc.nvim/src/types.ts	/^  update(section: string, value: any, isUser?: boolean): void$/;"	m	interface:WorkspaceConfiguration
update	.vim/plugged/fzf/Makefile	/^update:$/;"	t
updateBuffer	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^def updateBuffer():$/;"	f
updateConfiguration	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public updateConfiguration(key: string, value: any): void {$/;"	m	class:Helper
updateExtension	.vim/plugged/coc.nvim/src/plugin.ts	/^  public updateExtension(): Promise<void> {$/;"	m	class:Plugin
updatePromptOffset	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) updatePromptOffset() ([]rune, []rune) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, []rune)
updateTerminalSize	.vim/plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f	struct:tui.LightRenderer
update_extends	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/snippet/source/_base.py	/^    def update_extends(self, child_ft, parent_fts):$/;"	m	class:SnippetSource
update_opened_candidates	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/view.py	/^    def update_opened_candidates(self) -> None:$/;"	m	class:View
update_text	.vim/plugged/ghost-text.vim/python3/vim_ghost_text.py	/^def update_text(name, lines, selections):$/;"	f
update_textobjects	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_snippet_instance.py	/^    def update_textobjects(self, buf):$/;"	m	class:SnippetInstance
upperFirst	.vim/plugged/coc.nvim/src/util/string.ts	/^export function upperFirst(str: string): string {$/;"	f
uri	.vim/plugged/coc.nvim/src/__tests__/client/converter.test.ts	/^    let uri = URI.file('\/tmp\/a')$/;"	v
uri	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^      [uri, [createDiagnostic('other')]]$/;"	v
uri	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticCollection.test.ts	/^    let uri = 'file:\/\/\/1'$/;"	v
uri	.vim/plugged/coc.nvim/src/__tests__/modules/util.test.ts	/^    let uri = URI.file('\/foo').toString()$/;"	v
uri	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let uri = 'http:\/\/example.com'$/;"	v
uri	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let uri = 'jdi:\/\/abc'$/;"	v
uri	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let uri = 'jdt:\/\/foo'$/;"	v
uri	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let uri = 'zipfile:\/\/\/tmp\/clojure-1.9.0.jar::clojure\/core.clj'$/;"	v
uri	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let uri = URI.file('\/tmp\/foo').toString()$/;"	v
uri	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let uri = URI.file('\/tmp\/not_exists').toString()$/;"	v
uri	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let uri = URI.file(file)$/;"	v
uri	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let uri = URI.file(file).toString()$/;"	v
uri	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let uri = URI.file(filepath).toString()$/;"	v
uri	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let uri = URI.file(path.join(__dirname, 'bar')).toString()$/;"	v
uri	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let uri = URI.file(filepath).toString()$/;"	v
uri	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^    for (let uri of this.diagnosticsMap.keys()) {$/;"	v
uri	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^    let uri = entries$/;"	v
uri	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        let { uri } = item.location$/;"	v
uri	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let { uri, version, bufnr } = doc$/;"	v
uri	.vim/plugged/coc.nvim/src/handler/index.ts	/^      let { uri, range } = location$/;"	v
uri	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let { uri, diagnostics } = params$/;"	v
uri	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let { range, uri } = await this.convertLocation(location)$/;"	v
uri	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let { uri, range } = location$/;"	v
uri	.vim/plugged/coc.nvim/src/list/worker.ts	/^            let uri = getItemUri(item)$/;"	v
uri	.vim/plugged/coc.nvim/src/model/document.ts	/^      let { version, uri } = this$/;"	v
uri	.vim/plugged/coc.nvim/src/model/document.ts	/^    let uri = this._uri = getUri(opts.fullpath, buffer.id, buftype)$/;"	v
uri	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { uri, version } = this$/;"	v
uri	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { version, uri, filetype } = this$/;"	v
uri	.vim/plugged/coc.nvim/src/provider/manager.ts	/^          let { uri, range } = d$/;"	v
uri	.vim/plugged/coc.nvim/src/provider/manager.ts	/^        let { uri, range } = def$/;"	v
uri	.vim/plugged/coc.nvim/src/snippets/manager.ts	/^      let { uri } = e.textDocument$/;"	v
uri	.vim/plugged/coc.nvim/src/types.ts	/^  uri: string$/;"	p	interface:LocationWithLine
uri	.vim/plugged/coc.nvim/src/types.ts	/^  uri?: string$/;"	p	interface:QuickfixItem
uri	.vim/plugged/coc.nvim/src/workspace.ts	/^        for (let uri of Object.keys(changes)) {$/;"	v
uri	.vim/plugged/coc.nvim/src/workspace.ts	/^        let uri = URI.file(filepath).toString()$/;"	v
uri	.vim/plugged/coc.nvim/src/workspace.ts	/^        let uri = URI.file(oldPath).toString()$/;"	v
uri	.vim/plugged/coc.nvim/src/workspace.ts	/^        let { uri, version } = textDocument$/;"	v
uri	.vim/plugged/coc.nvim/src/workspace.ts	/^      let { version, uri } = textDocument$/;"	v
uri	.vim/plugged/coc.nvim/src/workspace.ts	/^    let uri = URI.file(rootPath).toString()$/;"	v
uri	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { uri } = document$/;"	v
uri	.vim/plugged/coc.nvim/src/workspace.ts	/^    let { uri, range } = loc$/;"	v
uris	.vim/plugged/coc.nvim/src/diagnostic/collection.ts	/^    let uris = Array.from(this.diagnosticsMap.keys())$/;"	v
url	.config/nvim/plugged/coc.nvim/package.json	/^    "url": "git+https:\/\/github.com\/neoclide\/coc.nvim.git"$/;"	s	object:repository
url	.config/nvim/plugged/coc.nvim/package.json	/^    "url": "https:\/\/github.com\/neoclide\/coc.nvim\/issues"$/;"	s	object:bugs
url	.config/nvim/plugged/vim-snippets/addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/snipmate-snippets.git"},$/;"	s	object:repository
url	.vim/plugged/coc.nvim/package.json	/^    "url": "git+https:\/\/github.com\/neoclide\/coc.nvim.git"$/;"	s	object:repository
url	.vim/plugged/coc.nvim/package.json	/^    "url": "https:\/\/github.com\/neoclide\/coc.nvim\/issues"$/;"	s	object:bugs
url	.vim/plugged/vim-snippets/addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/snipmate-snippets.git"},$/;"	s	object:repository
urlparse	.vim/plugged/omnisharp-vim/python/omnisharp/util.py	/^    from urllib import parse as urlparse$/;"	x
usage	.config/nvim/plugged/fzf.vim/bin/preview.rb	/^def usage$/;"	f
usage	.vim/plugged/fzf/src/options.go	/^const usage = `usage: fzf [options]$/;"	c	package:fzf
usage	.vim/plugged/omnisharp-vim/installer/omnisharp-manager.sh	/^usage() {$/;"	f
use	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^use,$/;"	s
useFloat	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let useFloat = this.config.messageTarget == 'float'$/;"	v
use_proxy_buffer	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^def use_proxy_buffer(snippets_stack, vstate):$/;"	f
use_raw_list	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	.config/nvim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
usedColors	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^        usedColors.add(hex)$/;"	v
usedColors	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^const usedColors: Set<string> = new Set()$/;"	C
user	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^      user: this._userConfiguration.freeze().getValue(key),$/;"	C
user	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      let { defaults, user } = this._configuration$/;"	v
user	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      user,$/;"	v
user	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      user: target == ConfigurationTarget.User ? model : user,$/;"	v
user	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      user: this._configuration.user,$/;"	v
user	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let user = this.parseContentFromFile(userConfigFile)$/;"	v
user	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let { defaults, user, workspace } = this._configuration$/;"	v
user	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let { user } = this._configuration$/;"	v
user	.vim/plugged/coc.nvim/src/types.ts	/^  user: IConfigurationModel$/;"	p	interface:IConfigurationData
userAgent	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var userAgent = navigator.userAgent.toLowerCase();$/;"	v
userAgent	.vim/plugged/coc.nvim/src/util/platform.ts	/^  userAgent: string$/;"	p	interface:INavigator
userConfigFile	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let userConfigFile = path.join(__dirname, '.\/settings.json')$/;"	v
userConfigFile	.vim/plugged/coc.nvim/src/workspace.ts	/^    let userConfigFile = path.join(home, CONFIG_FILE_NAME)$/;"	v
userConfiguration	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    const userConfiguration = new ConfigurationModel(data.user.contents)$/;"	C
userDefinedLinkHintCss	vimium-options.json	/^  "userDefinedLinkHintCss": "div > .vimiumHintMarker {\\n\/* linkhint boxes *\/\\nbackground: -w/;"	s
user_data	.vim/plugged/coc.nvim/src/types.ts	/^  user_data?: string$/;"	p	interface:VimCompleteItem
util	.config/nvim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^import denite.util as util$/;"	I
util	.vim/plugged/denite.nvim/test/rplugin/python3/denite/test_util.py	/^import denite.util as util$/;"	I
util	.vim/plugged/fzf/src/util/atomicbool.go	/^package util$/;"	p
util	.vim/plugged/fzf/src/util/atomicbool_test.go	/^package util$/;"	p
util	.vim/plugged/fzf/src/util/chars.go	/^package util$/;"	p
util	.vim/plugged/fzf/src/util/chars_test.go	/^package util$/;"	p
util	.vim/plugged/fzf/src/util/eventbox.go	/^package util$/;"	p
util	.vim/plugged/fzf/src/util/eventbox_test.go	/^package util$/;"	p
util	.vim/plugged/fzf/src/util/slab.go	/^package util$/;"	p
util	.vim/plugged/fzf/src/util/util.go	/^package util$/;"	p
util	.vim/plugged/fzf/src/util/util_test.go	/^package util$/;"	p
util	.vim/plugged/fzf/src/util/util_unix.go	/^package util$/;"	p
util	.vim/plugged/fzf/src/util/util_windows.go	/^package util$/;"	p
util_find_free_port	.vim/plugged/omnisharp-vim/python/omnisharp/commands.py	/^from .util import find_free_port as util_find_free_port$/;"	x
uuid	.config/nvim/plugged/coc.nvim/package.json	/^    "uuid": "^3.3.2",$/;"	s	object:dependencies
uuid	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var expando = "jQuery" + now(), uuid = 0, windowData = {},$/;"	v
uuid	.vim/plugged/coc.nvim/package.json	/^    "uuid": "^3.3.2",$/;"	s	object:dependencies
v	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> v    denite#do_map('do_action', 'vsplit')$/;"	m
v	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/text_objects/_python_code.py	/^    def v(self):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
v	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  v = 118,$/;"	e	enum:CharCode
v0.1.0	.vim/plugged/vim-closer/HISTORY.md	/^## v0.1.0$/;"	s
v0.1.1	.vim/plugged/vim-closer/HISTORY.md	/^## v0.1.1$/;"	s
v0.1.2	.vim/plugged/vim-closer/HISTORY.md	/^## v0.1.2$/;"	s
v0.2.0	.vim/plugged/vim-closer/HISTORY.md	/^## v0.2.0$/;"	s
v8debug	.vim/plugged/coc.nvim/src/language-client/index.ts	/^declare var v8debug: any$/;"	v
val	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, ret, fn = jQuery.isFunction( elem[ type ] || null ),$/;"	v
val	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^		var val, ret, namespace, all, handlers;$/;"	v
val	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let val = await nvim.getVar('coc#_context') as any$/;"	v
val	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let val = doc.getVar<number>('enabled')$/;"	v
val	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let val = await buffer.getVar('coc_snippet_active')$/;"	v
val	.vim/plugged/coc.nvim/src/__tests__/snippets/manager.test.ts	/^    let val = await doc.buffer.getVar('coc_snippet_active')$/;"	v
val	.vim/plugged/coc.nvim/src/__tests__/snippets/session.test.ts	/^    let val = await nvim.eval('g:coc#_context') as any$/;"	v
val	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      let val = props[key]$/;"	v
val	.vim/plugged/coc.nvim/src/extensions.ts	/^          let val = properties[key].default$/;"	v
val	.vim/plugged/coc.nvim/src/extensions.ts	/^      let val = json.dependencies[key]$/;"	v
val	.vim/plugged/coc.nvim/src/list/manager.ts	/^        let val = config[key]$/;"	v
val	.vim/plugged/coc.nvim/src/model/document.ts	/^    let val = this.variables[`coc_${key}`]$/;"	v
valid	.vim/plugged/coc.nvim/src/__tests__/modules/floatBuffer.test.ts	/^    let valid = await buf.valid$/;"	v
valid	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let valid = await this.nvim.call('coc#util#valid_state')$/;"	v
valid	.vim/plugged/coc.nvim/src/list/basic.ts	/^      let valid = await nvim.call('bufloaded', [bufnr])$/;"	v
valid	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let valid = await context.window.valid$/;"	v
valid	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^        let valid = await floatBuffer.valid$/;"	v
valid	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      let valid = await this.activated()$/;"	v
valid	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let valid = await this.window.valid$/;"	v
valid	.vim/plugged/coc.nvim/src/model/popup.ts	/^  public async valid(): Promise<boolean> {$/;"	m	class:Popup
valid	.vim/plugged/coc.nvim/src/types.ts	/^  valid?: boolean$/;"	p	interface:QuickfixItem
valid	.vim/plugged/coc.nvim/src/util/clean.ts	/^      let valid = await validSocket(file)$/;"	v
validKeys	.vim/plugged/coc.nvim/src/list/configuration.ts	/^export const validKeys = [$/;"	C
validSocket	.vim/plugged/coc.nvim/src/util/fs.ts	/^export function validSocket(path: string): Promise<boolean> {$/;"	f
validWorkspaceSymbol	.vim/plugged/coc.nvim/src/list/source/symbols.ts	/^  private validWorkspaceSymbol(symbol: SymbolInformation): boolean {$/;"	m	class:Symbols
validate_buffer	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def validate_buffer(self):$/;"	m	class:VimBufferProxy
value	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "value": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
value	.vim/plugged/coc.nvim/data/schema.json	/^        "value": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
value	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^    let value = configurations.configuration.getValue()$/;"	v
value	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^      value: consolidateConfigurationModel.getValue(key)$/;"	C
value	.vim/plugged/coc.nvim/src/configuration/util.ts	/^    const value = valueTree[first]$/;"	C	function:doRemoveFromValueTree
value	.vim/plugged/coc.nvim/src/extensions.ts	/^      for (let [changeType, value] of result) {$/;"	v
value	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let value = ensure(ensure(capabilities, 'textDocument')!, 'synchronization')!$/;"	v
value	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^    let value = access(access(access(capabilities, 'workspace'), 'workspaceFolders'), 'changeNot/;"	v
value	.vim/plugged/coc.nvim/src/list/basic.ts	/^      let value: string | boolean = true$/;"	v
value	.vim/plugged/coc.nvim/src/list/mappings.ts	/^    for (let [key, value] of Object.entries(mappings)) {$/;"	v
value	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        value = this._accept(TokenType.Comma, true)$/;"	C
value	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^        value = this._accept(undefined, true)$/;"	C
value	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      let value: string$/;"	C
value	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let value = this._scanner.value.substring(start.pos, this._token.pos)$/;"	v
value	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    let value: string$/;"	v
value	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^  constructor(public value: string) {$/;"	p	class:Text
value	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^      const value = p.toString()$/;"	C
value	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^    let { value, id, index } = placeholder$/;"	v
value	.vim/plugged/coc.nvim/src/snippets/snippet.ts	/^  value: string$/;"	p	interface:CocSnippetPlaceholder
value	.vim/plugged/coc.nvim/src/sources.ts	/^      for (let [changeType, value] of result) {$/;"	v
value	.vim/plugged/coc.nvim/src/util/lodash.ts	/^        const value = obj[key]$/;"	C	function:defaults
value	.vim/plugged/coc.nvim/src/util/match.ts	/^      const value = score(filter, uri, languageId)$/;"	C	function:score
value1	.vim/plugged/coc.nvim/src/configuration/util.ts	/^    const value1 = getConfigurationValue<any>(from, key)$/;"	C	function:getChangedKeys
value2	.vim/plugged/coc.nvim/src/configuration/util.ts	/^    const value2 = getConfigurationValue<any>(to, key)$/;"	C	function:getChangedKeys
values	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^						values = [],$/;"	v
values	.vim/plugged/coc.nvim/src/__tests__/modules/array.test.ts	/^    function values(item: { [key: string]: number[] }): number[] {$/;"	v
values	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^      values.push(value)$/;"	C
values	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const values: string[] = []$/;"	C
variable	.config/nvim/plugged/coc.nvim/data/schema.json	/^        "variable": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
variable	.vim/plugged/coc.nvim/data/schema.json	/^        "variable": {"type": "string"},$/;"	o	object:properties.suggest.completionItemKindLabels.properties
variable	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^    const variable = new Variable(name!)$/;"	C
variableName	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^    const variableName = variable.name$/;"	C
variable_length	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    variable_length: int = 0$/;"	v	class:Context
variables	.vim/plugged/coc.nvim/src/model/document.ts	/^  private variables: { [key: string]: any }$/;"	p	class:Document
variables	.vim/plugged/coc.nvim/src/types.ts	/^  variables: { [key: string]: any }$/;"	p	interface:BufferOption
vd	.config/nvim/plugged/vim-operator-user/t/example-d-motion-type.vim	/^map vd  <Plug>(operator-void-delete)$/;"	m
ve	.vim/plugged/coc.nvim/src/snippets/session.ts	/^    let [ve, selection, pumvisible, mode] = await nvim.eval('[&virtualedit, &selection, pumvisib/;"	v
ve	.vim/plugged/coc.nvim/src/workspace.ts	/^    let [bufnr, ve, selection, mode] = await nvim.eval(`[bufnr('%'), &virtualedit, &selection, m/;"	v
vendor/vader.vim	.vim/plugged/vim-closer/Makefile	/^vendor\/vader.vim:$/;"	t
vendor/vim-endwise	.vim/plugged/vim-closer/Makefile	/^vendor\/vim-endwise:$/;"	t
vendor/vimrc	.vim/plugged/vim-closer/Makefile	/^vendor\/vimrc: vendor\/vader.vim vendor\/vim-endwise$/;"	t
version	.config/nvim/plugged/coc.nvim/bin/server.js	/^const version = process.version.replace('v', '')$/;"	C
version	.config/nvim/plugged/coc.nvim/package.json	/^  "version": "0.0.71",$/;"	s
version	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^	version: (userAgent.match( \/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/ ) || [])[1],$/;"	p	class:jQuery.browser
version	.config/nvim/plugged/gruvbox/package.json	/^  "version": "2.0.0",$/;"	s
version	.config/nvim/plugged/html5.vim/Makefile	/^version:$/;"	t
version	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    version = None  # Will be set to vim --version output$/;"	v	class:VimTestCase
version	.vim/plugged/coc.nvim/bin/server.js	/^const version = process.version.replace('v', '')$/;"	C
version	.vim/plugged/coc.nvim/package.json	/^  "version": "0.0.71",$/;"	s
version	.vim/plugged/coc.nvim/src/__tests__/extensions/coc-json/package.json	/^  "version": "1.0.0",$/;"	s
version	.vim/plugged/coc.nvim/src/__tests__/extensions/global/package.json	/^  "version": "1.0.0",$/;"	s
version	.vim/plugged/coc.nvim/src/__tests__/extensions/local/package.json	/^  "version": "1.0.0",$/;"	s
version	.vim/plugged/coc.nvim/src/__tests__/extensions/test/package.json	/^  "version": "1.0.0",$/;"	s
version	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let { codeLenes, version } = this.codeLensMap.get(bufnr) || {} as any$/;"	v
version	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^    let { uri, version, bufnr } = doc$/;"	v
version	.vim/plugged/coc.nvim/src/handler/codelens.ts	/^  version: number$/;"	p	interface:CodeLensInfo
version	.vim/plugged/coc.nvim/src/handler/colors.ts	/^    let { version, changedtick } = document$/;"	v
version	.vim/plugged/coc.nvim/src/model/document.ts	/^      let { version, uri } = this$/;"	v
version	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { uri, version } = this$/;"	v
version	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { version, uri, filetype } = this$/;"	v
version	.vim/plugged/coc.nvim/src/plugin.ts	/^  public get version(): string {$/;"	m	class:Plugin
version	.vim/plugged/coc.nvim/src/snippets/session.ts	/^  private version = 0$/;"	p	class:SnippetSession
version	.vim/plugged/coc.nvim/src/types.ts	/^  readonly version: string$/;"	p	interface:Env
version	.vim/plugged/coc.nvim/src/types.ts	/^  version: string$/;"	p	interface:ExtensionInfo
version	.vim/plugged/coc.nvim/src/workspace.ts	/^        let { uri, version } = textDocument$/;"	v
version	.vim/plugged/coc.nvim/src/workspace.ts	/^      let { version, uri } = textDocument$/;"	v
version	.vim/plugged/coc.nvim/src/workspace.ts	/^  public readonly version: string$/;"	p	class:Workspace
version	.vim/plugged/fzf/src/constants.go	/^	version = "0.18.0"$/;"	c	package:fzf
version	.vim/plugged/fzf/src/terminal.go	/^	version    int64$/;"	m	struct:fzf.Terminal	typeref:typename:int64
versionInfo	.vim/plugged/coc.nvim/src/extensions.ts	/^    let versionInfo: { [index: string]: string } = {}$/;"	v
versioned	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let versioned = VersionedTextDocumentIdentifier.create(doc.uri, 10)$/;"	v
versioned	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let versioned = VersionedTextDocumentIdentifier.create(doc.uri, doc.version)$/;"	v
versioned	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let versioned = VersionedTextDocumentIdentifier.create(doc.uri, null)$/;"	v
versioned	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let versioned = VersionedTextDocumentIdentifier.create(uri, null)$/;"	v
vertical	.vim/plugged/fzf/src/tui/tui.go	/^	vertical    rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
view	.config/nvim/plugged/vim-css3-syntax/test/test.css	/^view {$/;"	s
vim	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/__init__.py	/^    vim = pynvim$/;"	v
vim	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    vim = neovim$/;"	v
vim	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    vim = pynvim$/;"	v
vim	.config/nvim/plugged/gruvbox/package.json	/^  "vim": {$/;"	o
vim	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    vim = neovim$/;"	v
vim	.vim/plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    vim = pynvim$/;"	v
vim	.vim/plugged/leetcode.vim/autoload/leetcode.py	/^    vim = None$/;"	v
vim	.vim/plugged/vim-closer/Makefile	/^vim := vim$/;"	m
vim	.vim/plugged/vim-closer/Makefile	/^vim: vendor\/vimrc$/;"	t
vim plugins for HTML and CSS hi-speed coding.	.config/nvim/plugged/emmet-vim/docs/index.html	/^	<h2>vim plugins for HTML and CSS hi-speed coding.<\/h2>$/;"	i
vim-after-object ![travis-ci](https://travis-ci.org/junegunn/vim-after-object.svg?branch=master)	.config/nvim/plugged/vim-after-object/README.md	/^vim-after-object ![travis-ci](https:\/\/travis-ci.org\/junegunn\/vim-after-object.svg?branch=mas/;"	c
vim-airline [![Build Status](https://travis-ci.org/vim-airline/vim-airline.png)](https://travis-ci.org/vim-airline/vim-airline)[![Say Thanks!](https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg)](https://saythanks.io/to/chrisbra)	.vim/plugged/vim-airline/README.md	/^# vim-airline [![Build Status](https:\/\/travis-ci.org\/vim-airline\/vim-airline.png)](https:\/\//;"	c
vim-closer	.vim/plugged/vim-closer/README.md	/^# vim-closer$/;"	c
vim-css3-syntax	.config/nvim/plugged/vim-css3-syntax/README.md	/^vim-css3-syntax$/;"	c
vim-easyescape-plus	.config/nvim/plugged/vim-easyescape-plus/README.md	/^# vim-easyescape-plus$/;"	c
vim-hug-neovim-rpc	.vim/plugged/vim-hug-neovim-rpc/README.md	/^# vim-hug-neovim-rpc$/;"	c
vim-indent-object	.config/nvim/plugged/vim-indent-object/README.md	/^## vim-indent-object$/;"	s
vim-textobj-entire - Text objects for entire buffers	.config/nvim/plugged/vim-textobj-entire/README.md	/^# vim-textobj-entire - Text objects for entire buffers$/;"	c
vim-textobj-user - Create your own text objects	.config/nvim/plugged/vim-textobj-user/README.md	/^# vim-textobj-user - Create your own text objects$/;"	c
vim-themis	.config/nvim/plugged/defx.nvim/Makefile	/^vim-themis:$/;"	t
vim-themis	.config/nvim/plugged/denite.nvim/Makefile	/^vim-themis:$/;"	t
vim-themis	.vim/plugged/denite.nvim/Makefile	/^vim-themis:$/;"	t
vim.easymotion	VSCode/settings.json	/^    "vim.easymotion": true,$/;"	b
vim.easymotionMarkerFontFamily	VSCode/settings.json	/^"vim.easymotionMarkerFontFamily":"monospace",$/;"	s
vim.insertModeKeyBindings	VSCode/settings.json	/^    "vim.insertModeKeyBindings": [$/;"	a
vim.leader	VSCode/settings.json	/^    "vim.leader": "<space>",$/;"	s
vim.normalModeKeyBindingsNonRecursive	VSCode/settings.json	/^    "vim.normalModeKeyBindingsNonRecursive": [$/;"	a
vim.useCtrlKeys	VSCode/settings.json	/^    "vim.useCtrlKeys": true,$/;"	b
vim.useSystemClipboard	VSCode/settings.json	/^    "vim.useSystemClipboard": true,$/;"	b
vimItem	.vim/plugged/coc.nvim/src/languages.ts	/^        let item = completeItems[vimItem.index]$/;"	v
vimItems	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let vimItems = items.map(item => {$/;"	v
vim_error	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^vim_error = vim.Function('neovim_rpc#_error')$/;"	v
vim_executable	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def vim_executable(self):$/;"	m	class:VimInterface
vim_flavor	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    vim_flavor = None # will be 'vim' or 'neovim'.$/;"	v	class:VimTestCase
vim_input	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/util.py	/^def vim_input(vim: Nvim, prompt: str = '',$/;"	f
vim_py	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^vim_py = vim.eval('g:neovim_rpc#py')$/;"	v
vim_snippets#Filename	.config/nvim/plugged/vim-snippets/autoload/vim_snippets.vim	/^fun! vim_snippets#Filename(...)$/;"	f
vim_snippets#Filename	.vim/plugged/vim-snippets/autoload/vim_snippets.vim	/^fun! vim_snippets#Filename(...)$/;"	f
vimball	.config/nvim/plugged/html5.vim/Makefile	/^vimball:$/;"	t
vimball-edit	.config/nvim/plugged/html5.vim/Makefile	/^vimball-edit:$/;"	t
vimcmd	.vim/plugged/omnisharp-vim/python/omnisharp/vimcmd.py	/^def vimcmd(fxn):$/;"	f
vimplug_exists	.vim/.vimrc	/^let vimplug_exists=expand('~\/.vim\/autoload\/plug.vim')$/;"	v
vimrc	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^    const vimrc = path.resolve(__dirname, 'vimrc')$/;"	C	method:Helper.setup
virtualText	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  virtualText: boolean$/;"	p	interface:DiagnosticConfig
virtualTextLineSeparator	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  virtualTextLineSeparator: string$/;"	p	interface:DiagnosticConfig
virtualTextLines	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  virtualTextLines: number$/;"	p	interface:DiagnosticConfig
virtualTextPrefix	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^  virtualTextPrefix: " ",$/;"	C
virtualTextPrefix	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  virtualTextPrefix: string$/;"	p	interface:DiagnosticConfig
virtualTextSrcId	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^  virtualTextSrcId: 0,$/;"	C
virtualTextSrcId	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  virtualTextSrcId: number$/;"	p	interface:DiagnosticConfig
virtual_position	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/_vim.py	/^def virtual_position(line, col):$/;"	f
virtualedit	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let virtualedit = await nvim.getOption('virtualedit')$/;"	v
visibility	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			var val, props = { position: "absolute", visibility: "hidden", display:"block" }, which = nam/;"	p	class:AnonymousFunctiond47633f82700.props
visible	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let visible = await nvim.call('pumvisible')$/;"	v
visible	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async visible(word: string, source?: string): Promise<boolean> {$/;"	m	class:Helper
visible	.vim/plugged/coc.nvim/src/__tests__/modules/sources.test.ts	/^    let visible = await helper.visible('custom', 'custom')$/;"	v
visible	.vim/plugged/coc.nvim/src/model/popup.ts	/^  public async visible(): Promise<boolean> {$/;"	m	class:Popup
vista#	.config/nvim/plugged/vista.vim/autoload/vista.vim	/^function! vista#(bang, ...) abort$/;"	f
vista#GenericCloseOverlay	.config/nvim/plugged/vista.vim/autoload/vista.vim	/^function! vista#GenericCloseOverlay() abort$/;"	f
vista#OnExecute	.config/nvim/plugged/vista.vim/autoload/vista.vim	/^function! vista#OnExecute(provider, AUF) abort$/;"	f
vista#RunForNearestMethodOrFunction	.config/nvim/plugged/vista.vim/autoload/vista.vim	/^function! vista#RunForNearestMethodOrFunction() abort$/;"	f
vista#SetProvider	.config/nvim/plugged/vista.vim/autoload/vista.vim	/^function! vista#SetProvider(provider) abort$/;"	f
vista#ShouldSkip	.config/nvim/plugged/vista.vim/autoload/vista.vim	/^function! vista#ShouldSkip() abort$/;"	f
vista#Sort	.config/nvim/plugged/vista.vim/autoload/vista.vim	/^function! vista#Sort() abort$/;"	f
vista#autocmd#Init	.config/nvim/plugged/vista.vim/autoload/vista/autocmd.vim	/^function! vista#autocmd#Init(group_name, AUF) abort$/;"	f
vista#autocmd#InitMOF	.config/nvim/plugged/vista.vim/autoload/vista/autocmd.vim	/^function! vista#autocmd#InitMOF() abort$/;"	f
vista#cursor#FindNearestMethodOrFunction	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! vista#cursor#FindNearestMethodOrFunction() abort$/;"	f
vista#cursor#FoldOrJump	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! vista#cursor#FoldOrJump() abort$/;"	f
vista#cursor#ShowDetail	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! vista#cursor#ShowDetail(_timer) abort$/;"	f
vista#cursor#ShowDetailWithDelay	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! vista#cursor#ShowDetailWithDelay() abort$/;"	f
vista#cursor#ShowTag	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! vista#cursor#ShowTag() abort$/;"	f
vista#cursor#ShowTagFor	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! vista#cursor#ShowTagFor(lnum) abort$/;"	f
vista#cursor#TogglePreview	.config/nvim/plugged/vista.vim/autoload/vista/cursor.vim	/^function! vista#cursor#TogglePreview() abort$/;"	f
vista#debugging#Info	.config/nvim/plugged/vista.vim/autoload/vista/debugging.vim	/^function! vista#debugging#Info() abort$/;"	f
vista#debugging#InfoToClipboard	.config/nvim/plugged/vista.vim/autoload/vista/debugging.vim	/^function! vista#debugging#InfoToClipboard() abort$/;"	f
vista#error#	.config/nvim/plugged/vista.vim/autoload/vista/error.vim	/^function! vista#error#(msg) abort$/;"	f
vista#error#Expect	.config/nvim/plugged/vista.vim/autoload/vista/error.vim	/^function! vista#error#Expect(expected) abort$/;"	f
vista#error#For	.config/nvim/plugged/vista.vim/autoload/vista/error.vim	/^function! vista#error#For(cmd, filetype) abort$/;"	f
vista#error#InvalidExecutive	.config/nvim/plugged/vista.vim/autoload/vista/error.vim	/^function! vista#error#InvalidExecutive(exe) abort$/;"	f
vista#error#InvalidOption	.config/nvim/plugged/vista.vim/autoload/vista/error.vim	/^function! vista#error#InvalidOption(opt, ...) abort$/;"	f
vista#error#Need	.config/nvim/plugged/vista.vim/autoload/vista/error.vim	/^function! vista#error#Need(needed) abort$/;"	f
vista#error#Notify	.config/nvim/plugged/vista.vim/autoload/vista/error.vim	/^function! vista#error#Notify(msg) abort$/;"	f
vista#error#RunCtags	.config/nvim/plugged/vista.vim/autoload/vista/error.vim	/^function! vista#error#RunCtags(cmd) abort$/;"	f
vista#executive#ale#Cache	.config/nvim/plugged/vista.vim/autoload/vista/executive/ale.vim	/^function! vista#executive#ale#Cache() abort$/;"	f
vista#executive#ale#Execute	.config/nvim/plugged/vista.vim/autoload/vista/executive/ale.vim	/^function! vista#executive#ale#Execute(bang, should_display, ...) abort$/;"	f
vista#executive#ale#Run	.config/nvim/plugged/vista.vim/autoload/vista/executive/ale.vim	/^function! vista#executive#ale#Run(fpath) abort$/;"	f
vista#executive#ale#RunAsync	.config/nvim/plugged/vista.vim/autoload/vista/executive/ale.vim	/^function! vista#executive#ale#RunAsync() abort$/;"	f
vista#executive#coc#Cache	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^function! vista#executive#coc#Cache() abort$/;"	f
vista#executive#coc#Execute	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^function! vista#executive#coc#Execute(bang, should_display, ...) abort$/;"	f
vista#executive#coc#Run	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^function! vista#executive#coc#Run(_fpath) abort$/;"	f
vista#executive#coc#RunAsync	.config/nvim/plugged/vista.vim/autoload/vista/executive/coc.vim	/^function! vista#executive#coc#RunAsync() abort$/;"	f
vista#executive#ctags#AutoUpdate	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! vista#executive#ctags#AutoUpdate(fpath) abort$/;"	f
vista#executive#ctags#Cache	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! vista#executive#ctags#Cache() abort$/;"	f
vista#executive#ctags#Execute	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! vista#executive#ctags#Execute(bang, should_display, ...) abort$/;"	f
vista#executive#ctags#ProjectRun	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! vista#executive#ctags#ProjectRun() abort$/;"	f
vista#executive#ctags#Run	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! vista#executive#ctags#Run(fpath) abort$/;"	f
vista#executive#ctags#RunAsync	.config/nvim/plugged/vista.vim/autoload/vista/executive/ctags.vim	/^function! vista#executive#ctags#RunAsync(fpath) abort$/;"	f
vista#executive#lcn#Cache	.config/nvim/plugged/vista.vim/autoload/vista/executive/lcn.vim	/^function! vista#executive#lcn#Cache() abort$/;"	f
vista#executive#lcn#Execute	.config/nvim/plugged/vista.vim/autoload/vista/executive/lcn.vim	/^function! vista#executive#lcn#Execute(bang, should_display, ...) abort$/;"	f
vista#executive#lcn#Run	.config/nvim/plugged/vista.vim/autoload/vista/executive/lcn.vim	/^function! vista#executive#lcn#Run(_fpath) abort$/;"	f
vista#executive#lcn#RunAsync	.config/nvim/plugged/vista.vim/autoload/vista/executive/lcn.vim	/^function! vista#executive#lcn#RunAsync() abort$/;"	f
vista#executive#vim_lsp#Cache	.config/nvim/plugged/vista.vim/autoload/vista/executive/vim_lsp.vim	/^function! vista#executive#vim_lsp#Cache() abort$/;"	f
vista#executive#vim_lsp#Execute	.config/nvim/plugged/vista.vim/autoload/vista/executive/vim_lsp.vim	/^function! vista#executive#vim_lsp#Execute(bang, should_display, ...) abort$/;"	f
vista#executive#vim_lsp#Run	.config/nvim/plugged/vista.vim/autoload/vista/executive/vim_lsp.vim	/^function! vista#executive#vim_lsp#Run(_fpath) abort$/;"	f
vista#executive#vim_lsp#RunAsync	.config/nvim/plugged/vista.vim/autoload/vista/executive/vim_lsp.vim	/^function! vista#executive#vim_lsp#RunAsync() abort$/;"	f
vista#extension#markdown#AutoUpdate	.config/nvim/plugged/vista.vim/autoload/vista/extension/markdown.vim	/^function! vista#extension#markdown#AutoUpdate(fpath) abort$/;"	f
vista#extension#markdown#Execute	.config/nvim/plugged/vista.vim/autoload/vista/extension/markdown.vim	/^function! vista#extension#markdown#Execute(_bang, should_display) abort$/;"	f
vista#finder#fzf#ProjectRun	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^function! vista#finder#fzf#ProjectRun() abort$/;"	f
vista#finder#fzf#Run	.config/nvim/plugged/vista.vim/autoload/vista/finder/fzf.vim	/^function! vista#finder#fzf#Run(...) abort$/;"	f
vista#floating#Close	.config/nvim/plugged/vista.vim/autoload/vista/floating.vim	/^function! vista#floating#Close() abort$/;"	f
vista#floating#Display	.config/nvim/plugged/vista.vim/autoload/vista/floating.vim	/^function! vista#floating#Display(lnum, tag) abort$/;"	f
vista#fold#Expr	.config/nvim/plugged/vista.vim/autoload/vista/fold.vim	/^function! vista#fold#Expr() abort$/;"	f
vista#fold#Text	.config/nvim/plugged/vista.vim/autoload/vista/fold.vim	/^function! vista#fold#Text() abort$/;"	f
vista#jump#NextTopLevel	.config/nvim/plugged/vista.vim/autoload/vista/jump.vim	/^function! vista#jump#NextTopLevel() abort$/;"	f
vista#jump#PrevTopLevel	.config/nvim/plugged/vista.vim/autoload/vista/jump.vim	/^function! vista#jump#PrevTopLevel() abort$/;"	f
vista#jump#TagLine	.config/nvim/plugged/vista.vim/autoload/vista/jump.vim	/^function! vista#jump#TagLine(tag) abort$/;"	f
vista#parser#ctags#FromExtendedRaw	.config/nvim/plugged/vista.vim/autoload/vista/parser/ctags.vim	/^function! vista#parser#ctags#FromExtendedRaw(line, container) abort$/;"	f
vista#parser#ctags#FromJSON	.config/nvim/plugged/vista.vim/autoload/vista/parser/ctags.vim	/^function! vista#parser#ctags#FromJSON(line, container) abort$/;"	f
vista#parser#ctags#RecursiveFromJSON	.config/nvim/plugged/vista.vim/autoload/vista/parser/ctags.vim	/^function! vista#parser#ctags#RecursiveFromJSON(line, container) abort$/;"	f
vista#parser#ctags#RecursiveFromXformat	.config/nvim/plugged/vista.vim/autoload/vista/parser/ctags.vim	/^function! vista#parser#ctags#RecursiveFromXformat(line, container) abort$/;"	f
vista#parser#lsp#ExtractSymbol	.config/nvim/plugged/vista.vim/autoload/vista/parser/lsp.vim	/^function! vista#parser#lsp#ExtractSymbol(symbol, container) abort$/;"	f
vista#parser#lsp#KindToSymbol	.config/nvim/plugged/vista.vim/autoload/vista/parser/lsp.vim	/^function! vista#parser#lsp#KindToSymbol(line, container) abort$/;"	f
vista#popup#Close	.config/nvim/plugged/vista.vim/autoload/vista/popup.vim	/^function! vista#popup#Close() abort$/;"	f
vista#popup#Display	.config/nvim/plugged/vista.vim/autoload/vista/popup.vim	/^function! vista#popup#Display(lnum, tag) abort$/;"	f
vista#renderer#Decorate	.config/nvim/plugged/vista.vim/autoload/vista/renderer.vim	/^function! vista#renderer#Decorate(kind) abort$/;"	f
vista#renderer#default#Render	.config/nvim/plugged/vista.vim/autoload/vista/renderer/default.vim	/^function! vista#renderer#default#Render() abort$/;"	f
vista#renderer#kind#Render	.config/nvim/plugged/vista.vim/autoload/vista/renderer/kind.vim	/^function! vista#renderer#kind#Render(data) abort$/;"	f
vista#renderer#line#Render	.config/nvim/plugged/vista.vim/autoload/vista/renderer/line.vim	/^function! vista#renderer#line#Render() abort$/;"	f
vista#renderer#markdown#Render	.config/nvim/plugged/vista.vim/autoload/vista/renderer/markdown.vim	/^function! vista#renderer#markdown#Render(data) abort$/;"	f
vista#sidebar#Close	.config/nvim/plugged/vista.vim/autoload/vista/sidebar.vim	/^function! vista#sidebar#Close() abort$/;"	f
vista#sidebar#IsVisible	.config/nvim/plugged/vista.vim/autoload/vista/sidebar.vim	/^function! vista#sidebar#IsVisible() abort$/;"	f
vista#sidebar#Open	.config/nvim/plugged/vista.vim/autoload/vista/sidebar.vim	/^function! vista#sidebar#Open() abort$/;"	f
vista#sidebar#OpenOrUpdate	.config/nvim/plugged/vista.vim/autoload/vista/sidebar.vim	/^function! vista#sidebar#OpenOrUpdate(rows) abort$/;"	f
vista#sidebar#Reload	.config/nvim/plugged/vista.vim/autoload/vista/sidebar.vim	/^function! vista#sidebar#Reload(data) abort$/;"	f
vista#sidebar#Toggle	.config/nvim/plugged/vista.vim/autoload/vista/sidebar.vim	/^function! vista#sidebar#Toggle() abort$/;"	f
vista#sidebar#ToggleFocus	.config/nvim/plugged/vista.vim/autoload/vista/sidebar.vim	/^function! vista#sidebar#ToggleFocus() abort$/;"	f
vista#source#GotoWin	.config/nvim/plugged/vista.vim/autoload/vista/source.vim	/^function! vista#source#GotoWin() abort$/;"	f
vista#source#Update	.config/nvim/plugged/vista.vim/autoload/vista/source.vim	/^function! vista#source#Update(bufnr, winnr, ...) abort$/;"	f
vista#statusline#	.config/nvim/plugged/vista.vim/autoload/vista/statusline.vim	/^function! vista#statusline#() abort$/;"	f
vista#statusline#Render	.config/nvim/plugged/vista.vim/autoload/vista/statusline.vim	/^function! vista#statusline#Render() abort$/;"	f
vista#statusline#RenderOnWinEvent	.config/nvim/plugged/vista.vim/autoload/vista/statusline.vim	/^function! vista#statusline#RenderOnWinEvent() abort$/;"	f
vista#statusline#ShouldDisable	.config/nvim/plugged/vista.vim/autoload/vista/statusline.vim	/^function! vista#statusline#ShouldDisable() abort$/;"	f
vista#types#uctags#KindsFor	.config/nvim/plugged/vista.vim/autoload/vista/types/uctags.vim	/^function! vista#types#uctags#KindsFor(filetype) abort$/;"	f
vista#util#BinarySearch	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! vista#util#BinarySearch(array, target, cmp_key, ret_key) abort$/;"	f
vista#util#Blink	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! vista#util#Blink(times, delay, ...) abort$/;"	f
vista#util#Complete	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! vista#util#Complete(A, L, P) abort$/;"	f
vista#util#EnsureRunOnSourceFile	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! vista#util#EnsureRunOnSourceFile(Run, ...) abort$/;"	f
vista#util#JobStop	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! vista#util#JobStop(jobid) abort$/;"	f
vista#util#Join	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! vista#util#Join(...) abort$/;"	f
vista#util#LowerIndentLineNr	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! vista#util#LowerIndentLineNr() abort$/;"	f
vista#util#MaxLen	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! vista#util#MaxLen() abort$/;"	f
vista#util#Retriving	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! vista#util#Retriving(executive) abort$/;"	f
vista#util#SetBufline	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! vista#util#SetBufline(bufnr, lines) abort$/;"	f
vista#util#ToCamelCase	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! vista#util#ToCamelCase(s) abort$/;"	f
vista#util#Trim	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! vista#util#Trim(str) abort$/;"	f
vista#util#Truncate	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! vista#util#Truncate(msg) abort$/;"	f
vista#util#Warning	.config/nvim/plugged/vista.vim/autoload/vista/util.vim	/^function! vista#util#Warning(msg) abort$/;"	f
vista#viewer#Display	.config/nvim/plugged/vista.vim/autoload/vista/viewer.vim	/^function! vista#viewer#Display(data) abort$/;"	f
vista#viewer#Render	.config/nvim/plugged/vista.vim/autoload/vista/viewer.vim	/^function! vista#viewer#Render(data) abort$/;"	f
vista#viewer#prefixes	.config/nvim/plugged/vista.vim/autoload/vista/viewer.vim	/^function! vista#viewer#prefixes() abort$/;"	f
visual_end	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    visual_end: int = 0$/;"	v	class:Context
visual_start	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    visual_start: int = 0$/;"	v	class:Context
vital	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^augroup vital-hit-a-hint-motion-default-highlight$/;"	a
vital#	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion.vim	/^function! vital#{s:_plugin_name}#new() abort$/;"	f
vital#	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! vital#{s:plugin_name}#import(...) abort$/;"	f
vital#	.config/nvim/plugged/vim-easymotion/autoload/vital/easymotion.vim	/^function! vital#{s:plugin_name}#new() abort$/;"	f
vital#_easymotion#Data#Dict#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Dict.vim	/^  function! vital#_easymotion#Data#Dict#import() abort$/;"	f
vital#_easymotion#Data#List#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/List.vim	/^  function! vital#_easymotion#Data#List#import() abort$/;"	f
vital#_easymotion#Data#Set#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Data/Set.vim	/^  function! vital#_easymotion#Data#Set#import() abort$/;"	f
vital#_easymotion#HitAHint#Hint#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Hint.vim	/^  function! vital#_easymotion#HitAHint#Hint#import() abort$/;"	f
vital#_easymotion#HitAHint#Motion#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/HitAHint/Motion.vim	/^  function! vital#_easymotion#HitAHint#Motion#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Base#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Base.vim	/^  function! vital#_easymotion#Over#Commandline#Base#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#BufferComplete#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/BufferComplete.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#BufferComplete#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#Cancel#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Cancel.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#Cancel#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#CursorMove#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/CursorMove.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#CursorMove#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#Delete#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Delete.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#Delete#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#Doautocmd#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Doautocmd.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#Doautocmd#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#DrawCommandline#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/DrawCommandline.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#DrawCommandline#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#ExceptionExit#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionExit.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#ExceptionExit#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#ExceptionMessage#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/ExceptionMessage.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#ExceptionMessage#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#Exit#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Exit.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#Exit#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#History#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/History.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#History#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#InsertRegister#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/InsertRegister.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#InsertRegister#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#KeyMapping#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/KeyMapping.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#KeyMapping#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#NoInsert#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/NoInsert.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#NoInsert#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#Paste#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Paste.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#Paste#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#Redraw#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules/Redraw.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#Redraw#import() abort$/;"	f
vital#_easymotion#Over#Commandline#Modules#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Commandline/Modules.vim	/^  function! vital#_easymotion#Over#Commandline#Modules#import() abort$/;"	f
vital#_easymotion#Over#Exception#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Exception.vim	/^  function! vital#_easymotion#Over#Exception#import() abort$/;"	f
vital#_easymotion#Over#Input#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Input.vim	/^  function! vital#_easymotion#Over#Input#import() abort$/;"	f
vital#_easymotion#Over#Keymapping#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Keymapping.vim	/^  function! vital#_easymotion#Over#Keymapping#import() abort$/;"	f
vital#_easymotion#Over#Signals#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/Signals.vim	/^  function! vital#_easymotion#Over#Signals#import() abort$/;"	f
vital#_easymotion#Over#String#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Over/String.vim	/^  function! vital#_easymotion#Over#String#import() abort$/;"	f
vital#_easymotion#Palette#Capture#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Capture.vim	/^  function! vital#_easymotion#Palette#Capture#import() abort$/;"	f
vital#_easymotion#Palette#Highlight#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Highlight.vim	/^  function! vital#_easymotion#Palette#Highlight#import() abort$/;"	f
vital#_easymotion#Palette#Keymapping#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Palette/Keymapping.vim	/^  function! vital#_easymotion#Palette#Keymapping#import() abort$/;"	f
vital#_easymotion#Prelude#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Prelude.vim	/^  function! vital#_easymotion#Prelude#import() abort$/;"	f
vital#_easymotion#Vim#Buffer#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Buffer.vim	/^  function! vital#_easymotion#Vim#Buffer#import() abort$/;"	f
vital#_easymotion#Vim#Guard#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Guard.vim	/^  function! vital#_easymotion#Vim#Guard#import() abort$/;"	f
vital#_easymotion#Vim#Message#import	.config/nvim/plugged/vim-easymotion/autoload/vital/_easymotion/Vim/Message.vim	/^  function! vital#_easymotion#Vim#Message#import() abort$/;"	f
vital#of	.config/nvim/plugged/vim-easymotion/autoload/vital.vim	/^function! vital#of(name) abort$/;"	f
vmove	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) vmove(o int, allowCycle bool) {$/;"	f	struct:fzf.Terminal
void	.vim/plugged/coc.nvim/src/language-client/client.ts	/^          let didChange: (event: DidChangeTextDocumentParams) => void = event => {$/;"	v
void	.vim/plugged/coc.nvim/src/list/mappings.ts	/^  private insertMappings: Map<string, () => void | Promise<void>> = new Map()$/;"	p	class:Mappings
vscode-languageserver	.config/nvim/plugged/coc.nvim/package.json	/^    "vscode-languageserver": "5.3.0-next.8"$/;"	s	object:devDependencies
vscode-languageserver	.vim/plugged/coc.nvim/package.json	/^    "vscode-languageserver": "5.3.0-next.8"$/;"	s	object:devDependencies
vscode-languageserver-protocol	.config/nvim/plugged/coc.nvim/package.json	/^    "vscode-languageserver-protocol": "3.15.0-next.6",$/;"	s	object:dependencies
vscode-languageserver-protocol	.vim/plugged/coc.nvim/package.json	/^    "vscode-languageserver-protocol": "3.15.0-next.6",$/;"	s	object:dependencies
vscode-languageserver-types	.config/nvim/plugged/coc.nvim/package.json	/^    "vscode-languageserver-types": "3.15.0-next.2",$/;"	s	object:dependencies
vscode-languageserver-types	.vim/plugged/coc.nvim/package.json	/^    "vscode-languageserver-types": "3.15.0-next.2",$/;"	s	object:dependencies
vscode-uri	.config/nvim/plugged/coc.nvim/package.json	/^    "vscode-uri": "^2.0.2",$/;"	s	object:dependencies
vscode-uri	.vim/plugged/coc.nvim/package.json	/^    "vscode-uri": "^2.0.2",$/;"	s	object:dependencies
vscode_languageserver_1	.vim/plugged/coc.nvim/src/__tests__/client/server/testInitializeResult.js	/^const vscode_languageserver_1 = require("vscode-languageserver");$/;"	C
vset	.vim/plugged/fzf/src/terminal.go	/^func (t *Terminal) vset(o int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
w	.config/nvim/plugged/vim-easymotion/t/easymotion_spec.vim	/^        map w <Plug>(easymotion-w)$/;"	m
w	.config/nvim/plugged/vim-easymotion/t/operator_pending_spec.vim	/^        omap w <Plug>(easymotion-w)$/;"	m
w	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  w = 119,$/;"	e	enum:CharCode
wait	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public wait(ms = 30): Promise<void> {$/;"	m	class:Helper
wait	.vim/plugged/coc.nvim/src/__tests__/modules/attach.test.ts	/^function wait(ms: number): Promise<void> {$/;"	f
wait	.vim/plugged/coc.nvim/src/__tests__/modules/watchman.test.ts	/^function wait(ms: number): Promise<any> {$/;"	f
wait	.vim/plugged/coc.nvim/src/list/worker.ts	/^        let wait = Math.max(Math.min(Math.floor(this.length \/ 200), 200), 50)$/;"	v
wait	.vim/plugged/coc.nvim/src/util/index.ts	/^export function wait(ms: number): Promise<any> {$/;"	f
wait	.vim/plugged/fzf/test/test_go.rb	/^def wait$/;"	f
waitFloat	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async waitFloat(): Promise<number> {$/;"	m	class:Helper
waitForEnterForFilteredHints	vimium-options.json	/^  "waitForEnterForFilteredHints": true,$/;"	b
waitPopup	.vim/plugged/coc.nvim/src/__tests__/helper.ts	/^  public async waitPopup(): Promise<void> {$/;"	m	class:Helper
waitTime	.vim/plugged/coc.nvim/src/languages.ts	/^    let waitTime = Math.min(Math.max(50, this.completeConfig.waitTime), 300)$/;"	v
waitTime	.vim/plugged/coc.nvim/src/languages.ts	/^  waitTime: number$/;"	p	interface:CompleteConfig
waitUntil	.vim/plugged/coc.nvim/src/types.ts	/^  waitUntil?(thenable: Thenable<TextEdit[] | any>): void$/;"	m	interface:TextDocumentWillSaveEvent
wait_for_stop	.vim/plugged/ghost-text.vim/python3/server_thread.py	/^        async def wait_for_stop(loop):$/;"	f	member:ServerThread._threaded_function	file:
wait_until_file_exists	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^def wait_until_file_exists(file_path, times=None, interval=0.01):$/;"	f
wakeup	.vim/plugged/ghost-text.vim/python3/test/test_http_server.py	/^async def wakeup():$/;"	f
wakeup	.vim/plugged/ghost-text.vim/python3/test/test_websocket_server.py	/^async def wakeup():$/;"	f
walk	.vim/plugged/coc.nvim/src/snippets/parser.ts	/^function walk(marker: Marker[], visitor: (marker: Marker) => boolean): void {$/;"	f
walk	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^def walk(fn, obj):$/;"	f
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:MatchIsTooCheap
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:MultiLine
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestCheapDelete
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestCommonCharacters
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestCrash
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestGuessing_BackspaceOneChar
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestGuessing_DeleteOneChar
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestGuessing_InsertOneChar
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestGuessing_InsertOneChar1
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestLotsaNewlines
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestNoSubstring
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestRealLife
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestRealLife1
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestUltiSnipsProblem
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestWithNewline
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ()$/;"	v	class:TestAllMatch
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ()$/;"	v	class:TestEmptyString
wanted	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ()$/;"	v	class:TestGuessing_Noop0
wanted	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = ' :latex:`Hello`World'$/;"	v	class:Anon_NoTrigger_FirstCharOfLine
wanted	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = '123 simple 123 expand 123 456'$/;"	v	class:Anon_Trigger_Multi
wanted	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = ':latex:`Hello`World'$/;"	v	class:Anon_NoTrigger_BeginningOfLine
wanted	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = 'abc simple expand'$/;"	v	class:Anon_NoTrigger_AfterSpace
wanted	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = 'abcsimple 123 expand 123 456'$/;"	v	class:Anon_NoTrigger_Multi
wanted	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = 'abcsimple expand'$/;"	v	class:Anon_NoTrigger_Simple
wanted	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = 'simple expand'$/;"	v	class:Anon_Trigger_Opts
wanted	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = 'simple expand'$/;"	v	class:Anon_Trigger_Simple
wanted	.config/nvim/plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = 'simple expand\\nabc' + EX$/;"	v	class:Anon_Trigger_Twice
wanted	.config/nvim/plugged/ultisnips/test/test_Autocommands.py	/^    wanted = '[ [ bar ] ] done M1U1'$/;"	v	class:Autocommands
wanted	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    wanted = 'abc'$/;"	v	class:Autotrigger_WillProduceNoExceptionWithVimLowerThan214
wanted	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    wanted = 'autotriggered'$/;"	v	class:Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne
wanted	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    wanted = 'autotriggered'$/;"	v	class:Autotrigger_CanMatchSimpleTrigger
wanted	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    wanted = 'autotriggered\\na'$/;"	v	class:Autotrigger_CanMatchContext
wanted	.config/nvim/plugged/ultisnips/test/test_Autotrigger.py	/^    wanted = 'if var == nil: pass\\n='$/;"	v	class:Autotrigger_CanMatchPreviouslySelectedPlaceholder
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:MultiLineDefault_BS
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:MultiLineDefault_Jump
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:MultiLineDefault_Type
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_EndNL
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_EndStartNL
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_ExtraNL_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_JustNL
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_NLInsideStuffBehind
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_NotEndStartNL
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_StartNL
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = """Hello \\t \\nGoodbye"""$/;"	v	class:LeaveTrailingWhitespace
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = """Hello\\nGoodbye"""$/;"	v	class:RemoveTrailingWhitespace
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = """\\tnext line\\n\\n\\tshould be empty"""$/;"	v	class:TrimSpacesAtEndOfLines
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = """\\tnext line\\n\\t\\n\\tshould be empty"""$/;"	v	class:DoNotTrimSpacesAtEndOfLinesByDefault
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = "Expand me'!"$/;"	v	class:Snippet_With_SingleQuote
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = "Expand me'!"$/;"	v	class:Snippet_With_SingleQuote_List
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = "Expand me\\"!"$/;"	v	class:Snippet_With_DoubleQuote
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = "Expand me\\"!"$/;"	v	class:Snippet_With_DoubleQuote_List
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = 'Expand meü!'$/;"	v	class:Snippet_With_Umlauts
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = 'Expand meü!'$/;"	v	class:Snippet_With_Umlauts_List
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = 'oouu success b'$/;"	v	class:NoUmlautsBeforeTriggerAndCharsAfter
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = 'te üü hello üü hello'$/;"	v	class:Snippet_With_Umlauts_Mirrors
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = 'te üü hüüll üü aaaaa'$/;"	v	class:Snippet_With_Umlauts_Python
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = 'te üü more text üü helloßß\\nüüüüend'$/;"	v	class:Snippet_With_Umlauts_OverwriteFirst
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = 'te üü world üü helloßß\\nüüüüend'$/;"	v	class:Snippet_With_Umlauts_OverwriteNone
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = 'te üü world üü more textßß\\nüüüüend'$/;"	v	class:Snippet_With_Umlauts_OverwriteSecond
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = 'te üüüüüßßßßmore text'$/;"	v	class:Snippet_With_Umlauts_TypeOn
wanted	.config/nvim/plugged/ultisnips/test/test_Chars.py	/^    wanted = 'ööuu success b'$/;"	v	class:UmlautsBeforeTriggerAndCharsAfter
wanted	.config/nvim/plugged/ultisnips/test/test_Completion.py	/^    wanted = 'superkallifragilistik\\nsuperkallifragilistik some more ' \\$/;"	v	class:Completion_SimpleExample_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Completion.py	/^    wanted = COMPLETION_OPTIONS + 'completion1 foo'$/;"	v	class:Completion_ForwardsJumpWithoutCOMPL_ACCEPT
wanted	.config/nvim/plugged/ultisnips/test/test_Completion.py	/^    wanted = COMPLETION_OPTIONS + 'foo completion1'$/;"	v	class:Completion_BackwardsJumpWithoutCOMPL_ACCEPT
wanted	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = "(2, 1)"$/;"	v	class:ContextSnippets_CursorIsZeroBased
wanted	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = "1 1"$/;"	v	class:ContextSnippets_ContextIsClearedBeforeExpand
wanted	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = "Yes No"$/;"	v	class:ContextSnippets_ContextHasAccessToVisual
wanted	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = 'abc'$/;"	v	class:ContextSnippets_ExpandOnTrue
wanted	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = 'abc'$/;"	v	class:ContextSnippets_Header_ExpandOnTrue
wanted	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = 'abc'$/;"	v	class:ContextSnippets_SimpleSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = 'b'$/;"	v	class:ContextSnippets_PriorityKeyword
wanted	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = 'e' + EX$/;"	v	class:ContextSnippets_ReportError
wanted	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = 'e' + EX$/;"	v	class:ContextSnippets_ReportErrorOnIndexOutOfRange
wanted	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = '{ < a > }'$/;"	v	class:ContextSnippets_UseContext
wanted	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = keys$/;"	v	class:ContextSnippets_DoNotExpandOnFalse
wanted	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = keys$/;"	v	class:ContextSnippets_Header_DoNotExpandOnFalse
wanted	.config/nvim/plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = r"""$/;"	v	class:ContextSnippets_SnippetPriority
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = ''$/;"	v	class:Undo_CompletelyUndoSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = '''\\$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove2
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'AA BBB'$/;"	v	class:Backspace_TabStop_NotZero
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'AA BBB'$/;"	v	class:Backspace_TabStop_Zero
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'a b c\\na\\nb\\nc\\n\\nshallnot'$/;"	v	class:JumpForward_DefSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'aaaaa()3333'$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove1
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'end'$/;"	v	class:DeleteCurrentTabStop1_JumpBack
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'first line\\n\\n\\ntest\\n\\n\\nthird line'$/;"	v	class:Undo_RemoveWholeSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'hello upsi Hello\\naaa upsi bbb\\nWorld'$/;"	v	class:Undo_RemoveEditInTabstop
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'hello'$/;"	v	class:DeleteLastTwoLinesInSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'hello\\nend'$/;"	v	class:DeleteCurrentTabStop2_JumpBack
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'hello\\nendworld'$/;"	v	class:DeleteCurrentTabStop3_JumpAround
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'if :\\n\\t'$/;"	v	class:Undo_ChangesInPlaceholder
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'if a: test'$/;"	v	class:DoNotCrashOnUndoAndJumpInNestedSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'if:\\n\\t'$/;"	v	class:Undo_RemoveOneSnippetByTime2
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'if:\\n\\ti'$/;"	v	class:Undo_RemoveOneSnippetByTime
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'test'$/;"	v	class:DeleteSnippetInsertion1
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'test'$/;"	v	class:Undo_RemoveMultilineSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_Editing.py	/^    wanted = 'world'$/;"	v	class:DeleteSnippetInsertion0
wanted	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    wanted = 'Hallo Welt!'$/;"	v	class:SimpleExpand_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    wanted = 'Hallo Welt!\\nHallo We'$/;"	v	class:SimpleExpandNewLineAndBackspae_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    wanted = 'Hallo Welt!\\nHallo Welt!'$/;"	v	class:SimpleExpandTwice_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    wanted = 'Hallo Welt!and again'$/;"	v	class:SimpleExpandTypeAfterExpand_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    wanted = 'Hallo Welt\\n\\nAnd more'$/;"	v	class:SimpleExpandEndingWithNewline_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    wanted = 'SimpleText' + EX$/;"	v	class:ExitSnippetModeAfterTabstopZero
wanted	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    wanted = 'Wie Hallo Welt! gehts'$/;"	v	class:ExpandInTheMiddleOfLine_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    wanted = 'Wie Hallo Welt!\\nUnd Wie gehts gehts'$/;"	v	class:MultilineExpand_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    wanted = 'Wie Hallo Welt!\\nUnd Wie gehtsHuiui! gehts'$/;"	v	class:MultilineExpandTestTyping_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    wanted = 'hallo ' + EX$/;"	v	class:DoNotExpandAfterSpace_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Expand.py	/^    wanted = 'na du Hallo Welt!and blub'$/;"	v	class:SimpleExpandTypeAndDelete_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    wanted = '  world hello;blub'$/;"	v	class:Bug1251994
wanted	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    wanted = '\\nblah\\nhello world '$/;"	v	class:RetainsTheUnnamedRegister_ButOnlyOnce
wanted	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    wanted = '\\t\\t\\tpadding: 2px'$/;"	v	class:VirtualEdit
wanted	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    wanted = '\\tfoo'$/;"	v	class:ShiftWidthZero
wanted	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    wanted = 'hello'$/;"	v	class:NonUnicodeDataInUnnamedRegister
wanted	.config/nvim/plugged/ultisnips/test/test_Fixes.py	/^    wanted = 'yank HELLO world yank'$/;"	v	class:RetainsTheUnnamedRegister
wanted	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^    wanted = """Hello {{{$/;"	v	class:FoldingEnabled_SnippetWithFold_ExpectNoFolding
wanted	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^    wanted = '# hi  {{{\\n\\n# End: hi  }}}'$/;"	v	class:FoldOverwrite_Simple_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^    wanted = '# hi  {{{\\n\\n# End: hi  }}}'$/;"	v	class:Fold_DeleteMiddleLine_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Folding.py	/^    wanted = 'package c03;\\nsub junk {}\\n1;'$/;"	v	class:PerlSyntaxFold
wanted	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    wanted = '    for\\n        blahHui'$/;"	v	class:ProperIndenting_SimpleCase_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    wanted = '    hui\\n    blah'$/;"	v	class:ProperIndenting_AutoIndentAndNewline_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    wanted = '    huiblah'$/;"	v	class:ProperIndenting_SingleLineNoReindenting_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    wanted = '   Blaahblah \\t\\t  '$/;"	v	class:RecTabStopsWithExpandtab_SimpleExample_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    wanted = '   Something\\n        Hallo'$/;"	v	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    wanted = '#include <cstdlib>'$/;"	v	class:ProperIndenting_FirstLineInFileComplete_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    wanted = '#include <foo>'$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    wanted = 'This is a longer\\ntext that should\\nwrap as\\nformatoptions are\\nenabled\\n' + /;"	v	class:FOSimple_Break_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    wanted = \\$/;"	v	class:FOTextAfter_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    wanted = \\$/;"	v	class:FOTextBeforeAndAfter_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Format.py	/^    wanted = \\$/;"	v	class:FOWrapOnLongWord_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """        hi World End"""$/;"	v	class:PythonCode_IndentProblem
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """    hi$/;"	v	class:PythonCode_IndentEtSwOffset
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """   hi$/;"	v	class:PythonCode_IndentEtSw
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """   hi$/;"	v	class:PythonCode_IndentNoetSwTs
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_MultiAppendShift
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_MultiAppendShiftMethods
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_MultiAppendSimpleIndent
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_ResetIndent
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_SimpleMkline
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """first second (placeholder: first second (placeholder: ))$/;"	v	class:PythonVisual_HasAccessToZeroPlaceholders
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """first second (placeholder: first)$/;"	v	class:PythonVisual_HasAccessToSelectedPlaceholders
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """hi no End"""$/;"	v	class:PythonCode_OptNoExists
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """hi nothing test End"""$/;"	v	class:PythonCode_Locals
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """hi yes End"""$/;"	v	class:PythonCode_OptExists
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "bl-\\n\\tah, bah"$/;"	v	class:PythonCode_CanOverwriteTabstop
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = '    hi 4 End'$/;"	v	class:TabStop_VimScriptInterpolation_SimpleExample
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = '    start b isbigger a end'$/;"	v	class:PythonCodeOld_IndentedMultiline
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = '    start b isbigger a end'$/;"	v	class:PythonCode_MultilineIndented
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = '##########\\nHallo Welt'$/;"	v	class:PythonCodeOld_ReferencePlaceholderBefore
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = '##########\\nHallo Welt'$/;"	v	class:PythonCode_ReferencePlaceholderBefore
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = '$hi'$/;"	v	class:TabStop_Shell_TestEscapedChars_Overwrite
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'Hallo now Hallo Welt endand more'$/;"	v	class:TabStop_Shell_ShebangPython
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'Hallo now fromecho endand more'$/;"	v	class:TabStop_Shell_InDefValue_Leave
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'Hallo overwrite endand more'$/;"	v	class:TabStop_Shell_InDefValue_Overwrite
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'OKAYhokayoOKAY'$/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteSecond
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'aaa'$/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteFirst
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'blah'$/;"	v	class:TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'egal Hallo End'$/;"	v	class:PythonCodeOld_TransformedBeforeMultiLine
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'egal Hallo End'$/;"	v	class:PythonCode_TransformedBeforeMultiLine
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'h5b'$/;"	v	class:Python_WeirdScoping_Error
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'hVhello\\nnice\\nworld\\nb'$/;"	v	class:PythonVisual_LineSelect_Simple
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'hbabc'$/;"	v	class:PythonVisual_NoVisualSelection_Ignore
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'hi Hallo End'$/;"	v	class:PythonCodeOld_SimpleExample
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'hi Hallo End'$/;"	v	class:PythonCode_SimpleExample
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'hi Hallo1\\nHallo2 End'$/;"	v	class:PythonCode_SimpleAppend
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'hi Hallo1\\nHallo2\\nHallo3 End'$/;"	v	class:PythonCode_MultiAppend
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'hi New End'$/;"	v	class:PythonCode_UseNewOverOld
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'hi hallo you!and more'$/;"	v	class:TabStop_Shell_SimpleExample
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'hi hallo\\nWeiterand more'$/;"	v	class:TabStop_Shell_TextInNextLine
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'hi höüäh you!and more'$/;"	v	class:TabStop_Shell_WithUmlauts
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'hi' + 100 * 'a' + 'endups'$/;"	v	class:PythonCode_LongerTextThanSource_Chars
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'hi' + 100 * 'a' + 100 * '\\n' + 100 * 'a' + 'endups'$/;"	v	class:PythonCode_LongerTextThanSource_MultiLine
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'hiEnd'$/;"	v	class:PythonCode_SimpleExample_ReturnValueIsEmptyString
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'ho ho.blah End'$/;"	v	class:PythonCodeOld_ReferencePlaceholderAfter
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'ho ho.blah End'$/;"	v	class:PythonCode_ReferencePlaceholder
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'hvblablubb'$/;"	v	class:PythonVisual_SelectOneWord
wanted	.config/nvim/plugged/ultisnips/test/test_Interpolation.py	/^    wanted = 'ups egal hi hi'$/;"	v	class:PythonCode_TrickyReferences
wanted	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^    wanted = ' BLAAH'$/;"	v	class:ListAllAvailable_SpaceInFront_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^    wanted = 'BLAAH'$/;"	v	class:ListAllAvailable_NothingTyped_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^    wanted = 'hallo BLAAH'$/;"	v	class:ListAllAvailable_testtyped_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^    wanted = 'hallo TEST ONE'$/;"	v	class:ListAllAvailable_testtypedSecondOpt_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^    wanted = 'hallo qualleHi'$/;"	v	class:ListAllAvailable_NonDefined_NoExpectionShouldBeRaised
wanted	.config/nvim/plugged/ultisnips/test/test_ListSnippets.py	/^    wanted = '} BLAAH'$/;"	v	class:ListAllAvailable_BraceInFront_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = """for(size_t a_variable = 0; a_variable < 100; a_variable *= 2)$/;"	v	class:MirrorRealLifeExample_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = '    hallo\\nhallo\\nahallob\\nhallo\\ntest hallo mich'$/;"	v	class:SimpleMirrorMultilineMany_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ObenVorne hallo welt ObenHinten\\nVorne hallo welt Hinten'$/;"	v	class:TextTabStopAllSurrounded_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'Vorne hallo test Hinten\\nhallo test'$/;"	v	class:TextTabStopTextSurroundedTab_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'Vorne hallo\\nhallo'$/;"	v	class:TextTabStopTextBeforeTab_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'a a a'$/;"	v	class:MirrorBeforeTabstopOverwrite_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ha blah hi hulla end hu hi hub hulla'$/;"	v	class:TabstopWithMirrorManyFromAll_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ha blub blub'$/;"	v	class:TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ha blub blub.h'$/;"	v	class:TabstopWithMirrorInDefaultNoType_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ha defa\\ndefa'$/;"	v	class:SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ha default value default value\\nanother: default value mirror'$/;"	v	class:SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ha stdin do snap stdin.h do snap'$/;"	v	class:TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ha stdin overwritten'$/;"	v	class:TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ha stdin overwritten'$/;"	v	class:TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ha stdin snip stdin.h snip'$/;"	v	class:TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ha stdin stdin.h stdin.c\\ntest stdin'$/;"	v	class:TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ha stdin stdinend'$/;"	v	class:TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ha world world\\nanother: world mirror'$/;"	v	class:SimpleTabstopWithDefaultComplexType_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ha world\\nworld'$/;"	v	class:SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hal\\nhal'$/;"	v	class:SimpleMirrorDelete_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'halhups\\nhalhups'$/;"	v	class:SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo Du\\nAch Blah\\nhallo Du\\nAch Blah\\nhallo Du\\nAch Blah'$/;"	v	class:MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo Du\\nHi\\n\\nhallo Du\\nHi\\n\\nhallo Du\\nHi'$/;"	v	class:MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo Du\\nHi\\nhallo Du\\nHi\\nhallo Du\\nHi'$/;"	v	class:MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo Hinten\\nhallo'$/;"	v	class:TextTabStopTextAfterTab_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo du hallo du hallo du hallo du'$/;"	v	class:SimpleMirrorSameLineMany_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo du\\nwie gehts hallo du\\nwie gehts hallo du\\nwie gehts' \\$/;"	v	class:SimpleMirrorSameLineManyMultiline_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo foo hallo foo'$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo foo hallo foo'$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo hallo'$/;"	v	class:SimpleMirrorSameLine_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo noauch ahiuch_end'$/;"	v	class:Mirror_TestKill_InsertBeginning_Kill
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo noauch auchih_end'$/;"	v	class:Mirror_TestKill_InsertEnd_Kill
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo noauch hinoauch_end'$/;"	v	class:Mirror_TestKill_InsertBefore_NoKill
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo noauch noauchab_end'$/;"	v	class:Mirror_TestKill_InsertAfter_NoKill
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo welt\\nVorne hallo welt Hinten'$/;"	v	class:TextTabStopSurroundMirror_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo weltelt '$/;"	v	class:Mirror_TestKillTabstop_Kill
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo\\nVorne hallo'$/;"	v	class:TextTabStopTextBeforeMirror_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo\\nagain\\nhallo\\nagain'$/;"	v	class:TextTabStopSimpleMirrorMultilineMirrorInFront_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo\\nhallo Hinten'$/;"	v	class:TextTabStopAfterMirror_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'hallo\\nhallo'$/;"	v	class:TextTabStopSimpleMirrorMultiline_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'this is it this is it this is it'$/;"	v	class:MirrorBeforeTabstopLeave_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Mirror.py	/^    wanted = 'ups hallo hallo blah'$/;"	v	class:SimpleMirrorSameLine_InText_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    wanted = '<tr>\\n\\t<th>blah<\/th>\\n<\/tr>\\nend'$/;"	v	class:CursorMovement_BS_InEditMode
wanted	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    wanted = 'hello tab blub tab ' + JF + 'hallothis'$/;"	v	class:IMMoving_ExitWhenOutsideRight_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    wanted = 'hello tab hallo tab this'$/;"	v	class:IMMoving_NoExitingEventAtEnd_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    wanted = 'hello tab hallo tab this'$/;"	v	class:IMMoving_NoExiting_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    wanted = 'hello tab hallo this'$/;"	v	class:IMMoving_NotExitingWhenBarelyOutsideLeft_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    wanted = 'hello tab\\nblub this\\n' + JF + 'testhallo'$/;"	v	class:IMMoving_ExitWhenOutsideBelow_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    wanted = 'hello' + JF + 'hallo tab blub this'$/;"	v	class:IMMoving_ExitWhenOutsideLeft_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    wanted = 'text'$/;"	v	class:IMMoving_CursorsKeys_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    wanted = 'thhallo\\nweltis thhallo\\nweltis'$/;"	v	class:IMMoving_AcceptInputWhenMoved_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    wanted = 'this is something\\nvery nice\\nnot ' \\$/;"	v	class:CursorMovement_Multiline_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Movement.py	/^    wanted = JF + 'hallo\\nhello tab\\nblub this'$/;"	v	class:IMMoving_ExitWhenOutsideAbove_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^    wanted = 'Case1'$/;"	v	class:Multiple_SimpleCaseSelectFirst_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^    wanted = 'Case2'$/;"	v	class:Multiple_SimpleCaseSelectSecond_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^    wanted = 'Case2'$/;"	v	class:Multiple_SimpleCaseSelectTooHigh_ESelectLast
wanted	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^    wanted = 'testhi'$/;"	v	class:Multiple_ManySnippetsOneTrigger_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^    wanted = 'testhi'$/;"	v	class:Multiple_SimpleCaseEscapeOut_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_MultipleMatches.py	/^    wanted = 'testhi'$/;"	v	class:Multiple_SimpleCaseSelectZero_EEscape
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'This is a test snippet!'$/;"	v	class:ParseSnippets_SimpleSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'This is a test.'$/;"	v	class:ParseSnippets_MultiWord_Quotes
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'This is a test.'$/;"	v	class:ParseSnippets_MultiWord_Simple
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'This is a test.'$/;"	v	class:ParseSnippets_MultiWord_WithQuotes
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'This is another test.'$/;"	v	class:ParseSnippets_MultiWord_Description
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'This is yet another test.'$/;"	v	class:ParseSnippets_MultiWord_Description_Option
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'abc az test'$/;"	v	class:ParseSnippets_MultiWord_RE1
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'foo-bar test bar\\t\\nfoo-bar test'$/;"	v	class:ParseSnippets_MultiWord_RE2
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 're-test'$/;"	v	class:ParseSnippets_MultiWord_RE3
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'testsnip' + EX$/;"	v	class:ParseSnippets_ClearAll
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'testsnip' + EX$/;"	v	class:ParseSnippets_ExtendsWithoutFiletype
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'testsnip' + EX$/;"	v	class:ParseSnippets_InvalidPriorityLine
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'testsnip' + EX$/;"	v	class:ParseSnippets_InvalidPriorityLine1
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'testsnip' + EX$/;"	v	class:ParseSnippets_MissingEndSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'testsnip' + EX$/;"	v	class:ParseSnippets_UnknownDirective
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'toclear' + EX + '\\n' + 'This is a test.'$/;"	v	class:ParseSnippets_ClearOne
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'toclear' + EX + '\\n' + 'testsnip' + EX$/;"	v	class:ParseSnippets_ClearTwo
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'x a bob b y\\nx a jon b y'$/;"	v	class:ParseSnippets_Global_Python
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = 'x first a bob b y'$/;"	v	class:ParseSnippets_Global_Local_Python
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_MultiWord_NoContainer
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_MultiWord_UnmatchedContainer
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippetContext
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippetLocation
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippetPostAction
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippetPreAction
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintPythonStacktrace
wanted	.config/nvim/plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintPythonStacktraceMultiline
wanted	.config/nvim/plugged/ultisnips/test/test_Plugin.py	/^    wanted = 'longtextlongtext\\nlongtextlongtext\\nHello'$/;"	v	class:Plugin_SuperTab_SimpleTest
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = 'A A AB B C CD D DE E B hi'$/;"	v	class:RecTabStops_ExpandedInZeroTSSecondTime_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = 'A A C CD D DE E B again B hi'$/;"	v	class:RecTabStops_ExpandedInZeroTSTwice_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = 'A C CD D DE E B hi'$/;"	v	class:RecTabStops_ExpandedInZeroTS_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = 'A C CD D DE E B'$/;"	v	class:RecTabStops_OuterOnlyWithZeroTS_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = 'A C CD D DE E B'$/;"	v	class:RecTabStops_OuterOnlyWithZero_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = 'M START\\n    M START\\n        hi\\n    M END -> hallo\\n' \\$/;"	v	class:RecTabStops_InNewlineMultilineWithNonZeroTS_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = 'M START\\n    M START\\n        hi\\n    M END\\nM END'$/;"	v	class:RecTabStops_InNewlineMultilineWithIndent_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = 'M START\\n    M START\\n    hi\\n    M END\\nM END'$/;"	v	class:RecTabStops_InNewlineManualIndent_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = 'M START\\n    hallo M START\\n    hi\\n    M END\\nM END'$/;"	v	class:RecTabStops_InNewlineManualIndentTextInFront_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = 'M START\\nM START\\n\\nM END\\nM END'$/;"	v	class:RecTabStops_InNewlineMultiline_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ ASnip Hallo ASnip Hi ASnipendone two ] ASnip Hallo ASnip Hi ASnipendonetotalend'$/;"	v	class:RecTabStops_MirrorInnerSnippet_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ JST  JSThi ]end'$/;"	v	class:RecTabStops_InnerWOTabStopTwice_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ JST JSThi  two ]end'$/;"	v	class:RecTabStops_InnerWOTabStopTwiceDirectly_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ Just some Texthi  two ]end'$/;"	v	class:RecTabStops_InnerWOTabStop_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ [ [ a sec ] hallo ]ups world ]end'$/;"	v	class:RecTabStops_LeavingInnerInner_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ [ [ a sec ] sec ] hallo ]end'$/;"	v	class:RecTabStops_LeavingInnerInnerTwo_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ [ a hallo ]ups world ]end'$/;"	v	class:RecTabStops_BarelyNotLeavingInner_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ [ a sec ] hallo ]world'$/;"	v	class:RecTabStops_LeavingInner_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ [ hello  sec ]  world ]end'$/;"	v	class:RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ [ hello  world ]  sec ]end'$/;"	v	class:RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ [ hello  world ]ups  end ]'$/;"	v	class:RecTabStops_SimpleCase_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ [ one three three two ] four ]end'$/;"	v	class:RecTabStops_MirroredZeroTS_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ [ one three two ] four ]end'$/;"	v	class:RecTabStops_ZeroTSisNothingSpecial_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ hello [ hi  two ]ups  three ]end'$/;"	v	class:RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ hello\\n[ hi  two ]ups  three ]end'$/;"	v	class:RecTabStops_InNewlineInTabstop_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = '[ hello\\nhello again [ hi  two ]ups  three ]end'$/;"	v	class:RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = 'form_for user, namespace: some_namespace, html: {(id: |class: |title:  )d: '$/;"	v	class:RecTabStops_ChildTriggerContainsParentTextObjects
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = r"\\vec{\\frac{a}\\frac{aa}cc{two}{b}}hello \\frac{one}world{two}"$/;"	v	class:RecTabsStops_TypeInZero_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = r"_hello _world _end"$/;"	v	class:RecTabsStops_TypeInZero2_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Recursive.py	/^    wanted = r"oneoneexplicit zerotwotwo"$/;"	v	class:RecTabsStops_BackspaceZero_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    wanted = """for ($k = 0; $k < count; $k++) {$/;"	v	class:ExclusiveSelection_RealWorldCase_Test
wanted	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    wanted = """for ($k = 0; $k < count; $k++) {$/;"	v	class:OldSelection_RealWorldCase_Test
wanted	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    wanted = 'Hello'$/;"	v	class:SelectModeMappings_BufferLocalMappings_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    wanted = 'Hello'$/;"	v	class:SelectModeMappings_IgnoreMappings_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    wanted = 'Hello'$/;"	v	class:SelectModeMappings_RemoveBeforeSelecting_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    wanted = 'Hello'$/;"	v	class:_SelectModeMappings
wanted	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    wanted = 'huiw ui'$/;"	v	class:ExclusiveSelection_SimpleTabstop_Test
wanted	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    wanted = 'huiw ui'$/;"	v	class:OldSelection_SimpleTabstop_Test
wanted	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    wanted = 'xello'$/;"	v	class:SelectModeMappings_DisableRemoveBeforeSelecting_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    wanted = 'xello'$/;"	v	class:SelectModeMappings_IgnoreMappings1_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Selection.py	/^    wanted = 'xello'$/;"	v	class:SelectModeMappings_IgnoreMappings2_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = """<option value="some">not<\/option>ende"""$/;"	v	class:snipMate_TestMirrorsInPlaceholders_Overwrite
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = """<option value="some">some<\/option>ende"""$/;"	v	class:snipMate_TestMirrorsInPlaceholders
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = """\/*$/;"	v	class:snipMate_Issue658
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'This is a stand alone snippet\\nThis is two stand alone snippet\\nThree'$/;"	v	class:snipMate_SimpleSnippetInSnippetFile
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'This is a test snippet'$/;"	v	class:snipMate_SimpleSnippetSubDirectory
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'This is a test snippet\\n# With a comment'$/;"	v	class:snipMate_SimpleSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'blah'$/;"	v	class:snipMate_Extends
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'blub is blah'$/;"	v	class:snipMate_TestNoBraceTabstops
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'blub is blub, blah is blah'$/;"	v	class:snipMate_TestNoBraceTabstopsAndMirrors
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'blub\\n\\nblah\\n'$/;"	v	class:snipMate_EmptyLinesContinueSnippets
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'for (j; j < blub; blub++) {\\n\\thi\\n}'$/;"	v	class:snipMate_TestMirrors
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'h$${2:blub}$$hi'$/;"	v	class:snipMate_NoNestedTabstops
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'hblablubb'$/;"	v	class:snipMate_Visual_Simple
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'hello' + EX + '\\nworked'$/;"	v	class:snipMate_OtherFiletype
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'hello' + EX$/;"	v	class:snipMate_Disabled
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'lac03lu'$/;"	v	class:snipMate_Interpolation
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'laöäülu'$/;"	v	class:snipMate_InterpolationWithSystem
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'two'$/;"	v	class:snipMate_MultiMatches
wanted	.config/nvim/plugged/ultisnips/test/test_SnipMate.py	/^    wanted = 'ultisnips'$/;"	v	class:snipMate_OverwrittenByRegExpTrigger
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """$/;"	v	class:SnippetActions_CanModifyParentBody
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """$/;"	v	class:SnippetActions_EnsureIndent
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """$/;"	v	class:SnippetActions_MoveVisual
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """$/;"	v	class:SnippetActions_PostActionCanUseSnippetRange
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """1 {$/;"	v	class:SnippetActions_UseCorrectJumpActions
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """1, 2"""$/;"	v	class:SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """debug(test(some(complex(cond(a)))))$/;"	v	class:SnippetActions_CanMirrorTabStopsOutsideOfSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """if not blah: pass"""$/;"	v	class:SnippetActions_CanExpandSnippetInDifferentPlace
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """if some_check(1, 2, 3) or 4: 5"""$/;"	v	class:SnippetActions_CanExpandAnonSnippetOnFirstJump
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """if x:$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpAction
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """if x:$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """import smthing$/;"	v	class:SnippetActions_MoveParentSnippetFromChildInPreAction
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """some context$/;"	v	class:SnippetActions_CanUseContextFromContextMatch
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """some_wrapper(wrapme(2, 1)3): 4"""$/;"	v	class:SnippetActions_CanEvenWrapSnippetInPreAction
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """totally_different(2, 1)3"""$/;"	v	class:SnippetActions_CanExpandAnonOnPreExpand
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = '1: 1\\n2'$/;"	v	class:SnippetActions_PostActionModifiesLineAfterSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = '[(1)2'$/;"	v	class:SnippetActions_PostActionModifiesCharAfterSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = '\\nabc'$/;"	v	class:SnippetActions_PreActionModifiesBuffer
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = 'abc\\n'$/;"	v	class:SnippetActions_PostActionModifiesBuffer
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = 'def123'$/;"	v	class:SnippetActions_DoNotBreakCursorOnSingleLikeChange
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = """\\t\\thi$/;"	v	class:No_Tab_Expand_RealWorld
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '   Expand me!'$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '   Expand me!'$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand2
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '  Expand me!'$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '  Expand me!'$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '  \\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_ET_Leading_Spaces
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '  \\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_Leading_Spaces
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = ' .a' + EX$/;"	v	class:SnippetOptions_Regex_Self_TextAfter
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = ' self.'$/;"	v	class:SnippetOptions_Regex_Self_Space
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '$Expand me!'$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '-Expand me!'$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:MultiWordSnippet_Simple
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_NormalExpand
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_ExpandInwordSnippets_ExpandSingle
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_ExpandWordSnippets_NormalExpand
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_Regex_Expand
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_Regex_Multiple
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_Regex_SameLine_Long_End
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_Regex_SameLine_Long_Start
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'Expand me!'$/;"	v	class:SnippetOptions_Regex_WithSpace
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '[[Expand me!'$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix3
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '\\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_ET
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '\\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_ET_SW
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '\\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_ET_SW_TS
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '\\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_No_TS
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '\\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_Simple
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = '\\t\\t\\tExpand\\tme!\\t'$/;"	v	class:No_Tab_Expand_Leading_Tabs
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'a not at beginning'$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'a not at beginning'$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'a test it' + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'a test' + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'a(Expand me!'$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix2
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'a-Expand me!'$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_ExpandSuffix
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'a-Expand me!'$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'a.' + EX$/;"	v	class:SnippetOptions_Regex_Self_TextBefore
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'aExpand me!'$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'aExpand me!'$/;"	v	class:SnippetOptions_ExpandInwordSnippets_SimpleExpand
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'abc test Expand me!'$/;"	v	class:SnippetOptions_Regex_SameLine_Simple
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'atest it' + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_NoExpand
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'atest' + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_NoExpand
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'self.'$/;"	v	class:SnippetOptions_Regex_Self_Start
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'test No match'$/;"	v	class:SnippetOptions_Regex_PythonBlockNoMatch
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'test fedcab'$/;"	v	class:SnippetOptions_Regex_PythonBlockMatch
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = 'ßßExpand me!'$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = 'Hallo'$/;"	v	class:SnippetPriorities_DoNotCareAboutNonMatchings
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = 'Should only expand in p.\\ntest' + EX$/;"	v	class:SnippetPriorities_ClearedByChild
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = 'This is a test snippet'$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = 'This is a test snippet'$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded_neg_prio
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = 'We overwrite'$/;"	v	class:SnippetPriorities_AddedHasHigherThanFile
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = 'We overwrite'$/;"	v	class:SnippetPriorities_MultiWordTriggerOverwriteExisting
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = 'We overwrite'$/;"	v	class:SnippetPriorities_OverwriteExisting
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = 'We overwrite\\nNo overwrite'$/;"	v	class:SnippetPriorities_OverwriteThenChoose_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = 'again'$/;"	v	class:SnippetPriorities_OverwriteTwice_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = 'test' + EX$/;"	v	class:SnippetPriorities_ClearedByParent
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = 'test' + EX$/;"	v	class:SnippetPriorities_SimpleClear
wanted	.config/nvim/plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = 'test' + EX$/;"	v	class:SnippetPriorities_SimpleClear2
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = """<div allaway>\\n  Third Last\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = """<div blah>\\n  Hallo\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = """<div id="no">\\n  End\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecond
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = """<div id="some_id">\\n  \\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = """<div id="yes">\\n  Begin Hi\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = """<div>\\n  Hallo\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_DeleteFirst
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = """<divSomethingElse>\\n  Nupl  Nox\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = """halongertextblEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = """haoverwriteblEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = """haupsblEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = """hoverwritelEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = """hupslEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = "'Hallo': 'Hallo' Hallo"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = "'Hallo': 'Hallo' Hallo"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = "Test: blub\\nTrailing texthello"$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = "Test: snippet start\\nNested tabstop: hello\\nsnippet end\\nTrailing text"$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = "world = require('WORLD')End"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = '${1:literal}'$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfDefinitionText
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = ':latex:`Hello`World'$/;"	v	class:TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'Hallo haselnhipsut upsend'$/;"	v	class:TabStopNavigatingInInsertModeSimple_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'Hallo: Hallo '$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite1
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'This \\\\ is a backslash!'$/;"	v	class:TabStop_EscapingChars_Backslash
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = '[ HelloWorld ] Hello'$/;"	v	class:TabStop_AdjacentTabStopAddText_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = '\\n${1:literal}'$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfLine
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'a${1:literal}'$/;"	v	class:TabStop_EscapingCharsDollars1
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'each_byte { |byte| Blah }'$/;"	v	class:TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'echo Hallo'$/;"	v	class:TabStopNoReplace_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hallo Blah Lets replace it again' + JB * 2 + JF$/;"	v	class:TabStopTestBackwardJumping2_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hallo Blah mitteLets replace it again' + JB * 2 + JF$/;"	v	class:TabStopTestBackwardJumping_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hallo Du Nase na'$/;"	v	class:TabStopSimpleReplace_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hallo Hi' + 2 * JF + 'du Test'$/;"	v	class:TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hallo Nase a small feed'$/;"	v	class:TabStopSimpleReplaceSurrounded1_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hallo Nase a small feed'$/;"	v	class:TabStopSimpleReplaceSurrounded_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hallo Test Hi'$/;"	v	class:TabStopTestJumping2_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hallo Test mitte BeginningHi'$/;"	v	class:TabStopTestJumping_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hallo na Du Nase'$/;"	v	class:TabStopSimpleReplaceReversed_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hi  Nothing  Nothing world'$/;"	v	class:TabStop_Multiline_DelFirstOverwriteSecond_Overwrite
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hi Blah Ende'$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpAround
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hi Hallo '$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite0
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hi Nothing Nothing world'$/;"	v	class:TabStop_Multiline_MirrorInFront_Overwrite
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hi Nothing world'$/;"	v	class:TabStop_Multiline_Overwrite
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hi first line\\nsecond line first line\\nsecond line world'$/;"	v	class:TabStop_Multiline_MirrorInFront_Leave
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hi first line\\nsecond line world'$/;"	v	class:TabStop_Multiline_Leave
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hi this Hallo Ende'$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hi this Hallo Hallo'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hi this second Hallo Ende'$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpToThird
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hi this second second'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_DoNothing
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hisnip '$/;"	v	class:TabStopEscapingWhenSelectedNoCharTS_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hisnip default'$/;"	v	class:TabStopEscapingWhenSelected_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'hisnip i'$/;"	v	class:TabStopEscapingWhenSelectedSingleCharTS_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'ia(1, 2) after: 3'$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'ia(1, 2) after: 3'$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'nothing ship hups'$/;"	v	class:TabStopWithOneChar_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'snip $0 $hi end'$/;"	v	class:TabStop_EscapingCharsDollars
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'snip ` literal'$/;"	v	class:TabStop_EscapingCharsBackticks
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'test hallo one more' + JF + '\\nnice world work\\n' \\$/;"	v	class:TabStopTestMultilineExpand_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'test run'$/;"	v	class:TabStop_Exit_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'tt\\nt{\\n\\tt\\n}'$/;"	v	class:TabStop_CROnlyOnSelectedNear
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'usage: `basename $0` [ -u -v -d ]'$/;"	v	class:TabStop_EscapingChars_RealLife
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = 'world = require(WORLD)End'$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = r"These are two backslashes \\\\ done"$/;"	v	class:TabStop_EscapingChars_Backslash3
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = r"This is a backslash \\ done"$/;"	v	class:TabStop_EscapingChars_Backslash2
wanted	.config/nvim/plugged/ultisnips/test/test_TabStop.py	/^    wanted = r"\\hello{world}"$/;"	v	class:TabStop_EscapingChars_Backslash4
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = '* test\\n* test\\n* test'$/;"	v	class:Transformation_OptionMultiline_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'HALLO hallo'$/;"	v	class:Transformation_CleverTransformLongLower_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'Hallo hallo'$/;"	v	class:Transformation_CleverTransformLowercaseChar_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'SomE tExt SOME TEXT \\nsome text '$/;"	v	class:Transformation_MultipleTransformations_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'TEST blah'$/;"	v	class:Transformation_OptionIgnoreCase_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'a b  c d e f ghhh h oha a b  c d e f ghhh h...'$/;"	v	class:Transformation_ConditionalInsertRWEllipsis_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'a some more text began with an a'$/;"	v	class:Transformation_ConditionalInsertionSimple_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'a some yes'$/;"	v	class:Transformation_CIBothDefinedPositive_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'a, nice,   building a, nice, building'$/;"	v	class:Transformation_OptionReplaceGlobalMatchInReplace_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'a, nice, building a-nice-building'$/;"	v	class:Transformation_OptionReplaceGlobal_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'aa yes:no)'$/;"	v	class:Transformation_ConditionalWithEscapedDelimiter
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'aa yes\\\\'$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'ab no\\\\'$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter1
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'b some no'$/;"	v	class:Transformation_CIBothDefinedNegative_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'dead parrot this parrot is a bit dead'$/;"	v	class:Transformation_BackreferenceTwice_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'foo boo aoo foo bull aoo'$/;"	v	class:Transformation_Backreference_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo '$/;"	v	class:Transformation_TabIsAtEndAndDeleted_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo '$/;"	v	class:Transformation_TabIsAtEndNoTextLeave_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo .\\nhallo- >\\nhallo-> '$/;"	v	class:Transformation_ConditionalInConditional_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo HALLO'$/;"	v	class:Transformation_CleverTransformLongUpper_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo Hallo'$/;"	v	class:Transformation_CleverTransformUpercaseChar_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo batzl hallo foo'$/;"	v	class:Transformation_SimpleCaseTransformInFrontDefVal_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo batzl hallo foo'$/;"	v	class:Transformation_SimpleCaseTransformInFront_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo foo boy hallo batzl boy'$/;"	v	class:Transformation_SimpleCase_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo hallo'$/;"	v	class:Transformation_SimpleCaseNoTransform_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo is somethingb'$/;"	v	class:Transformation_TabIsAtEndNoTextType_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo is somethingmore'$/;"	v	class:Transformation_TabIsAtEndAndDeleted1_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo noAUCH ahiuchauch_end'$/;"	v	class:Transformation_TestKill_InsertBeginning_Kill
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo noAUCH auchauchih_end'$/;"	v	class:Transformation_TestKill_InsertEnd_Kill
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo noAUCH hinoauchnoauch_end'$/;"	v	class:Transformation_TestKill_InsertBefore_NoKill
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'hallo noAUCH noauchnoauchab_end'$/;"	v	class:Transformation_TestKill_InsertAfter_NoKill
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'snip  '$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValue_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'snip  m2  hi'$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'snip m1  hi '$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'snip matched hallo'$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'sometext defined sometext'$/;"	v	class:Transformation_InsideTabLeaveAtDefault_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'sometext overwrite'$/;"	v	class:Transformation_InsideTabOvertype_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'test, hallo test\\nhallo'$/;"	v	class:Transformation_CINewlines_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'test, hallo test\\thallo'$/;"	v	class:Transformation_CITabstop_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'test, halul test, ha(ul)'$/;"	v	class:Transformation_CIEscapedParensinReplace_ECR
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'éèàçôïÉÈÀÇÔÏ€ eeacoiEEACOIEUR'$/;"	v	class:Transformation_SimpleCaseAsciiResult
wanted	.config/nvim/plugged/ultisnips/test/test_Transformation.py	/^    wanted = 'éèàçôïÉÈÀÇÔÏ€ eeacoieeacoieur'$/;"	v	class:Transformation_LowerCaseAsciiResult
wanted	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = """my snipped hi1$/;"	v	class:TestLangmapWithUtf8_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = """my snipped hi1$/;"	v	class:TestNonEmptyLangmap_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = """my snipped hi;$/;"	v	class:TestNonEmptyLangmapWithSemi_ExpectCorrectResult
wanted	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = "te'123êabc"$/;"	v	class:VerifyVimDict3
wanted	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = 'abc simple expand'$/;"	v	class:AddFunc_Simple
wanted	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = 'simple expand'$/;"	v	class:AddFunc_Opt
wanted	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = 'te"123êabc'$/;"	v	class:VerifyVimDict2
wanted	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = 'test41123\\'êabc0'$/;"	v	class:VerifyVimDict1
wanted	.config/nvim/plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = ($/;"	v	class:AddNewSnippetSource
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = '\\tbhlablbub'$/;"	v	class:Visual_SelectOneWord_ProblemAfterTab
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'beg\\n\\t    hello\\n\\t    nice\\n\\t\\tworld\\nend'$/;"	v	class:Visual_LineSelect_CheckIndentTwice
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'beg\\n\\thello\\n\\tnice\\n\\tworld\\n\\tsuper\\nenddone'$/;"	v	class:Visual_LineSelect_WithTabStop
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'beg\\n\\thello\\n\\tnice\\n\\tworld\\nend'$/;"	v	class:Visual_LineSelect_CheckIndentSimple
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'beg\\n\\thello\\n\\tnice\\n\\tworld\\nend'$/;"	v	class:Visual_LineSelect_CheckIndentWithTS_NoOverwrite
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'bhlablubb'$/;"	v	class:Visual_SelectOneWord_Inword
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'bla hblub\\n  hellobi'$/;"	v	class:Visual_CrossOneLine
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hBLABLUBb'$/;"	v	class:VisualTransformationWithDefault_ExpandWithVisual
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hBLABLUBb'$/;"	v	class:VisualTransformation_SelectOneWord
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hHELLO\\n NICE\\n WORLDb'$/;"	v	class:VisualTransformation_LineSelect_Simple
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hWORLDbhi'$/;"	v	class:VisualTransformationWithDefault_ExpandWithoutVisual
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'h\/\/ bodybhi'$/;"	v	class:VisualWithDefaultWithSlashes_ExpandWithoutVisual
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hbabc'$/;"	v	class:Visual_NoVisualSelection_Ignore
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hbefHELLO\\n    NICE\\n    WORLDaftbhi'$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_NoOverwrite
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hbefhello\\n    nice\\n    worldaftbhi'$/;"	v	class:Visual_InDefaultText_LineSelect_NoOverwrite
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hbeforeaaahello\\n\\t  nice\\n\\t  worldaftbhi'$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hbeforeahello\\n\\tnice\\n\\tworldaftbhi'$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hblablub\\nb'$/;"	v	class:Visual_SelectOneWord_TillEndOfLine
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hblablubb'$/;"	v	class:VisualWithDefault_ExpandWithVisual
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hblablubb'$/;"	v	class:Visual_SelectOneWord
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hblablubb\\nhb'$/;"	v	class:Visual_ExpandTwice
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hblablubbblabluba'$/;"	v	class:Visual_SelectOneWord_TwiceVisual
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hblablubbhello'$/;"	v	class:Visual_InDefaultText_SelectOneWord_NoOverwrite
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hello\\n\\t hello\\n\\t nice\\n\\t world\\nendhi'$/;"	v	class:Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hhello\\n nice\\n worldb'$/;"	v	class:Visual_LineSelect_Simple
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hhellob'$/;"	v	class:Visual_InDefaultText_SelectOneWord
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hjupbhi'$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_Overwrite
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hjupbhi'$/;"	v	class:Visual_InDefaultText_LineSelect_Overwrite
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hnblablub\\nmmmbdone'$/;"	v	class:Visual_SelectOneWordWithTabstop_TillEndOfLine
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hupsbhi'$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_Overwrite
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'hworldbhi'$/;"	v	class:VisualWithDefault_ExpandWithoutVisual
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'if {\\n\\tif {\\n\\t\\tone\\n\\t\\ttwo\\n\\t}\\n\\tthree\\n}'$/;"	v	class:Visual_LineSelect_DedentLine
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'xxxhyyybyxxx'$/;"	v	class:Visual_SelectOneWordExclusive
wanted	.config/nvim/plugged/ultisnips/test/test_Visual.py	/^    wanted = 'xxxhyyyybxxx'$/;"	v	class:Visual_SelectOneWordInclusive
wanted	.config/nvim/plugged/ultisnips/test/vim_test_case.py	/^    wanted = ''$/;"	v	class:VimTestCase
warn	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  public warn(message: string): void {$/;"	m	class:ConsoleLogger
warning	.vim/plugged/coc.nvim/src/types.ts	/^  warning: number$/;"	p	interface:DiagnosticInfo
warning	.vim/plugged/coc.nvim/src/watchman.ts	/^  warning?: string$/;"	C
warningSign	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^    let { errorSign, warningSign, infoSign, hintSign } = this.config$/;"	v
warningSign	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^  warningSign: string$/;"	p	interface:DiagnosticConfig
watch	.config/nvim/plugged/coc.nvim/package.json	/^    "watch": "tsc -p tsconfig.json --watch true --sourceMap",$/;"	s	object:scripts
watch	.vim/plugged/coc.nvim/package.json	/^    "watch": "tsc -p tsconfig.json --watch true --sourceMap",$/;"	s	object:scripts
watch	.vim/plugged/coc.nvim/src/watchman.ts	/^  private watch: string | undefined$/;"	p	class:Watchman
watch	.vim/plugged/coc.nvim/src/watchman.ts	/^  watch: string$/;"	C
watchChange	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        watchChange: boolean = true,$/;"	v
watchCreate	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        watchCreate = (watcher.kind & WatchKind.Create) !== 0$/;"	v
watchCreate	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      let watchCreate: boolean = true,$/;"	v
watchDelete	.vim/plugged/coc.nvim/src/language-client/client.ts	/^        watchDelete: boolean = true$/;"	v
watchExtensions	.vim/plugged/coc.nvim/src/extensions.ts	/^    let { globalExtensions, watchExtensions } = workspace.env$/;"	v
watchExtensions	.vim/plugged/coc.nvim/src/types.ts	/^  readonly watchExtensions: string[]$/;"	p	interface:Env
watchFile	.vim/plugged/coc.nvim/src/util/index.ts	/^export function watchFile(filepath: string, onChange: () => void): Disposable {$/;"	f
watchProject	.vim/plugged/coc.nvim/src/watchman.ts	/^  public async watchProject(root: string): Promise<boolean> {$/;"	m	class:Watchman
watcher	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let watcher = workspace.createFileSystemWatcher('**\/*.ts')$/;"	v
watcher	.vim/plugged/coc.nvim/src/watchman.ts	/^  watcher: string$/;"	C
watcher	.vim/plugged/coc.nvim/src/workspace.ts	/^    let watcher = new FileSystemWatcher($/;"	v
watchers	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let watchers: FileWatcher[]$/;"	v
watching	.vim/plugged/coc.nvim/src/workspace.ts	/^    let watching = this.watchedOptions.has(key)$/;"	v
watchman	.config/nvim/plugged/coc.nvim/package.json	/^    "watchman": false,$/;"	b	object:jest
watchman	.vim/plugged/coc.nvim/package.json	/^    "watchman": false,$/;"	b	object:jest
watchmanPath	.vim/plugged/coc.nvim/src/extensions.ts	/^      let watchmanPath = workspace.getWatchmanPath()$/;"	v
watchmanPath	.vim/plugged/coc.nvim/src/workspace.ts	/^    let watchmanPath = preferences.get<string>('watchmanPath', 'watchman')$/;"	v
watchmanPath	.vim/plugged/coc.nvim/src/workspace.ts	/^    let watchmanPath = process.env.NODE_ENV == 'test' ? null : this.getWatchmanPath()$/;"	v
webpack	.vim/plugged/coc.nvim/webpack.config.js	/^const webpack = require('\/Users\/chemzqm\/.config\/yarn\/global\/node_modules\/webpack')$/;"	C
websocket_rx_coro	.vim/plugged/ghost-text.vim/python3/exchanger.py	/^    def websocket_rx_coro(self):$/;"	m	class:Exchanger
welcome	.config/nvim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def welcome(self):$/;"	m	class:Socket
welcome	.vim/plugged/denite.nvim/rplugin/python3/denite/socket.py	/^    def welcome(self):$/;"	m	class:Socket
whats	.config/nvim/plugged/emmet-vim/docs/index.html	/^			<article id="whats">$/;"	I
which	.config/nvim/plugged/coc.nvim/package.json	/^    "which": "^1.3.1"$/;"	s	object:dependencies
which	.vim/plugged/coc.nvim/package.json	/^    "which": "^1.3.1"$/;"	s	object:dependencies
whitespace	.vim/plugged/vim-airline/README.md	/^#### whitespace$/;"	t
wid	.vim/plugged/coc.nvim/src/model/document.ts	/^    let wid = await this.nvim.call('bufwinid', this.buffer.id)$/;"	v
widget_attributes	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let widget_attributes = {$/;"	v
widget_role	.config/nvim/plugged/html5.vim/autoload/xml/aria.vim	/^let widget_role = [$/;"	v
widget_role	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^    let widget_role = ['alert', 'alertdialog', 'button', 'checkbox', 'combobox', 'dialog', 'grid/;"	v
width	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  width: number$/;"	p	interface:Bounding
width	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let bounding: PumBounding = { col, row, height, width, scrollbar }$/;"	v
width	.vim/plugged/coc.nvim/src/completion/index.ts	/^    let { completed_item, col, row, height, width, scrollbar } = ev$/;"	v
width	.vim/plugged/coc.nvim/src/model/floatBuffer.ts	/^    let width = this.width = Math.min(Math.max(...newLines.map(s => this.getWidth(s))) + 2, maxW/;"	v
width	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let { width } = this.floatBuffer$/;"	v
width	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^  width: number$/;"	p	interface:WindowConfig
width	.vim/plugged/coc.nvim/src/types.ts	/^  readonly width: number$/;"	p	interface:PumBounding
width	.vim/plugged/coc.nvim/src/types.ts	/^  width: number$/;"	p	interface:PopupChangeEvent
width	.vim/plugged/fzf/src/terminal.go	/^	width    int$/;"	m	struct:fzf.itemLine	typeref:typename:int
width	.vim/plugged/fzf/src/tui/light.go	/^	width         int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
width	.vim/plugged/fzf/src/tui/light.go	/^	width    int$/;"	m	struct:tui.LightWindow	typeref:typename:int
width	.vim/plugged/fzf/src/tui/tcell.go	/^	width       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
wildignore	.vim/plugged/coc.nvim/src/workspace.ts	/^    let wildignore = await nvim.getOption('wildignore')$/;"	v
willSaveWaitUntil	.vim/plugged/coc.nvim/src/language-client/client.ts	/^      let willSaveWaitUntil = (event: TextDocumentWillSaveEvent): Thenable<TextEdit[]> => {$/;"	v
willSaveWaitUntil	.vim/plugged/coc.nvim/src/languages.ts	/^        let willSaveWaitUntil = async (): Promise<TextEdit[]> => {$/;"	v
win	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let win = await nvim.window$/;"	v
win	.vim/plugged/coc.nvim/src/__tests__/list/sources.test.ts	/^      let win = await nvim.window$/;"	v
win	.vim/plugged/coc.nvim/src/__tests__/modules/floatFactory.test.ts	/^    for (let win of wins) {$/;"	v
win	.vim/plugged/coc.nvim/src/handler/index.ts	/^    let win = await this.nvim.window$/;"	v
win	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^        let win = this.window = nvim.createWindow(this.popup.id)$/;"	v
win	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^        win.setOption('conceallevel', 2, true)$/;"	v
win	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^        win.setOption('linebreak', true, true)$/;"	v
win	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^        win.setOption('showbreak', '', true)$/;"	v
win	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^        win.setVar('float', 1, true)$/;"	v
wincol	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    wincol: int = 0$/;"	v	class:Context
window	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^			window[ jsonp ] = function(tmp){$/;"	f	function:AnonymousFunctiond47633f8a100
window	.vim/plugged/coc.nvim/src/completion/floating.ts	/^  private window: Window$/;"	p	class:Floating
window	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^    let window = await this.nvim.window$/;"	v
window	.vim/plugged/coc.nvim/src/list/manager.ts	/^  private window: Window$/;"	C
window	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { nvim, bufnr, window, config } = this$/;"	v
window	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { window } = this$/;"	v
window	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { window, bufnr, items } = this$/;"	v
window	.vim/plugged/coc.nvim/src/list/ui.ts	/^    let { window, height } = this$/;"	v
window	.vim/plugged/coc.nvim/src/list/ui.ts	/^  public window: Window$/;"	p	class:ListUI
window	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      if (!valid) window = null$/;"	v
window	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^      let { popup, window } = this$/;"	v
window	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^    let { floatBuffer, nvim, window } = this$/;"	v
window	.vim/plugged/coc.nvim/src/model/floatFactory.ts	/^  private window: Window$/;"	p	class:FloatFactory
window	.vim/plugged/coc.nvim/src/types.ts	/^  window: Window$/;"	p	interface:ListContext
window	.vim/plugged/fzf/src/terminal.go	/^	window     tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
window.zoomLevel	VSCode/settings.json	/^"window.zoomLevel": 0,$/;"	n
windowData	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var expando = "jQuery" + now(), uuid = 0, windowData = {},$/;"	v
windowPosition	.vim/plugged/fzf/src/options.go	/^type windowPosition int$/;"	t	package:fzf	typeref:typename:int
winheight	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    winheight: int = 0$/;"	v	class:Context
winid	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticBuffer.test.ts	/^    let winid = await nvim.call('bufwinid', buf.bufnr) as number$/;"	v
winid	.vim/plugged/coc.nvim/src/__tests__/modules/diagnosticManager.test.ts	/^    let winid = await helper.waitFloat()$/;"	v
winid	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^      let winid = await this.nvim.call('bufwinid', this.bufnr) as number$/;"	v
winid	.vim/plugged/coc.nvim/src/diagnostic/buffer.ts	/^    let winid: number$/;"	v
winid	.vim/plugged/coc.nvim/src/diagnostic/manager.ts	/^        let winid = await nvim.call('win_getid') as number$/;"	v
winid	.vim/plugged/coc.nvim/src/handler/highlighter.ts	/^  public winid: number$/;"	p	class:Highlighter
winid	.vim/plugged/coc.nvim/src/list/basic.ts	/^    let winid = context.listWindow.id$/;"	v
winid	.vim/plugged/coc.nvim/src/list/ui.ts	/^      let [bufnr, winid] = await workspace.callAsync('coc#list#create', [position, height, name]/;"	v
winid	.vim/plugged/coc.nvim/src/list/ui.ts	/^  winid: number$/;"	p	interface:MousePosition
winid	.vim/plugged/coc.nvim/src/workspace.ts	/^    let winid = await this.nvim.call('win_getid')$/;"	v
winnr	.vim/plugged/coc.nvim/src/__tests__/list/manager.test.ts	/^    let winnr = await nvim.call('coc#util#has_preview')$/;"	v
winnr	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let winnr = await nvim.call('coc#util#has_preview')$/;"	v
winnr	.vim/plugged/coc.nvim/src/__tests__/list/mappings.test.ts	/^    let winnr = await nvim.call('winnr')$/;"	v
winnr	.vim/plugged/coc.nvim/src/__tests__/modules/terminal.test.ts	/^    let winnr = await nvim.call('bufwinnr', terminal.bufnr)$/;"	v
winrelative	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    winrelative: str = 'editor'$/;"	v	class:Context
winrow	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    winrow: int = 0$/;"	v	class:Context
wins	.vim/plugged/coc.nvim/src/__tests__/modules/floatFactory.test.ts	/^    let wins = await nvim.windows$/;"	v
winwidth	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/context.py	/^    winwidth: int = 0$/;"	v	class:Context
with in-order execution	.config/nvim/plugged/switch.vim/spec/plugin/evaluation_order_spec.rb	/^  context "with in-order execution" do$/;"	c
withIndex	.vim/plugged/fzf/src/result_test.go	/^func withIndex(i *Item, index int) *Item {$/;"	f	package:fzf	typeref:typename:*Item
withPrefixLengths	.vim/plugged/fzf/src/tokenizer.go	/^func withPrefixLengths(tokens []string, begin int) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
withinElement	.config/nvim/plugged/emmet-vim/docs/static/js/jquery-latest.js	/^var withinElement = function(event, elem) {$/;"	f
wnr	.vim/plugged/coc.nvim/src/model/outputChannel.ts	/^      let wnr = await nvim.call('bufwinnr', buffer.id)$/;"	v
word	.vim/plugged/coc.nvim/src/completion/index.ts	/^        let { word } = resolvedItem$/;"	v
word	.vim/plugged/coc.nvim/src/languages.ts	/^      let word = doc.textDocument.getText(range)$/;"	v
word	.vim/plugged/coc.nvim/src/model/document.ts	/^    for (let word of words) {$/;"	v
word	.vim/plugged/coc.nvim/src/types.ts	/^  readonly word: string$/;"	p	interface:CompleteOption
word	.vim/plugged/coc.nvim/src/types.ts	/^  word: string$/;"	p	interface:VimCompleteItem
wordChar	.vim/plugged/coc.nvim/src/util/fuzzy.ts	/^export function wordChar(ch: number): boolean {$/;"	f
wordNext	.vim/plugged/fzf/src/terminal.go	/^	wordNext   string$/;"	m	struct:fzf.Terminal	typeref:typename:string
wordRubout	.vim/plugged/fzf/src/terminal.go	/^	wordRubout string$/;"	m	struct:fzf.Terminal	typeref:typename:string
words	.vim/plugged/coc.nvim/src/__tests__/completion/basic.test.ts	/^    let words = items.map(o => o.word)$/;"	v
words	.vim/plugged/coc.nvim/src/__tests__/modules/document.test.ts	/^    let words = doc.words$/;"	v
words	.vim/plugged/coc.nvim/src/model/document.ts	/^    let { words, chars } = this$/;"	v
workbench.colorTheme	VSCode/settings.json	/^    "workbench.colorTheme": "ƒ - Gruvbox",$/;"	s
workbench.iconTheme	VSCode/settings.json	/^    "workbench.iconTheme": "material-icon-theme",$/;"	s
worker	.vim/plugged/coc.nvim/src/list/manager.ts	/^  public worker: Worker$/;"	C
workspace	.vim/plugged/coc.nvim/src/configuration/configuration.ts	/^      workspace: _workspaceConfiguration.freeze().getValue(key),$/;"	C
workspace	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      workspace: target == ConfigurationTarget.Workspace ? model : workspace,$/;"	v
workspace	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      workspace: this._configuration.workspace$/;"	v
workspace	.vim/plugged/coc.nvim/src/configuration/index.ts	/^      workspace: { contents: {} }$/;"	v
workspace	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let { defaults, user, workspace } = this._configuration$/;"	v
workspace	.vim/plugged/coc.nvim/src/configuration/shape.ts	/^  constructor(private workspace: IWorkspace) {$/;"	p	class:ConfigurationProxy
workspace	.vim/plugged/coc.nvim/src/extensions.ts	/^            workspace.showMessage(`Error on load extension ${id} from ${filename}: ${e}`, 'error/;"	v
workspace	.vim/plugged/coc.nvim/src/extensions.ts	/^          workspace.showMessage(`Error on active extension ${id}: ${e}`, 'error')$/;"	v
workspace	.vim/plugged/coc.nvim/src/extensions.ts	/^        workspace.onDidChangeWorkspaceFolders(check, null, disposables)$/;"	v
workspace	.vim/plugged/coc.nvim/src/extensions.ts	/^        workspace.onDidOpenTextDocument(document => {$/;"	v
workspace	.vim/plugged/coc.nvim/src/extensions.ts	/^        workspace.showMessage(`Unsupported event ${eventName} of ${id}`, 'error')$/;"	v
workspace	.vim/plugged/coc.nvim/src/list/configuration.ts	/^    workspace.showMessage(`Configured key "${key}" invalid.`, 'error')$/;"	C
workspace	.vim/plugged/coc.nvim/src/list/manager.ts	/^          workspace.showMessage( `Invalid list option: "${arg}"`, 'error' )$/;"	C
workspace	.vim/plugged/coc.nvim/src/list/manager.ts	/^        workspace.showMessage( `Invalid option "${opt}" of list`, 'error' )$/;"	C
workspace	.vim/plugged/coc.nvim/src/list/manager.ts	/^      workspace.showMessage( `Action ${name} not found`, 'error' )$/;"	C
workspace	.vim/plugged/coc.nvim/src/list/manager.ts	/^      workspace.showMessage( `Error on "CocList ${list.name}": ${msg}`, 'error' )$/;"	C
workspace	.vim/plugged/coc.nvim/src/list/manager.ts	/^      workspace.showMessage( `Interactive mode of "${name}" not supported`, 'error' )$/;"	C
workspace	.vim/plugged/coc.nvim/src/list/manager.ts	/^      workspace.showMessage( `List ${name} not found`, 'error' )$/;"	C
workspace	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^      let { nvim, workspace } = this$/;"	v
workspace	.vim/plugged/coc.nvim/src/model/willSaveHandler.ts	/^    let { callbacks, workspace } = this$/;"	v
workspace	.vim/plugged/coc.nvim/src/provider/manager.ts	/^        workspace.showMessage(`Bad definition ${JSON.stringify(def)}`, 'error')$/;"	v
workspace	.vim/plugged/coc.nvim/src/types.ts	/^  workspace: IConfigurationModel$/;"	p	interface:IConfigurationData
workspace.ignoredFiletypes	.config/nvim/plugged/coc.nvim/data/schema.json	/^    "workspace.ignoredFiletypes": {$/;"	o	object:properties
workspace.ignoredFiletypes	.vim/plugged/coc.nvim/data/schema.json	/^    "workspace.ignoredFiletypes": {$/;"	o	object:properties
workspaceConfigFile	.vim/plugged/coc.nvim/src/__tests__/modules/configurations.test.ts	/^const workspaceConfigFile = path.resolve(__dirname, '..\/sample\/.vim\/coc-settings.json')$/;"	C
workspaceConfigFile	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    let { workspaceConfigFile } = this$/;"	v
workspaceConfigFile	.vim/plugged/coc.nvim/src/configuration/shape.ts	/^  public get workspaceConfigFile(): string {$/;"	m	class:ConfigurationProxy
workspaceConfigFile	.vim/plugged/coc.nvim/src/types.ts	/^  workspaceConfigFile: string$/;"	p	interface:ConfigurationShape
workspaceConfiguration	.vim/plugged/coc.nvim/src/configuration/index.ts	/^    const workspaceConfiguration = new ConfigurationModel(data.workspace.contents)$/;"	C
workspaceEdit	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let workspaceEdit: WorkspaceEdit = { changes }$/;"	v
workspaceEdit	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let workspaceEdit: WorkspaceEdit = {$/;"	v
workspaceEdit	.vim/plugged/coc.nvim/src/language-client/client.ts	/^    let workspaceEdit = ensure(ensure(result, 'workspace')!, 'workspaceEdit')$/;"	v
workspaceFolder	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let { workspaceFolders, workspaceFolder } = workspace$/;"	v
workspaceFolder	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  workspaceFolder?: WorkspaceFolder$/;"	p	interface:ResolvedClientOptions
workspaceFolder	.vim/plugged/coc.nvim/src/types.ts	/^  workspaceFolder: WorkspaceFolder$/;"	p	interface:IWorkspace
workspaceFolder	.vim/plugged/coc.nvim/src/workspace.ts	/^      let workspaceFolder = this.getWorkspaceFolder(doc.uri)$/;"	v
workspaceFolder	.vim/plugged/coc.nvim/src/workspace.ts	/^    let workspaceFolder: WorkspaceFolder = { uri, name: path.basename(rootPath) }$/;"	v
workspaceFolders	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let { nvim, workspaceFolders, channelNames, rootPath, cwd, documents, initialized, textDocum/;"	v
workspaceFolders	.vim/plugged/coc.nvim/src/__tests__/modules/workspace.test.ts	/^    let { workspaceFolders, workspaceFolder } = workspace$/;"	v
workspaceFolders	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^        let { workspaceFolders } = workspace$/;"	v
workspaceFolders	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^        return workspaceFolders.length ? workspaceFolders : null$/;"	v
workspaceFolders	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^      let workspaceFolders: WorkspaceFoldersRequest.HandlerSignature = () => {$/;"	v
workspaceFolders	.vim/plugged/coc.nvim/src/language-client/workspaceFolders.ts	/^  workspaceFolders?: WorkspaceFoldersRequest.MiddlewareSignature$/;"	p	interface:WorkspaceFolderWorkspaceMiddleware
workspaceFolders	.vim/plugged/coc.nvim/src/types.ts	/^  readonly workspaceFolders: string[]$/;"	p	interface:Env
workspaceState	.vim/plugged/coc.nvim/src/extensions.ts	/^          workspaceState: this.memos.createMemento(`${id}|${workspace.rootPath}`),$/;"	v
workspaceState	.vim/plugged/coc.nvim/src/types.ts	/^  workspaceState: Memento$/;"	p	interface:ExtensionContext
workspaceValue	.vim/plugged/coc.nvim/src/types.ts	/^  workspaceValue?: T$/;"	p	interface:ConfigurationInspect
wrap	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/err_to_scratch_buffer.py	/^def wrap(func):$/;"	f
wrap	.vim/plugged/coc.nvim/src/types.ts	/^  wrap?: boolean$/;"	p	interface:PopupOptions
wrap	.vim/plugged/coc.nvim/src/util/factory.ts	/^  wrap: (content: string) => string$/;"	p	interface:IModule
wrap	.vim/plugged/fzf/src/options.go	/^	wrap     bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
wrapLine	.vim/plugged/fzf/src/tui/light.go	/^func wrapLine(input string, prefixLength int, max int, tabstop int) []wrappedLine {$/;"	f	package:tui	typeref:typename:[]wrappedLine
wrapped.newsink	.config/nvim/plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! wrapped.newsink(lines)$/;"	f
wrappedLine	.vim/plugged/fzf/src/tui/light.go	/^type wrappedLine struct {$/;"	s	package:tui
wrapper	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/base/kind.py	/^    def wrapper(func: ACTION_FUNC) -> ACTION_FUNC:$/;"	f	function:action	file:
wrapper	.config/nvim/plugged/defx.nvim/rplugin/python3/defx/kind/file.py	/^    def wrapper(func: ACTION_FUNC) -> ACTION_FUNC:$/;"	f	function:action	file:
wrapper	.config/nvim/plugged/ultisnips/pythonx/UltiSnips/err_to_scratch_buffer.py	/^    def wrapper(self, *args, **kwds):$/;"	f	function:wrap	file:
wrapper	.vim/plugged/coc.nvim/src/util/factory.ts	/^    const wrapper = Module.wrap(newContent)$/;"	C	function:compileInSandbox
wrapper	.vim/plugged/omnisharp-vim/python/omnisharp/vimcmd.py	/^    def wrapper(*args, **kwargs):$/;"	f	function:vimcmd	file:
write	.config/nvim/plugged/denite.nvim/autoload/denite/_main.py	/^    def write(self, line):$/;"	m	class:RedirectStream
write	.vim/plugged/denite.nvim/autoload/denite/_main.py	/^    def write(self, line):$/;"	m	class:RedirectStream
write	.vim/plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    def write(self, w):$/;"	m	class:SocketToStream
writeFile	.vim/plugged/coc.nvim/src/util/fs.ts	/^export async function writeFile(fullpath: string, content: string): Promise<void> {$/;"	f
write_snippets	.config/nvim/plugged/ultisnips/utils/get_tm_snippets.py	/^def write_snippets(snip_descr, f):$/;"	f
write_temp	.config/nvim/plugged/ultisnips/test/vim_interface.py	/^    def write_temp(self, file_path, content):$/;"	m	class:TempFileManager
writelines	.config/nvim/plugged/denite.nvim/autoload/denite/_main.py	/^    def writelines(self, lines):$/;"	m	class:RedirectStream
writelines	.vim/plugged/denite.nvim/autoload/denite/_main.py	/^    def writelines(self, lines):$/;"	m	class:RedirectStream
writelines	.vim/plugged/fzf/test/test_go.rb	/^  def writelines(path, lines)$/;"	f	class:TestBase
writer	.vim/plugged/coc.nvim/src/language-client/client.ts	/^  writer: MessageWriter$/;"	p	interface:MessageTransports
writer	.vim/plugged/coc.nvim/src/language-client/index.ts	/^  writer: NodeJS.WritableStream$/;"	p	interface:StreamInfo
ws_handler	.vim/plugged/ghost-text.vim/python3/vim_websocket_handler.py	/^        async def ws_handler(websocket, path):$/;"	f	member:Manager.handler	file:
ws_manager	.vim/plugged/ghost-text.vim/python3/exchanger.py	/^    def ws_manager(self):$/;"	m	class:Exchanger
ws_manager	.vim/plugged/ghost-text.vim/python3/exchanger.py	/^    def ws_manager(self, wm):$/;"	m	class:Exchanger
x	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> x$/;"	m
x	.config/nvim/plugged/vim-textobj-user/t/plugin.vim	/^    let x = ''$/;"	v
x	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  x = 120,$/;"	e	enum:CharCode
x	.vim/plugged/fzf/src/tui/light.go	/^	x             int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
x005E	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_CIRCUMFLEX = 0x005E,         \/\/ U+005E CIRCUMFLEX$/;"	e	enum:CharCode
x0060	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GRAVE_ACCENT = 0x0060,        \/\/ U+0060 GRAVE ACCENT$/;"	e	enum:CharCode
x00A8	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_DIAERESIS = 0x00A8,         \/\/ U+00A8 DIAERESIS$/;"	e	enum:CharCode
x00AF	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MACRON = 0x00AF,          \/\/ U+00AF MACRON$/;"	e	enum:CharCode
x00B4	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_ACUTE_ACCENT = 0x00B4,        \/\/ U+00B4 ACUTE ACCENT$/;"	e	enum:CharCode
x00B8	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_CEDILLA = 0x00B8,          \/\/ U+00B8 CEDILLA$/;"	e	enum:CharCode
x02C2	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LEFT_ARROWHEAD = 0x02C2,    \/\/ U+02C2 MODIFIER LETTER LEFT ARROWHEAD$/;"	e	enum:CharCode
x02C3	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_RIGHT_ARROWHEAD = 0x02C3,    \/\/ U+02C3 MODIFIER LETTER RIGHT ARROWHEAD$/;"	e	enum:CharCode
x02C4	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_UP_ARROWHEAD = 0x02C4,    \/\/ U+02C4 MODIFIER LETTER UP ARROWHEAD$/;"	e	enum:CharCode
x02C5	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_DOWN_ARROWHEAD = 0x02C5,    \/\/ U+02C5 MODIFIER LETTER DOWN ARROWHEAD$/;"	e	enum:CharCode
x02D2	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_CENTRED_RIGHT_HALF_RING = 0x02D2,  \/\/ U+02D2 MODIFIER LETTER CENTRED RIGHT/;"	e	enum:CharCode
x02D3	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_CENTRED_LEFT_HALF_RING = 0x02D3,  \/\/ U+02D3 MODIFIER LETTER CENTRED LEFT H/;"	e	enum:CharCode
x02D4	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_UP_TACK = 0x02D4,      \/\/ U+02D4 MODIFIER LETTER UP TACK$/;"	e	enum:CharCode
x02D5	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_DOWN_TACK = 0x02D5,     \/\/ U+02D5 MODIFIER LETTER DOWN TACK$/;"	e	enum:CharCode
x02D6	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_PLUS_SIGN = 0x02D6,     \/\/ U+02D6 MODIFIER LETTER PLUS SIGN$/;"	e	enum:CharCode
x02D7	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_MINUS_SIGN = 0x02D7,     \/\/ U+02D7 MODIFIER LETTER MINUS SIGN$/;"	e	enum:CharCode
x02D8	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_BREVE = 0x02D8,          \/\/ U+02D8 BREVE$/;"	e	enum:CharCode
x02D9	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_DOT_ABOVE = 0x02D9,         \/\/ U+02D9 DOT ABOVE$/;"	e	enum:CharCode
x02DA	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_RING_ABOVE = 0x02DA,         \/\/ U+02DA RING ABOVE$/;"	e	enum:CharCode
x02DB	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_OGONEK = 0x02DB,          \/\/ U+02DB OGONEK$/;"	e	enum:CharCode
x02DC	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_SMALL_TILDE = 0x02DC,         \/\/ U+02DC SMALL TILDE$/;"	e	enum:CharCode
x02DD	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_DOUBLE_ACUTE_ACCENT = 0x02DD,       \/\/ U+02DD DOUBLE ACUTE ACCENT$/;"	e	enum:CharCode
x02DE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_RHOTIC_HOOK = 0x02DE,     \/\/ U+02DE MODIFIER LETTER RHOTIC HOOK$/;"	e	enum:CharCode
x02DF	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_CROSS_ACCENT = 0x02DF,    \/\/ U+02DF MODIFIER LETTER CROSS ACCENT$/;"	e	enum:CharCode
x02E5	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_EXTRA_HIGH_TONE_BAR = 0x02E5,   \/\/ U+02E5 MODIFIER LETTER EXTRA-HIGH TONE /;"	e	enum:CharCode
x02E6	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_HIGH_TONE_BAR = 0x02E6,    \/\/ U+02E6 MODIFIER LETTER HIGH TONE BAR$/;"	e	enum:CharCode
x02E7	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_MID_TONE_BAR = 0x02E7,    \/\/ U+02E7 MODIFIER LETTER MID TONE BAR$/;"	e	enum:CharCode
x02E8	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_TONE_BAR = 0x02E8,    \/\/ U+02E8 MODIFIER LETTER LOW TONE BAR$/;"	e	enum:CharCode
x02E9	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_EXTRA_LOW_TONE_BAR = 0x02E9,   \/\/ U+02E9 MODIFIER LETTER EXTRA-LOW TONE BA/;"	e	enum:CharCode
x02EA	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_YIN_DEPARTING_TONE_MARK = 0x02EA,  \/\/ U+02EA MODIFIER LETTER YIN DEPARTING/;"	e	enum:CharCode
x02EB	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_YANG_DEPARTING_TONE_MARK = 0x02EB, \/\/ U+02EB MODIFIER LETTER YANG DEPARTIN/;"	e	enum:CharCode
x02ED	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_UNASPIRATED = 0x02ED,     \/\/ U+02ED MODIFIER LETTER UNASPIRATED$/;"	e	enum:CharCode
x02EF	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_DOWN_ARROWHEAD = 0x02EF,   \/\/ U+02EF MODIFIER LETTER LOW DOWN ARROWHEA/;"	e	enum:CharCode
x02F0	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_UP_ARROWHEAD = 0x02F0,   \/\/ U+02F0 MODIFIER LETTER LOW UP ARROWHEAD$/;"	e	enum:CharCode
x02F1	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_LEFT_ARROWHEAD = 0x02F1,   \/\/ U+02F1 MODIFIER LETTER LOW LEFT ARROWHEA/;"	e	enum:CharCode
x02F2	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_RIGHT_ARROWHEAD = 0x02F2,   \/\/ U+02F2 MODIFIER LETTER LOW RIGHT ARROWH/;"	e	enum:CharCode
x02F3	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_RING = 0x02F3,     \/\/ U+02F3 MODIFIER LETTER LOW RING$/;"	e	enum:CharCode
x02F4	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_MIDDLE_GRAVE_ACCENT = 0x02F4,   \/\/ U+02F4 MODIFIER LETTER MIDDLE GRAVE ACC/;"	e	enum:CharCode
x02F5	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_MIDDLE_DOUBLE_GRAVE_ACCENT = 0x02F5, \/\/ U+02F5 MODIFIER LETTER MIDDLE DOUB/;"	e	enum:CharCode
x02F6	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_MIDDLE_DOUBLE_ACUTE_ACCENT = 0x02F6, \/\/ U+02F6 MODIFIER LETTER MIDDLE DOUB/;"	e	enum:CharCode
x02F7	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_TILDE = 0x02F7,     \/\/ U+02F7 MODIFIER LETTER LOW TILDE$/;"	e	enum:CharCode
x02F8	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_RAISED_COLON = 0x02F8,    \/\/ U+02F8 MODIFIER LETTER RAISED COLON$/;"	e	enum:CharCode
x02F9	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_BEGIN_HIGH_TONE = 0x02F9,    \/\/ U+02F9 MODIFIER LETTER BEGIN HIGH TONE$/;"	e	enum:CharCode
x02FA	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_END_HIGH_TONE = 0x02FA,    \/\/ U+02FA MODIFIER LETTER END HIGH TONE$/;"	e	enum:CharCode
x02FB	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_BEGIN_LOW_TONE = 0x02FB,    \/\/ U+02FB MODIFIER LETTER BEGIN LOW TONE$/;"	e	enum:CharCode
x02FC	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_END_LOW_TONE = 0x02FC,    \/\/ U+02FC MODIFIER LETTER END LOW TONE$/;"	e	enum:CharCode
x02FD	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_SHELF = 0x02FD,      \/\/ U+02FD MODIFIER LETTER SHELF$/;"	e	enum:CharCode
x02FE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_OPEN_SHELF = 0x02FE,     \/\/ U+02FE MODIFIER LETTER OPEN SHELF$/;"	e	enum:CharCode
x02FF	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_MODIFIER_LETTER_LOW_LEFT_ARROW = 0x02FF,    \/\/ U+02FF MODIFIER LETTER LOW LEFT ARROW$/;"	e	enum:CharCode
x0300	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Grave_Accent = 0x0300,        \/\/ U+0300 Combining Grave Accent$/;"	e	enum:CharCode
x0301	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Acute_Accent = 0x0301,        \/\/ U+0301 Combining Acute Accent$/;"	e	enum:CharCode
x0302	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Circumflex_Accent = 0x0302,       \/\/ U+0302 Combining Circumflex Accent$/;"	e	enum:CharCode
x0303	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Tilde = 0x0303,          \/\/ U+0303 Combining Tilde$/;"	e	enum:CharCode
x0304	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Macron = 0x0304,         \/\/ U+0304 Combining Macron$/;"	e	enum:CharCode
x0305	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Overline = 0x0305,         \/\/ U+0305 Combining Overline$/;"	e	enum:CharCode
x0306	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Breve = 0x0306,          \/\/ U+0306 Combining Breve$/;"	e	enum:CharCode
x0307	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Dot_Above = 0x0307,         \/\/ U+0307 Combining Dot Above$/;"	e	enum:CharCode
x0308	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Diaeresis = 0x0308,         \/\/ U+0308 Combining Diaeresis$/;"	e	enum:CharCode
x0309	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Hook_Above = 0x0309,        \/\/ U+0309 Combining Hook Above$/;"	e	enum:CharCode
x030A	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Ring_Above = 0x030A,        \/\/ U+030A Combining Ring Above$/;"	e	enum:CharCode
x030B	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Acute_Accent = 0x030B,      \/\/ U+030B Combining Double Acute Accent$/;"	e	enum:CharCode
x030C	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Caron = 0x030C,          \/\/ U+030C Combining Caron$/;"	e	enum:CharCode
x030D	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Vertical_Line_Above = 0x030D,      \/\/ U+030D Combining Vertical Line Above$/;"	e	enum:CharCode
x030E	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Vertical_Line_Above = 0x030E,    \/\/ U+030E Combining Double Vertical Line/;"	e	enum:CharCode
x030F	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Grave_Accent = 0x030F,      \/\/ U+030F Combining Double Grave Accent$/;"	e	enum:CharCode
x0310	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Candrabindu = 0x0310,        \/\/ U+0310 Combining Candrabindu$/;"	e	enum:CharCode
x0311	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Inverted_Breve = 0x0311,       \/\/ U+0311 Combining Inverted Breve$/;"	e	enum:CharCode
x0312	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Turned_Comma_Above = 0x0312,      \/\/ U+0312 Combining Turned Comma Above$/;"	e	enum:CharCode
x0313	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Comma_Above = 0x0313,        \/\/ U+0313 Combining Comma Above$/;"	e	enum:CharCode
x0314	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Reversed_Comma_Above = 0x0314,      \/\/ U+0314 Combining Reversed Comma Above$/;"	e	enum:CharCode
x0315	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Comma_Above_Right = 0x0315,       \/\/ U+0315 Combining Comma Above Right$/;"	e	enum:CharCode
x0316	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Grave_Accent_Below = 0x0316,      \/\/ U+0316 Combining Grave Accent Below$/;"	e	enum:CharCode
x0317	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Acute_Accent_Below = 0x0317,      \/\/ U+0317 Combining Acute Accent Below$/;"	e	enum:CharCode
x0318	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Left_Tack_Below = 0x0318,       \/\/ U+0318 Combining Left Tack Below$/;"	e	enum:CharCode
x0319	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Right_Tack_Below = 0x0319,       \/\/ U+0319 Combining Right Tack Below$/;"	e	enum:CharCode
x031A	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Left_Angle_Above = 0x031A,       \/\/ U+031A Combining Left Angle Above$/;"	e	enum:CharCode
x031B	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Horn = 0x031B,          \/\/ U+031B Combining Horn$/;"	e	enum:CharCode
x031C	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Left_Half_Ring_Below = 0x031C,      \/\/ U+031C Combining Left Half Ring Below$/;"	e	enum:CharCode
x031D	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Up_Tack_Below = 0x031D,        \/\/ U+031D Combining Up Tack Below$/;"	e	enum:CharCode
x031E	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Down_Tack_Below = 0x031E,       \/\/ U+031E Combining Down Tack Below$/;"	e	enum:CharCode
x031F	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Plus_Sign_Below = 0x031F,       \/\/ U+031F Combining Plus Sign Below$/;"	e	enum:CharCode
x0320	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Minus_Sign_Below = 0x0320,       \/\/ U+0320 Combining Minus Sign Below$/;"	e	enum:CharCode
x0321	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Palatalized_Hook_Below = 0x0321,     \/\/ U+0321 Combining Palatalized Hook Below$/;"	e	enum:CharCode
x0322	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Retroflex_Hook_Below = 0x0322,      \/\/ U+0322 Combining Retroflex Hook Below$/;"	e	enum:CharCode
x0323	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Dot_Below = 0x0323,         \/\/ U+0323 Combining Dot Below$/;"	e	enum:CharCode
x0324	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Diaeresis_Below = 0x0324,       \/\/ U+0324 Combining Diaeresis Below$/;"	e	enum:CharCode
x0325	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Ring_Below = 0x0325,        \/\/ U+0325 Combining Ring Below$/;"	e	enum:CharCode
x0326	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Comma_Below = 0x0326,        \/\/ U+0326 Combining Comma Below$/;"	e	enum:CharCode
x0327	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Cedilla = 0x0327,         \/\/ U+0327 Combining Cedilla$/;"	e	enum:CharCode
x0328	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Ogonek = 0x0328,         \/\/ U+0328 Combining Ogonek$/;"	e	enum:CharCode
x0329	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Vertical_Line_Below = 0x0329,      \/\/ U+0329 Combining Vertical Line Below$/;"	e	enum:CharCode
x032A	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Bridge_Below = 0x032A,        \/\/ U+032A Combining Bridge Below$/;"	e	enum:CharCode
x032B	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Inverted_Double_Arch_Below = 0x032B,    \/\/ U+032B Combining Inverted Double Arch/;"	e	enum:CharCode
x032C	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Caron_Below = 0x032C,        \/\/ U+032C Combining Caron Below$/;"	e	enum:CharCode
x032D	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Circumflex_Accent_Below = 0x032D,     \/\/ U+032D Combining Circumflex Accent Belo/;"	e	enum:CharCode
x032E	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Breve_Below = 0x032E,        \/\/ U+032E Combining Breve Below$/;"	e	enum:CharCode
x032F	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Inverted_Breve_Below = 0x032F,      \/\/ U+032F Combining Inverted Breve Below$/;"	e	enum:CharCode
x0330	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Tilde_Below = 0x0330,        \/\/ U+0330 Combining Tilde Below$/;"	e	enum:CharCode
x0331	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Macron_Below = 0x0331,        \/\/ U+0331 Combining Macron Below$/;"	e	enum:CharCode
x0332	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Low_Line = 0x0332,         \/\/ U+0332 Combining Low Line$/;"	e	enum:CharCode
x0333	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Low_Line = 0x0333,       \/\/ U+0333 Combining Double Low Line$/;"	e	enum:CharCode
x0334	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Tilde_Overlay = 0x0334,        \/\/ U+0334 Combining Tilde Overlay$/;"	e	enum:CharCode
x0335	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Short_Stroke_Overlay = 0x0335,      \/\/ U+0335 Combining Short Stroke Overlay$/;"	e	enum:CharCode
x0336	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Long_Stroke_Overlay = 0x0336,      \/\/ U+0336 Combining Long Stroke Overlay$/;"	e	enum:CharCode
x0337	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Short_Solidus_Overlay = 0x0337,      \/\/ U+0337 Combining Short Solidus Overlay$/;"	e	enum:CharCode
x0338	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Long_Solidus_Overlay = 0x0338,      \/\/  U+0338 Combining Long Solidus Overlay$/;"	e	enum:CharCode
x0339	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Right_Half_Ring_Below = 0x0339,      \/\/  U+0339 Combining Right Half Ring Below$/;"	e	enum:CharCode
x033A	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Inverted_Bridge_Below = 0x033A,      \/\/  U+033A Combining Inverted Bridge Below$/;"	e	enum:CharCode
x033B	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Square_Below = 0x033B,        \/\/  U+033B Combining Square Below$/;"	e	enum:CharCode
x033C	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Seagull_Below = 0x033C,        \/\/  U+033C Combining Seagull Below$/;"	e	enum:CharCode
x033D	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_X_Above = 0x033D,         \/\/  U+033D Combining X Above$/;"	e	enum:CharCode
x033E	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Vertical_Tilde = 0x033E,       \/\/  U+033E Combining Vertical Tilde$/;"	e	enum:CharCode
x033F	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Overline = 0x033F,       \/\/  U+033F Combining Double Overline$/;"	e	enum:CharCode
x0340	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Grave_Tone_Mark = 0x0340,       \/\/  U+0340 Combining Grave Tone Mark$/;"	e	enum:CharCode
x0341	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Acute_Tone_Mark = 0x0341,       \/\/  U+0341 Combining Acute Tone Mark$/;"	e	enum:CharCode
x0342	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Greek_Perispomeni = 0x0342,       \/\/  U+0342 Combining Greek Perispomeni$/;"	e	enum:CharCode
x0343	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Greek_Koronis = 0x0343,        \/\/  U+0343 Combining Greek Koronis$/;"	e	enum:CharCode
x0344	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Greek_Dialytika_Tonos = 0x0344,      \/\/  U+0344 Combining Greek Dialytika Tonos$/;"	e	enum:CharCode
x0345	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Greek_Ypogegrammeni = 0x0345,      \/\/  U+0345 Combining Greek Ypogegrammeni$/;"	e	enum:CharCode
x0346	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Bridge_Above = 0x0346,        \/\/  U+0346 Combining Bridge Above$/;"	e	enum:CharCode
x0347	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Equals_Sign_Below = 0x0347,       \/\/  U+0347 Combining Equals Sign Below$/;"	e	enum:CharCode
x0348	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Vertical_Line_Below = 0x0348,    \/\/  U+0348 Combining Double Vertical Lin/;"	e	enum:CharCode
x0349	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Left_Angle_Below = 0x0349,       \/\/  U+0349 Combining Left Angle Below$/;"	e	enum:CharCode
x034A	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Not_Tilde_Above = 0x034A,       \/\/  U+034A Combining Not Tilde Above$/;"	e	enum:CharCode
x034B	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Homothetic_Above = 0x034B,       \/\/  U+034B Combining Homothetic Above$/;"	e	enum:CharCode
x034C	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Almost_Equal_To_Above = 0x034C,      \/\/  U+034C Combining Almost Equal To Above$/;"	e	enum:CharCode
x034D	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Left_Right_Arrow_Below = 0x034D,     \/\/  U+034D Combining Left Right Arrow Below$/;"	e	enum:CharCode
x034E	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Upwards_Arrow_Below = 0x034E,      \/\/  U+034E Combining Upwards Arrow Below$/;"	e	enum:CharCode
x034F	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Grapheme_Joiner = 0x034F,       \/\/  U+034F Combining Grapheme Joiner$/;"	e	enum:CharCode
x0350	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Right_Arrowhead_Above = 0x0350,      \/\/  U+0350 Combining Right Arrowhead Above$/;"	e	enum:CharCode
x0351	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Left_Half_Ring_Above = 0x0351,      \/\/  U+0351 Combining Left Half Ring Above$/;"	e	enum:CharCode
x0352	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Fermata = 0x0352,         \/\/  U+0352 Combining Fermata$/;"	e	enum:CharCode
x0353	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_X_Below = 0x0353,         \/\/  U+0353 Combining X Below$/;"	e	enum:CharCode
x0354	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Left_Arrowhead_Below = 0x0354,      \/\/  U+0354 Combining Left Arrowhead Below$/;"	e	enum:CharCode
x0355	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Right_Arrowhead_Below = 0x0355,      \/\/  U+0355 Combining Right Arrowhead Below$/;"	e	enum:CharCode
x0356	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Right_Arrowhead_And_Up_Arrowhead_Below = 0x0356, \/\/  U+0356 Combining Right Arro/;"	e	enum:CharCode
x0357	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Right_Half_Ring_Above = 0x0357,      \/\/  U+0357 Combining Right Half Ring Above$/;"	e	enum:CharCode
x0358	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Dot_Above_Right = 0x0358,       \/\/  U+0358 Combining Dot Above Right$/;"	e	enum:CharCode
x0359	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Asterisk_Below = 0x0359,       \/\/  U+0359 Combining Asterisk Below$/;"	e	enum:CharCode
x035A	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Ring_Below = 0x035A,       \/\/  U+035A Combining Double Ring Below$/;"	e	enum:CharCode
x035B	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Zigzag_Above = 0x035B,        \/\/  U+035B Combining Zigzag Above$/;"	e	enum:CharCode
x035C	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Breve_Below = 0x035C,      \/\/  U+035C Combining Double Breve Below$/;"	e	enum:CharCode
x035D	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Breve = 0x035D,        \/\/  U+035D Combining Double Breve$/;"	e	enum:CharCode
x035E	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Macron = 0x035E,        \/\/  U+035E Combining Double Macron$/;"	e	enum:CharCode
x035F	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Macron_Below = 0x035F,      \/\/  U+035F Combining Double Macron Below$/;"	e	enum:CharCode
x0360	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Tilde = 0x0360,        \/\/  U+0360 Combining Double Tilde$/;"	e	enum:CharCode
x0361	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Inverted_Breve = 0x0361,      \/\/  U+0361 Combining Double Inverted Breve$/;"	e	enum:CharCode
x0362	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Double_Rightwards_Arrow_Below = 0x0362,    \/\/  U+0362 Combining Double Rightward/;"	e	enum:CharCode
x0363	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_A = 0x0363,       \/\/  U+0363 Combining Latin Small Letter A$/;"	e	enum:CharCode
x0364	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_E = 0x0364,       \/\/  U+0364 Combining Latin Small Letter E$/;"	e	enum:CharCode
x0365	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_I = 0x0365,       \/\/  U+0365 Combining Latin Small Letter I$/;"	e	enum:CharCode
x0366	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_O = 0x0366,       \/\/  U+0366 Combining Latin Small Letter O$/;"	e	enum:CharCode
x0367	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_U = 0x0367,       \/\/  U+0367 Combining Latin Small Letter U$/;"	e	enum:CharCode
x0368	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_C = 0x0368,       \/\/  U+0368 Combining Latin Small Letter C$/;"	e	enum:CharCode
x0369	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_D = 0x0369,       \/\/  U+0369 Combining Latin Small Letter D$/;"	e	enum:CharCode
x036A	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_H = 0x036A,       \/\/  U+036A Combining Latin Small Letter H$/;"	e	enum:CharCode
x036B	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_M = 0x036B,       \/\/  U+036B Combining Latin Small Letter M$/;"	e	enum:CharCode
x036C	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_R = 0x036C,       \/\/  U+036C Combining Latin Small Letter R$/;"	e	enum:CharCode
x036D	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_T = 0x036D,       \/\/  U+036D Combining Latin Small Letter T$/;"	e	enum:CharCode
x036E	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_V = 0x036E,       \/\/  U+036E Combining Latin Small Letter V$/;"	e	enum:CharCode
x036F	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_Combining_Latin_Small_Letter_X = 0x036F,       \/\/  U+036F Combining Latin Small Letter X$/;"	e	enum:CharCode
x0375	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_LOWER_NUMERAL_SIGN = 0x0375,     \/\/ U+0375 GREEK LOWER NUMERAL SIGN$/;"	e	enum:CharCode
x0384	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_TONOS = 0x0384,         \/\/ U+0384 GREEK TONOS$/;"	e	enum:CharCode
x0385	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DIALYTIKA_TONOS = 0x0385,      \/\/ U+0385 GREEK DIALYTIKA TONOS$/;"	e	enum:CharCode
x1FBD	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_KORONIS = 0x1FBD,        \/\/ U+1FBD GREEK KORONIS$/;"	e	enum:CharCode
x1FBF	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_PSILI = 0x1FBF,         \/\/ U+1FBF GREEK PSILI$/;"	e	enum:CharCode
x1FC0	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_PERISPOMENI = 0x1FC0,       \/\/ U+1FC0 GREEK PERISPOMENI$/;"	e	enum:CharCode
x1FC1	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DIALYTIKA_AND_PERISPOMENI = 0x1FC1,    \/\/ U+1FC1 GREEK DIALYTIKA AND PERISPOMENI$/;"	e	enum:CharCode
x1FCD	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_PSILI_AND_VARIA = 0x1FCD,      \/\/ U+1FCD GREEK PSILI AND VARIA$/;"	e	enum:CharCode
x1FCE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_PSILI_AND_OXIA = 0x1FCE,      \/\/ U+1FCE GREEK PSILI AND OXIA$/;"	e	enum:CharCode
x1FCF	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_PSILI_AND_PERISPOMENI = 0x1FCF,     \/\/ U+1FCF GREEK PSILI AND PERISPOMENI$/;"	e	enum:CharCode
x1FDD	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DASIA_AND_VARIA = 0x1FDD,      \/\/ U+1FDD GREEK DASIA AND VARIA$/;"	e	enum:CharCode
x1FDE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DASIA_AND_OXIA = 0x1FDE,      \/\/ U+1FDE GREEK DASIA AND OXIA$/;"	e	enum:CharCode
x1FDF	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DASIA_AND_PERISPOMENI = 0x1FDF,     \/\/ U+1FDF GREEK DASIA AND PERISPOMENI$/;"	e	enum:CharCode
x1FED	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DIALYTIKA_AND_VARIA = 0x1FED,     \/\/ U+1FED GREEK DIALYTIKA AND VARIA$/;"	e	enum:CharCode
x1FEE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DIALYTIKA_AND_OXIA = 0x1FEE,     \/\/ U+1FEE GREEK DIALYTIKA AND OXIA$/;"	e	enum:CharCode
x1FEF	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_VARIA = 0x1FEF,         \/\/ U+1FEF GREEK VARIA$/;"	e	enum:CharCode
x1FFD	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_OXIA = 0x1FFD,         \/\/ U+1FFD GREEK OXIA$/;"	e	enum:CharCode
x1FFE	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_GREEK_DASIA = 0x1FFE,         \/\/ U+1FFE GREEK DASIA$/;"	e	enum:CharCode
x203E	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  U_OVERLINE = 0x203E, \/\/ Unicode Character 'OVERLINE'$/;"	e	enum:CharCode
xml_attributes	.config/nvim/plugged/html5.vim/autoload/xml/html5.vim	/^let xml_attributes = {'xml:lang': lang_tag, 'xml:space': ['preserve'], 'xml:base': [], 'xmlns': /;"	v
xoffset	.vim/plugged/fzf/src/terminal.go	/^	xoffset    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
y	.config/nvim/configs/keymap.vim	/^vnoremap y ygv<Esc>$/;"	m
y	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  y = 121,$/;"	e	enum:CharCode
y	.vim/plugged/fzf/src/tui/light.go	/^	y             int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
yS	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^  nmap yS  <Plug>YSurround$/;"	m
yS	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap yS  <Plug>YSurround$/;"	m
yS	.vim/sessions/foo.vim	/^nmap yS <Plug>YSurround$/;"	m
ySS	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^  nmap ySS <Plug>YSsurround$/;"	m
ySS	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap ySS <Plug>YSsurround$/;"	m
ySS	.vim/sessions/foo.vim	/^nmap ySS <Plug>YSsurround$/;"	m
ySs	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^  nmap ySs <Plug>YSsurround$/;"	m
ySs	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap ySs <Plug>YSsurround$/;"	m
ySs	.vim/sessions/foo.vim	/^nmap ySs <Plug>YSsurround$/;"	m
yank	.vim/plugged/coc.nvim/src/snippets/variableResolve.ts	/^    let yank = await this.nvim.call('getreg', '"')$/;"	v
yanked	.vim/plugged/fzf/src/terminal.go	/^	yanked     []rune$/;"	m	struct:fzf.Terminal	typeref:typename:[]rune
yarnFolder	.vim/plugged/coc.nvim/src/model/resolver.ts	/^  private get yarnFolder(): Promise<string> {$/;"	m	class:Resolver
yarncmd	.vim/plugged/coc.nvim/src/extensions.ts	/^    let yarncmd = await workspace.nvim.call('coc#util#yarn_cmd')$/;"	v
yarp	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^augroup yarp$/;"	a
yarp#core#_nop	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#_nop(...) dict$/;"	f
yarp#core#channel_started	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#channel_started(id, channel)$/;"	f
yarp#core#error	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#error(mod, msg)$/;"	f
yarp#core#jobstart	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#jobstart() dict$/;"	f
yarp#core#new	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#new(rp)$/;"	f
yarp#core#notify	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#notify(method, ...) dict$/;"	f
yarp#core#on_exit	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#on_exit(chan_id, data, event) dict$/;"	f
yarp#core#on_stderr	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#on_stderr(chan_id, data, event) dict$/;"	f
yarp#core#request	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#request(method, ...) dict$/;"	f
yarp#core#serveraddr	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#serveraddr()$/;"	f
yarp#core#try_notify	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#try_notify(method, ...) dict$/;"	f
yarp#core#wait_channel	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#wait_channel() dict$/;"	f
yarp#core#warn	.vim/plugged/nvim-yarp/autoload/yarp/core.vim	/^func! yarp#core#warn(mod, msg)$/;"	f
yarp#py	.vim/plugged/nvim-yarp/autoload/yarp.vim	/^func! yarp#py(module)$/;"	f
yarp#py3	.vim/plugged/nvim-yarp/autoload/yarp.vim	/^func! yarp#py3(module)$/;"	f
yarp#pyx#init	.vim/plugged/nvim-yarp/autoload/yarp/pyx.vim	/^func! yarp#pyx#init() dict$/;"	f
yarpid	.vim/plugged/nvim-yarp/pythonx/yarp.py	/^yarpid = int(sys.argv[2])$/;"	v
yoffset	.vim/plugged/fzf/src/tui/light.go	/^	yoffset       int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
youtube_video	.config/nvim/plugged/vim-ruby/spec/syntax/strings/heredoc_spec.rb	/^        def youtube_video(token, width = 360, height = 215)$/;"	f
ys	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^  nmap ys  <Plug>Ysurround$/;"	m
ys	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap ys  <Plug>Ysurround$/;"	m
ys	.vim/sessions/foo.vim	/^nmap ys <Plug>Ysurround$/;"	m
yss	.config/nvim/plugged/vim-surround/plugin/surround.vim	/^  nmap yss <Plug>Yssurround$/;"	m
yss	.vim/plugged/vim-surround/plugin/surround.vim	/^  nmap yss <Plug>Yssurround$/;"	m
yss	.vim/sessions/foo.vim	/^nmap yss <Plug>Yssurround$/;"	m
yy	.config/nvim/configs/plugins.vim	/^	nnoremap <silent><buffer><expr> yy   denite#do_map('do_action', 'yank')$/;"	m
yy	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> yy$/;"	m
z	.vim/plugged/coc.nvim/src/util/charCode.ts	/^  z = 122,$/;"	e	enum:CharCode
zf	.config/nvim/configs/plugins.vim	/^omap zf <Plug>(easymotion-bd-f)$/;"	m
zg	.config/nvim/configs/plugins.vim	/^omap zg <Plug>(easymotion-bd-jk)$/;"	m
zindex	.vim/plugged/coc.nvim/src/types.ts	/^  zindex?: number$/;"	p	interface:PopupOptions
zj	.config/nvim/configs/plugins.vim	/^omap zj <Plug>(easymotion-j)$/;"	m
zk	.config/nvim/configs/plugins.vim	/^omap zk <Plug>(easymotion-k)$/;"	m
zsh	.vim/plugged/fzf/test/test_go.rb	/^    def zsh$/;"	S	class:Shell
zw	.config/nvim/configs/plugins.vim	/^omap zw <Plug>(easymotion-bd-w)$/;"	m
{	.config/nvim/configs/keymap.vim	/^inoremap { {}<left>$/;"	m
~	.config/nvim/configs/plugins.vim	/^    nnoremap <silent><buffer><expr> ~$/;"	m
